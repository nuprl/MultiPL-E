language: scala
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val nestedBracketsCount = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  nestedBracketsCount > bracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwm_djpyn.scala:23:43 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        nestedBracketsCount > bracketsCount\n\e[31m\e\
    [31m   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwm_djpyn.scala:22:66\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mnestedBracketsCount\e[0m = brackets.filter(_.contains(\e[31m\"[\"\e[0m).toList.length\
    \ + brackets.filter(_.contains(\e[31m\"]\"\e[0m)).toList.length\n\e[31m\e[31m\
    \   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toList is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwm_djpyn.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.HashSet[String]()\n        val closeBrackets\
    \ = mutable.HashSet[String]()\n        val openBracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[String, Int]()\n  \
    \      val openBracketsCount2 = mutable.HashMap[String, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount3 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount4 = mutable.HashMap[String, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount5 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount6 = mutable.HashMap[String, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount7 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount8 = mutable.HashMap[String, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount9 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount10 = mutable.HashMap[String, Int]()\n        val\
    \ closeBracketsCount10 = mutable.HashMap[String, Int]()\n        val openBracketsCount11\
    \ = mutable.HashMap[String, Int]()\n        val closeBracketsCount11 = mutable.HashMap[String,\
    \ Int]()\n        val openBracketsCount12 = mutable.HashMap[String, Int]()\n \
    \       val closeBracketsCount12 = mutable.HashMap[String, Int]()\n        val\
    \ openBracketsCount13 = mutable.HashMap[String, Int]()\n        val closeBracketsCount13\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount14 = mutable.HashMap[String,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpesczhztj.scala:25:33 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Fou"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.HashSet[Int]()\n        val closeBrackets\
    \ = mutable.HashSet[Int]()\n        val openBracketsCount = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[Int, Int]()\n     \
    \   val openBracketsCount2 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount4 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount6 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount8 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount10 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount10\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount11 = mutable.HashMap[Int, Int]()\n   \
    \     val openBracketsCount12 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount12\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBra\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr5znz65b.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openings = mutable.ListBuffer[String]()\n\
    \        val closings = mutable.ListBuffer[String]()\n        val openingBrackets\
    \ = mutable.ListBuffer[String]()\n        val closingBrackets = mutable.ListBuffer[String]()\n\
    \        val openingBracketsCount = mutable.ListBuffer[Int]()\n        val closingBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount2 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount2 = mutable.ListBuffer[Int]()\n        val openingBracketsCount3\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount4 = mutable.ListBuffer[Int]()\n        val closingBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount5 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount5 = mutable.ListBuffer[Int]()\n        val openingBracketsCount6\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount7 = mutable.ListBuffer[Int]()\n        val closingBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount8 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount8 = mutable.ListBuffer[Int]()\n        val openingBracketsCount9\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount10 = mutable.ListBuffer[Int]()\n        val closingBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount11 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount11 = mutable.ListBuffer[Int]()\n        val openingBracketsCount12\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount13 = mutable.ListBuffer[Int]()\n        val closingBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgg73r1rj.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mopenings\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclosings\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgg73r1rj.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsLength = brackets.length\n\
    \        val bracketsNestings = brackets.map(_.length)\n        val isNested =\
    \ bracketsNestings.sum > 0\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeyaom07e.scala:27)\n\tat Problem.main(tmpeyaom07e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a stack to hold the brackets\n        var stack = mutable.Stack[String]()\n\
    \        // Iterate through the string\n        for (i <- 0 until string.length)\
    \ {\n            // If the character is a bracket, push it onto the stack\n  \
    \          if (string(i) == '[') {\n                stack.push(string(i))\n  \
    \          } else if (string(i) == ']') {\n                // If the stack is\
    \ empty, then the string is not nested\n                if (stack.size == 0) {\n\
    \                    return false\n                }\n                // Pop the\
    \ top bracket off the stack\n                val top = stack.pop()\n         \
    \       // If the top bracket is another bracket, then the string is not nested\n\
    \                if (string(i) == '[') {\n                    stack.push(string(i))\n\
    \                } else {\n                    // If the top bracket is not another\
    \ bracket, then the string is not nested\n                    return false\n \
    \               }\n            } else {\n                // If the character is\
    \ not a bracket, then the string is not nested\n                return false\n\
    \            }\n        }\n        // If the stack is empty, then the string is\
    \ not nested\n        if (stack.size == 0) {\n            return false\n     \
    \   }\n        // If the stack is not empty, then the string is nested\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z515kx3.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.length\n\
    \        val isNested = bracketsCount > stackCount\n        val isNesting = brackets.exists(x\
    \ => stackCount > 0 && !stack.contains(x))\n        val isNestingOrNeeded = isNesting\
    \ || bracketsCount > stackCount\n        val isNestingOrNeededOrEmpty = isNestingOrNeeded\
    \ || stackCount == 0\n        isNestingOrNeededOrEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85wiq05t.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackSize = bracketsCount\
    \ + 1\n        val stackIsEmpty = stack.isEmpty\n        val stackIsFull = stackSize\
    \ == stack.size\n        val stackIsEmptyOrFull = stackIsEmpty || stackIsFull\n\
    \        val stackIsEmptyOrFullOrNesting = stackIsEmptyOrFull || bracketsCount\
    \ == 0\n        val stackIsEmptyOrFullOrNestingOrNesting = stackIsEmptyOrFullOrNesting\
    \ || bracketsCount > 0\n        val stackIsEmptyOrFullOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNesting || bracketsCount > 1\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNesting || bracketsCount > 2\n     \
    \   val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNesting = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNesting\
    \ || bracketsCount > 3\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNesting || bracketsCount\
    \ > 4\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting ||\
    \ bracketsCount > 5\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ || bracketsCount > 6\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5u5xvw_m.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u5xvw_m.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u5xvw_m.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val nestedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val\
    \ nestedBracketsCount = nestedBrackets.length\n        val nestedBracketsCount\
    \ = nestedBracketsCount.toInt\n        val bracketsCount = bracketsCount.toInt\n\
    \        val isNested = bracketsCount > nestedBracketsCount\n        isNested\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqddxyz5y.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsCount\e[0m\
    \ = nestedBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnestedBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqddxyz5y.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = bracketsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestingCount = brackets.filter(_.contains(\"[\").toList.length\
    \ + brackets.filter(_.contains(\"]\")).toList.length\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCountMinusOne = bracketsNestingCount\
    \ - 1\n        val bracketsNestingCountMinusOne = bracketsNestingCountMinusOne.toInt\n\
    \        val bracketsNestingCountMinusTwo = bracketsNestingCount - 2\n       \
    \ val bracketsNestingCountMinusTwo = bracketsNestingCountMinusTwo.toInt\n    \
    \    val bracketsNestingCountMinusThree = bracketsNestingCount - 3\n        val\
    \ bracketsNestingCountMinusThree = bracketsNestingCountMinusThree.toInt\n    \
    \    val bracketsNestingCountMinusFour = bracketsNestingCount - 4\n        val\
    \ bracketsNestingCountMinusFour = bracketsNestingCountMinusFour.toInt\n      \
    \  val bracketsNestingCountMinusFive = bracketsNestingCount - 5\n        val bracketsNestingCountMinusFive\
    \ = bracketsNestingCountMinusFive.toInt\n        val bracketsNestingCountMinusSix\
    \ = bracketsNestingCount - 6\n        val bracketsNestingCountMinusSix = bracketsNestingCountMinusSix.toInt\n\
    \        val bracketsNestingCountMinusSeven = bracketsNestingCount - 7\n     \
    \   val bracketsNestingCountMinusSeven = bracketsNestingCountMinusSeven.toInt\n\
    \        val bracketsNestingCountMinusEight = bracketsNestingCount - 8\n     \
    \   val bracketsNestingCountMinusEight = bracketsNestingCountMinusEight.toInt\n\
    \        val bracketsNestingCountMinusNine = bracketsNestingCount - 9\n      \
    \  val bracketsNestingCountMinusNine = bracketsNestingCountMinusNine.toInt\n \
    \       val bracketsNestingCountMinusTen = bracketsNestingCount - 10\n       \
    \ val brackets\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_vkki26.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = bracketsNestingCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpy_vkki26.scala:22:67 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m = brackets.filter(_.contains(\e\
    [31m\"[\"\e[0m).toList.length + brackets.filter(_.contains(\e[31m\"]\"\e[0m)).toList.length\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toList is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_vkki26.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.HashSet[String]()\n\
    \        val bracketsCount = mutable.HashMap[String, Int]()\n        val openBrackets\
    \ = mutable.HashSet[String]()\n        val openBracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val closeBrackets = mutable.HashSet[String]()\n        val closeBracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount2 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount2 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount3 = mutable.HashMap[String, Int]()\n        val closeBracketsCount3\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount4 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount4 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount5 = mutable.HashMap[String, Int]()\n        val closeBracketsCount5\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount6 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount6 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount7 = mutable.HashMap[String, Int]()\n        val closeBracketsCount7\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount8 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount8 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount9 = mutable.HashMap[String, Int]()\n        val closeBracketsCount9\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount10 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount10 = mutable.HashMap[String, Int]()\n\
    \        val openBracketsCount11 = mutable.HashMap[String, Int]()\n        val\
    \ closeBracketsCount11 = mutable.HashMap[String, Int]()\n        val openBracketsCount12\
    \ = mutable.HashMap[String, Int]()\n        val closeBracketsCount12 = mutable.HashMap[String,\
    \ Int]()\n        val openBracketsCount13 = mutable.HashMap[String, Int]()\n \
    \       val closeBracketsCount13 = mutable.HashMap[String, Int]()\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0qymuvu1.scala:24:32 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m = mutable.HashMap[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.sca"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.size\n\
    \        val bracketsCount = brackets.size\n        nestedBracketsCount != bracketsCount\
    \ && nestedBracketsCount > 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3ihxss8.scala:28)\n\tat Problem.main(tmpc3ihxss8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsLength = brackets.length\n  \
    \      val openBrackets = brackets.filter(_.contains(\"[\"))\n        val closeBrackets\
    \ = brackets.filter(_.contains(\"]\"))\n        val openBracketsLength = openBrackets.length\n\
    \        val closeBracketsLength = closeBrackets.length\n        val openBracketsNestings\
    \ = openBrackets.filter(_.contains(\"]\")).map(_.length - 1)\n        val closeBracketsNestings\
    \ = closeBrackets.filter(_.contains(\"[\")).map(_.length - 1)\n        val openBracketsNestingCount\
    \ = openBracketsNestings.toInt\n        val closeBracketsNestingCount = closeBracketsNestings.toInt\n\
    \        val openBracketsNestingCountMinusOne = openBracketsNestingCount - 1\n\
    \        val closeBracketsNestingCountMinusOne = closeBracketsNestingCount - 1\n\
    \        val openBracketsNestingCountMinusTwo = openBracketsNestingCount - 2\n\
    \        val closeBracketsNestingCountMinusTwo = closeBracketsNestingCount - 2\n\
    \        val openBracketsNestingCountMinusThree = openBracketsNestingCount - 3\n\
    \        val closeBracketsNestingCountMinusThree = closeBracketsNestingCount -\
    \ 3\n        val openBracketsNestingCountMinusFour = openBracketsNestingCount\
    \ - 4\n        val closeBracketsNestingCountMinusFour = closeBracketsNestingCount\
    \ - 4\n        val openBracketsNestingCountMinusFive = openBracketsNestingCount\
    \ - 5\n        val closeBracketsNestingCountMinusFive = closeBracketsNestingCount\
    \ - 5\n        val openBracketsNestingCountMinusSix = openBracketsNestingCount\
    \ - 6\n        val closeBracketsNestingCountMinusSix = closeBracketsNestingCount\
    \ - 6\n        val openBracketsNestingCountMinusSeven = openBracketsNestingCount\
    \ - 7\n        val closeBracketsNestingCountMinusSeven = closeBracketsNest\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bkcdxh0.scala:28:60 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingCount\e\
    [0m = openBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of Array[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1bkcdxh0.scala:29:62 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = closeBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m                     \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of Array[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1bkcdxh0.scala:43:50 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCountMinusSeven\e\
    [0m = closeBracketsNest\n\e[31m\e[31m   |\e[0m                               \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                          Not found: closeBracketsNest\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1bkcdxh0.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.HashSet[Int]()\n        val closeBrackets\
    \ = mutable.HashSet[Int]()\n        val openBracketsCount = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[Int, Int]()\n     \
    \   val openBracketsCount2 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount4 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount6 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount8 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount10 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount10\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount11 = mutable.HashMap[Int, Int]()\n   \
    \     val openBracketsCount12 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount12\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBra\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr5znz65b.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfw9wz79s.scala:30)\n\tat Problem.main(tmpfw9wz79s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(_.split(\"\\\\\
    ]\")).map(_.length).filter(x => x > 0)\n        nestings.forall(x => brackets.map(_.length).filter(y\
    \ => y > x).length == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4a71kj6g.scala:25)\n\tat Problem.main(tmp4a71kj6g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n   \
    \     val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n     \
    \   val isNested = openBrackets == closeBrackets\n        return isNested\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyhxji99.scala:29)\n\tat Problem.main(tmpoyhxji99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.count\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ > bracketsCount - nestedBracketsCount\n        isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzf447dn.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = nestedBracketsCount\
    \ > bracketsCount - nestedBracketsCount\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of\
    \ (String => Boolean) => Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmptzf447dn.scala:24:59 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = nestedBracketsCount\
    \ > bracketsCount - nestedBracketsCount\n\e[31m\e[31m   |\e[0m               \
    \                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e\
    [0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x:\
    \ Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\
    \e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((nestedBracketsCount\
    \ : (String => Boolean) => Int))\n2 errors found\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val nestedBracketsCount = nestedBrackets.count(_.contains(\"[\"\
    ))\n        nestedBracketsCount > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl23qenk4.scala:26)\n\tat Problem.main(tmpl23qenk4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.Set[String]()\n  \
    \      val bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount\
    \ = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbd2dl5dy.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbd2dl5dy.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbd2dl5dy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbd2dl5dy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbd2dl5dy.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799381
