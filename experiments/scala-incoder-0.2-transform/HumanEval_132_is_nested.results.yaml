language: scala
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val nestedBracketsCount = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  nestedBracketsCount > bracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwm_djpyn.scala:23:43 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        nestedBracketsCount > bracketsCount\n\e[31m\e\
    [31m   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwm_djpyn.scala:22:66\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mnestedBracketsCount\e[0m = brackets.filter(_.contains(\e[31m\"[\"\e[0m).toList.length\
    \ + brackets.filter(_.contains(\e[31m\"]\"\e[0m)).toList.length\n\e[31m\e[31m\
    \   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toList is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwm_djpyn.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.HashSet[String]()\n        val closeBrackets\
    \ = mutable.HashSet[String]()\n        val openBracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[String, Int]()\n  \
    \      val openBracketsCount2 = mutable.HashMap[String, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount3 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount4 = mutable.HashMap[String, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount5 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount6 = mutable.HashMap[String, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount7 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount8 = mutable.HashMap[String, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount9 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount10 = mutable.HashMap[String, Int]()\n        val\
    \ closeBracketsCount10 = mutable.HashMap[String, Int]()\n        val openBracketsCount11\
    \ = mutable.HashMap[String, Int]()\n        val closeBracketsCount11 = mutable.HashMap[String,\
    \ Int]()\n        val openBracketsCount12 = mutable.HashMap[String, Int]()\n \
    \       val closeBracketsCount12 = mutable.HashMap[String, Int]()\n        val\
    \ openBracketsCount13 = mutable.HashMap[String, Int]()\n        val closeBracketsCount13\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount14 = mutable.HashMap[String,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpesczhztj.scala:25:33 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Fou"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.HashSet[Int]()\n        val closeBrackets\
    \ = mutable.HashSet[Int]()\n        val openBracketsCount = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[Int, Int]()\n     \
    \   val openBracketsCount2 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount4 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount6 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount8 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount10 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount10\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount11 = mutable.HashMap[Int, Int]()\n   \
    \     val openBracketsCount12 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount12\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBra\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr5znz65b.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openings = mutable.ListBuffer[String]()\n\
    \        val closings = mutable.ListBuffer[String]()\n        val openingBrackets\
    \ = mutable.ListBuffer[String]()\n        val closingBrackets = mutable.ListBuffer[String]()\n\
    \        val openingBracketsCount = mutable.ListBuffer[Int]()\n        val closingBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount2 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount2 = mutable.ListBuffer[Int]()\n        val openingBracketsCount3\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount4 = mutable.ListBuffer[Int]()\n        val closingBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount5 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount5 = mutable.ListBuffer[Int]()\n        val openingBracketsCount6\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount7 = mutable.ListBuffer[Int]()\n        val closingBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount8 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount8 = mutable.ListBuffer[Int]()\n        val openingBracketsCount9\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount10 = mutable.ListBuffer[Int]()\n        val closingBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount11 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount11 = mutable.ListBuffer[Int]()\n        val openingBracketsCount12\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount13 = mutable.ListBuffer[Int]()\n        val closingBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgg73r1rj.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mopenings\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclosings\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgg73r1rj.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgg73r1rj.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsLength = brackets.length\n\
    \        val bracketsNestings = brackets.map(_.length)\n        val isNested =\
    \ bracketsNestings.sum > 0\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeyaom07e.scala:27)\n\tat Problem.main(tmpeyaom07e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a stack to hold the brackets\n        var stack = mutable.Stack[String]()\n\
    \        // Iterate through the string\n        for (i <- 0 until string.length)\
    \ {\n            // If the character is a bracket, push it onto the stack\n  \
    \          if (string(i) == '[') {\n                stack.push(string(i))\n  \
    \          } else if (string(i) == ']') {\n                // If the stack is\
    \ empty, then the string is not nested\n                if (stack.size == 0) {\n\
    \                    return false\n                }\n                // Pop the\
    \ top bracket off the stack\n                val top = stack.pop()\n         \
    \       // If the top bracket is another bracket, then the string is not nested\n\
    \                if (string(i) == '[') {\n                    stack.push(string(i))\n\
    \                } else {\n                    // If the top bracket is not another\
    \ bracket, then the string is not nested\n                    return false\n \
    \               }\n            } else {\n                // If the character is\
    \ not a bracket, then the string is not nested\n                return false\n\
    \            }\n        }\n        // If the stack is empty, then the string is\
    \ not nested\n        if (stack.size == 0) {\n            return false\n     \
    \   }\n        // If the stack is not empty, then the string is nested\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z515kx3.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.length\n\
    \        val isNested = bracketsCount > stackCount\n        val isNesting = brackets.exists(x\
    \ => stackCount > 0 && !stack.contains(x))\n        val isNestingOrNeeded = isNesting\
    \ || bracketsCount > stackCount\n        val isNestingOrNeededOrEmpty = isNestingOrNeeded\
    \ || stackCount == 0\n        isNestingOrNeededOrEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85wiq05t.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackSize = bracketsCount\
    \ + 1\n        val stackIsEmpty = stack.isEmpty\n        val stackIsFull = stackSize\
    \ == stack.size\n        val stackIsEmptyOrFull = stackIsEmpty || stackIsFull\n\
    \        val stackIsEmptyOrFullOrNesting = stackIsEmptyOrFull || bracketsCount\
    \ == 0\n        val stackIsEmptyOrFullOrNestingOrNesting = stackIsEmptyOrFullOrNesting\
    \ || bracketsCount > 0\n        val stackIsEmptyOrFullOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNesting || bracketsCount > 1\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNesting || bracketsCount > 2\n     \
    \   val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNesting = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNesting\
    \ || bracketsCount > 3\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNesting || bracketsCount\
    \ > 4\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting ||\
    \ bracketsCount > 5\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ = stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNestingOrNestingOrNesting\
    \ || bracketsCount > 6\n        val stackIsEmptyOrFullOrNestingOrNestingOrNestingOrNestingOrNest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5u5xvw_m.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u5xvw_m.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u5xvw_m.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val nestedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val\
    \ nestedBracketsCount = nestedBrackets.length\n        val nestedBracketsCount\
    \ = nestedBracketsCount.toInt\n        val bracketsCount = bracketsCount.toInt\n\
    \        val isNested = bracketsCount > nestedBracketsCount\n        isNested\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqddxyz5y.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsCount\e[0m\
    \ = nestedBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnestedBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqddxyz5y.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = bracketsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestingCount = brackets.filter(_.contains(\"[\").toList.length\
    \ + brackets.filter(_.contains(\"]\")).toList.length\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCountMinusOne = bracketsNestingCount\
    \ - 1\n        val bracketsNestingCountMinusOne = bracketsNestingCountMinusOne.toInt\n\
    \        val bracketsNestingCountMinusTwo = bracketsNestingCount - 2\n       \
    \ val bracketsNestingCountMinusTwo = bracketsNestingCountMinusTwo.toInt\n    \
    \    val bracketsNestingCountMinusThree = bracketsNestingCount - 3\n        val\
    \ bracketsNestingCountMinusThree = bracketsNestingCountMinusThree.toInt\n    \
    \    val bracketsNestingCountMinusFour = bracketsNestingCount - 4\n        val\
    \ bracketsNestingCountMinusFour = bracketsNestingCountMinusFour.toInt\n      \
    \  val bracketsNestingCountMinusFive = bracketsNestingCount - 5\n        val bracketsNestingCountMinusFive\
    \ = bracketsNestingCountMinusFive.toInt\n        val bracketsNestingCountMinusSix\
    \ = bracketsNestingCount - 6\n        val bracketsNestingCountMinusSix = bracketsNestingCountMinusSix.toInt\n\
    \        val bracketsNestingCountMinusSeven = bracketsNestingCount - 7\n     \
    \   val bracketsNestingCountMinusSeven = bracketsNestingCountMinusSeven.toInt\n\
    \        val bracketsNestingCountMinusEight = bracketsNestingCount - 8\n     \
    \   val bracketsNestingCountMinusEight = bracketsNestingCountMinusEight.toInt\n\
    \        val bracketsNestingCountMinusNine = bracketsNestingCount - 9\n      \
    \  val bracketsNestingCountMinusNine = bracketsNestingCountMinusNine.toInt\n \
    \       val bracketsNestingCountMinusTen = bracketsNestingCount - 10\n       \
    \ val brackets\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_vkki26.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = bracketsNestingCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpy_vkki26.scala:22:67 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m = brackets.filter(_.contains(\e\
    [31m\"[\"\e[0m).toList.length + brackets.filter(_.contains(\e[31m\"]\"\e[0m)).toList.length\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toList is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_vkki26.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.HashSet[String]()\n\
    \        val bracketsCount = mutable.HashMap[String, Int]()\n        val openBrackets\
    \ = mutable.HashSet[String]()\n        val openBracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val closeBrackets = mutable.HashSet[String]()\n        val closeBracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount2 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount2 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount3 = mutable.HashMap[String, Int]()\n        val closeBracketsCount3\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount4 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount4 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount5 = mutable.HashMap[String, Int]()\n        val closeBracketsCount5\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount6 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount6 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount7 = mutable.HashMap[String, Int]()\n        val closeBracketsCount7\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount8 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount8 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount9 = mutable.HashMap[String, Int]()\n        val closeBracketsCount9\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount10 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount10 = mutable.HashMap[String, Int]()\n\
    \        val openBracketsCount11 = mutable.HashMap[String, Int]()\n        val\
    \ closeBracketsCount11 = mutable.HashMap[String, Int]()\n        val openBracketsCount12\
    \ = mutable.HashMap[String, Int]()\n        val closeBracketsCount12 = mutable.HashMap[String,\
    \ Int]()\n        val openBracketsCount13 = mutable.HashMap[String, Int]()\n \
    \       val closeBracketsCount13 = mutable.HashMap[String, Int]()\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0qymuvu1.scala:24:32 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m = mutable.HashMap[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qymuvu1.sca"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.size\n\
    \        val bracketsCount = brackets.size\n        nestedBracketsCount != bracketsCount\
    \ && nestedBracketsCount > 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3ihxss8.scala:28)\n\tat Problem.main(tmpc3ihxss8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsLength = brackets.length\n  \
    \      val openBrackets = brackets.filter(_.contains(\"[\"))\n        val closeBrackets\
    \ = brackets.filter(_.contains(\"]\"))\n        val openBracketsLength = openBrackets.length\n\
    \        val closeBracketsLength = closeBrackets.length\n        val openBracketsNestings\
    \ = openBrackets.filter(_.contains(\"]\")).map(_.length - 1)\n        val closeBracketsNestings\
    \ = closeBrackets.filter(_.contains(\"[\")).map(_.length - 1)\n        val openBracketsNestingCount\
    \ = openBracketsNestings.toInt\n        val closeBracketsNestingCount = closeBracketsNestings.toInt\n\
    \        val openBracketsNestingCountMinusOne = openBracketsNestingCount - 1\n\
    \        val closeBracketsNestingCountMinusOne = closeBracketsNestingCount - 1\n\
    \        val openBracketsNestingCountMinusTwo = openBracketsNestingCount - 2\n\
    \        val closeBracketsNestingCountMinusTwo = closeBracketsNestingCount - 2\n\
    \        val openBracketsNestingCountMinusThree = openBracketsNestingCount - 3\n\
    \        val closeBracketsNestingCountMinusThree = closeBracketsNestingCount -\
    \ 3\n        val openBracketsNestingCountMinusFour = openBracketsNestingCount\
    \ - 4\n        val closeBracketsNestingCountMinusFour = closeBracketsNestingCount\
    \ - 4\n        val openBracketsNestingCountMinusFive = openBracketsNestingCount\
    \ - 5\n        val closeBracketsNestingCountMinusFive = closeBracketsNestingCount\
    \ - 5\n        val openBracketsNestingCountMinusSix = openBracketsNestingCount\
    \ - 6\n        val closeBracketsNestingCountMinusSix = closeBracketsNestingCount\
    \ - 6\n        val openBracketsNestingCountMinusSeven = openBracketsNestingCount\
    \ - 7\n        val closeBracketsNestingCountMinusSeven = closeBracketsNest\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bkcdxh0.scala:28:60 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingCount\e\
    [0m = openBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of Array[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1bkcdxh0.scala:29:62 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = closeBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m                     \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of Array[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1bkcdxh0.scala:43:50 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCountMinusSeven\e\
    [0m = closeBracketsNest\n\e[31m\e[31m   |\e[0m                               \
    \                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                          Not found: closeBracketsNest\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1bkcdxh0.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.HashSet[Int]()\n        val closeBrackets\
    \ = mutable.HashSet[Int]()\n        val openBracketsCount = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[Int, Int]()\n     \
    \   val openBracketsCount2 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount4 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount6 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount8 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount10 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount10\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount11 = mutable.HashMap[Int, Int]()\n   \
    \     val openBracketsCount12 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount12\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBra\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr5znz65b.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfw9wz79s.scala:30)\n\tat Problem.main(tmpfw9wz79s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(_.split(\"\\\\\
    ]\")).map(_.length).filter(x => x > 0)\n        nestings.forall(x => brackets.map(_.length).filter(y\
    \ => y > x).length == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4a71kj6g.scala:25)\n\tat Problem.main(tmp4a71kj6g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n   \
    \     val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n     \
    \   val isNested = openBrackets == closeBrackets\n        return isNested\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyhxji99.scala:29)\n\tat Problem.main(tmpoyhxji99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.count\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ > bracketsCount - nestedBracketsCount\n        isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzf447dn.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = nestedBracketsCount\
    \ > bracketsCount - nestedBracketsCount\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of\
    \ (String => Boolean) => Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmptzf447dn.scala:24:59 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = nestedBracketsCount\
    \ > bracketsCount - nestedBracketsCount\n\e[31m\e[31m   |\e[0m               \
    \                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e\
    [0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x:\
    \ Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\
    \e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((nestedBracketsCount\
    \ : (String => Boolean) => Int))\n2 errors found\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val nestedBracketsCount = nestedBrackets.count(_.contains(\"[\"\
    ))\n        nestedBracketsCount > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl23qenk4.scala:26)\n\tat Problem.main(tmpl23qenk4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.Set[String]()\n  \
    \      val bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount\
    \ = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.Map[String, Int]()\n        val bracketsCount = mutable.Map[String,\
    \ Int]()\n        val bracketsCount = mutable.Map[String, Int]()\n        val\
    \ bracketsCount = mutable.\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbd2dl5dy.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbd2dl5dy.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbd2dl5dy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbd2dl5dy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbd2dl5dy.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\"))\n        nestings.size > 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf14ou0cl.scala:26)\n\tat Problem.main(tmpf14ou0cl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.HashSet[String]()\n\
    \        val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fya3jow.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_fya3jow.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsCount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(_.split(\"\\\\]\"))\n        val bracketsNestingsCount\
    \ = bracketsNestings.length\n        val bracketsNestingsNestings = bracketsNestings.map(_.split(\"\
    \\\\[\"))\n        val bracketsNestingsNestingsCount = bracketsNestingsNestings.length\n\
    \        val isNested = bracketsNestingsNestingsCount == bracketsCount\n     \
    \   isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp413q53a2.scala:24:62 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestings\e\
    [0m = bracketsNestings.map(_.split(\e[31m\"\\\\[\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m   value split is not a member of Array[String] - did you mean _$2.wait?\n\
    \e[31m\e[31m-- Error: /tmp/tmp413q53a2.scala:24:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestings\e\
    [0m = bracketsNestings.map(_.split(\e[31m\"\\\\[\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"]\")).length\n\
    \        val bracketsNotNestings = brackets.filter(x => x.contains(\"}\")).length\n\
    \        val bracketsNotNestingsCount = bracketsNotNestings + 1\n        val bracketsNotNestingsNestings\
    \ = bracketsNotNestings - bracketsNestings\n        val bracketsNestingsCount\
    \ = bracketsNestings + 1\n        val bracketsNestingsNotNestings = bracketsNestings\
    \ - bracketsNotNestings\n        val bracketsNotNestingsNestingsCount = bracketsNotNestingsNestings\
    \ + 1\n        val bracketsNestingsNotNestingsCount = bracketsNestingsNotNestings\
    \ + 1\n        val bracketsNotNestingsNestingsCountCount = bracketsNotNestingsNestingsCount\
    \ + 1\n        val bracketsNestingsNotNestingsCountCount = bracketsNestingsNotNestingsCount\
    \ + 1\n        val bracketsNotNestingsNestingsCountCountCount = bracketsNotNestingsNestingsCountCount\
    \ + 1\n        val bracketsNestingsNotNestingsCountCountCount = bracketsNestingsNotNestingsCountCount\
    \ + 1\n        val bracketsNotNestingsNestingsCountCountCountCount = bracketsNotNestingsNestingsCountCountCount\
    \ + 1\n        val bracketsNestingsNotNestingsCountCountCountCount = bracketsNestingsNotNestingsCountCountCount\
    \ + 1\n        val bracketsNotNestingsNestingsCountCountCountCountCount = bracketsNotNestingsNestingsCountCountCountCount\
    \ + 1\n        val bracketsNestingsNotNestingsCountCountCountCountCount = bracketsNestingsNotNestingsCountCountCountCount\
    \ + 1\n        val bracketsNotNestingsNestingsCountCountCountCountCountCount =\
    \ bracketsNotNestingsNestingsCountCountCountCountCount + 1\n        val bracketsNestingsNotNestingsCountCountCountCountCountCountCount\
    \ = bracketsNestingsNotNestingsCountCountCountCountCountCount + 1\n        val\
    \ bracketsNotNestingsNestingsCountCountCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjhby1r5n.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhby1r5n.scala:39:77\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsNotNestingsCountCountCountCountCountCountCount\e[0m = bracketsNestingsNotNestingsCountCountCountCountCountCount\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: bracketsNestingsNotNestingsCountCountCountCountCountCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhby1r5n.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nestings = brackets.map(_.split(\"\
    \\\\]\")).map(_.length)\n        nestings.toDouble / brackets.length < 0.5\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfmaivf43.scala:22:17 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        nestings.toDouble / brackets.length < \e[31m0.5\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toDouble is not a member of Array[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(_.contains(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(_.contains(\"]\")).length\n        val\
    \ isNested = openBrackets == closeBrackets\n        return isNested\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaniqe784.scala:29)\n\tat Problem.main(tmpaniqe784.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = string.split(\"\\\\[\").filter(_.contains(\"\
    ]\")).toList\n        val nestedBrackets = brackets.filter(_.contains(\"[\"))\
    \ \n        val notNested = brackets.filter(_.contains(\"]\"))\n        val notNestedBrackets\
    \ = notNested.filter(_.contains(\"[\")) \n        val notNestedBracketsCount =\
    \ notNestedBrackets.count(_ == \"[\")\n        val notNestedBracketsCount2 = notNestedBrackets.count(_\
    \ == \"]\")\n        val notNestedBracketsCount3 = notNestedBrackets.count(_ ==\
    \ \"[\")\n        val notNestedBracketsCount4 = notNestedBrackets.count(_ == \"\
    ]\")\n        val notNestedBracketsCount5 = notNestedBrackets.count(_ == \"[\"\
    )\n        val notNestedBracketsCount6 = notNestedBrackets.count(_ == \"]\")\n\
    \        val notNestedBracketsCount7 = notNestedBrackets.count(_ == \"[\")\n \
    \       val notNestedBracketsCount8 = notNestedBrackets.count(_ == \"]\")\n  \
    \      val notNestedBracketsCount9 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount10 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val notNestedBracketsCount11 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount12 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val notNestedBracketsCount13 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount14 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val notNestedBracketsCount15 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount16 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val notNestedBracketsCount17 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount18 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val notNestedBracketsCount19 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount20 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val notNestedBracketsCount21 = notNestedBrackets.count(_ == \"[\")\n   \
    \     val notNestedBracketsCount22 = notNestedBrackets.count(_ == \"]\")\n   \
    \     val \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpq_8uek4e.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_8uek4e.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val nestings = mutable.ArrayBuffer.empty[Int]\n        val nestingCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val nestingCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        var currentNesting = 0\n        var currentNestingCount = 0\n       \
    \ var currentNestingCounts = 0\n        var currentBracket = 0\n        var currentBracketCount\
    \ = 0\n        var currentBracketCounts = 0\n        var currentNestingCount =\
    \ 0\n        var currentNestingCounts = 0\n        var currentBracketCount = 0\n\
    \        var currentBracketCounts = 0\n        var currentNestingCount = 0\n \
    \       var currentNestingCounts = 0\n        var currentBracketCount = 0\n  \
    \      var currentBracketCounts = 0\n        var currentNestingCount = 0\n   \
    \     var currentNestingCounts = 0\n        var currentBracketCount = 0\n    \
    \    var currentBracketCounts = 0\n        var currentNestingCount = 0\n     \
    \   var currentNestingCounts = 0\n        var currentBracketCount = 0\n      \
    \  var currentBracketCounts = 0\n        var currentNestingCount = 0\n       \
    \ var currentNestingCounts = 0\n        var currentBracketCount = 0\n        var\
    \ currentBracketCounts = 0\n        var currentNestingCount = 0\n        var currentNestingCounts\
    \ = 0\n        var currentBracketCount = 0\n        var currentBracketCounts =\
    \ 0\n        var currentNestingCount = 0\n        var currentNestingCounts = 0\n\
    \        var currentBracketCount = 0\n        var currentBracketCounts = 0\n \
    \       var currentNestingCount = 0\n        var currentNestingCounts = 0\n  \
    \      var currentBracketCount = 0\n        var currentBracketCounts = 0\n   \
    \     var currentNestingCount = 0\n        var currentNestingCounts = 0\n    \
    \    var currentBracketCount = 0\n        var currentBracketCounts = 0\n     \
    \   var currentNestingCount = 0\n        var currentNestingCounts = 0\n      \
    \  var currentBracketCount = 0\n        var currentBracketCounts = 0\n       \
    \ var currentNestingCount = 0\n        var currentNestingCounts = 0\n        var\
    \ currentBracketCount = 0\n        var currentBracketCounts = 0\n        var currentNestingCount\
    \ = 0\n        var currentNestingCounts = 0\n        var currentBracketCount =\
    \ 0\n        var currentBracketCounts = 0\n        var currentNestingCount = 0\n\
    \        var currentNestingCounts = 0\n        var currentBracketCount = 0\n \
    \       var currentBracketCounts = 0\n        var currentNestingCount = 0\n  \
    \      var currentNestingCounts = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9iukn4j0.scala:85:11 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp9iukn4j0.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mcurrentNestingCount\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcurrentNestingCount is already defined as \e[33mvariable\e[0m \e\
    [35mcurrentNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9iukn4j0.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mcurrentNestingCounts\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentNestingCounts is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentNestingCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9iukn4j0.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCount\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcurrentBracketCount is already defined as \e[33mvariable\e[0m \e\
    [35mcurrentBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9iukn4j0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCounts\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCounts is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded "
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nesting = brackets.filter(x => x.contains(\"\
    ]\"))\n        nesting.length == brackets.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjenrw1r4.scala:25)\n\tat Problem.main(tmpjenrw1r4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val bracketsCount = brackets.size\n\
    \        val openingBrackets = brackets.filter(x => x.startsWith(\"[\")).toList\n\
    \        val closingBrackets = brackets.filter(x => x.endsWith(\"]\")).toList\n\
    \        val openingBracketsCount = openingBrackets.size\n        val closingBracketsCount\
    \ = closingBrackets.size\n        val openingBracketsNestings = openingBrackets.filter(x\
    \ => closingBrackets.contains(x)).toList\n        val closingBracketsNestings\
    \ = closingBrackets.filter(x => openingBrackets.contains(x)).toList\n        val\
    \ openingBracketsNestingsCount = openingBracketsNestings.size\n        val closingBracketsNestingsCount\
    \ = closingBracketsNestings.size\n        val isNesting = openingBracketsNestings.size\
    \ == openingBracketsCount && closingBracketsNestings.size == closingBracketsCount\
    \ && openingBracketsNestingsCount == closingBracketsNestingsCount\n        isNesting\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fz0bkm_.scala:35)\n\tat Problem.main(tmp1fz0bkm_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.map(_.length).sum\n        val closeBracketsCount\
    \ = closeBrackets.map(_.length).sum\n        val isNested = openBracketsCount\
    \ == closeBracketsCount\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgapmonik.scala:29)\n\tat Problem.main(tmpgapmonik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val openingBracketsCount\
    \ = brackets.filter(_.startsWith(\"[\")).size\n        val closingBracketsCount\
    \ = brackets.filter(_.startsWith(\"]\")).size\n        val openingBracketsCount2\
    \ = brackets.filter(_.startsWith(\"[[\")).size\n        val closingBracketsCount2\
    \ = brackets.filter(_.startsWith(\"]]\")).size\n        val openingBracketsCount3\
    \ = brackets.filter(_.startsWith(\"[[[\")).size\n        val closingBracketsCount3\
    \ = brackets.filter(_.startsWith(\"]]]\")).size\n        val openingBracketsCount4\
    \ = brackets.filter(_.startsWith(\"[[[[\")).size\n        val closingBracketsCount4\
    \ = brackets.filter(_.startsWith(\"]]]]\")).size\n        val openingBracketsCount5\
    \ = brackets.filter(_.startsWith(\"[[[[[\")).size\n        val closingBracketsCount5\
    \ = brackets.filter(_.startsWith(\"]]]]]\")).size\n        val openingBracketsCount6\
    \ = brackets.filter(_.startsWith(\"[[[[[[\")).size\n        val closingBracketsCount6\
    \ = brackets.filter(_.startsWith(\"]]]]]]\")).size\n        val openingBracketsCount7\
    \ = brackets.filter(_.startsWith(\"[[[[[[[\")).size\n        val closingBracketsCount7\
    \ = brackets.filter(_.startsWith(\"]]]]]]]\")).size\n        val openingBracketsCount8\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[\")).size\n        val closingBracketsCount8\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]\")).size\n        val openingBracketsCount9\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[\")).size\n        val closingBracketsCount9\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]\")).size\n        val openingBracketsCount10\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[[\")).size\n        val closingBracketsCount10\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]]\")).size\n        val openingBracketsCount11\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[[\")).size\n        val closingBracketsCount11\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]]]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpshq9qvug.scala:44:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount11\e\
    [0m = brackets.filter(_.startsWith(\"]]]]]]]]]]]\n\e[31m\e[31m   |\e[0m      \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpshq9qvug.scala:46:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpshq9qvug.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpshq9qvug.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpshq9qvug.scala:46:4 -------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ]]]]]]]]]]]def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"[\") && x.contains(\"\
    ]\"))\n        val bracketsNestingsCount = bracketsNestings.length\n        val\
    \ bracketsNestingsNestings = bracketsNestings.filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\"))\n        val bracketsNestingsNestingsCount = bracketsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCount\
    \ = bracketsNestingsNestingsNestings.filter(x => x.contains(\"[\") && x.contains(\"\
    ]\"))\n        val bracketsNestingsNestingsNestingsCountCountCount = bracketsNestingsNestingsNestingsCount.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCountCountCount\
    \ = bracketsNestingsNestingsNestingsCountCount.filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCountCountCountCount\
    \ = bracketsNestingsNestingsNestingsCountCountCount.filter(x => x.contains(\"\
    [\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCount\
    \ = bracketsNestingsNestingsNestingsCountCountCountCount.filter(x => x.contains(\"\
    [\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestingsNestingsCountCountCountCountCount.filter(x => x.contains(\"\
    [\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestingsNestingsCountCountCountCountCountCount.filter(x =>\
    \ x.contains(\"[\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestingsNestingsCountCountCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lg88hhn.scala:27:57 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestingsNestingsCountCount\e\
    [0m = bracketsNestingsNestingsNestings.filter(\e[36mx\e[0m => x.contains(\e[31m\"\
    [\"\e[0m) && x.contains(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m            \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: bracketsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lg88hhn.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsNestings\
    \ = brackets.map(_.split(\"\\\\]\").map(_.length))\n        val nestings = bracketsNestings.map(_.sum)\n\
    \        nestings.toDouble / brackets.length.toDouble < 0.5\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7e5qln0.scala:23:17 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        nestings.toDouble / brackets.length.toDouble\
    \ < \e[31m0.5\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toDouble is not a member of Array[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"[\")).length\n\
    \        val bracketsNotNestings = brackets.filter(x => x.contains(\"]\")).length\n\
    \        val bracketsNotNestingsCount = bracketsNotNestings - bracketsNestings\n\
    \        val bracketsNestingsCount = bracketsNestings - bracketsNotNestings\n\
    \        val bracketsNestingsCountIsEven = bracketsNestingsCount % 2 == 0\n  \
    \      val bracketsNotNestingsCountIsEven = bracketsNotNestingsCount % 2 == 0\n\
    \        val bracketsCountIsEven = bracketsCount % 2 == 0\n        val bracketsCountIsOdd\
    \ = bracketsCount % 2 != 0\n        val bracketsCountIsEvenOrOdd = bracketsCountIsEven\
    \ || bracketsCountIsOdd\n        val bracketsCountIsOddOrEven = bracketsCountIsOdd\
    \ || bracketsCountIsEven\n        val bracketsCountIsEvenOrOddOrBoth = bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsOddOrEven\n        val bracketsCountIsOddOrEvenOrBoth = bracketsCountIsOddOrEven\
    \ || bracketsCountIsEvenOrOdd\n        val bracketsCountIsEvenOrOddOrBothOrBoth\
    \ = bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsOddOrEven\n\
    \        val bracketsCountIsEvenOrOddOrBothOrBothOrBoth = bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsOddOrEven || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || brackets\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpod8_vdn9.scala:35:561\
    \ -------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mbracketsCountIsEvenOrOddOrBothOrBothOrBoth\e\
    [0m = bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsOddOrEven\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd || bracketsCountIsEvenOrOdd\
    \ || brackets\n\e[31m\e[31m   |\e[0m                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    (brackets : Array[String])\n\
    \e[31m   |\e[0m                                    Required: Boolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpod8_vdn9.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\"))\n        nestings.size > 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf14ou0cl.scala:26)\n\tat Problem.main(tmpf14ou0cl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0btef15_.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m20 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m21 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.Set[String]()\n        val closeBrackets =\
    \ mutable.Set[String]()\n        val openBracketsCount = mutable.Map[String, Int]()\n\
    \        val closeBracketsCount = mutable.Map[String, Int]()\n        val openBracketsCount2\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount2 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount3 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount3 = mutable.Map[String, Int]()\n        val openBracketsCount4\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount4 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount5 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount5 = mutable.Map[String, Int]()\n        val openBracketsCount6\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount6 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount7 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount7 = mutable.Map[String, Int]()\n        val openBracketsCount8\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount8 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount9 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount9 = mutable.Map[String, Int]()\n        val openBracketsCount10\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount10 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount11 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount11 = mutable.Map[String, Int]()\n        val openBracketsCount12\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount12 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount13 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount13 = mutable.Map[String, Int]()\n        val openBracketsCount14\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount14 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount15 = mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzgwy3ujf.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpzgwy3ujf.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzgwy3ujf.scala:22:27 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgwy3ujf.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgwy3ujf.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzgwy3ujf.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Set[String]()\n        val bracketsCount = brackets.length\n\
    \        val stackCount = stack.length\n        val resultCount = result.length\n\
    \        \n        for( i <- 0 until bracketsCount ) {\n            if( brackets(i)\
    \ == \"[\" ) {\n                stack.push(brackets(i))\n            }\n     \
    \       else if( brackets(i) == \"]\" ) {\n                if( stackCount > 0\
    \ ) {\n                    if( stack.peek() == \"[\" ) {\n                   \
    \     stack.pop()\n                    }\n                    else {\n       \
    \                 result.add(stack.peek())\n                    }\n          \
    \      }\n            }\n        }\n        \n        if( stackCount > 0 ) {\n\
    \            if( stack.peek() == \"[\" ) {\n                stack.pop()\n    \
    \        }\n            else {\n                result.add(stack.peek())\n   \
    \         }\n        }\n        \n        if( stackCount == 0 ) {\n          \
    \  if( result.size == bracketsCount ) {\n                return true\n       \
    \     }\n            else {\n                return false\n            }\n   \
    \     }\n        else {\n            return false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcktt4e4.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfcktt4e4.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        nestings.forall(x => x.length == 1 && x.forall(y => y.length\
    \ == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3if471px.scala:25)\n\tat Problem.main(tmp3if471px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val openingBrackets = brackets.filter(x => x.startsWith(\"[\"))\n   \
    \     val closingBrackets = brackets.filter(x => x.endsWith(\"]\"))\n        val\
    \ openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsNestingCount = openingBracketsCount\
    \ - closingBracketsCount\n        val closingBracketsNestingCount = closingBracketsCount\
    \ - openingBracketsCount\n        val openingBracketsNesting = (openingBracketsCount\
    \ - closingBracketsCount) > 0\n        val closingBracketsNesting = (closingBracketsCount\
    \ - openingBracketsCount) > 0\n        val openingBracketsNestingOrEqual = (openingBracketsCount\
    \ - closingBracketsCount) == 0 || openingBracketsNesting\n        val closingBracketsNestingOrEqual\
    \ = (closingBracketsCount - openingBracketsCount) == 0 || closingBracketsNesting\n\
    \        val openingBracketsNestingOrEqualOrEqual = (openingBracketsCount - closingBracketsCount)\
    \ == 0 || openingBracketsNesting || closingBracketsNesting\n        val closingBracketsNestingOrEqualOrEqual\
    \ = (closingBracketsCount - openingBracketsCount) == 0 || closingBracketsNesting\
    \ || openingBracketsNesting\n        val openingBracketsNestingOrEqualOrEqualOrEqual\
    \ = (openingBracketsCount - closingBracketsCount) == 0 || openingBracketsNesting\
    \ || closingBracketsNesting || openingBracketsNestingOrEqual\n        val closingBracketsNestingOrEqualOrEqualOrEqual\
    \ = (closingBracketsCount - openingBracketsCount) == 0 || closingBracketsNesting\
    \ || openingBracketsNestingOrEqual || closingBracketsNestingOrEqual\n        val\
    \ openingBracketsNestingOrEqualOrEqualOrEqualOrEqual = (openingBracketsCount -\
    \ closingBracketsCount) == 0 || openingBracketsNesting || closingBracketsNesting\
    \ || \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl9a6gkg_.scala:36:170 --------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsNestingOrEqualOrEqualOrEqualOrEqual\e\
    [0m = (openingBracketsCount - closingBracketsCount) == \e[31m0\e[0m || openingBracketsNesting\
    \ || closingBracketsNesting || \n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl9a6gkg_.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(_.contains(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(_.contains(\"]\")).length\n        val\
    \ openBracketsCount = openBrackets\n        val closeBracketsCount = closeBrackets\n\
    \        val openBracketsNesting = (openBracketsCount - closeBracketsCount)\n\
    \        val closeBracketsNesting = (closeBracketsCount - openBracketsCount)\n\
    \        val openBracketsNestingIsValid = (openBracketsNesting >= 0)\n       \
    \ val closeBracketsNestingIsValid = (closeBracketsNesting >= 0)\n        val openBracketsNestingIsValidAndNotNesting\
    \ = (openBracketsNesting > 0 && closeBracketsNesting < 0)\n        val closeBracketsNestingIsValidAndNotNesting\
    \ = (closeBracketsNesting > 0 && openBracketsNesting < 0)\n        val openBracketsNestingIsValidAndNesting\
    \ = (openBracketsNesting > 0 && closeBracketsNesting > 0)\n        val closeBracketsNestingIsValidAndNesting\
    \ = (closeBracketsNesting > 0 && openBracketsNesting > 0)\n        val openBracketsNestingIsValidAndNotNestingAndNesting\
    \ = (openBracketsNesting > 0 && closeBracketsNesting > 0 && openBracketsNesting\
    \ < 0)\n        val closeBracketsNestingIsValidAndNotNestingAndNesting = (closeBracketsNesting\
    \ > 0 && openBracketsNesting > 0 && closeBracketsNesting < 0)\n        val openBracketsNestingIsValidAndNestingAndNesting\
    \ = (openBracketsNesting > 0 && closeBracketsNesting > 0 && openBracketsNesting\
    \ > 0 && closeBracketsNesting > 0)\n        val closeBracketsNestingIsValidAndNestingAndNesting\
    \ = (closeBracketsNesting > 0 && openBracketsNesting > 0 && closeBracketsNesting\
    \ > 0 && openBracket\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzg5x6y9k.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg5x6y9k.scala:37:146\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsNestingIsValidAndNestingAndNesting\e[0m = (closeBracketsNesting\
    \ > \e[31m0\e[0m && openBracketsNesting > \e[31m0\e[0m && closeBracketsNesting\
    \ > \e[31m0\e[0m && openBracket\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                  Not found: openBracket\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzg5x6y9k.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(_.contains(\"\
    ]\")).map(_.split(\"]\")).map(_.length).sum\n        nestings == brackets.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdnuvp4_2.scala:25)\n\tat Problem.main(tmpdnuvp4_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val nestings = brackets.foldLeft(List[List[String]]())\
    \ {\n            (acc, bracket) =>\n                val openingBrackets = bracket.split(\"\
    \\\\]\").map(_.trim).toList\n                val closingBrackets = bracket.split(\"\
    \\\\]\").map(_.trim).toList\n                val nesting = (openingBrackets ++\
    \ closingBrackets).filter(_.nonEmpty)\n                if (nesting.nonEmpty) acc\
    \ :+ nesting\n                else acc\n        }\n        nestings.forall(nesting\
    \ => nesting.forall(nesting => nesting.nonEmpty))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigvxjrhu.scala:33)\n\tat Problem.main(tmpigvxjrhu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        nestings.forall(x => x.length == 1 && x.forall(y => y.length\
    \ == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3if471px.scala:25)\n\tat Problem.main(tmp3if471px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val openBracketsNestings = openBrackets.filter(_.contains(\"\
    [\")) - openBrackets\n        val closeBracketsNestings = closeBrackets.filter(_.contains(\"\
    ]\")) - closeBrackets\n        val openBracketsNestingCount = openBracketsNestings.size\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.size\n        val\
    \ openBracketsNestingCount = openBracketsNestings.filter(_.contains(\"[\")) -\
    \ openBracketsNestings\n        val closeBracketsNestingCount = closeBracketsNestings.filter(_.contains(\"\
    ]\")) - closeBracketsNestings\n        val openBracketsNestingCount = openBracketsNestings.filter(_.contains(\"\
    [\")) - openBracketsNestings\n        val closeBracketsNestingCount = closeBracketsNestings.filter(_.contains(\"\
    ]\")) - closeBracketsNestings\n        val openBracketsNestingCount = openBracketsNestings.filter(_.contains(\"\
    [\")) - openBracketsNestings\n        val closeBracketsNestingCount = closeBracketsNestings.filter(_.contains(\"\
    ]\")) - closeBracketsNestings\n        val openBracketsNestingCount = openBracketsNestings.filter(_.contains(\"\
    [\")) - openBracketsNestings\n        val closeBracketsNestingCount = closeBracketsNestings.filter(_.contains(\"\
    ]\")) - closeBracketsNestings\n        val openBracketsNestingCount = openBracketsNestings.filter(_.contains(\"\
    [\")) - openBracketsNestings\n        val closeBracketsNestingCount = closeBracketsNestings.filter(_.contains(\"\
    ]\")) - closeBracketsNestings\n        val openBracketsNestingCount = openBracketsNestings.filter(_.contains(\"\
    [\")) - openBracketsNestings\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgprp82wu.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingCount\e\
    [0m = openBracketsNestings.filter(_.contains(\e[31m\"[\"\e[0m)) - openBracketsNestings\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgprp82wu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = closeBracketsNestings.filter(_.contains(\e[31m\"]\"\e[0m)) - closeBracketsNestings\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgprp82wu.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingCount\e\
    [0m = openBracketsNestings.filter(_.contains(\e[31m\"[\"\e[0m)) - openBracketsNestings\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgprp82wu.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = closeBracketsNestings.filter(_.contains(\e[31m\"]\"\e[0m)) - closeBr"
  stdout: ''
  timestamp: 1660028851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.HashSet[String]()\n\
    \        val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fya3jow.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_fya3jow.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsCount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nested = brackets.filter(x => x.contains(\"\
    ]\")).map(x => x.split(\"]\"))\n        nested.forall(x => x.length == brackets.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh1jfu3w.scala:25)\n\tat Problem.main(tmpyh1jfu3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val nestings = mutable.Set[Int]()\n        var currentNesting = 0\n \
    \       var currentNestingCount = 0\n        var currentBracket = 0\n        var\
    \ currentBracketCount = 0\n        var currentBracketNesting = 0\n        var\
    \ currentBracketNestingCount = 0\n        var isNested = false\n        \n   \
    \     for(i <- 0 until bracketsCount) {\n            val bracket = brackets(i)\n\
    \            val bracketCount = bracket.length\n            \n            if(bracketCount\
    \ > currentBracketCount) {\n                currentBracket = bracket\n       \
    \         currentBracketCount = bracketCount\n                currentBracketNesting\
    \ = 0\n                currentBracketNestingCount = 0\n            }\n       \
    \     \n            if(bracketCount < currentBracketCount) {\n               \
    \ currentBracketNestingCount += 1\n                currentBracketNesting += 1\n\
    \                nestings.add(currentBracketNesting)\n            }\n        \
    \    \n            if(bracketCount > currentBracketCount) {\n                currentBracketNestingCount\
    \ += 1\n                currentBracketNesting += 1\n                nestings.add(currentBracketNesting)\n\
    \            }\n            \n            if(bracketCount < currentBracketCount)\
    \ {\n                currentBracketNestingCount += 1\n                currentBracketNesting\
    \ += 1\n                nestings.add(currentBracketNesting)\n            }\n \
    \           \n            if(bracketCount > currentBracketCount) {\n         \
    \       currentBracketNestingCount += 1\n                currentBracketNesting\
    \ += 1\n                nestings.add(currentBracketNesting)\n            }\n \
    \           \n            if(bracketCount < currentBracketCount) {\n         \
    \       currentBracketNestingCount += 1\n                currentBracketNesting\
    \ += 1\n                nestings.add(currentBracketNesting)\n            }\n \
    \           \n            if(bracketCount > currentBracketCount) {\n         \
    \       currentBracketNestingCount += 1\n                currentBracketNesting\
    \ += 1\n                nestings.add(currentBracketNesting)\n            }\n \
    \           \n            if(bracketCount < currentBracketCount) {\n         \
    \       currentBracketNestingCount += 1\n                currentBracketNesting\
    \ += 1\n                nestings.add(currentBracketNesting)\n            }\n \
    \           \n            if(bracketCount > currentBracketCount) {\n         \
    \       currentBracketNe\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2n_tnch9.scala:105:0 ---------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_tnch9.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mnestings\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_tnch9.scala:36:33\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m                currentBracket\
    \ = bracket\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    (bracket : String)\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_tnch9.scala:85:16 ------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m                currentBracketNe\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ currentBracketNe\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2n_tnch9.scala:88:11\
    \ -----------------------------\e[0m\e[0m\n\e[31m88 |\e[0m    assert(isNested((\e\
    [31m\"[[]]\"\e[0m)) == (\e[31mtrue\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           \e[33mvariable\e[0m \e[35misNested\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2n_tnch9.scala:89:11\
    \ -----------------------------\e[0m\e[0m\n\e[31m89 |\e[0m    assert(isNested((\e\
    [31m\"[]]]]]]][[[[[]\"\e[0m)) == (\e[31mfalse\e[0m));\n\e[31m\e[31m   |\e[0m \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvariable\e[0m \e[35misNested\e\
    [0m does not take parameters\n\e[31m   |"
  stdout: ''
  timestamp: 1660028852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(_.split(\"\\\\\
    ]\")).map(_.length).filter(_ > 1)\n        nestings.forall(nesting => brackets.forall(nesting\
    \ contains _))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkeqpbjy9.scala:22:59 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        nestings.forall(\e[36mnesting\e[0m => brackets.forall(nesting\
    \ contains _))\n\e[31m\e[31m   |\e[0m                                        \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \        value contains is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660028851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        nestings.map(_.length).sum > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_d9yl47c.scala:26)\n\tat Problem.main(tmp_d9yl47c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a mutable collection to hold the brackets\n        val brackets = mutable.ListBuffer[String]()\n\
    \        // Create a mutable collection to hold the nesting level\n        val\
    \ nesting = mutable.ListBuffer[Int]()\n        // Iterate through the string and\
    \ add each bracket to the collection\n        string.foreach { c =>\n        \
    \    c match {\n                case '[' => brackets += c\n                case\
    \ ']' =>\n                    // If the brackets list is empty then return false\n\
    \                    if (brackets.isEmpty) false\n                    // Otherwise\
    \ remove the top bracket from the collection\n                    else brackets\
    \ -= brackets.head\n                case '{' =>\n                    // If the\
    \ brackets list is empty then return false\n                    if (brackets.isEmpty)\
    \ false\n                    // Otherwise remove the top bracket from the collection\n\
    \                    else brackets -= brackets.head\n                case _ =>\n\
    \                    // If the brackets list is empty then return false\n    \
    \                if (brackets.isEmpty) false\n                    // Otherwise\
    \ add the current character to the collection\n                    else brackets\
    \ += c\n            }\n        }\n        // If the brackets list is empty then\
    \ return false\n        if (brackets.isEmpty) false\n        // Otherwise iterate\
    \ through the brackets list and add each bracket to the nesting list\n       \
    \ else brackets.foreach { c =>\n            c match {\n                case '['\
    \ =>\n                    // If the brackets list is empty then return false\n\
    \                    if (brackets.isEmpty) false\n                    // Otherwise\
    \ add the current character to the nesting list\n                    else nesting\
    \ += nesting.length\n                case ']' =>\n                    // If the\
    \ brackets list is empty then return false\n                    if (brackets.isEmpty)\
    \ false\n                    // Otherwise remove the top bracket from the nesting\
    \ list\n                    else nesting -= nesting.last\n                case\
    \ '{' =>\n                    // If the brackets list is empty then return false\n\
    \                    if (brackets.isEmpty) false\n                    // Otherwise\
    \ remove the top bracket from the nesting list\n                    else nesting\
    \ -= nesting.last\n                case _ =>\n                    // If the brackets\
    \ list is empty then return false\n                    if (brackets.isEmpty) false\n\
    \                    // Otherwise add the current character to the nesting list\n\
    \                    else nesting += nesting.length\n            }\n        }\n\
    \        // If the nesting list is empty then return false\n        if (nesting.isEmpty)\
    \ false\n        // Otherwise iterate through the nesting list and add each bracket\
    \ to the nesting list\n        else nesting.foreach { c =>\n            c match\
    \ {\n                case 0 =>\n                    // If the brackets list is\
    \ empty then return false\n                    if (brackets.isEmpty) false\n \
    \                   // Otherwise remove the top bracket from the nesting list\n\
    \                    else nesting -= nesting.last\n                case _ =>\n\
    \                    // If the brackets list is \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwask_qez.scala:103:0 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwask_qez.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwask_qez.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mnesting\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpwask_qez.scala:85:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m85 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code goes here\n        val brackets = string.split(\"\\\\[|\\\\]\")\n     \
    \   var openBrackets = 0\n        var closeBrackets = 0\n        var isNested\
    \ = false\n        for(i <- 0 until brackets.length){\n            if(brackets(i)\
    \ == \"[\"){\n                openBrackets++\n            }\n            if(brackets(i)\
    \ == \"]\"){\n                closeBrackets++\n            }\n            if(openBrackets\
    \ == closeBrackets){\n                isNested = true\n            }\n       \
    \ }\n        return isNested\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuux4v1i7.scala:27:30 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                openBrackets++\n\e[31m\e[31m   |\e[0m\
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpuux4v1i7.scala:30:31 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                closeBrackets++\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Set[String]()\n        val openBrackets = mutable.Set[String]()\n\
    \        val closeBrackets = mutable.Set[String]()\n        val openBracketsCount\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount2 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount2 = mutable.Map[String, Int]()\n        val openBracketsCount3\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount3 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount4 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount4 = mutable.Map[String, Int]()\n        val openBracketsCount5\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount5 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount6 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount6 = mutable.Map[String, Int]()\n        val openBracketsCount7\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount7 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount8 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount8 = mutable.Map[String, Int]()\n        val openBracketsCount9\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount9 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount10 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount10 = mutable.Map[String, Int]()\n        val openBracketsCount11\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount11 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount12 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount12 = mutable.Map[String, Int]()\n        val openBracketsCount13\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount13 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount14 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount14 = mutable.Map[String, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo86x37h5.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo86x37h5.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo86x37h5.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo86x37h5.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo86x37h5.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo86x37h5.scala:26:33 ------------------------\e[0"
  stdout: ''
  timestamp: 1660028850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ > 0 && bracketsCount > nestedBracketsCount\n        isNested\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cwe1zlo.scala:29)\n\tat Problem.main(tmp0cwe1zlo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val nestings = brackets.map(x => x.split(\"\\\\]\"))\n        val nestingsCount\
    \ = nestings.length\n        val nestingsCount = nestingsCount.toInt\n       \
    \ val nestings = nestings.filter(x => x.length == nestingsCount)\n        val\
    \ nestingsCount = nestings.length\n        val nestings = nestings.filter(x =>\
    \ x.length == nestingsCount)\n        val nestingsCount = nestings.length\n  \
    \      val nestings = nestings.filter(x => x.length == nestingsCount)\n      \
    \  val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(x => x.length == nestingsCount)\n    \
    \    val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(x => x.length == nestingsCount)\n    \
    \    val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(x => x.length == nestingsCount)\n    \
    \    val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(x => x.length == nestingsCount)\n    \
    \    val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(x => x.length == nestingsCount)\n    \
    \    val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(x => x.length == nestingsCount)\n    \
    \    val nestingsCount = nestings.length\n        val nestings = nestings.filter(x\
    \ => x.length == nestingsCount)\n        val nestingsCount = nestings.length\n\
    \        val nestings = nestings.filter(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2n416ohc.scala:57:39 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mnestings\e[0m = nestings.filter(\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2n416ohc.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnestingsCount\e[0m = nestingsCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnestingsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mnestingsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2n416ohc.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnestings\e[0m = nestings.filter(\e[36mx\e[0m => x.length == nestingsCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestings is already defined as \e[33mvalue\e[0m \e[35mnestings\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2n416ohc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnestingsCount\e[0m = nestings.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnestingsCount is already defined as \e[33mvalue\e[0m \e[35mnestingsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2n416ohc.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnestings\e[0m = nestings.filter(\e[36mx\e\
    [0m => x.length == nestingsCount)\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        string.foreach(c => {\n            if (c == '[') openBrackets +=\
    \ 1\n            if (c == '[') brackets += c\n            if (c == ']') closeBrackets\
    \ += 1\n            if (c == ']') brackets += c\n        })\n        openBrackets\
    \ <= closeBrackets\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_5y860c.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = mutable.ListBuffer[String]()\n        val\
    \ openBrackets = mutable.ListBuffer[String]()\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        val openBracketsCount = mutable.ListBuffer[Int]()\n        val closeBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount2 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount2 = mutable.ListBuffer[Int]()\n        val openBracketsCount3\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount4 = mutable.ListBuffer[Int]()\n        val closeBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount5 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount5 = mutable.ListBuffer[Int]()\n        val openBracketsCount6\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount7 = mutable.ListBuffer[Int]()\n        val closeBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount8 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount8 = mutable.ListBuffer[Int]()\n        val openBracketsCount9\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount10 = mutable.ListBuffer[Int]()\n        val closeBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount11 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount11 = mutable.ListBuffer[Int]()\n        val openBracketsCount12\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount13 = mutable.ListBuffer[Int]()\n        val closeBracketsCount13\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount14 = mutable.ListBuffer[Int]()\n\
    \        val closeBra\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvcxhaiy1.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcxhaiy1.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcxhaiy1.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvcxhaiy1.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcxhaiy1.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcxhaiy1.scala:25:33\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e["
  stdout: ''
  timestamp: 1660028852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openingBrackets = mutable.ListBuffer[String]()\n        val closingBrackets\
    \ = mutable.ListBuffer[String]()\n        val openingBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount = mutable.ListBuffer[Int]()\n        val openingBracketsCount2\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount2 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount3 = mutable.ListBuffer[Int]()\n        val closingBracketsCount3\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount4 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount4 = mutable.ListBuffer[Int]()\n        val openingBracketsCount5\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount5 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount6 = mutable.ListBuffer[Int]()\n        val closingBracketsCount6\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount7 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount7 = mutable.ListBuffer[Int]()\n        val openingBracketsCount8\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount8 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount9 = mutable.ListBuffer[Int]()\n        val closingBracketsCount9\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount10 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount10 = mutable.ListBuffer[Int]()\n        val openingBracketsCount11\
    \ = mutable.ListBuffer[Int]()\n        val closingBracketsCount11 = mutable.ListBuffer[Int]()\n\
    \        val openingBracketsCount12 = mutable.ListBuffer[Int]()\n        val closingBracketsCount12\
    \ = mutable.ListBuffer[Int]()\n        val openingBracketsCount13 = mutable.ListBuffer[Int]()\n\
    \        val closingBracketsCount13 = mutable.ListBuffer[Int]()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiacpsjvc.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpiacpsjvc.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpiacpsjvc.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiacpsjvc.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiacpsjvc.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Fo"
  stdout: ''
  timestamp: 1660028852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val bracketsNestingCount\
    \ = brackets.filter(_.contains(\"[\").toList.length + brackets.filter(_.contains(\"\
    ]\")).toList.length\n        val bracketsNestingCount2 = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  val bracketsNestingCount3 = brackets.filter(_.contains(\"[\").toList.length\
    \ + brackets.filter(_.contains(\"]\")).toList.length\n        val bracketsNestingCount4\
    \ = brackets.filter(_.contains(\"[\").toList.length + brackets.filter(_.contains(\"\
    ]\")).toList.length\n        val bracketsNestingCount5 = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  val bracketsNestingCount6 = brackets.filter(_.contains(\"[\").toList.length\
    \ + brackets.filter(_.contains(\"]\")).toList.length\n        val bracketsNestingCount7\
    \ = brackets.filter(_.contains(\"[\").toList.length + brackets.filter(_.contains(\"\
    ]\")).toList.length\n        val bracketsNestingCount8 = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  val bracketsNestingCount9 = brackets.filter(_.contains(\"[\").toList.length\
    \ + brackets.filter(_.contains(\"]\")).toList.length\n        val bracketsNestingCount10\
    \ = brackets.filter(_.contains(\"[\").toList.length + brackets.filter(_.contains(\"\
    ]\")).toList.length\n        val bracketsNestingCount11 = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  val bracketsNestingCount12 = brackets.filter(_.contains(\"[\").toList.length\
    \ + brackets.filter(_.contains(\"]\")).toList.length\n        val bracketsNestingCount13\
    \ = brackets.filter(_.contains(\"[\").toList.length + brackets.filter(_.contains(\"\
    ]\")).toList.length\n        val bracketsNestingCount14 = brackets.filter(_.contains(\"\
    [\").toList.length + brackets.filter(_.contains(\"]\")).toList.length\n      \
    \  val bracketsNestingCount15 = brackets.filter(_.contains(\"[\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm4dfas2s.scala:24:8 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount2\e\
    [0m = brackets.filter(_.contains(\e[31m\"[\"\e[0m).toList.length + brackets.filter(_.contains(\e\
    [31m\"]\"\e[0m)).toList.length\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpm4dfas2s.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpm4dfas2s.scala:23:67 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m = brackets.filter(_.contains(\e\
    [31m\"[\"\e[0m).toList.length + brackets.filter(_.contains(\e[31m\"]\"\e[0m)).toList.length\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toList is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm4dfas2s.scala:56:1\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\")).map(x => x.filter(y => y.length == 2))\n        nestings.forall(x =>\
    \ x.forall(y => y.length == 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3hcs_qnr.scala:26)\n\tat Problem.main(tmp3hcs_qnr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\")).map(x => x.length)\n\
    \        val bracketsNestingCount = bracketsNestings.sum\n        val bracketsNestingSum\
    \ = bracketsNestings.sum\n        val bracketsNestingSum2 = bracketsNestings.map(x\
    \ => x.sum).sum\n        val bracketsNestingSum3 = bracketsNestings.map(x => x.map(y\
    \ => y.sum).sum).sum\n        val bracketsNestingSum4 = bracketsNestings.map(x\
    \ => x.map(y => y.map(z => z.sum).sum).sum).sum\n        val bracketsNestingSum5\
    \ = bracketsNestings.map(x => x.map(y => y.map(z => z.map(w => w.sum).sum).sum).sum).sum\n\
    \        val bracketsNestingSum6 = bracketsNestings.map(x => x.map(y => y.map(z\
    \ => z.map(w => w.map(x => x.sum).sum).sum).sum).sum).sum\n        val bracketsNestingSum7\
    \ = bracketsNestings.map(x => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y\
    \ => y.sum).sum).sum).sum).sum).sum).sum\n        val bracketsNestingSum8 = bracketsNestings.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y => y.map(z => z.sum).sum).sum).sum).sum).sum).sum).sum\n\
    \        val bracketsNestingSum9 = bracketsNestings.map(x => x.map(y => y.map(z\
    \ => z.map(w => w.map(x => x.map(y => y.map(z => z.map(w => w.sum).sum).sum).sum).sum).sum).sum).sum).sum\n\
    \        val bracketsNestingSum10 = bracketsNestings.map(x => x.map(y => y.map(z\
    \ => z.map(w => w.map(x => x.map(y => y.map(z => z.map(w => w.sum).sum).sum).sum).sum).sum).sum).sum).sum\n\
    \        val bracketsNestingSum11 = bracketsNestings.map(x => x.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwct2_79h.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpwct2_79h.scala:25:62 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSum2\e[0m = bracketsNestings.map(\e\
    [36mx\e[0m => x.sum).sum\n\e[31m\e[31m   |\e[0m                              \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                     value sum is not a member of Int\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpwct2_79h.scala:25:66 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSum2\e[0m = bracketsNestings.map(\e\
    [36mx\e[0m => x.sum).sum\n\e[31m\e[31m   |\e[0m                              \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwct2_79h.scala:26:62 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSum3\e[0m\
    \ = bracketsNestings.map(\e[36mx\e[0m => x.map(\e[36my\e[0m => y.sum).sum).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ map is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmpwct2_79h.scala:26:82\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mbracketsNestingSum3\e[0m = bracketsNestings.map(\e[36mx\e\
    [0m => x.map(\e[36my\e[0m => y.sum).sum).sum\n\e[31m\e[31m   |\e[0m          \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwc"
  stdout: ''
  timestamp: 1660028859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val nestings = mutable.ArrayBuffer.empty[Int]\n        var nestingCount\
    \ = 0\n        var nestingIndex = 0\n        var currentNesting = 0\n        var\
    \ currentNestingIndex = 0\n        var currentNestingCount = 0\n        var currentNestingIndexCount\
    \ = 0\n        var currentNestingIndexCountMax = 0\n        var currentNestingIndexCountMin\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMinIndex\
    \ = 0\n        var currentNestingIndexCountMaxIndex = 0\n        var currentNestingIndexCountMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn0goe0wn.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn0goe0wn.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentNestingIndexCountMaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentNestingIndexCountMaxIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentNestingIndexCountMaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0goe0wn.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mvar\e[0m \e[36mcurrentNestingIndexCountMinIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentNestingIndexCountMinIndex is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentNestingIndexCountMinIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn0goe0wn.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentNestingIndexCountMaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentNestingIndexCountMaxIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentNestingIndexCountMaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0goe0wn.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mvar\e[0m \e[36mcurrentNestingIndexCountMinIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentNestingIndexCountMinIndex is already defined as \e\
    [33mvariable\e["
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.HashSet[Int]()\n        val closeBrackets\
    \ = mutable.HashSet[Int]()\n        val openBracketsCount = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[Int, Int]()\n     \
    \   val openBracketsCount2 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount4 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount6 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount8 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount10 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount10\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount11 = mutable.HashMap[Int, Int]()\n   \
    \     val openBracketsCount12 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount12\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBra\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr5znz65b.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5znz65b.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5znz65b.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.length\n\
    \        val isNested = bracketsCount > 0 && stackCount > 0\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount > 0 && stackCount > brackets\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyutwsnt_.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misNestingNeeded\e[0m = bracketsCount\
    \ > \e[31m0\e[0m && stackCount < bracketsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestingNeeded is already defined as \e[33mvalue\e[0m \e\
    [35misNestingNeeded\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyutwsnt_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misNestingUnneeded\e[0m =\
    \ bracketsCount > \e[31m0\e[0m && stackCount > bracketsCount\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestingUnneeded is already defined as \e[33mvalue\e[0m \e\
    [35misNestingUnneeded\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyutwsnt_.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36misNestingNeeded\e[0m = bracketsCount\
    \ > \e[31m0\e[0m && stackCount < bracketsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestingNeeded is already defined as \e[33mvalue\e[0m \e\
    [35misNestingNeeded\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyutwsnt_.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36misNestingUnneeded\e[0m =\
    \ bracketsCount > \e[31m0\e[0m && stackCount > bracketsCount\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestingUnneeded is already defined as \e[33mvalue\e[0m \e\
    [35misNestingUnneeded\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(_.contains(\"[\"))\n        val closeBrackets\
    \ = brackets.filter(_.contains(\"]\"))\n        val openBracketsCount = openBrackets.length\n\
    \        val closeBracketsCount = closeBrackets.length\n        val openBracketsNestings\
    \ = openBrackets.map(_.contains(\"[\"))\n        val closeBracketsNestings = closeBrackets.map(_.contains(\"\
    ]\"))\n        val openBracketsNestingsCount = openBracketsNestings.filter(_.contains(\"\
    [\")).length\n        val closeBracketsNestingsCount = closeBracketsNestings.filter(_.contains(\"\
    ]\")).length\n        val openBracketsNestingsNestings = openBracketsNestings.filter(_.contains(\"\
    ]\")).map(_.contains(\"[\"))\n        val closeBracketsNestingsNestings = closeBracketsNestings.filter(_.contains(\"\
    [\"))\n        val openBracketsNestingsNestingsCount = openBracketsNestingsNestings.filter(_.contains(\"\
    [\")).length\n        val closeBracketsNestingsNestingsCount = closeBracketsNestingsNestings.filter(_.contains(\"\
    ]\")).length\n        val openBracketsNestingsNestingsNestings = openBracketsNestingsNestings.filter(_.contains(\"\
    ]\")).map(_.contains(\"[\"))\n        val closeBracketsNestingsNestingsNestings\
    \ = closeBracketsNestingsNestings.filter(_.contains(\"[\"))\n        val openBracketsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNestings.filter(_.contains(\"[\")).length\n  \
    \      val closeBracketsNestingsNestingsNestingsCount = closeBracketsNestingsNestingsNestings.filter(_.contains(\"\
    ]\")).length\n        val openBracketsNestingsNestingsNestingsNestings = openBracketsNestingsNestingsNestings.filter(_.contains(\"\
    ]\")).map(_.contains(\"[\"))\n        val closeBracketsNestingsNestingsNestingsNestings\
    \ = closeBra\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx80xu_6j.scala:28:70 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsCount\e\
    [0m = openBracketsNestings.filter(_.contains(\e[31m\"[\"\e[0m)).length\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value contains\
    \ is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx80xu_6j.scala:29:72\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsNestingsCount\e[0m = closeBracketsNestings.filter(_.contains(\e\
    [31m\"]\"\e[0m)).length\n\e[31m\e[31m   |\e[0m                               \
    \                                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          value contains is not a member of Boolean\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx80xu_6j.scala:30:73 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsNestings\e\
    [0m = openBracketsNestings.filter(_.contains(\e[31m\"]\"\e[0m)).map(_.contains(\e\
    [31m\"[\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value contains is not a member of Boolean\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx80xu_6j.scala:30:94 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsNestings\e\
    [0m = openBracketsNestings.filter(_.contains(\e[31m\"]\"\e[0m)).map(_.contains(\e\
    [31m\"[\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                      ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value contains is not a member of Boolean\n\
    \e[31m\e[31m-- Error: /tmp/tmpx80xu_6j.scala:30:108 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsNestings\e\
    [0m = openBracketsNestings.filter(_.contains(\e[31m\"]\"\e[0m)).map(_.contains(\e\
    [31m\"[\"\e[0m))\n\e[31m\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.length\n        val closeBracketsCount\
    \ = closeBrackets.length\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5t3am4oy.scala:30)\n\tat Problem.main(tmp5t3am4oy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsLength = brackets.length\n  \
    \      val nestedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val\
    \ nestedBracketsLength = nestedBrackets.length\n        val validSubsequence =\
    \ nestedBrackets.filter(x => x.contains(\"[\"))\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = validSubsequence.length\n\
    \        val validSubsequenceLength = validSubsequence.length\n        val validSubsequenceLength\
    \ = validSubsequence.length\n        val validSubsequenceLength = valid\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa02o94e.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvalidSubsequenceLength\e\
    [0m = validSubsequence.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidSubsequenceLength is already defined as \e[33mvalue\e\
    [0m \e[35mvalidSubsequenceLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa02o94e.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvalidSubsequenceLength\e\
    [0m = validSubsequence.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidSubsequenceLength is already defined as \e[33mvalue\e\
    [0m \e[35mvalidSubsequenceLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa02o94e.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvalidSubsequenceLength\e\
    [0m = validSubsequence.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidSubsequenceLength is already defined as \e[33mvalue\e\
    [0m \e[35mvalidSubsequenceLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa02o94e.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvalidSubsequenceLength\e\
    [0m = validSubsequence.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidSubsequenceLength is already defined as \e[33mvalue\e\
    [0m \e[35mvalidSubsequenceLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa02o94e.scala:30:"
  stdout: ''
  timestamp: 1660028854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val openBrackets = brackets.filter(_.startsWith(\"\
    [\")).length\n        val closeBrackets = brackets.filter(_.endsWith(\"]\")).length\n\
    \        val isNested = openBrackets == closeBrackets\n        val isNestedOrNot\
    \ = openBrackets > closeBrackets\n        isNested || isNestedOrNot\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie25izs6.scala:30)\n\tat Problem.main(tmpie25izs6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        var openBracketsCount = 0\n        var closeBracketsCount = 0\n\
    \        for(i <- 0 until string.length){\n            val c = string.charAt(i)\n\
    \            if(c == '[') openBracketsCount += 1\n            else if(c == ']')\
    \ closeBracketsCount += 1\n            else if(c == '[') openBrackets += 1\n \
    \           else if(c == ']') closeBrackets += 1\n            if(c == '[' && openBracketsCount\
    \ == closeBracketsCount) brackets += c\n        }\n        brackets.toList.forall(c\
    \ => c == '[' && openBracketsCount == closeBracketsCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0c9og8qe.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.split(\"\\\\[|\\\\]|\\\\{|\\\
    \\}\")).map(x => x.length)\n        val bracketsNestingCount = bracketsNestings.sum\n\
    \        val bracketsNestingSum = bracketsNestings.reduce((x,y) => x + y)\n  \
    \      val bracketsNestingSumCount = bracketsNestingSum.count\n        val bracketsNestingSumCount2\
    \ = bracketsNestingSumCount * bracketsNestingCount\n        val bracketsNestingSumCount3\
    \ = bracketsNestingSumCount2 * bracketsNestingCount\n        val bracketsNestingSumCount4\
    \ = bracketsNestingSumCount3 * bracketsNestingCount\n        val bracketsNestingSumCount5\
    \ = bracketsNestingSumCount4 * bracketsNestingCount\n        val bracketsNestingSumCount6\
    \ = bracketsNestingSumCount5 * bracketsNestingCount\n        val bracketsNestingSumCount7\
    \ = bracketsNestingSumCount6 * bracketsNestingCount\n        val bracketsNestingSumCount8\
    \ = bracketsNestingSumCount7 * bracketsNestingCount\n        val bracketsNestingSumCount9\
    \ = bracketsNestingSumCount8 * bracketsNestingCount\n        val bracketsNestingSumCount10\
    \ = bracketsNestingSumCount9 * bracketsNestingCount\n        val bracketsNestingSumCount11\
    \ = bracketsNestingSumCount10 * bracketsNestingCount\n        val bracketsNestingSumCount12\
    \ = bracketsNestingSumCount11 * bracketsNestingCount\n        val bracketsNestingSumCount13\
    \ = bracketsNestingSumCount12 * bracketsNestingCount\n        val bracketsNestingSumCount14\
    \ = bracketsNestingSumCount13 * bracketsNestingCount\n        val bracketsNestingSumCount15\
    \ = bracketsNestingSumCount14 * bracketsNestingCount\n        val bracketsNestingSumCount16\
    \ = bracketsNestingSumCount15 * bracketsNestingCount\n        val bracketsNestingSumCount17\
    \ = bracketsNe\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gznvsc5.scala:25:57 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSumCount\e\
    [0m = bracketsNestingSum.count\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue count is not\
    \ a member of Int - did you mean bracketsNestingSum.toInt?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7gznvsc5.scala:41:40 ------------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSumCount17\e[0m\
    \ = bracketsNe\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Not found: bracketsNe\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7gznvsc5.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.length\n        val closeBracketsCount\
    \ = closeBrackets.length\n        val openBracketsNestings = openBrackets.map(_.length)\n\
    \        val closeBracketsNestings = closeBrackets.map(_.length)\n        val\
    \ openBracketsNestingCount = openBracketsNestings.sum\n        val closeBracketsNestingCount\
    \ = closeBracketsNestings.sum\n        val isNested = openBracketsNestingCount\
    \ >= closeBracketsNestingCount\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiq8wm5vg.scala:33)\n\tat Problem.main(tmpiq8wm5vg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.map(_.length).sum\n        val closeBracketsCount\
    \ = closeBrackets.map(_.length).sum\n        val isNested = openBracketsCount\
    \ != closeBracketsCount\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp55mgvs6i.scala:30)\n\tat Problem.main(tmp55mgvs6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\"))\n        val\
    \ bracketsNestingsCount = bracketsNestings.length\n        val bracketsNestingsNestings\
    \ = bracketsNestings.map(x => x.split(\"\\\\[\"))\n        val bracketsNestingsNestingsCount\
    \ = bracketsNestingsNestings.length\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount2 = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount3 = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount4\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount5 = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount6 = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount7\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount8 = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount9 = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount10\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount11 = bracketsNestingsNestings.map(x =>\
    \ x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount12\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNest\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprz338op5.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprz338op5.scala:24:67\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsNestings\e[0m = bracketsNestings.map(\e[36mx\e[0m => x.split(\e\
    [31m\"\\\\[\"\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m     value split\
    \ is not a member of Array[String] - did you mean x.wait?\n\e[31m\e[31m-- Error:\
    \ /tmp/tmprz338op5.scala:24:80 -----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestings\e[0m\
    \ = bracketsNestings.map(\e[36mx\e[0m => x.split(\e[31m\"\\\\[\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \     No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          \
    \                                where:    B is a type variable\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprz338op5.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val closeBrackets = brackets.filter(_.contains(\"[\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwt8of0k1.scala:30)\n\tat Problem.main(tmpwt8of0k1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n        val\
    \ isNested = openBrackets + closeBrackets == bracketsCount\n        isNested\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq9wlcn0y.scala:28)\n\tat Problem.main(tmpq9wlcn0y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsLength = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.contains(\"[\")+x.contains(\"\
    ]\"))\n        val bracketsNestingsLength = bracketsNestings.sum\n        val\
    \ bracketsNestingsSum = bracketsNestings.sum\n        val bracketsNestingsSumLength\
    \ = bracketsNestingsSum.length\n        val bracketsNestingsSumLength2 = bracketsNestingsSumLength*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength3 = bracketsNestingsSumLength2*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength4 = bracketsNestingsSumLength3*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength5 = bracketsNestingsSumLength4*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength6 = bracketsNestingsSumLength5*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength7 = bracketsNestingsSumLength6*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength8 = bracketsNestingsSumLength7*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength9 = bracketsNestingsSumLength8*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength10 = bracketsNestingsSumLength9*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength11 = bracketsNestingsSumLength10*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength12 = bracketsNestingsSumLength11*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength13 = bracketsNestingsSumLength12*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength14 = bracketsNestingsSumLength13*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength15 = bracketsNestingsSumLength14*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength16 = bracketsNestingsSumLength15*bracketsNestingsSumLength\n\
    \        val bracketsNestingsSumLength17 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7o1xbfsr.scala:41:41 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsSumLength17\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7o1xbfsr.scala:22:64\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestings\e[0m = brackets.map(\e[36mx\e[0m => x.contains(\e[31m\"[\"\
    \e[0m)+x.contains(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of Boolean, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp7o1xbfsr.scala:22:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestings\e[0m =\
    \ brackets.map(\e[36mx\e[0m => x.contains(\e[31m\"[\"\e[0m)+x.contains(\e[31m\"\
    ]\"\e[0m))\n\e[31m\e[31m   |\e[0m                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7o1xbfsr.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty).map(_.toInt)\n        val nestings\
    \ = brackets.foldLeft(List[Int]())((acc, b) => acc :+ b)\n        nestings.forall(nesting\
    \ => nesting > 0 && nesting < brackets.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"]]\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmplr0p782v.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.isNested(tmplr0p782v.scala:20)\n\
    \tat Problem$.main(tmplr0p782v.scala:25)\n\tat Problem.main(tmplr0p782v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val validBrackets = nestedBrackets.filter(_.contains(\"[\")) \n\
    \        val validBracketsCount = validBrackets.size\n        val validBracketsCount2\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount3\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount4\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount5\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount6\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount7\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount8\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount9\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount10\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount11\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount12\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount13\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount14\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount15\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount16\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount17\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount18\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount19\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount20\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount21\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBracketsCount22\
    \ = validBrackets.filter(_.contains(\"]\")).size\n        val validBracketsCount23\
    \ = validBrackets.filter(_.contains(\"[\")).size\n        val validBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpth0jz05b.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpth0jz05b.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"[\") && x.contains(\"\
    ]\"))\n        val bracketsNestingsCount = bracketsNestings.length\n        val\
    \ bracketsNestingsNestings = bracketsNestings.filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\"))\n        val bracketsNestingsNestingsCount = bracketsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        val bracketsNestingsNestingsNestingsCount\
    \ = (bracketsNestingsNestings.length * bracketsNestingsNestings.length)\n    \
    \    val bracketsNestingsNestingsNestingsCount2 = (bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length)\n     \
    \   val bracketsNestingsNestingsNestingsCount3 = (bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNestingsNestings.length)\n\
    \        val bracketsNestingsNestingsNestingsCount4 = (bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length)\n        val bracketsNestingsNestingsNestingsCount5\
    \ = (bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNestingsNestings.length)\n\
    \        val bracketsNestingsNestingsNestingsCount6 = (bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp230oqsbz.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp230oqsbz.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsNestingsNestingsCount\e[0m = (bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp230oqsbz.scala:32:258\
    \ -----------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsNestingsNestingsCount6\e[0m = (bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNestingsNestings.length\
    \ * bracketsNestingsNestings.length * bracketsNestingsNestings.length * bracketsNest\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                  ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                 Not found: bracketsNest\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp230oqsbz.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val nestings = brackets.filter(x\
    \ => x.contains(\"]\")).map(x => x.split(\"]\").map(_.trim).toList)\n        nestings.forall(nesting\
    \ => nesting.forall(x => brackets.contains(x)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm8hazwia.scala:26)\n\tat Problem.main(tmpm8hazwia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val validBrackets = nestedBrackets.filter(x => x.contains(\"\
    [\"))\n        val validBracketsCount = validBrackets.size\n        val validBracketsCount2\
    \ = validBrackets.filter(x => x.contains(\"]\")).size\n        val validBracketsCount3\
    \ = validBrackets.filter(x => x.contains(\"[\")).size\n        val validBracketsCount4\
    \ = validBrackets.filter(x => x.contains(\"]\")).filter(x => x.contains(\"[\"\
    )).size\n        val validBracketsCount5 = validBrackets.filter(x => x.contains(\"\
    ]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"]\")).size\n   \
    \     val validBracketsCount6 = validBrackets.filter(x => x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\")).filter(x => x.contains(\"]\")).filter(x => x.contains(\"\
    [\")).size\n        val validBracketsCount7 = validBrackets.filter(x => x.contains(\"\
    ]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"]\")).filter(x =>\
    \ x.contains(\"[\")).filter(x => x.contains(\"]\")).size\n        val validBracketsCount8\
    \ = validBrackets.filter(x => x.contains(\"]\")).filter(x => x.contains(\"[\"\
    )).filter(x => x.contains(\"]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"\
    ]\")).filter(x => x.contains(\"[\")).size\n        val validBracketsCount9 = validBrackets.filter(x\
    \ => x.contains(\"]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"\
    ]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"]\")).filter(x =>\
    \ x.contains(\"[\")).filter(x => x.contains(\"]\")).size\n        val validBracketsCount10\
    \ = validBrackets.filter(x => x.contains(\"]\")).filter(x => x.contains(\"[\"\
    )).filter(x => x.contains(\"]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"\
    ]\")).filter(x => x.contains(\"[\")).filter(x => x.contains(\"]\")).filter(x =>\
    \ x.contains(\"[\")).size\n        val validBracketsCount11 = validBrackets.filter(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpngoer4ao.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpngoer4ao.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Use\
    \ a mutable collection to keep track of brackets\n        var brackets = mutable.ListBuffer[String]()\n\
    \        // Iterate through the string\n        for (i <- 0 until string.length)\
    \ {\n            // If the current character is a bracket, add it to the list\n\
    \            if (string.charAt(i) == '[') {\n                brackets += string.charAt(i)\n\
    \            }\n            // If the current character is a bracket, remove it\
    \ from the list\n            else if (string.charAt(i) == ']') {\n           \
    \     brackets -= string.charAt(i)\n            }\n        }\n        // If the\
    \ brackets list is empty, return true\n        if (brackets.isEmpty) {\n     \
    \       return true\n        }\n        // Otherwise, return false\n        else\
    \ {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaarsdb5f.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        var openBracketsCount = 0\n        var closeBracketsCount = 0\n\
    \        var openBracketsCount2 = 0\n        var closeBracketsCount2 = 0\n   \
    \     var openBracketsCount3 = 0\n        var closeBracketsCount3 = 0\n      \
    \  var openBracketsCount4 = 0\n        var closeBracketsCount4 = 0\n        var\
    \ openBracketsCount5 = 0\n        var closeBracketsCount5 = 0\n        var openBracketsCount6\
    \ = 0\n        var closeBracketsCount6 = 0\n        var openBracketsCount7 = 0\n\
    \        var closeBracketsCount7 = 0\n        var openBracketsCount8 = 0\n   \
    \     var closeBracketsCount8 = 0\n        var openBracketsCount9 = 0\n      \
    \  var closeBracketsCount9 = 0\n        var openBracketsCount10 = 0\n        var\
    \ closeBracketsCount10 = 0\n        var openBracketsCount11 = 0\n        var closeBracketsCount11\
    \ = 0\n        var openBracketsCount12 = 0\n        var closeBracketsCount12 =\
    \ 0\n        var openBracketsCount13 = 0\n        var closeBracketsCount13 = 0\n\
    \        var openBracketsCount14 = 0\n        var closeBracketsCount14 = 0\n \
    \       var openBracketsCount15 = 0\n        var closeBracketsCount15 = 0\n  \
    \      var openBracketsCount16 = 0\n        var closeBracketsCount16 = 0\n   \
    \     var openBracketsCount17 = 0\n        var closeBracketsCount17 = 0\n    \
    \    var openBracketsCount18 = 0\n        var closeBracketsCount18 = 0\n     \
    \   var openBracketsCount19 = 0\n        var closeBracketsCount19 = 0\n      \
    \  var openBracketsCount20 = 0\n        var closeBracketsCount20 = 0\n       \
    \ var openBracketsCount21 = 0\n        var closeBracketsCount21 = 0\n        var\
    \ openBracketsCount22 = 0\n        var closeBracketsCount22 = 0\n        var openBracketsCount23\
    \ = 0\n        var closeBracketsCount23 = 0\n        var openBracketsCount24 =\
    \ 0\n        var closeBracketsCount24 = 0\n        var openBracketsCount25 = 0\n\
    \        var closeBracketsCount25 = 0\n        var openBracketsCount26 = 0\n \
    \       var closeBracketsCount26 = 0\n        var openBracketsCount27 = 0\n  \
    \      var closeBracketsCount27 = 0\n        var openBra\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl24bf4yc.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl24bf4yc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl24bf4yc.scala:78:5\
    \ ---------------------\e[0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\")).map(x => x.split(\"]\"))\n        nestings.forall(x => x.length == brackets.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuwxs7q_v.scala:25)\n\tat Problem.main(tmpuwxs7q_v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ != bracketsCount && bracketsCount > 0\n        isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwrnnfmd_.scala:29)\n\tat Problem.main(tmpwrnnfmd_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a mutable collection to hold the brackets found in the string.\n        val\
    \ brackets = mutable.ListBuffer[String]()\n        // Initialize a mutable collection\
    \ to hold the brackets found in the string.\n        val bracketsNesting = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable collection to hold the brackets found in the\
    \ string.\n        val bracketsNotNesting = mutable.ListBuffer[String]()\n   \
    \     // Initialize a mutable collection to hold the brackets found in the string.\n\
    \        val bracketsNotNesting2 = mutable.ListBuffer[String]()\n        // Initialize\
    \ a mutable collection to hold the brackets found in the string.\n        val\
    \ bracketsNotNesting3 = mutable.ListBuffer[String]()\n        // Initialize a\
    \ mutable collection to hold the brackets found in the string.\n        val bracketsNotNesting4\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable collection to\
    \ hold the brackets found in the string.\n        val bracketsNotNesting5 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable collection to hold the brackets found in the\
    \ string.\n        val bracketsNotNesting6 = mutable.ListBuffer[String]()\n  \
    \      // Initialize a mutable collection to hold the brackets found in the string.\n\
    \        val bracketsNotNesting7 = mutable.ListBuffer[String]()\n        // Initialize\
    \ a mutable collection to hold the brackets found in the string.\n        val\
    \ bracketsNotNesting8 = mutable.ListBuffer[String]()\n        // Initialize a\
    \ mutable collection to hold the brackets found in the string.\n        val bracketsNotNesting9\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable collection to\
    \ hold the brackets found in the string.\n        val bracketsNotNesting10 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable collection to hold the brackets found in the\
    \ string.\n        val bracketsNotNesting11 = mutable.ListBuffer[String]()\n \
    \       // Initialize a mutable collection to hold the brackets found in the string.\n\
    \        val bracketsNotNesting12 = mutable.ListBuffer[String]()\n        // Initialize\
    \ a mutable collection to hold the brackets found in the string.\n        val\
    \ bracketsNotNesting13 = mutable.ListBuffer[String]()\n        // Initialize a\
    \ mutable collection to hold the brackets found in the string.\n        val bracketsNotNesting14\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable collection to\
    \ hold the brackets found in the string.\n        val bracketsNotNesting15\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkrhmebrm.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrhmebrm.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrhmebrm.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNesting\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkrhmebrm.scala:25:33 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsNotNesting\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrhmebrm.scala:27:34 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mbracketsNotNesting2\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkrhmebrm.scala:29:34 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mbracketsNotNesting3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660028875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b4_p0mc.scala:30)\n\tat Problem.main(tmp2b4_p0mc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toSet\n        val openBrackets = brackets.filter(x\
    \ => x.startsWith(\"[\")).toSet\n        val closeBrackets = brackets.filter(x\
    \ => x.endsWith(\"]\")).toSet\n        val openBracketsCount = openBrackets.size\n\
    \        val closeBracketsCount = closeBrackets.size\n        val openBracketsNestingCount\
    \ = openBracketsCount - closeBracketsCount\n        val closeBracketsNestingCount\
    \ = closeBracketsCount - openBracketsCount\n        val isNesting = openBracketsNestingCount\
    \ > 0 && closeBracketsNestingCount > 0\n        isNesting\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xk3yltz.scala:31)\n\tat Problem.main(tmp8xk3yltz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n   \
    \     val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n     \
    \   val openBracketsCount = openBrackets\n        val closeBracketsCount = closeBrackets\n\
    \        val openBracketsNesting = (openBracketsCount - closeBracketsCount) >\
    \ 0\n        val closeBracketsNesting = (closeBracketsCount - openBracketsCount)\
    \ > 0\n        val isNesting = openBracketsNesting && closeBracketsNesting\n \
    \       val isNested = openBracketsCount > 0 && closeBracketsCount > 0\n     \
    \   isNesting && isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2m_ybj28.scala:33)\n\tat Problem.main(tmp2m_ybj28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\"))\n        nestings.size > 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf14ou0cl.scala:26)\n\tat Problem.main(tmpf14ou0cl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nestedBrackets = brackets.filter(_.nonEmpty).map(_.split(\"\
    \\\\]\").filter(_.nonEmpty))\n        val nestedBracketsCount = nestedBrackets.map(_.length).sum\n\
    \        val bracketsCount = brackets.length\n        nestedBracketsCount <= bracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb59tsw65.scala:28)\n\tat Problem.main(tmpb59tsw65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nestings = brackets.foldLeft(List[List[String]]())\
    \ {\n            (acc, bracket) =>\n                val nesting = bracket.split(\"\
    \\\\[\").filter(_.nonEmpty)\n                if (nesting.nonEmpty) acc :+ nesting\n\
    \                else acc\n        }\n        nestings.forall(nesting => nesting.forall(nestingElement\
    \ => nestingElement == \"[\")) \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8srimvxn.scala:24:45\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m\
    \ (nesting.nonEmpty) acc :+ nesting\n\e[31m\e[31m   |\e[0m                   \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                Found:    (nesting : Array[String])\n\e[31m   |\e[0m        \
    \                             Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openingBrackets = brackets.filter(x => x.startsWith(\"[\"))\n   \
    \     val closingBrackets = brackets.filter(x => x.endsWith(\"]\"))\n        val\
    \ openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsNestings = openingBrackets.map(x\
    \ => x.split(\"\\\\]\").length).sum\n        val closingBracketsNestings = closingBrackets.map(x\
    \ => x.split(\"\\\\[\").length).sum\n        val isNested = openingBracketsNestings\
    \ == closingBracketsNestings\n        val isNestedOrEmpty = openingBracketsNestings\
    \ > 0 && closingBracketsNestings > 0\n        val isNestedOrEmptyOrEmpty = openingBracketsNestings\
    \ == 0 && closingBracketsNestings == 0\n        val isNestedOrEmptyOrEmptyOrEmpty\
    \ = openingBracketsNestings == 0 && closingBracketsNestings == 0\n        val\
    \ isNestedOrEmptyOrEmptyOrEmptyOrEmpty = openingBracketsNestings == 0 && closingBracketsNestings\
    \ == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = openingBracketsNestings\
    \ == 0 && closingBracketsNestings == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openingBracketsNestings == 0 && closingBracketsNestings == 0\n        val\
    \ isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = openingBracketsNestings\
    \ == 0 && closingBracketsNestings == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openingBracketsNestings == 0 && closingBracketsNestings == 0\n        val\
    \ isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = openingBracketsNestings\
    \ == 0 && closingBracketsNestings == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openingBracketsNestings == 0 && closingBracketsNest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd83e2jw8.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m = openingBracketsNestings == \e[31m0\e[0m && closingBracketsNest\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ is already defined as \e[33mvalue\e[0m \e[35misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpd83e2jw8.scala:39:5 ---------------------\e[0m\e[0m\n\
    \e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.HashSet[String]()\n        val closeBrackets\
    \ = mutable.HashSet[String]()\n        val openBracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[String, Int]()\n  \
    \      val openBracketsCount2 = mutable.HashMap[String, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount3 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount4 = mutable.HashMap[String, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount5 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount6 = mutable.HashMap[String, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount7 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount8 = mutable.HashMap[String, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount9 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount10 = mutable.HashMap[String, Int]()\n        val\
    \ closeBracketsCount10 = mutable.HashMap[String, Int]()\n        val openBracketsCount11\
    \ = mutable.HashMap[String, Int]()\n        val closeBracketsCount11 = mutable.HashMap[String,\
    \ Int]()\n        val openBracketsCount12 = mutable.HashMap[String, Int]()\n \
    \       val closeBracketsCount12 = mutable.HashMap[String, Int]()\n        val\
    \ openBracketsCount13 = mutable.HashMap[String, Int]()\n        val closeBracketsCount13\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount14 = mutable.HashMap[String,\
    \ Int\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1ugm9rq0.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ugm9rq0.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ugm9rq0.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1ugm9rq0.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ugm9rq0.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1ugm9rq0.scala:25:33 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^"
  stdout: ''
  timestamp: 1660028885
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val nestedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val\
    \ nestedBracketsCount = nestedBrackets.length\n        val isNested = bracketsCount\
    \ != nestedBracketsCount\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwrqb7o3v.scala:29)\n\tat Problem.main(tmpwrqb7o3v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount == closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_s8ryx2m.scala:29)\n\tat Problem.main(tmp_s8ryx2m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val nestings = brackets.map(_.split(\"\
    \\\\]\")).map(_.map(_.trim).toList)\n        nestings.forall(nesting => nesting.forall(nestingElement\
    \ => nestingElement.contains(\"[\")))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpilb45r6j.scala:25)\n\tat Problem.main(tmpilb45r6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n        val\
    \ isNested = bracketsCount > 0 && openBrackets > 0 && closeBrackets > 0\n    \
    \    isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9j8dt22.scala:28)\n\tat Problem.main(tmpw9j8dt22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.count\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ > bracketsCount\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rot9px3.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = nestedBracketsCount\
    \ > bracketsCount\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of (String => Boolean) => Int, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        brackets.foreach(x\
    \ => \n            x match {\n                case \"\" => \n                \
    \    stack += x\n                case \"]\" =>\n                    stack += x\n\
    \                case \"][]\" =>\n                    stack += x\n           \
    \     case \"][][]\" =>\n                    stack += x\n                case\
    \ \"][][][]\" =>\n                    stack += x\n                case \"][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][]\" =>\n\
    \                    stack += x\n                case \"][][][][][][]\" =>\n \
    \                   stack += x\n                case \"][][][][][][][]\" =>\n\
    \                    stack += x\n                case \"][][][][][][][][]\" =>\n\
    \                    stack += x\n                case \"][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][][][][][][][]\"\
    \ =>\n                    stack += x\n                case \"][][][][][][][][][][][][][][][][][][][][][][][]\"\
    \ =>\n\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpigjcywlk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpigjcywlk.scala:90:0 ----------------------------\e[0m\e[0m\n\e[31m90\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigjcywlk.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpigjcywlk.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        nestedBrackets.size > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcl780fr8.scala:25)\n\tat Problem.main(tmpcl780fr8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.HashSet[String]()\n        val closeBrackets\
    \ = mutable.HashSet[String]()\n        val validBrackets = mutable.HashSet[String]()\n\
    \        val validNestings = mutable.HashSet[String]()\n        val validNestingCount\
    \ = mutable.HashMap[String, Int]()\n        val validNestingCounts = mutable.HashMap[String,\
    \ Int]()\n        val validNestingCountSum = mutable.HashMap[String, Int]()\n\
    \        val validNestingCountSums = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares2 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares3 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares4 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares5 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares6 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares7 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares8 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares9 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares10 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares11 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares12 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares13 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares14 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares15 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares16 = mutable.HashMap[String, Int]()\n        val\
    \ validNestingCountSumOfSquares17 = mutable.HashMap[String, Int]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp137kctjy.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp137kctjy.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp137kctjy.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp137kctjy.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvalidBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp137kctjy.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvalidNestings\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp137kctjy.scala:26:32 ----------------"
  stdout: ''
  timestamp: 1660028890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.Set[String]()\n        val closeBrackets =\
    \ mutable.Set[String]()\n        val openBracketsCount = mutable.Map[String, Int]()\n\
    \        val closeBracketsCount = mutable.Map[String, Int]()\n        val openBracketsCounts\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCounts = mutable.Map[String,\
    \ Int]()\n        val openBracketsCountMax = mutable.Map[String, Int]()\n    \
    \    val closeBracketsCountMax = mutable.Map[String, Int]()\n        val openBracketsCountMin\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCountMin = mutable.Map[String,\
    \ Int]()\n        val openBracketsCountMinMax = mutable.Map[String, Int]()\n \
    \       val closeBracketsCountMinMax = mutable.Map[String, Int]()\n        val\
    \ openBracketsCountMaxMin = mutable.Map[String, Int]()\n        val closeBracketsCountMaxMin\
    \ = mutable.Map[String, Int]()\n        val openBracketsCountMaxMinMax = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCountMaxMinMax = mutable.Map[String, Int]()\n\
    \        val openBracketsCountMaxMinMaxMin = mutable.Map[String, Int]()\n    \
    \    val closeBracketsCountMaxMinMaxMin = mutable.Map[String, Int]()\n       \
    \ val openBracketsCountMaxMinMaxMinMax = mutable.Map[String, Int]()\n        val\
    \ closeBracketsCountMaxMinMaxMinMax = mutable.Map[String, Int]()\n        val\
    \ openBracketsCountMaxMinMaxMinMaxMin = mutable.Map[String, Int]()\n        val\
    \ closeBracketsCountMaxMinMaxMinMaxMin = mutable.Map[String, Int]()\n        val\
    \ openBracketsCountMaxMinMaxMinMaxMinMax = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCountMaxMinMaxMinMaxMinMax = mutable.Map[String, Int]()\n\
    \        val openBracketsCountMaxMinMaxMinMaxMinMaxMin = mutable.Map[String, Int]()\n\
    \        val closeBracketsCountMaxMinMaxMinMaxMinMaxMin = mutable.Map[String,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu14qcrra.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu14qcrra.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu14qcrra.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu14qcrra.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu14qcrra.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/t"
  stdout: ''
  timestamp: 1660028891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\"))\n        nestings.size > 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf14ou0cl.scala:26)\n\tat Problem.main(tmpf14ou0cl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.Set[String]()\n        val closeBrackets =\
    \ mutable.Set[String]()\n        val valid = mutable.Set[String]()\n        val\
    \ validBrackets = mutable.Set[String]()\n        val validNesting = mutable.Set[String]()\n\
    \        val validNestingBrackets = mutable.Set[String]()\n        val validNestingNesting\
    \ = mutable.Set[String]()\n        val validNestingNestingBrackets = mutable.Set[String]()\n\
    \        val validNestingNestingNesting = mutable.Set[String]()\n        val validNestingNestingNestingBrackets\
    \ = mutable.Set[String]()\n        val validNestingNestingNestingNesting = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingBrackets = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingNesting = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingNestingBrackets = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingNestingNesting = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingNestingNestingBrackets = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingNestingNestingNesting = mutable.Set[String]()\n\
    \        val validNestingNestingNestingNestingNestingNestingNestingBrackets =\
    \ mutable.Set[String]()\n        val validNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = mutable.Set[String]()\n        val validNestingNestingNestingNestingNestingNestingNestingNestingBrackets\
    \ = mutable.Set[String]()\n        val validNestingNestingNestingNesting\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp616l232y.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp616l232y.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp616l232y.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp616l232y.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp616l232y.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvalid\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp616l232y.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvalidBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1660028892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(x => x.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(x => x.contains(\"]\"))\n \
    \       val openBracketsCount = openBrackets.map(x => x.length).sum\n        val\
    \ closeBracketsCount = closeBrackets.map(x => x.length).sum\n        val openBracketsNesting\
    \ = (openBracketsCount - closeBracketsCount) > 0\n        val closeBracketsNesting\
    \ = (closeBracketsCount - openBracketsCount) > 0\n        openBracketsNesting\
    \ && closeBracketsNesting\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeoij5jv5.scala:30)\n\tat Problem.main(tmpeoij5jv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        for(i <- 0 until\
    \ brackets.length){\n            val bracket = brackets(i)\n            if(bracket\
    \ == \"[\"){\n                stack.push(bracket)\n            }else if(bracket\
    \ == \"]\"){\n                val bracket2 = stack.pop()\n                if(bracket2\
    \ != \"[\"){\n                    result += false\n                }\n       \
    \     }\n        }\n        result += true\n        result.length == brackets.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1v1acj32.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1v1acj32.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.length\n\
    \        \n        // If bracketsCount is 0, then there are no brackets in the\
    \ string\n        if (bracketsCount == 0) {\n            return false\n      \
    \  }\n        \n        // If bracketsCount is 1, then there are no brackets in\
    \ the string\n        else if (bracketsCount == 1) {\n            if (brackets(0)\
    \ == \"[\") {\n                stack.push(brackets(0))\n                return\
    \ true\n            }\n            else {\n                return false\n    \
    \        }\n        }\n        \n        // If bracketsCount is greater than 1,\
    \ then there are brackets in the string\n        else {\n            // Iterate\
    \ through brackets\n            for (i <- 0 until bracketsCount) {\n         \
    \       // If brackets(i) is \"[\", then push the brackets(i) onto the stack\n\
    \                if (brackets(i) == \"[\") {\n                    stack.push(brackets(i))\n\
    \                }\n                // If brackets(i) is \"]\", then pop the stack\n\
    \                else if (brackets(i) == \"]\") {\n                    if (stack.nonEmpty)\
    \ {\n                        stack.pop()\n                    }\n            \
    \    }\n                // If brackets(i) is \"]\", then pop the stack\n     \
    \           else if (brackets(i) == \"]\") {\n                    if (stack.nonEmpty)\
    \ {\n                        stack.pop()\n                    }\n            \
    \    }\n                // If brackets(i) is not \"[\", then pop the stack\n \
    \               else {\n                    if (stack.nonEmpty) {\n          \
    \              stack.pop()\n                    }\n                }\n       \
    \     }\n            \n            // If stack is empty, then there are no brackets\
    \ in the string\n            if (stack.nonEmpty) {\n                return false\n\
    \            }\n            else {\n                return true\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbka8nyot.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        val nestingCount = nestings.count(x => x.length == 2)\n   \
    \     nestingCount == nestings.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8bebdmni.scala:26)\n\tat Problem.main(tmp8bebdmni.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n   \
    \     val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n     \
    \   val isNested = openBrackets == closeBrackets\n        return isNested\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyhxji99.scala:29)\n\tat Problem.main(tmpoyhxji99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        nestings.forall(x => x.length == 1 && x.forall(y => y.length\
    \ == 1 && y.forall(z => z == \"[\")))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpypj958p5.scala:22:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        nestings.forall(\e[36mx\e[0m => x.length == \e\
    [31m1\e[0m && x.forall(\e[36my\e[0m => y.length == \e[31m1\e[0m && y.forall(\e\
    [36mz\e[0m => z == \e[31m\"[\"\e[0m)))\n\e[31m\e[31m   |\e[0m                \
    \                                                                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660028895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.size\n\
    \        val isNested = brackets.forall(x => stack.isEmpty || stack.head < x)\n\
    \        val isNesting = brackets.forall(x => stack.isEmpty || stack.head > x)\n\
    \        val isNestingOrNeeded = brackets.forall(x => stack.isEmpty || stack.head\
    \ == x)\n        val isNestingOrNeededOrNeeded = brackets.forall(x => stack.isEmpty\
    \ || stack.head == x || stack.head == stack.pop())\n        val isNestingOrNeededOrNeededOrNeeded\
    \ = brackets.forall(x => stack.isEmpty || stack.head == x || stack.head == stack.pop()\
    \ || stack.head == stack.pop())\n        val isNestingOrNeededOrNeededOrNeededOrNeeded\
    \ = brackets.forall(x => stack.isEmpty || stack.head == x || stack.head == stack.pop()\
    \ || stack.head == stack.pop() || stack.head == stack.pop())\n        val isNestingOrNeededOrNeededOrNeededOrNeededOrNeeded\
    \ = brackets.forall(x => stack.isEmpty || stack.head == x || stack.head == stack.pop()\
    \ || stack.head == stack.pop() || stack.head == stack.pop() || stack.head == stack.pop())\n\
    \        val isNestingOrNeededOrNeededOrNeededOrNeededOrNeededOrNeeded = brackets.forall(x\
    \ => stack.isEmpty || stack.head == x || stack.head == stack.pop() || stack.head\
    \ == stack.pop() || stack.head == stack.pop() || stack.head == stack.pop() ||\
    \ stack.head == stack.pop())\n        val isNestingOrNeededOrNeededOrNeededOrNeededOrNeededOrNeededOrNeeded\
    \ = brackets.forall(x => stack.isEmpty || stack.head == x || stack.head == stack.pop()\
    \ || stack.head == stack.pop() || stack.head == stack.pop() || stack.head == stack.pop()\
    \ || stack.head == stack.pop() || stack.head == stack.pop())\n        val isNestingOrNeededOrNeededOrNeededOrNeededOrNeededOrNeededOrNeededOrNeeded\
    \ = brackets.forall(x => stack.isEmpty || stack.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9kv1z4nn.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9kv1z4nn.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9kv1z4nn.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty).map(_.toInt)\n        val stack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = brackets.count(_ > 0)\n\
    \        val bracketsCount2 = brackets.count(_ > 1)\n        val bracketsCount3\
    \ = brackets.count(_ > 2)\n        val bracketsCount4 = brackets.count(_ > 3)\n\
    \        val bracketsCount5 = brackets.count(_ > 4)\n        val bracketsCount6\
    \ = brackets.count(_ > 5)\n        val bracketsCount7 = brackets.count(_ > 6)\n\
    \        val bracketsCount8 = brackets.count(_ > 7)\n        val bracketsCount9\
    \ = brackets.count(_ > 8)\n        val bracketsCount10 = brackets.count(_ > 9)\n\
    \        val bracketsCount11 = brackets.count(_ > 10)\n        val bracketsCount12\
    \ = brackets.count(_ > 11)\n        val bracketsCount13 = brackets.count(_ > 12)\n\
    \        val bracketsCount14 = brackets.count(_ > 13)\n        val bracketsCount15\
    \ = brackets.count(_ > 14)\n        val bracketsCount16 = brackets.count(_ > 15)\n\
    \        val bracketsCount17 = brackets.count(_ > 16)\n        val bracketsCount18\
    \ = brackets.count(_ > 17)\n        val bracketsCount19 = brackets.count(_ > 18)\n\
    \        val bracketsCount20 = brackets.count(_ > 19)\n        val bracketsCount21\
    \ = brackets.count(_ > 20)\n        val bracketsCount22 = brackets.count(_ > 21)\n\
    \        val bracketsCount23 = brackets.count(_ > 22)\n        val bracketsCount24\
    \ = brackets.count(_ > 23)\n        val bracketsCount25 = brackets.count(_ > 24)\n\
    \        val bracketsCount26 = brackets.count(_ > 25)\n        val bracketsCount27\
    \ = brackets.count(_ > 26)\n        val bracketsCount28 = brackets.count(_ > 27)\n\
    \        val bracketsCount29 = brackets.count(_ > 28)\n        val bracketsCount30\
    \ = brackets.count(_ > 29)\n        val bracketsCount31 = brackets.count(_ > 30)\n\
    \        val bracketsCount32 = brackets.count(_ > 31)\n        val bracketsCount33\
    \ = brackets.count(_ > 32)\n        val bracketsCount34 = brackets.count(_ > 33)\n\
    \        val bracketsCount35 = brackets.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaz5h1k3j.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpaz5h1k3j.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpaz5h1k3j.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val nestedBracketsCount = nestedBrackets.length\n        val bracketsCount\
    \ = brackets.length\n        val isNested = bracketsCount > nestedBracketsCount\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7go27bzi.scala:28)\n\tat Problem.main(tmp7go27bzi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(_.split(\"\\\\\
    ]\")).map(_.length)\n        nestings.sum > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsntm51dt.scala:26)\n\tat Problem.main(tmpsntm51dt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(_.contains(\"\
    ]\")).map(_.split(\"]\")).map(_.length)\n        nestings.sum > 0\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfcp8q_s.scala:25)\n\tat Problem.main(tmpcfcp8q_s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        nestedBrackets.forall(_.contains(\"[\")) == true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1pdib7gy.scala:25)\n\tat Problem.main(tmp1pdib7gy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(x => x.startsWith(\"[\")).length\n  \
    \      val closeBrackets = brackets.filter(x => x.endsWith(\"]\")).length\n  \
    \      val isNested = bracketsCount >= openBrackets && bracketsCount <= closeBrackets\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9f00fb48.scala:28)\n\tat Problem.main(tmp9f00fb48.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.length\n\
    \        val isNested = bracketsCount > 0 && stackCount > 0\n        val isNestingNeeded\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnneeded\
    \ = bracketsCount < stackCount && stackCount > 0\n        val isNestingUnnested\
    \ = bracketsCount < stackCount && stackCount < bracketsCount\n        val isNestingNested\
    \ = bracketsCount > 0 && stackCount < bracketsCount\n        val isNestingUnnestedNesting\
    \ = bracketsCount < stackCount && stackCount < bracketsCount\n        val isNestingNestedNesting\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingUnnestedNestingNesting\
    \ = bracketsCount < stackCount && stackCount > bracketsCount\n        val isNestingNestedNestingNesting\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingUnnestedNestingNestingNesting\
    \ = bracketsCount < stackCount && stackCount > bracketsCount\n        val isNestingNestedNestingNestingNesting\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingUnnestedNestingNestingNestingNesting\
    \ = bracketsCount < stackCount && stackCount > bracketsCount\n        val isNestingNestedNestingNestingNestingNesting\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingUnnestedNestingNestingNestingNestingNesting\
    \ = bracketsCount < stackCount && stackCount > bracketsCount\n        val isNestingNestedNestingNestingNestingNestingNesting\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        val isNestingUnnestedNestingNestingNestingNestingNestingNesting\
    \ = bracketsCount < stackCount && stackCount > bracketsCount\n        val isNestingNestedNestingNestingNestingNestingNestingNestingNesting\
    \ = bracketsCount > 0 && stackCount > bracketsCount\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpebkvb6i0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpebkvb6i0.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.size\n\
    \        val bracketsCount = brackets.size\n        nestedBracketsCount != bracketsCount\
    \ && nestedBracketsCount > 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3ihxss8.scala:28)\n\tat Problem.main(tmpc3ihxss8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val openBracketsNestings = openBrackets.map(x =>\
    \ x.split(\"\\\\]\").length)\n        val closeBracketsNestings = closeBrackets.map(x\
    \ => x.split(\"\\\\]\").length)\n        val openBracketsNestingCount = openBracketsNestings.sum\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.sum\n        val\
    \ openBracketsNestingSum = openBracketsNestings.sum\n        val closeBracketsNestingSum\
    \ = closeBracketsNestings.sum\n        val openBracketsNestingAverage = openBracketsNestings.sum\
    \ / openBracketsCount\n        val closeBracketsNestingAverage = closeBracketsNestings.sum\
    \ / closeBracketsCount\n        val openBracketsNestingMedian = openBracketsNestings.sum\
    \ / openBracketsCount\n        val closeBracketsNestingMedian = closeBracketsNestings.sum\
    \ / closeBracketsCount\n        val openBracketsNestingMinimum = openBracketsNestings.min\n\
    \        val closeBracketsNestingMinimum = closeBracketsNestings.min\n       \
    \ val openBracketsNestingMaximum = openBracketsNestings.max\n        val closeBracketsNestingMaximum\
    \ = closeBracketsNestings.max\n        val openBracketsNestingMedian = openBracketsNestings.sum\
    \ / openBracketsCount\n        val closeBracketsNestingMedian = closeBracketsNestings.sum\
    \ / closeBracketsCount\n        val openBracketsNestingMinimum = openBracketsNestings.min\n\
    \        val closeBracketsNestingMinimum = closeBracketsNestings.min\n       \
    \ val openBracketsNestingMaximum = openBracketsNestings.max\n        val closeBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd0e4p4qi.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0e4p4qi.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestingMedian\e[0m = openBracketsNestings.sum / openBracketsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingMedian is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingMedian\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0e4p4qi.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingMedian\e\
    [0m = closeBracketsNestings.sum / closeBracketsCount\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingMedian is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestingMedian\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0e4p4qi.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingMinimum\e\
    [0m = openBracketsNestings.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingMinimum is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingMinimum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0e4p4qi.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingMinimum\e\
    [0m = closeBracketsNestings.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^"
  stdout: ''
  timestamp: 1660028904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketCounts = mutable.ListBuffer[Int]()\n        val closeBracketCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted2 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted2 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted3 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted3 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted4 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted4 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted5 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted5 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted6 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted6 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted7 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted7 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted8 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted8 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted9 = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted9 = mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk36_cpbl.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpk36_cpbl.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk36_cpbl.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk36_cpbl.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk36_cpbl.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk36_cpbl.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^"
  stdout: ''
  timestamp: 1660028905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val openBrackets = brackets.filter(x\
    \ => x.startsWith(\"[\")).toList\n        val closeBrackets = brackets.filter(x\
    \ => x.endsWith(\"]\")).toList\n        val openBracketsCount = openBrackets.size\n\
    \        val closeBracketsCount = closeBrackets.size\n        val openBracketsNestingCount\
    \ = openBrackets.count(x => x.contains(\"[\"))\n        val closeBracketsNestingCount\
    \ = closeBrackets.count(x => x.contains(\"]\"))\n        val openBracketsNestingNeededCount\
    \ = openBracketsCount - openBracketsNestingCount\n        val closeBracketsNestingNeededCount\
    \ = closeBracketsCount - closeBracketsNestingCount\n        val isNesting = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        isNesting\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjgc9pntb.scala:33)\n\tat Problem.main(tmpjgc9pntb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.Set[String]()\n        val closeBrackets =\
    \ mutable.Set[String]()\n        val openBracketsCount = mutable.Map[String, Int]()\n\
    \        val closeBracketsCount = mutable.Map[String, Int]()\n        val openBracketsCount2\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount2 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount3 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount3 = mutable.Map[String, Int]()\n        val openBracketsCount4\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount4 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount5 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount5 = mutable.Map[String, Int]()\n        val openBracketsCount6\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount6 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount7 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount7 = mutable.Map[String, Int]()\n        val openBracketsCount8\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount8 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount9 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount9 = mutable.Map[String, Int]()\n        val openBracketsCount10\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount10 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount11 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount11 = mutable.Map[String, Int]()\n        val openBracketsCount12\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount12 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount13 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount13 = mutable.Map[String, Int]()\n        val openBracketsCount14\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount14 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount15 = mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzgwy3ujf.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpzgwy3ujf.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzgwy3ujf.scala:22:27 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgwy3ujf.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgwy3ujf.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzgwy3ujf.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.count(\"[\"))\n        val\
    \ bracketsNestingsCount = bracketsNestings.sum\n        val bracketsNestingsSum\
    \ = bracketsNestings.sum\n        val bracketsNestingsSumCount = bracketsNestingsSum.count\n\
    \        val bracketsNestingsSumCountNestings = bracketsNestingsSumCount.filter(x\
    \ => x > 0)\n        val bracketsNestingsSumCountNestingsCount = bracketsNestingsSumCountNestings.sum\n\
    \        val bracketsNestingsSumCountNestingsCountNestings = bracketsNestingsSumCountNestingsCount.filter(x\
    \ => x > 0)\n        val bracketsNestingsSumCountNestingsCountNestingsCount =\
    \ bracketsNestingsSumCountNestingsCountNestings.sum\n        val bracketsNestingsSumCountNestingsCountNestingsCountNestings\
    \ = bracketsNestingsSumCountNestingsCountNestingsCount.filter(x => x > 0)\n  \
    \      val bracketsNestingsSumCountNestingsCountNestingsCountNestingsCount = bracketsNestingsSumCountNestingsCountNestingsCountNestings.sum\n\
    \        val bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestings\
    \ = bracketsNestingsSumCountNestingsCountNestingsCountNestingsCount.filter(x =>\
    \ x > 0)\n        val bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestingsCount\
    \ = bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestings.sum\n\
    \        val bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestingsCountNestings\
    \ = bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestingsCount.filter(x\
    \ => x > 0)\n        val bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestingsCountNestingsCountNestings\
    \ = bracketsNestingsSumCountNestingsCountNestingsCountNestingsCountNestingsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwxggkwv.scala:22:57\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestings\e\
    [0m = brackets.map(\e[36mx\e[0m => x.count(\e[31m\"[\"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                         ^^^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (\e[32m\"\
    [\"\e[0m : String)\n\e[31m   |\e[0m                                          \
    \     Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprwxggkwv.scala:25:59 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mbracketsNestingsSumCount\e[0m = bracketsNestingsSum.count\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue count is not a member of Int - did you mean bracketsNestingsSum.toInt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwxggkwv.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestings = brackets.filter(x =>\
    \ x.contains(\"[\") && x.contains(\"]\"))\n        nestings.size > 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfuikexx.scala:25)\n\tat Problem.main(tmpjfuikexx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nesting = brackets.foldLeft(false)((acc,\
    \ x) => acc && isNesting(x))\n        nesting\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuoxui6jh.scala:21:66 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnesting\e[0m = brackets.foldLeft(\e\
    [31mfalse\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc && isNesting(x))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \         Not found: isNesting\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openingBrackets = brackets.filter(x => x.contains(\"[\"))\n        val\
    \ closingBrackets = brackets.filter(x => x.contains(\"]\"))\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val validBracketsCount = openingBracketsCount + closingBracketsCount\
    \ - 1\n        val validBrackets = openingBrackets.zip(closingBrackets).filter(x\
    \ => x._1 == x._2)\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val validBracketsCount = validBracketsCount.toInt\n\
    \        val validBracketsCount = validBracketsCount.toInt\n        val validBracketsCount\
    \ = validBracketsCount.toInt\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8hstq3a6.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8hstq3a6.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvalidBracketsCount\e[0m\
    \ = validBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mvalidBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8hstq3a6.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvalidBracketsCount\e[0m\
    \ = validBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mvalidBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8hstq3a6.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvalidBracketsCount\e[0m\
    \ = validBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mvalidBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8hstq3a6.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvalidBracketsCount\e[0m\
    \ = validBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidBracketsCount i"
  stdout: ''
  timestamp: 1660028911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val valid = openBrackets.forall(_.contains(\"]\"))\n        val valid2 = closeBrackets.forall(_.contains(\"\
    [\"))\n        val valid3 = openBrackets.forall(_.contains(\"[\"))\n        val\
    \ valid4 = closeBrackets.forall(_.contains(\"]\"))\n        val valid5 = openBrackets.forall(_.contains(\"\
    ]\"))\n        val valid6 = closeBrackets.forall(_.contains(\"[\"))\n        val\
    \ valid7 = openBrackets.forall(_.contains(\"[\"))\n        val valid8 = closeBrackets.forall(_.contains(\"\
    ]\"))\n        val valid9 = openBrackets.forall(_.contains(\"]\"))\n        val\
    \ valid10 = closeBrackets.forall(_.contains(\"[\"))\n        val valid11 = openBrackets.forall(_.contains(\"\
    ]\"))\n        val valid12 = closeBrackets.forall(_.contains(\"[\"))\n       \
    \ val valid13 = openBrackets.forall(_.contains(\"]\"))\n        val valid14 =\
    \ closeBrackets.forall(_.contains(\"[\"))\n        val valid15 = openBrackets.forall(_.contains(\"\
    ]\"))\n        val valid16 = closeBrackets.forall(_.contains(\"[\"))\n       \
    \ val valid17 = openBrackets.forall(_.contains(\"]\"))\n        val valid18 =\
    \ closeBrackets.forall(_.contains(\"[\"))\n        val valid19 = openBrackets.forall(_.contains(\"\
    ]\"))\n        val valid20 = closeBrackets.forall(_.contains(\"[\"))\n       \
    \ val valid21 = openBrackets.forall(_.contains(\"]\"))\n        val valid22 =\
    \ closeBrackets.forall(_.contains(\"[\"))\n        val valid23 = openBrackets.forall(_.contains(\"\
    ]\"))\n        val valid24 = closeBrackets.forall(_.contains(\"[\"))\n       \
    \ val valid25 = openBrackets.forall(_.contains(\"]\"))\n        val valid26 =\
    \ closeBrackets.forall(_.contains(\"[\"))\n        val valid27 = openBrackets.forall(_.contains(\"\
    ]\"))\n        val valid28 = closeBrackets.forall(_.contains(\"[\"))\n       \
    \ val valid29 = openBracket\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00055aiw.scala:51:22 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mvalid29\e[0m = openBracket\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Not found: openBracket\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp00055aiw.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.HashSet[String]()\n\
    \        val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCount = mutable.HashMap[String, Int]()\n        val bracketsCount\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fya3jow.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_fya3jow.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsCount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_fya3jow.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\")).map(x => x.length)\n\
    \        val bracketsNestingCount = bracketsNestings.sum\n        val bracketsNestingSum\
    \ = bracketsNestings.map(x => x.sum).sum\n        val bracketsNestingSumEqualsBracketsCount\
    \ = bracketsNestingSum == bracketsCount\n        val bracketsNestingSumEqualsBracketsCountEqualsBracketsNestingCount\
    \ = bracketsNestingSumEqualsBracketsCount && bracketsNestingCount == bracketsNestings.last.length\n\
    \        val bracketsNestingSumEqualsBracketsCountEqualsBracketsNestingCountEqualsBracketsNestingCount\
    \ = bracketsNestingSumEqualsBracketsCountEqualsBracketsNestingCount && bracketsNestingCountEqualsBracketsNestingCount\
    \ && bracketsNestings.last.sum == bracketsNestings.last.length\n        val bracketsNestingSumEqualsBracketsCountEqualsBracketsNestingCountEqualsBracketsNestingCountEqualsBracketsNestingCount\
    \ = bracketsNestingSumEqualsBracketsCountEqualsBracketsNestingCountEqualsBracketsNestingCount\
    \ && bracketsNestingCountEqualsBracketsNestingCountEqualsBracketsNestingCount\
    \ && bracketsNestings.last.sum == bracketsNestings.last.length\n        bracketsNestingSumEqualsBracketsCountEqualsBracketsNestingCountEqualsBracketsNestingCountEqualsBracketsNestingCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl2d5ddqj.scala:24:61 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSum\e[0m\
    \ = bracketsNestings.map(\e[36mx\e[0m => x.sum).sum\n\e[31m\e[31m   |\e[0m   \
    \                                                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                        value sum is not a member of Int\n\
    \e[31m\e[31m-- Error: /tmp/tmpl2d5ddqj.scala:24:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingSum\e[0m\
    \ = bracketsNestings.map(\e[36mx\e[0m => x.sum).sum\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.split(\"\\\\]\")).map(x =>\
    \ x.length)\n        val nestings = bracketsNestings.sum\n        nestings ==\
    \ bracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppg5z30yu.scala:28)\n\tat Problem.main(tmppg5z30yu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsNesting = brackets.filter(x =>\
    \ x.contains(\"]\")).map(x => x.split(\"]\"))\n        val nestings = bracketsNesting.map(x\
    \ => x.filter(y => y.contains(\"[\")))\n        nestings.forall(x => x.size ==\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa97n1hgm.scala:26)\n\tat Problem.main(tmpa97n1hgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        brackets.foreach\
    \ { bracket =>\n            val bracketIndex = stack.lastOption.map(_.indexOf(bracket)).getOrElse(0)\n\
    \            if (bracketIndex == -1) {\n                stack += bracket\n   \
    \         } else {\n                val bracketToRemove = stack.lastOption.map(_.indexOf(bracket)).getOrElse(-1)\n\
    \                stack += bracket.substring(0, bracketToRemove)\n            \
    \    stack += bracket.substring(bracketToRemove + 1)\n            }\n        }\n\
    \        stack.foreach { bracket =>\n            val bracketIndex = stack.lastOption.map(_.indexOf(bracket)).getOrElse(0)\n\
    \            if (bracketIndex == -1) {\n                result += false\n    \
    \        } else {\n                val bracketToRemove = stack.lastOption.map(_.indexOf(bracket)).getOrElse(-1)\n\
    \                stack += bracket.substring(0, bracketToRemove)\n            \
    \    stack += bracket.substring(bracketToRemove + 1)\n                result +=\
    \ true\n            }\n        }\n        result.forall(identity)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgog3wtzq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgog3wtzq.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(_.split(\"\\\\]\"))\n        val bracketsNestingsCount\
    \ = bracketsNestings.length\n        val nestings = bracketsNestings.map(_.length)\n\
    \        val nestingsCount = nestings.length\n        nestingsCount > 0 && nestingsCount\
    \ < bracketsCount && nestings.sum < bracketsNestingsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zilzzxg.scala:29)\n\tat Problem.main(tmp1zilzzxg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val openBrackets = brackets.filter(_.startsWith(\"\
    [\")).length\n        val closeBrackets = brackets.filter(_.endsWith(\"]\")).length\n\
    \        val openBracketsCount = openBrackets\n        val closeBracketsCount\
    \ = closeBrackets\n        val isNested = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested2 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested3 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested4 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested5 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested6 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested7 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested8 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested9 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested10 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested11 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested12 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested13 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested14 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested15 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested16 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested17 = openBracketsCount == closeBracketsCount\
    \ && openBracketsCount > 0\n        val isNested18 = openBracketsCount == closeBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpttjjs2xu.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        nestings.forall(x => x.length == 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_dq45gi.scala:25)\n\tat Problem.main(tmpi_dq45gi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.ListBuffer[String]()\n\
    \        val bracketCount = mutable.Map[String, Int]()\n        val openBracketCount\
    \ = mutable.Map[String, Int]()\n        val closeBracketCount = mutable.Map[String,\
    \ Int]()\n        val openBrackets = mutable.Map[String, Int]()\n        val closeBrackets\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount = mutable.Map[String, Int]()\n      \
    \  val openBracketsCount2 = mutable.Map[String, Int]()\n        val closeBracketsCount2\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount3 = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount3 = mutable.Map[String, Int]()\n     \
    \   val openBracketsCount4 = mutable.Map[String, Int]()\n        val closeBracketsCount4\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount5 = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount5 = mutable.Map[String, Int]()\n     \
    \   val openBracketsCount6 = mutable.Map[String, Int]()\n        val closeBracketsCount6\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount7 = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount7 = mutable.Map[String, Int]()\n     \
    \   val openBracketsCount8 = mutable.Map[String, Int]()\n        val closeBracketsCount8\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount9 = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount9 = mutable.Map[String, Int]()\n     \
    \   val openBracketsCount10 = mutable.Map[String, Int]()\n        val closeBracketsCount10\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount11 = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount11 = mutable.Map[String, Int]()\n    \
    \    val openBracketsCount12 = mutable.Map[String, Int]()\n        val closeBracketsCount12\
    \ = mutable.Map[String, Int]()\n        val openBracketsCount13 = mutable.Map[String,\
    \ Int]()\n        val closeBracketsCount13 = mutable.Map[String, Int]()\n    \
    \    val open\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1qei90um.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qei90um.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qei90um.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qei90um.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketCount\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1qei90um.scala:23:31 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qei90um.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketCount\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1660028916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).filter(_.nonEmpty)\n        val bracketsNestings\
    \ = brackets.map(_.split(\"\\\\]\").map(_.trim).filter(_.nonEmpty))\n        val\
    \ nestings = bracketsNestings.map(_.map(_.split(\"\\\\[\").map(_.trim).filter(_.nonEmpty)))\n\
    \        nestings.forall(nesting => nesting.forall(nestingElement => nestingElement.nonEmpty))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpez5euhqe.scala:27)\n\tat Problem.main(tmpez5euhqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsStack = mutable.Stack[String]()\n        val bracketsStack2\
    \ = mutable.Stack[String]()\n        val bracketsStack3 = mutable.Stack[String]()\n\
    \        val bracketsStack4 = mutable.Stack[String]()\n        val bracketsStack5\
    \ = mutable.Stack[String]()\n        val bracketsStack6 = mutable.Stack[String]()\n\
    \        val bracketsStack7 = mutable.Stack[String]()\n        val bracketsStack8\
    \ = mutable.Stack[String]()\n        val bracketsStack9 = mutable.Stack[String]()\n\
    \        val bracketsStack10 = mutable.Stack[String]()\n        val bracketsStack11\
    \ = mutable.Stack[String]()\n        val bracketsStack12 = mutable.Stack[String]()\n\
    \        val bracketsStack13 = mutable.Stack[String]()\n        val bracketsStack14\
    \ = mutable.Stack[String]()\n        val bracketsStack15 = mutable.Stack[String]()\n\
    \        val bracketsStack16 = mutable.Stack[String]()\n        val bracketsStack17\
    \ = mutable.Stack[String]()\n        val bracketsStack18 = mutable.Stack[String]()\n\
    \        val bracketsStack19 = mutable.Stack[String]()\n        val bracketsStack20\
    \ = mutable.Stack[String]()\n        val bracketsStack21 = mutable.Stack[String]()\n\
    \        val bracketsStack22 = mutable.Stack[String]()\n        val bracketsStack23\
    \ = mutable.Stack[String]()\n        val bracketsStack24 = mutable.Stack[String]()\n\
    \        val bracketsStack25 = mutable.Stack[String]()\n        val bracketsStack26\
    \ = mutable.Stack[String]()\n        val bracketsStack27 = mutable.Stack[String]()\n\
    \        val bracketsStack28 = mutable.Stack[String]()\n        val bracketsStack29\
    \ = mutable.Stack[String]()\n        val bracketsStack30 = mutable.Stack[String]()\n\
    \        val bracketsStack31 = mutable.Stack[String]()\n        val bracketsStack32\
    \ = mutable.Stack[String]()\n        val bracketsStack33 = mutable.Stack[String]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptu84u1ql.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptu84u1ql.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptu84u1ql.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsStack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu84u1ql.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsStack2\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu84u1ql.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsStack3\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu84u1ql.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsStack4\e[0m = mutable.Stack[\e\
    [35mSt"
  stdout: ''
  timestamp: 1660028918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nesting = brackets.map(_.split(\"\\\\\
    ]\")).map(_.length).sum\n        nesting > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_4tzcde_.scala:26)\n\tat Problem.main(tmp_4tzcde_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0btef15_.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m20 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m21 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ > 0 && bracketsCount > nestedBracketsCount\n        isNested\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cwe1zlo.scala:29)\n\tat Problem.main(tmp0cwe1zlo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val openBrackets = brackets.filter(x\
    \ => x.equals(\"[\"))\n        val closeBrackets = brackets.filter(x => x.equals(\"\
    ]\"))\n        val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3n2tcxb.scala:29)\n\tat Problem.main(tmpq3n2tcxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fipkwvh.scala:30)\n\tat Problem.main(tmp4fipkwvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x == \"[\").length\n        val\
    \ closeBrackets = brackets.filter(x => x == \"]\").length\n        val isNested\
    \ = openBrackets > 0 && closeBrackets > 0 && openBrackets == closeBrackets\n \
    \       isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyoj1pzyz.scala:28)\n\tat Problem.main(tmpyoj1pzyz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\"))\n        nestings.size > 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf14ou0cl.scala:26)\n\tat Problem.main(tmpf14ou0cl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.map(_.length).sum\n        val closeBracketsCount\
    \ = closeBrackets.map(_.length).sum\n        val isNested = openBracketsCount\
    \ != closeBracketsCount\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppoe947xo.scala:30)\n\tat Problem.main(tmppoe947xo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val openBracketsCount =\
    \ brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount2\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount2\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount3\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount3\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount4\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount4\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount5\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount5\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount6\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount6\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount7\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount7\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount8\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount8\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount9\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount9\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount10\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount10\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount11\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount11\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount12\
    \ = brackets.filter(_.contains(\"[\").toList.length\n        val closeBracketsCount12\
    \ = brackets.filter(_.contains(\"]\").toList.length\n        val openBracketsCount13\
    \ = brackets.filter(_.contains(\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp09sr6a74.scala:24:8 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m\
    \ = brackets.filter(_.contains(\e[31m\"]\"\e[0m).toList.length\n\e[31m\e[31m \
    \  |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\
    \e[31m\e[31m-- Error: /tmp/tmp09sr6a74.scala:47:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount13\e[0m\
    \ = brackets.filter(_.contains(\"\n\e[31m\e[31m   |\e[0m                     \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                    unclosed string literal\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp09sr6a74.scala:21:20 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp09sr6a74.scala:23:64 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ brackets.filter(_.contains(\e[31m\"[\"\e[0m).toList.length\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value toList is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09sr6a74.scala:66:1\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(_.contains(\"\
    [\") && _.contains(\"]\"))\n        val validBrackets = nestedBrackets.filter(_.contains(\"\
    [\") && _.contains(\"]\"))\n        val validBracketsCount = validBrackets.size\n\
    \        val validBracketsCountInString = validBracketsCount.toString.toInt\n\
    \        val validBracketsCountInString2 = validBracketsCountInString.toString.toInt\n\
    \        val validBracketsCountInString3 = validBracketsCountInString2.toString.toInt\n\
    \        val validBracketsCountInString4 = validBracketsCountInString3.toString.toInt\n\
    \        val validBracketsCountInString5 = validBracketsCountInString4.toString.toInt\n\
    \        val validBracketsCountInString6 = validBracketsCountInString5.toString.toInt\n\
    \        val validBracketsCountInString7 = validBracketsCountInString6.toString.toInt\n\
    \        val validBracketsCountInString8 = validBracketsCountInString7.toString.toInt\n\
    \        val validBracketsCountInString9 = validBracketsCountInString8.toString.toInt\n\
    \        val validBracketsCountInString10 = validBracketsCountInString9.toString.toInt\n\
    \        val validBracketsCountInString11 = validBracketsCountInString10.toString.toInt\n\
    \        val validBracketsCountInString12 = validBracketsCountInString11.toString.toInt\n\
    \        val validBracketsCountInString13 = validBracketsCountInString12.toString.toInt\n\
    \        val validBracketsCountInString14 = validBracketsCountInString13.toString.toInt\n\
    \        val validBracketsCountInString15 = validBracketsCountInString14.toString.toInt\n\
    \        val validBracketsCountInString16 = validBracketsCountInString15.toString.toInt\n\
    \        val validBracketsCountInString17 = validBracketsCountInString16.toString.toInt\n\
    \        val validBracketsCountInString18 = validBracketsCountInString17.toString.toInt\n\
    \        val validBracketsCountInString19 = validBracketsCountInString18.toString.toInt\n\
    \        val validBracketsCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmii01bqr.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpmii01bqr.scala:21:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnestedBrackets\e[0m = brackets.filter(_.contains(\e[31m\"[\"\e[0m) &&\
    \ _.contains(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmpmii01bqr.scala:22:50 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvalidBrackets\e[0m = nestedBrackets.filter(_.contains(\e\
    [31m\"[\"\e[0m) && _.contains(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmii01bqr.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val nestedBracketsCount = nestedBrackets.count(_ == \"[\")\n  \
    \      val nestedBracketsCount2 = nestedBrackets.count(_ == \"[\")\n        val\
    \ nestedBracketsCount3 = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount4\
    \ = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount5 = nestedBrackets.count(_\
    \ == \"[\")\n        val nestedBracketsCount6 = nestedBrackets.count(_ == \"[\"\
    )\n        val nestedBracketsCount7 = nestedBrackets.count(_ == \"[\")\n     \
    \   val nestedBracketsCount8 = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount9\
    \ = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount10 = nestedBrackets.count(_\
    \ == \"[\")\n        val nestedBracketsCount11 = nestedBrackets.count(_ == \"\
    [\")\n        val nestedBracketsCount12 = nestedBrackets.count(_ == \"[\")\n \
    \       val nestedBracketsCount13 = nestedBrackets.count(_ == \"[\")\n       \
    \ val nestedBracketsCount14 = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount15\
    \ = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount16 = nestedBrackets.count(_\
    \ == \"[\")\n        val nestedBracketsCount17 = nestedBrackets.count(_ == \"\
    [\")\n        val nestedBracketsCount18 = nestedBrackets.count(_ == \"[\")\n \
    \       val nestedBracketsCount19 = nestedBrackets.count(_ == \"[\")\n       \
    \ val nestedBracketsCount20 = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount21\
    \ = nestedBrackets.count(_ == \"[\")\n        val nestedBracketsCount22 = nestedBrackets.count(_\
    \ == \"[\")\n        val nestedBracketsCount23 = nestedBrackets.count(_ == \"\
    [\")\n        val nestedBracketsCount24 = nestedBrackets.count(_ == \"[\")\n \
    \       val nestedBracketsCount25 = nestedBrackets.count(_ == \"[\")\n       \
    \ val nestedBracketsCount26 = nestedBrackets.count(_ == \"[\")\n        val nestedBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbh6pa81k.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbh6pa81k.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b4_p0mc.scala:30)\n\tat Problem.main(tmp2b4_p0mc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        for(i <- 0 until\
    \ brackets.length){\n            if(brackets(i) == \"[\"){\n                stack\
    \ += \"[\"\n            }else if(brackets(i) == \"]\"){\n                stack\
    \ += \"]\"\n            }else{\n                while(stack.nonEmpty){\n     \
    \               if(stack.head == \"[\"){\n                        stack += \"\
    ]\"\n                    }else if(stack.head == \"]\"){\n                    \
    \    stack += \"[\"\n                    }else{\n                        stack\
    \ += stack.head\n                    }\n                }\n                stack\
    \ += brackets(i)\n            }\n        }\n        val isNested = stack.nonEmpty\n\
    \        result.append(isNested)\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_v5hp66.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx_v5hp66.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.size\n\
    \        val bracketsCount = brackets.size\n        val isNested = nestedBracketsCount\
    \ > 0 && bracketsCount > nestedBracketsCount\n        isNested\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpduyed4fb.scala:29)\n\tat Problem.main(tmpduyed4fb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        nestedBrackets.size > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcl780fr8.scala:25)\n\tat Problem.main(tmpcl780fr8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        for(i <- 0 until\
    \ brackets.length){\n            val bracket = brackets(i)\n            if(bracket\
    \ == \"[\"){\n                stack += bracket\n            }else if(bracket ==\
    \ \"]\"){\n                val popped = stack.pop()\n                if(popped\
    \ == \"[\"){\n                    result += (true)\n                }else{\n \
    \                   result += (false)\n                }\n            }\n    \
    \    }\n        result.length == brackets.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgxrum6p.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqgxrum6p.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.ListBuffer[String]()\n\
    \        val bracketCount = mutable.Map[String, Int]()\n        val openBrackets\
    \ = mutable.ListBuffer[String]()\n        val openBracketCount = mutable.Map[String,\
    \ Int]()\n        val closeBrackets = mutable.ListBuffer[String]()\n        val\
    \ closeBracketCount = mutable.Map[String, Int]()\n        val openBracketsCount\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount2 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount2 = mutable.Map[String, Int]()\n        val openBracketsCount3\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount3 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount4 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount4 = mutable.Map[String, Int]()\n        val openBracketsCount5\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount5 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount6 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount6 = mutable.Map[String, Int]()\n        val openBracketsCount7\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount7 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount8 = mutable.Map[String, Int]()\n      \
    \  val closeBracketsCount8 = mutable.Map[String, Int]()\n        val openBracketsCount9\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount9 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount10 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount10 = mutable.Map[String, Int]()\n        val openBracketsCount11\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount11 = mutable.Map[String,\
    \ Int]()\n        val openBracketsCount12 = mutable.Map[String, Int]()\n     \
    \   val closeBracketsCount12 = mutable.Map[String, Int]()\n        val openBracketsCount13\
    \ = mutable.Map[String, Int]()\n        val closeBracketsCount13 = mutable.Map[String,\
    \ Int]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajj4ddnp.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpajj4ddnp.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpajj4ddnp.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajj4ddnp.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpajj4ddnp.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajj4ddnp.scala:25:28"
  stdout: ''
  timestamp: 1660028930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\")).map(x => x.split(\"]\"))\n        nestings.forall(x => x.length == 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoqzlailf.scala:25)\n\tat Problem.main(tmpoqzlailf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val validBrackets = openBrackets.filter(_.contains(\"]\"))\n        val validCloseBrackets\
    \ = closeBrackets.filter(_.contains(\"]\"))\n        val validBracketsCount =\
    \ validBrackets.size\n        val validCloseBracketsCount = validCloseBrackets.size\n\
    \        val validBracketsNestings = validBrackets.filter(_.contains(\"]\")).map(_.split(\"\
    ]\")).filter(_.contains(\"[\"))\n        val validCloseBracketsNestings = validCloseBrackets.filter(_.contains(\"\
    ]\")).map(_.split(\"]\")).filter(_.contains(\"[\"))\n        val validBracketsNestingsCount\
    \ = validBracketsNestings.size\n        val validCloseBracketsNestingsCount =\
    \ validCloseBracketsNestings.size\n        val validBracketsNestingsCount = validBracketsNestings.size\n\
    \        val validCloseBracketsNestingsCount = validCloseBracketsNestings.size\n\
    \        val validBracketsNestingsCount = validBracketsNestings.size\n       \
    \ val validCloseBracketsNestingsCount = validCloseBracketsNestings.size\n    \
    \    val validBracketsNestingsCount = validBracketsNestings.size\n        val\
    \ validCloseBracketsNestingsCount = validCloseBracketsNestings.size\n        val\
    \ validBracketsNestingsCount = validBracketsNestings.size\n        val validCloseBracketsNestingsCount\
    \ = validCloseBracketsNestings.size\n        val validBracketsNestingsCount =\
    \ validBracketsNestings.size\n        val validCloseBracketsNestingsCount = validCloseBracketsNestings.size\n\
    \        val validBracketsNestingsCount = validBracketsNestings.size\n       \
    \ val validCloseBracketsNestingsCount = validCloseBracketsNestings.size\n    \
    \    val validBracketsNestingsCount = validBracketsNestings.size\n        val\
    \ validCloseBracketsNestingsCount = validCloseBracketsNestings.size\n        val\
    \ validBracketsNestingsCount = validBracketsNestings.size\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdsap9g8b.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpdsap9g8b.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvalidBracketsNestingsCount\e\
    [0m = validBracketsNestings.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidBracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mvalidBracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdsap9g8b.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvalidCloseBracketsNestingsCount\e\
    [0m = validCloseBracketsNestings.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidCloseBracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mvalidCloseBracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdsap9g8b.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvalidBracketsNestingsCount\e[0m = validBracketsNestings.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidBracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mvalidBracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdsap9g8b.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvalidCloseBracketsNesting"
  stdout: ''
  timestamp: 1660028933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        for(i <- 0 until\
    \ brackets.length){\n            if(brackets(i) != \"[\"){\n                stack\
    \ += brackets(i)\n            }\n            else{\n                val openBracket\
    \ = stack.pop()\n                if(brackets(i) != \"[\"){\n                 \
    \   stack += brackets(i)\n                }\n                else{\n         \
    \           val closeBracket = stack.pop()\n                    if(openBracket\
    \ == closeBracket){\n                        result += true\n                \
    \    }\n                }\n            }\n        }\n        result.size == brackets.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bzy1x_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7bzy1x_k.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a mutable list of brackets\n        var brackets = mutable.ListBuffer[Char]()\n\
    \        // Initialize a mutable list of brackets nesting\n        var nesting\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevel = mutable.ListBuffer[Int]()\n      \
    \  // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount2 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount3\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount4 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount5\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount6 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount7\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount8 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount9\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount10 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount11\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount12 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount13\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount14 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount15\
    \ = mutable.ListBuffer[Int]()\n        // Initialize a mutable list of brackets\
    \ nesting level\n        var nestingLevelCount16 = mutable.ListBuffer[Int]()\n\
    \        // Initialize a mutable list of brackets nesting level\n        var nestingLevelCount17\
    \ = mutable.ListBuffer[Int]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpieqos1g0.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpieqos1g0.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mnesting\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpieqos1g0.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mnestingLevel\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpieqos1g0.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mnestingLevelCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpieqos1g0.scala:29:33\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e\
    [36mnestingLevelCount2\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpieqos1g0.scala:3"
  stdout: ''
  timestamp: 1660028933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Initialize\
    \ a mutable list to store brackets found.\n        val brackets = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNesting\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting2\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting3 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting4\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting5 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting6\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting7 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting8\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting9 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting10\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting11 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting12\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting13 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting14\
    \ = mutable.ListBuffer[String]()\n        // Initialize a mutable list to store\
    \ brackets found.\n        val bracketsNotNesting15 = mutable.ListBuffer[String]()\n\
    \        // Initialize a mutable list to store brackets found.\n        val bracketsNotNesting16\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbsflhis.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbsflhis.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsNesting\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbsflhis.scala:25:33 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsNotNesting\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkbsflhis.scala:27:34 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mbracketsNotNesting2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbsflhis.scala:29:34 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mbracketsNotNesting3\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-expla"
  stdout: ''
  timestamp: 1660028935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.Set[Int]()\n        val closeBrackets = mutable.Set[Int]()\n\
    \        val openBracketsCount = mutable.Map[Int, Int]()\n        val closeBracketsCount\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount2 = mutable.Map[Int,\
    \ Int]()\n        val closeBracketsCount2 = mutable.Map[Int, Int]()\n        val\
    \ openBracketsCount3 = mutable.Map[Int, Int]()\n        val closeBracketsCount3\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount4 = mutable.Map[Int,\
    \ Int]()\n        val closeBracketsCount4 = mutable.Map[Int, Int]()\n        val\
    \ openBracketsCount5 = mutable.Map[Int, Int]()\n        val closeBracketsCount5\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount6 = mutable.Map[Int,\
    \ Int]()\n        val closeBracketsCount6 = mutable.Map[Int, Int]()\n        val\
    \ openBracketsCount7 = mutable.Map[Int, Int]()\n        val closeBracketsCount7\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount8 = mutable.Map[Int,\
    \ Int]()\n        val closeBracketsCount8 = mutable.Map[Int, Int]()\n        val\
    \ openBracketsCount9 = mutable.Map[Int, Int]()\n        val closeBracketsCount9\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount10 = mutable.Map[Int,\
    \ Int]()\n        val closeBracketsCount10 = mutable.Map[Int, Int]()\n       \
    \ val openBracketsCount11 = mutable.Map[Int, Int]()\n        val closeBracketsCount11\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount12 = mutable.Map[Int,\
    \ Int]()\n        val closeBracketsCount12 = mutable.Map[Int, Int]()\n       \
    \ val openBracketsCount13 = mutable.Map[Int, Int]()\n        val closeBracketsCount13\
    \ = mutable.Map[Int, Int]()\n        val openBracketsCount14 = mutable.Map[Int,\
    \ Int\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb9iadz_k.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9iadz_k.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9iadz_k.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb9iadz_k.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb9iadz_k.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb9iadz_k.scala:25:33 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660028935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val validBrackets = openBrackets.filter(_.contains(\"]\"))\n        val validCloseBrackets\
    \ = closeBrackets.filter(_.contains(\"]\"))\n        val validNesting = validBrackets.filter(_.contains(\"\
    ]\"))\n        val validClosing = validCloseBrackets.filter(_.contains(\"]\"))\n\
    \        val valid = validNesting.filter(_.contains(\"]\"))\n        val validClosingNesting\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosing =\
    \ validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosing\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosingNesting\
    \ = validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosingNesting\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosingNestingClosing\
    \ = validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosingNestingClosing\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosingNestingClosingNesting\
    \ = validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosingNestingClosingNesting\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosingNestingClosingNestingClosing\
    \ = validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosingNestingClosingNestingClosing\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosingNestingClosingNestingClosingNesting\
    \ = validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosingNestingClosingNestingClosingNesting\
    \ = validClosing.filter(_.contains(\"]\"))\n        val validNestingClosingNestingClosingNestingClosingNestingClosing\
    \ = validNesting.filter(_.contains(\"]\"))\n        val validClosingNestingClosingNestingClosingNestingClosingNestingClos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93e8fxxq.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp93e8fxxq.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(_.length).sum\n        val bracketsNestingsInsideBrackets\
    \ = brackets.map(_.map(_.length).sum).sum\n        val bracketsNestingsInsideBracketsNotNesting\
    \ = bracketsNestingsInsideBrackets - bracketsNestings\n        val bracketsNestingsInsideBracketsNotNestingNotNesting\
    \ = bracketsNestingsInsideBracketsNotNesting - bracketsNestings\n        val bracketsNestingsInsideBracketsNotNestingNotNestingNotNesting\
    \ = bracketsNestingsInsideBracketsNotNestingNotNesting - bracketsNestings\n  \
    \      val bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNesting\
    \ = bracketsNestingsInsideBracketsNotNestingNotNestingNotNesting - bracketsNestings\n\
    \        val bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNesting\
    \ = bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNesting - bracketsNestings\n\
    \        val bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNestingNotNesting\
    \ = bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNesting\
    \ - bracketsNestings\n        val bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNesting\
    \ = bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNestingNotNesting\
    \ - bracketsNestings\n        val bracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNesting\
    \ = bracketsNestingsInside\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8yfucsi.scala:23:66 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsInsideBrackets\e\
    [0m = brackets.map(_.map(_.length).sum).sum\n\e[31m\e[31m   |\e[0m           \
    \                                                     ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    value length is not a member of Char\n\
    \e[31m\e[31m-- Error: /tmp/tmpy8yfucsi.scala:23:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsInsideBrackets\e\
    [0m = brackets.map(_.map(_.length).sum).sum\n\e[31m\e[31m   |\e[0m           \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy8yfucsi.scala:31:125\
    \ -----------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsInsideBracketsNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNesting\e\
    [0m = bracketsNestingsInside\n\e[31m\e[31m   |\e[0m                          \
    \                                                                            \
    \                       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                              Not found: bracketsNestingsInside\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8yfucsi.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val openingBracketsCount\
    \ = brackets.filter(_.startsWith(\"[\")).size\n        val closingBracketsCount\
    \ = brackets.filter(_.startsWith(\"]\")).size\n        val openingBracketsCount2\
    \ = brackets.filter(_.startsWith(\"[[\")).size\n        val closingBracketsCount2\
    \ = brackets.filter(_.startsWith(\"]]\")).size\n        val openingBracketsCount3\
    \ = brackets.filter(_.startsWith(\"[[[\")).size\n        val closingBracketsCount3\
    \ = brackets.filter(_.startsWith(\"]]]\")).size\n        val openingBracketsCount4\
    \ = brackets.filter(_.startsWith(\"[[[[\")).size\n        val closingBracketsCount4\
    \ = brackets.filter(_.startsWith(\"]]]]\")).size\n        val openingBracketsCount5\
    \ = brackets.filter(_.startsWith(\"[[[[[\")).size\n        val closingBracketsCount5\
    \ = brackets.filter(_.startsWith(\"]]]]]\")).size\n        val openingBracketsCount6\
    \ = brackets.filter(_.startsWith(\"[[[[[[\")).size\n        val closingBracketsCount6\
    \ = brackets.filter(_.startsWith(\"]]]]]]\")).size\n        val openingBracketsCount7\
    \ = brackets.filter(_.startsWith(\"[[[[[[[\")).size\n        val closingBracketsCount7\
    \ = brackets.filter(_.startsWith(\"]]]]]]]\")).size\n        val openingBracketsCount8\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[\")).size\n        val closingBracketsCount8\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]\")).size\n        val openingBracketsCount9\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[\")).size\n        val closingBracketsCount9\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]\")).size\n        val openingBracketsCount10\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[[\")).size\n        val closingBracketsCount10\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]]\")).size\n        val openingBracketsCount11\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[[[\")).size\n        val closingBracketsCount11\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]]]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9jjam6w3.scala:44:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount11\e\
    [0m = brackets.filter(_.startsWith(\"]]]]]]]]]]]\n\e[31m\e[31m   |\e[0m      \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp9jjam6w3.scala:46:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9jjam6w3.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9jjam6w3.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9jjam6w3.scala:46:4 -------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ]]]]]]]]]]]def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val nestedBracketsCount = nestedBrackets.length\n        val bracketsCount\
    \ = brackets.length\n        val isNested = nestedBracketsCount != bracketsCount\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkey16n55.scala:29)\n\tat Problem.main(tmpkey16n55.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsNesting = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val bracketsNotNesting = brackets.filter(x => !x.contains(\"\
    ]\"))\n        val bracketsNestingCount = bracketsNesting.length\n        val\
    \ bracketsNotNestingCount = bracketsNotNesting.length\n        val bracketsNestingNotNestingCount\
    \ = bracketsNestingCount - bracketsNotNestingCount\n        val bracketsNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingCount + 1\n        val bracketsNestingNotNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingNotNestingCount + 1\n        val bracketsNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingNotNestingNotNestingCount + 1\n        val bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingNotNestingNotNestingNotNestingCount + 1\n       \
    \ val bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount + 1\n\
    \        val bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ + 1\n        val bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ = bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingCount\
    \ + 1\n        val bracketsNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNestingNotNest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32o2zrkt.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp32o2zrkt.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val nestings = brackets.map(x => x.split(\"\\\\]\"))\n        val nestingsCount\
    \ = nestings.length\n        val nestingsCount = nestingsCount.filter(_ != \"\"\
    ).length\n        nestingsCount > bracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo12rjfla.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnestingsCount\e[0m = nestingsCount.filter(_\
    \ != \e[31m\"\"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestingsCount is already defined as \e[33mvalue\e[0m \e[35mnestingsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val nesting = brackets.foldLeft(false)((a,\
    \ b) => a && isNesting(b))\n        nesting\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7tgeyi9w.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnesting\e[0m = brackets.foldLeft(\e\
    [31mfalse\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a && isNesting(b))\n\e[31m\e[31m\
    \   |\e[0m                                                              ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ isNesting\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ != bracketsCount && bracketsCount != 0\n        isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdlhuzk2g.scala:29)\n\tat Problem.main(tmpdlhuzk2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val isNested = openBracketsCount != closeBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b4_p0mc.scala:30)\n\tat Problem.main(tmp2b4_p0mc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val openBrackets = brackets.filter(x\
    \ => x.equals(\"[\"))\n        val closeBrackets = brackets.filter(x => x.equals(\"\
    ]\"))\n        val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val openBracketsNestings = openBrackets.toSet.diff(closeBrackets).toSet.size\n\
    \        val closeBracketsNestings = closeBrackets.toSet.diff(openBrackets).toSet.size\n\
    \        openBracketsCount > 0 && closeBracketsCount > 0 && openBracketsNestings\
    \ > 0 && closeBracketsNestings > 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpid94iv5z.scala:25:59\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e\
    [0m = openBrackets.toSet.diff(closeBrackets).toSet.size\n\e[31m\e[31m   |\e[0m\
    \                                                           ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    (closeBrackets : Array[String])\n\
    \e[31m   |\e[0m                               Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpid94iv5z.scala:26:61\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.toSet.diff(openBrackets).toSet.size\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                Found:    (openBrackets : Array[String])\n\
    \e[31m   |\e[0m                                Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestings = brackets.filter(x =>\
    \ x.contains(\"[\") && x.contains(\"]\"))\n        nestings.size > 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfuikexx.scala:25)\n\tat Problem.main(tmpjfuikexx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(_.split(\"\\\\\
    ]\")).map(_.length).sum\n        nestings > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxkvrdql6.scala:26)\n\tat Problem.main(tmpxkvrdql6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        val openBrackets\
    \ = mutable.ListBuffer[String]()\n        for (i <- 0 until brackets.length) {\n\
    \            val bracket = brackets(i)\n            if (bracket == \"[\") {\n\
    \                stack.push(bracket)\n                openBrackets += bracket\n\
    \            } else if (bracket == \"]\") {\n                if (stack.isEmpty)\
    \ {\n                    result += (openBrackets.toList.length == 0)\n       \
    \         } else {\n                    val bracket2 = stack.pop()\n         \
    \           if (bracket2 == bracket) {\n                        result += (openBrackets.toList.length\
    \ == 0)\n                    } else {\n                        result += (openBrackets.toList.length\
    \ == 1)\n                    }\n                }\n                openBrackets\
    \ -= bracket\n            }\n        }\n        result.toList.length == 0\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsx52lhmv.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsx52lhmv.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsx52lhmv.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        val validBrackets = nestedBrackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        val validBracketsCount =\
    \ validBrackets.size\n        val validBracketsCountInString = validBrackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).size\n        val validBracketsCountInString2\
    \ = validBrackets.filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).size\n        val validBracketsCountInString3\
    \ = validBrackets.filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\")).size\n        val validBracketsCountInString4 = validBrackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\")).filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).size\n        val validBracketsCountInString5\
    \ = validBrackets.filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\")).filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).size\n        val validBracketsCountInString6\
    \ = validBrackets.filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\")).filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\")).size\n        val validBracketsCountInString7 = validBrackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\")).filter(x => x.contains(\"[\") &&\
    \ x.contains(\"]\")).filter(x => x.contains(\"[\") && x.contains(\"]\")).filter(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0wg9ijcv.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0wg9ijcv.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val nestedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val\
    \ nestedBracketsCount = nestedBrackets.length\n        val nestedBracketsCount\
    \ = nestedBracketsCount.toInt\n        val bracketsCount = bracketsCount.toInt\n\
    \        val isNested = bracketsCount > nestedBracketsCount\n        isNested\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqddxyz5y.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsCount\e[0m\
    \ = nestedBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnestedBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqddxyz5y.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = bracketsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val nestedBrackets = mutable.ListBuffer[String]()\n\
    \        brackets.foreach(x => {\n            if (x.contains(\"[\")) nestedBrackets\
    \ += \"[\"\n            if (x.contains(\"]\")) nestedBrackets += \"]\"\n     \
    \       if (x.contains(\"{\")) nestedBrackets += \"{\"\n            if (x.contains(\"\
    }\")) nestedBrackets += \"}\"\n        })\n        nestedBrackets.nonEmpty\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfgs61m0.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnestedBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val openBracketsNestings = openBrackets.filter(_.contains(\"\
    [\"))\n        val closeBracketsNestings = closeBrackets.filter(_.contains(\"\
    ]\"))\n        val openBracketsNestingsCount = openBracketsNestings.size\n   \
    \     val closeBracketsNestingsCount = closeBracketsNestings.size\n        val\
    \ openBracketsNestingsInside = openBracketsNestings.filter(_.contains(\"]\"))\n\
    \        val closeBracketsNestingsInside = closeBracketsNestings.filter(_.contains(\"\
    [\"))\n        val openBracketsNestingsInsideCount = openBracketsNestingsInside.size\n\
    \        val closeBracketsNestingsInsideCount = closeBracketsNestingsInside.size\n\
    \        val openBracketsNestingsInsideNestings = openBracketsNestingsInside.filter(_.contains(\"\
    [\"))\n        val closeBracketsNestingsInsideNestings = closeBracketsNestingsInside.filter(_.contains(\"\
    ]\"))\n        val openBracketsNestingsInsideNestingsCount = openBracketsNestingsInsideNestings.size\n\
    \        val closeBracketsNestingsInsideNestingsCount = closeBracketsNestingsInsideNestings.size\n\
    \        val openBracketsNestingsInsideNestingsNestings = openBracketsNestingsInsideNestings.filter(_.contains(\"\
    ]\"))\n        val closeBracketsNestingsInsideNestingsNestings = closeBracketsNestingsInsideNestings.filter(_.contains(\"\
    [\"))\n        val openBracketsNestingsInsideNestingsNestingsCount = openBracketsNestingsInsideNestingsNestings.size\n\
    \        val closeBracketsNestingsInsideNestingsNestingsCount = closeBracketsNestingsInsideNestingsNestings.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1kls946k.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackSize = bracketsCount\
    \ + 1\n        val stackIsEmpty = stackSize == 0\n        val bracketsIsEmpty\
    \ = brackets.length == bracketsCount\n        val stackIsFull = stackSize == stackIsEmpty\n\
    \        val bracketsIsFull = brackets.length == bracketsCount\n        val stackIsEmptyOrFull\
    \ = stackIsEmpty || stackIsFull\n        val bracketsIsEmptyOrFull = bracketsIsEmpty\
    \ || bracketsIsFull\n        val stackIsEmptyOrFullOrEmpty = stackIsEmptyOrFull\
    \ || stackIsEmpty\n        val bracketsIsEmptyOrFullOrEmpty = bracketsIsEmptyOrFull\
    \ || bracketsIsEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmpty = stackIsEmptyOrFullOrEmpty\
    \ || stackIsEmptyOrEmpty\n        val bracketsIsEmptyOrFullOrEmptyOrEmpty = bracketsIsEmptyOrFullOrEmpty\
    \ || bracketsIsEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmpty\n        val\
    \ bracketsIsEmptyOrFullOrEmptyOrEmptyOrEmpty = bracketsIsEmptyOrFullOrEmptyOrEmpty\
    \ || bracketsIsEmptyOrEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmptyOrEmpty\n\
    \        val bracketsIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty = bracketsIsEmptyOrFullOrEmptyOrEmptyOrEmpty\
    \ || bracketsIsEmptyOrEmptyOrEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmptyOrEmptyOrEmpty\n\
    \        val bracketsIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = bracketsIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty\
    \ || bracketsIsEmptyOrEmptyOrEmptyOrEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphth_ohs8.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmphth_ohs8.scala:26:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstackIsFull\e[0m = stackSize\
    \ == stackIsEmpty\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Int and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphth_ohs8.scala:32:76\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mstackIsEmptyOrFullOrEmptyOrEmpty\e[0m = stackIsEmptyOrFullOrEmpty || stackIsEmptyOrEmpty\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Not found: stackIsEmptyOrEmpty\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphth_ohs8.scala:33:82 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mbracketsIsEmptyOrFullOrEmptyOrEmpty\e\
    [0m = bracketsIsEmptyOrFullOrEmpty || bracketsIsEmptyOrEmpty\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: bracketsIsEmptyOrEmpty\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphth_ohs8.scala:34:90 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mstackIsEmptyOrFullOrEmptyOrEmptyOrEmpty\e\
    [0m = stackIsEmptyOrFullOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmpty\n\e[31m\e\
    [31m   |\e[0m              "
  stdout: ''
  timestamp: 1660028948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closeBrackets = 0\n        var currentChar = 0\n        var currentCharValue\
    \ = 0\n        var currentCharValue2 = 0\n        var currentCharValue3 = 0\n\
    \        var currentCharValue4 = 0\n        var currentCharValue5 = 0\n      \
    \  var currentCharValue6 = 0\n        var currentCharValue7 = 0\n        var currentCharValue8\
    \ = 0\n        var currentCharValue9 = 0\n        var currentCharValue10 = 0\n\
    \        var currentCharValue11 = 0\n        var currentCharValue12 = 0\n    \
    \    var currentCharValue13 = 0\n        var currentCharValue14 = 0\n        var\
    \ currentCharValue15 = 0\n        var currentCharValue16 = 0\n        var currentCharValue17\
    \ = 0\n        var currentCharValue18 = 0\n        var currentCharValue19 = 0\n\
    \        var currentCharValue20 = 0\n        var currentCharValue21 = 0\n    \
    \    var currentCharValue22 = 0\n        var currentCharValue23 = 0\n        var\
    \ currentCharValue24 = 0\n        var currentCharValue25 = 0\n        var currentCharValue26\
    \ = 0\n        var currentCharValue27 = 0\n        var currentCharValue28 = 0\n\
    \        var currentCharValue29 = 0\n        var currentCharValue30 = 0\n    \
    \    var currentCharValue31 = 0\n        var currentCharValue32 = 0\n        var\
    \ currentCharValue33 = 0\n        var currentCharValue34 = 0\n        var currentCharValue35\
    \ = 0\n        var currentCharValue36 = 0\n        var currentCharValue37 = 0\n\
    \        var currentCharValue38 = 0\n        var currentCharValue39 = 0\n    \
    \    var currentCharValue40 = 0\n        var currentCharValue41 = 0\n        var\
    \ currentCharValue42 = 0\n        var currentCharValue43 = 0\n        var currentCharValue44\
    \ = 0\n        var currentCharValue45 = 0\n        var currentCharValue46 = 0\n\
    \        var currentCharValue47 = 0\n        var currentCharValue48 = 0\n    \
    \    var currentCharValue49 = 0\n        var currentCharValue50 = 0\n        var\
    \ currentCharValue51 = 0\n        var currentCharValue52 = 0\n        var currentCharValue53\
    \ = 0\n        var currentCharValue54 = 0\n        var currentCharValue55 = 0\n\
    \        var currentCharValue56 = 0\n        var currentCharValue57 = 0\n    \
    \    var currentCharValue58 = 0\n        var currentCharValue59 = 0\n        var\
    \ currentCharValue60 = 0\n        var currentCharValue61 = 0\n        var currentCharValue62\
    \ = 0\n        var currentCharValue63 = 0\n        var currentCharValue64 = 0\n\
    \        var currentCharValue65 = 0\n        var currentCharValue66 = 0\n    \
    \    var currentCharValue67 = 0\n        var currentCharValue68 = 0\n        var\
    \ currentCharValue69 = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp24bvqr25.scala:93:11 ---------------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp24bvqr25.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp24bvqr25.scala:94:5 ---------------------\e[0m\e\
    [0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nests = brackets.filter(x => x.contains(\"\
    ]\"))\n        nests.size > 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdan2qvf.scala:26)\n\tat Problem.main(tmphdan2qvf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nesting = brackets.map(_.split(\"\
    \\\\]\")).filter(_.nonEmpty)\n        nesting.forall(nesting => nesting.forall(nesting\
    \ => nesting.nonEmpty))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf5m4awy2.scala:26)\n\tat Problem.main(tmpf5m4awy2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.HashSet[String]()\n        val closeBrackets\
    \ = mutable.HashSet[String]()\n        val openBracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[String, Int]()\n  \
    \      val openBracketsCount2 = mutable.HashMap[String, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount3 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount4 = mutable.HashMap[String, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount5 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount6 = mutable.HashMap[String, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount7 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount8 = mutable.HashMap[String, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount9 = mutable.HashMap[String,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[String, Int]()\n \
    \       val openBracketsCount10 = mutable.HashMap[String, Int]()\n        val\
    \ closeBracketsCount10 = mutable.HashMap[String, Int]()\n        val openBracketsCount11\
    \ = mutable.HashMap[String, Int]()\n        val closeBracketsCount11 = mutable.HashMap[String,\
    \ Int]()\n        val openBracketsCount12 = mutable.HashMap[String, Int]()\n \
    \       val closeBracketsCount12 = mutable.HashMap[String, Int]()\n        val\
    \ openBracketsCount13 = mutable.HashMap[String, Int]()\n        val closeBracketsCount13\
    \ = mutable.HashMap[String, Int]()\n        val openBracketsCount14 = mutable.HashMap[String,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesczhztj.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpesczhztj.scala:25:33 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Fou"
  stdout: ''
  timestamp: 1659799381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toSet\n        val openBrackets = brackets.filter(_.startsWith(\"\
    [\")).toSet\n        val closeBrackets = brackets.filter(_.endsWith(\"]\")).toSet\n\
    \        val openBracketsNesting = openBrackets.filter(_.contains(\"[\"))\n  \
    \      val closeBracketsNesting = closeBrackets.filter(_.contains(\"]\"))\n  \
    \      openBracketsNesting.forall(_.contains(\"[\"))\n        closeBracketsNesting.forall(_.contains(\"\
    ]\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi9ddoxn5.scala:30)\n\tat Problem.main(tmpi9ddoxn5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val openBrackets = brackets.filter(_.startsWith(\"\
    [\")).toList\n        val closeBrackets = brackets.filter(_.endsWith(\"]\")).toList\n\
    \        val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val openBracketsNestings = openBrackets.count(bracket\
    \ => bracket.contains(\"[\"))\n        val closeBracketsNestings = closeBrackets.count(bracket\
    \ => bracket.contains(\"]\"))\n        val isNested = openBracketsNestings + closeBracketsNestings\
    \ == openBracketsCount + closeBracketsCount\n        isNested\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprfon9otp.scala:32)\n\tat Problem.main(tmprfon9otp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toSet\n        val nestings = brackets.toSeq.flatMap(x\
    \ => string.split(x)).filter(_.nonEmpty).map(_.length)\n        nestings.toSet.size\
    \ == brackets.size\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp589n297w.scala:26)\n\tat Problem.main(tmp589n297w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val stack = mutable.Stack[String]()\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mutable.ListBuffer[Int]()\n        val bracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsCount = mut\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7r_qqk8l.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7r_qqk8l.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7r_qqk8l.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7r_qqk8l.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7r_qqk8l.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e"
  stdout: ''
  timestamp: 1660028952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val openBracketsNestings = openBrackets.filter(_.contains(\"\
    [\"))\n        val closeBracketsNestings = closeBrackets.filter(_.contains(\"\
    ]\"))\n        val openBracketsNestingsCount = openBracketsNestings.size\n   \
    \     val closeBracketsNestingsCount = closeBracketsNestings.size\n        val\
    \ openBracketsNestingsInside = openBracketsNestings.filter(_.contains(\"]\"))\n\
    \        val closeBracketsNestingsInside = closeBracketsNestings.filter(_.contains(\"\
    [\"))\n        val openBracketsNestingsInsideCount = openBracketsNestingsInside.size\n\
    \        val closeBracketsNestingsInsideCount = closeBracketsNestingsInside.size\n\
    \        val openBracketsNestingsInsideNestings = openBracketsNestingsInside.filter(_.contains(\"\
    [\"))\n        val closeBracketsNestingsInsideNestings = closeBracketsNestingsInside.filter(_.contains(\"\
    ]\"))\n        val openBracketsNestingsInsideNestingsCount = openBracketsNestingsInsideNestings.size\n\
    \        val closeBracketsNestingsInsideNestingsCount = closeBracketsNestingsInsideNestings.size\n\
    \        val openBracketsNestingsInsideNestingsInside = openBracketsNestingsInsideNestings.filter(_.contains(\"\
    ]\"))\n        val closeBracketsNestingsInsideNestingsInside = closeBracketsNestingsInsideNestings.filter(_.contains(\"\
    [\"))\n        val openBracketsNestingsInsideNestingsInsideCount = openBracketsNestingsInsideNestingsInside.size\n\
    \        val closeBracketsNestingsInsideNestingsInsideCount = closeBracketsNestingsInsideNestingsInside.size\n\
    \        val openBrackets\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpez0k8m3e.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpez0k8m3e.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nestings = brackets.map(_.split(\"\
    \\\\[|\\\\]\").filter(_.nonEmpty))\n        nestings.forall(nesting => nesting.length\
    \ == nestings.size)\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaw9uzi90.scala:26)\n\tat Problem.main(tmpaw9uzi90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ != bracketsCount\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bqz3kv5.scala:29)\n\tat Problem.main(tmp3bqz3kv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nestedBrackets\
    \ = brackets.filter(_.contains(\"[\") && _.contains(\"]\"))\n        nestedBrackets.nonEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg1a4i6jw.scala:21:45 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnestedBrackets\e[0m = brackets.filter(_.contains(\e\
    [31m\"[\"\e[0m) && _.contains(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660028951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val valid = mutable.Set[String]()\n        val openBrackets = mutable.Set[String]()\n\
    \        val closeBrackets = mutable.Set[String]()\n        val openBracketCount\
    \ = mutable.Map[String, Int]()\n        val closeBracketCount = mutable.Map[String,\
    \ Int]()\n        val openBracketCounts = mutable.Map[String, Int]()\n       \
    \ val closeBracketCounts = mutable.Map[String, Int]()\n        val openBracketCountTotal\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotal = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotals = mutable.Map[String, Int]()\n  \
    \      val closeBracketCountTotals = mutable.Map[String, Int]()\n        val openBracketCountTotalsCount\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotalsCount = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotalsCounts = mutable.Map[String, Int]()\n\
    \        val closeBracketCountTotalsCounts = mutable.Map[String, Int]()\n    \
    \    val openBracketCountTotalsCountsCount = mutable.Map[String, Int]()\n    \
    \    val closeBracketCountTotalsCountsCount = mutable.Map[String, Int]()\n   \
    \     val openBracketCountTotalsCountsCounts = mutable.Map[String, Int]()\n  \
    \      val closeBracketCountTotalsCountsCounts = mutable.Map[String, Int]()\n\
    \        val openBracketCountTotalsCountsCountsCount = mutable.Map[String, Int]()\n\
    \        val closeBracketCountTotalsCountsCountsCount = mutable.Map[String, Int]()\n\
    \        val openBracketCountTotalsCountsCountsCounts = mutable.Map[String, Int]()\n\
    \        val closeBracketCountTotalsCountsCountsCounts = mutable.Map[String, Int]()\n\
    \        val openBracketCountTotalsCountsCountsCountsCount = mutable.Map[String,\
    \ Int]()\n        val closeBracketCountTotalsCountsCountsCountsCount = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotalsCountsCountsCountsCounts = mutable.Map[String,\
    \ Int]()\n        val closeBracketCountTotalsCountsCountsCountsCounts = mutable.Map[String,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kant_ye.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6kant_ye.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvalid\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6kant_ye.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kant_ye.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kant_ye.scala:25:31 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m =\
    \ mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6kant_ye.scala:26:32 ------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        val bracketsCount\
    \ = brackets.length\n        for(i <- 0 until bracketsCount) {\n            val\
    \ bracket = brackets(i)\n            if(bracket == \"[\") {\n                stack.push(bracket)\n\
    \            } else if(bracket == \"]\") {\n                val bracket2 = stack.pop()\n\
    \                if(bracket2 == bracket) {\n                    result += true\n\
    \                } else {\n                    result += false\n             \
    \   }\n            } else if(bracket == \"{\") {\n                stack.push(bracket)\n\
    \            } else if(bracket == \"}\") {\n                val bracket2 = stack.pop()\n\
    \                if(bracket2 == bracket) {\n                    result += true\n\
    \                } else {\n                    result += false\n             \
    \   }\n            }\n        }\n        result match {\n            case Nil\
    \ => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdptyfcd.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprdptyfcd.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.size\n\
    \        val openBrackets = brackets.filter(x => x.contains(\"[\"))\n        val\
    \ openBracketsCount = openBrackets.size\n        val isNested = nestedBracketsCount\
    \ == openBracketsCount\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc78h6r38.scala:29)\n\tat Problem.main(tmpc78h6r38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\"))\n        val\
    \ bracketsNestingsCount = bracketsNestings.length\n        val bracketsNestingsNestings\
    \ = bracketsNestings.map(x => x.split(\"\\\\[\"))\n        val bracketsNestingsNestingsCount\
    \ = bracketsNestingsNestings.length\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNestingsNestings.map(x => x.split(\"\\\\]\")).length\n        val\
    \ bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x => x.split(\"\
    \\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestings.map(x\
    \ => x.split(\"\\\\]\")).length\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNe\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrd1mowk.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestingsNestingsCount\e\
    [0m = bracketsNestingsNestings.map(\e[36mx\e[0m => x.split(\e[31m\"\\\\]\"\e[0m)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrd1mowk.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsNestingsNestingsCount\e[0m = bracketsNestingsNestings.map(\e\
    [36mx\e[0m => x.split(\e[31m\"\\\\]\"\e[0m)).length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrd1mowk.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsNestingsNestingsCount\e[0m = bracketsNestingsNestings.map(\e\
    [36mx\e[0m => x.split(\e[31m\"\\\\]\"\e[0m)).length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrd1mowk.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33m"
  stdout: ''
  timestamp: 1660028956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"[\") || x.contains(\"\
    ]\") || x.contains(\"{\") || x.contains(\"}\"))\n        val bracketsNestingsCount\
    \ = bracketsNestings.length\n        val bracketsNestingsNestings = bracketsNestings.filter(x\
    \ => x.contains(\"[\") || x.contains(\"]\") || x.contains(\"{\") || x.contains(\"\
    }\"))\n        val bracketsNestingsNestingsCount = bracketsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestings = bracketsNestingsNestings.filter(x\
    \ => x.contains(\"[\") || x.contains(\"]\") || x.contains(\"{\") || x.contains(\"\
    }\"))\n        val bracketsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val bracketsNestingsNestingsNestingsNestingsCount = bracketsNestingsNestingsNestingsNestings.length\n\
    \        val brackets\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc3k7plbu.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc3k7plbu.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsNestingsNestingsNestingsCount\e[0m = bracketsNestingsNestingsNestingsNestings.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsNestingsCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsNestingsCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc3k7plbu.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestingsNestingsNestingsCount\e\
    [0m = bracketsNestingsNestingsNestingsNestings.length\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsNestingsCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsNestingsCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc3k7plbu.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsNestingsNestingsNestingsCount\e\
    [0m = bracketsNestingsNestingsNestingsNestings.length\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsNestingsNestingsNestingsCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mbracketsNestingsNestingsNestingsNestingsCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all"
  stdout: ''
  timestamp: 1660028955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = mutable.Stack[String]()\n        val brackets = mutable.ListBuffer[String]()\n\
    \        val bracketCount = mutable.Map[String, Int]()\n        val openBrackets\
    \ = mutable.Map[String, Int]()\n        val closeBrackets = mutable.Map[String,\
    \ Int]()\n        val openBracketCount = mutable.Map[String, Int]()\n        val\
    \ closeBracketCount = mutable.Map[String, Int]()\n        val openBracketCounts\
    \ = mutable.Map[String, Int]()\n        val closeBracketCounts = mutable.Map[String,\
    \ Int]()\n        val openBracketCountPairs = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountPairs = mutable.Map[String, Int]()\n        val openBracketCountPairsSorted\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountPairsSorted = mutable.Map[String,\
    \ Int]()\n        val openBracketCountPairsSortedSorted = mutable.Map[String,\
    \ Int]()\n        val closeBracketCountPairsSortedSorted = mutable.Map[String,\
    \ Int]()\n        val openBracketCountPairsSortedSortedSorted = mutable.Map[String,\
    \ Int]()\n        val closeBracketCountPairsSortedSortedSorted = mutable.Map[String,\
    \ Int]()\n        val openBracketCountPairsSortedSortedSortedSorted = mutable.Map[String,\
    \ Int]()\n        val closeBracketCountPairsSortedSortedSortedSorted = mutable.Map[String,\
    \ Int]()\n        val openBracketCountPairsSortedSortedSortedSortedSorted = mutable.Map[String,\
    \ Int]()\n        val closeBracketCountPairsSortedSortedSortedSortedSorted = mutable.Map[String,\
    \ Int]()\n        val openBracketCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Map[String, Int]()\n        val openBracketCountPairsSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountPairsSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.Map[String, Int]()\n        val openBracketCountPairsSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountPairsSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.Map[String, Int]()\n        val openBracketCountPairsSorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpspc44i7d.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspc44i7d.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspc44i7d.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspc44i7d.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketCount\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpspc44i7d.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspc44i7d.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBrackets\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \          "
  stdout: ''
  timestamp: 1660028955
