language: scala
name: HumanEval_135_can_arrange
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcddfxbia.scala:19)\n\tat Problem.main(tmpcddfxbia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpygyijpm4.scala:84:28 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpygyijpm4.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    ["
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxVal = -1\n        arr.foreach(x\
    \ => {\n            if (x > maxVal) {\n                maxVal = x\n          \
    \      maxIndex = x\n            }\n        })\n        maxIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplny0z1g0.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                maxVal = x\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplny0z1g0.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                maxIndex = x\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (x : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\
    \ + 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzddm_cpg.scala:22)\n\tat Problem.main(tmpzddm_cpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr(arr.length-1))\n\
    \        if (maxIndex == -1) return -1\n        arr(maxIndex) + 1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvv33azl.scala:19)\n\tat Problem.main(tmpsvv33azl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc3n5qtg.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc3n5qtg.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc3n5qtg.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(_ >= arr.head)\n     \
    \   if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkbydo0j8.scala:19)\n\tat Problem.main(tmpkbydo0j8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        if(maxIndex == arr.length-1)\n            -1\n        else\n\
    \            maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfhvwkj8.scala:28)\n\tat Problem.main(tmptfhvwkj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(_ <= arr.head)\n     \
    \   if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphw72lx43.scala:19)\n\tat Problem.main(tmphw72lx43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var maxIndexOfMaxValue = -1\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) > maxValue) {\n                maxValue = arr(i)\n       \
    \         maxIndex = i\n                maxIndexOfMaxValue = i\n            }\n\
    \        }\n        if (maxIndexOfMaxValue == -1) {\n            return -1\n \
    \       }\n        return maxIndex\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcla_m6ql.scala:30)\n\tat Problem.main(tmpcla_m6ql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr.head)\n\
    \        if (maxIndex == -1) return -1\n        maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctjoiu5l.scala:19)\n\tat Problem.main(tmpctjoiu5l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 1\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ index\n            }\n            index += 1\n        }\n        if(maxValue\
    \ == arr(0)) {\n            return -1\n        }\n        return maxIndex\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp283lc_if.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxIndex = index\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.last)\n    \
    \    if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13zv4zpa.scala:19)\n\tat Problem.main(tmp13zv4zpa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr(0))\n  \
    \      if (maxIndex == -1) return -1\n        arr.lastIndexWhere(x => x >= arr(maxIndex))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbo4hic30.scala:19)\n\tat Problem.main(tmpbo4hic30.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexOfMax(max)\n\
    \        if (maxIndex == -1) {\n            return -1\n        }\n        val\
    \ maxPrev = arr.take(maxIndex).last\n        if (maxPrev >= max) {\n         \
    \   return maxIndex\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5yn7gkt.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax(max)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.last)\n     \
    \   if (maxIndex < 0) -1 else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3pxqn85.scala:18)\n\tat Problem.main(tmpp3pxqn85.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ return -1\n        arr.take(maxIndex + 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpln0_spqs.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpln0_spqs.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        arr.take(maxIndex + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found: \
    \   \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc3n5qtg.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj7ik_pf.scala:19)\n\tat Problem.main(tmpfj7ik_pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_xi8wq64.scala:19:25 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        var\
    \ i = 0\n        while (i < arr.length) {\n            if (arr(i) <= maxVal) {\n\
    \                maxIndex = i\n                maxVal = arr(i)\n            }\
    \ else {\n                maxIndex = -1\n            }\n            i += 1\n \
    \       }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqhy8s6ey.scala:29)\n\tat Problem.main(tmpqhy8s6ey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2pj_gtoa.scala:19)\n\tat Problem.main(tmp2pj_gtoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var maxIndexInList = -1\n        for(i <- 0 until arr.length) {\n         \
    \   if(arr(i) > maxValue) {\n                maxValue = arr(i)\n             \
    \   maxIndex = i\n            }\n            if(arr(i) == maxValue) {\n      \
    \          maxIndexInList = i\n            }\n        }\n        if(maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        return maxIndex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp59sudqrs.scala:32)\n\tat Problem.main(tmp59sudqrs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcddfxbia.scala:19)\n\tat Problem.main(tmpcddfxbia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex - 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchuv_cda.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex2 = arr.indexOfMax(x => x <= maxValue)\n        if (maxIndex2\
    \ == -1) {\n            return -1\n        }\n        if (maxIndex2 > maxIndex)\
    \ {\n            return maxIndex2\n        }\n        return maxIndex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq5vl33yx.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq5vl33yx.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex2\e[0m = arr.indexOfMax(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue indexOfMax is not a member of List[Long] - did you mean\
    \ arr.indexOf?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.head)\n    \
    \    if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxn_t9ls.scala:19)\n\tat Problem.main(tmpmxn_t9ls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcddfxbia.scala:19)\n\tat Problem.main(tmpcddfxbia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr(arr.length-1))\n\
    \        if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4p05060.scala:19)\n\tat Problem.main(tmpl4p05060.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) <= maxValue) {\n  \
    \              maxIndex = i\n                maxValue = arr(i)\n            }\n\
    \        }\n        if (maxIndex == arr.length - 1) {\n            return -1\n\
    \        }\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0y8ompp.scala:28)\n\tat Problem.main(tmpn0y8ompp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        if (maxIndex == arr.length) -1\n        else maxIndex\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1srxninp.scala:26)\n\tat Problem.main(tmp1srxninp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(_ <= arr.last)\n        if\
    \ (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8rp2bt7k.scala:19)\n\tat Problem.main(tmp8rp2bt7k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr(0))\n  \
    \      if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62ek2zg6.scala:19)\n\tat Problem.main(tmp62ek2zg6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndex = arr.indexWhere(x => x <= maxValue)\n        if (maxIndex ==\
    \ -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypt0c3s0.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var maxIndexOfMaxValue = -1\n        var index = 1\n        while (index <\
    \ arr.length) {\n            if (arr(index) < maxValue) {\n                maxValue\
    \ = arr(index)\n                maxIndexOfMaxValue = index\n            }\n  \
    \          index += 1\n        }\n        if (maxIndexOfMaxValue == -1) {\n  \
    \          return -1\n        }\n        return maxIndexOfMaxValue\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_ecodhr.scala:31)\n\tat Problem.main(tmpp_ecodhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.last)\n     \
    \   if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9x93pxvl.scala:19)\n\tat Problem.main(tmp9x93pxvl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        if(maxIndex == arr.length-1) {\n            return -1\n   \
    \     }\n        return maxIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5d_yr4z.scala:28)\n\tat Problem.main(tmpu5d_yr4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val m = arr.head\n        var maxIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) < m) {\n               \
    \ maxIndex = i\n            }\n        }\n        maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe40q0xc1.scala:24)\n\tat Problem.main(tmpe40q0xc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2pj_gtoa.scala:19)\n\tat Problem.main(tmp2pj_gtoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.head)\n    \
    \    if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxn_t9ls.scala:19)\n\tat Problem.main(tmpmxn_t9ls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexWhere(x\
    \ => x > max)\n        if(maxIndex == arr.length-1)\n            -1\n        else\n\
    \            arr.lastIndex(maxIndex+1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphb_lwyik.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            arr.lastIndex(maxIndex+\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lastIndex\
    \ is not a member of List[Long] - did you mean arr.lastIndexOf?\n1 error found\n"
  stdout: ''
  timestamp: 1659978587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.last\n        val maxIndex = arr.lastIndexWhere(_\
    \ <= max)\n        if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hk5e0fc.scala:20)\n\tat Problem.main(tmp0hk5e0fc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxVal = -1L\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1g1n_bku.scala:25)\n\tat Problem.main(tmp1g1n_bku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInner = -1\n        val maxValueInner = -1\n        for(i <- 0\
    \ until arr.length) {\n            if(arr(i) < maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n            if(arr(i)\
    \ > maxValueInner) {\n                maxValueInner = arr(i)\n               \
    \ maxIndexInner = i\n            }\n        }\n        if(maxIndexInner == -1)\
    \ {\n            return -1\n        }\n        if(maxIndexInner == maxIndex) {\n\
    \            return -1\n        }\n        if(maxIndexInner < maxIndex) {\n  \
    \          return maxIndex\n        }\n        return maxIndexInner\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpeyilsqrm.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpeyilsqrm.scala:21:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpeyilsqrm.scala:24:35 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                maxValueInner = arr(i)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpeyilsqrm.scala:25:30 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                maxIndexInner = i\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ maxIndexInner\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val m = arr.head\n        val n = arr.last\n        var\
    \ maxIndex = -1\n        var index = 0\n        while (index < arr.length) {\n\
    \            if (arr(index) <= m && arr(index) > n) {\n                maxIndex\
    \ = index\n            }\n            index += 1\n        }\n        maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp28fl9pdz.scala:27)\n\tat Problem.main(tmp28fl9pdz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl8b32yjk.scala:19)\n\tat Problem.main(tmpl8b32yjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        if(maxIndex == arr.length-1)\n            -1\n        else\n\
    \            maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfhvwkj8.scala:28)\n\tat Problem.main(tmptfhvwkj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        if(maxIndex == arr.length-1) {\n            return -1\n   \
    \     }\n        return maxIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5d_yr4z.scala:28)\n\tat Problem.main(tmpu5d_yr4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ index\n            }\n            index += 1\n        }\n        if (maxIndex\
    \ == arr.length - 1) {\n            return -1\n        }\n        return maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmm3mp2v.scala:30)\n\tat Problem.main(tmpkmm3mp2v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxVal = -1\n        var\
    \ index = 0\n        for(i <- 0 until arr.length) {\n            val currentVal\
    \ = arr(i)\n            if(currentVal > maxVal) {\n                maxVal = currentVal\n\
    \                maxIndex = index\n            }\n            index += 1\n   \
    \     }\n        if(maxIndex == -1) {\n            return -1\n        }\n    \
    \    return maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw_4r252g.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                maxVal = currentVal\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    (currentVal : Long)\n\e[31m   |\e[0m     \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1 else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucao9nn3.scala:18)\n\tat Problem.main(tmpucao9nn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxkubppgd.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxkubppgd.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e[36mx\e[0m => x >= maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkubppgd.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkubppgd.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkubppgd.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexIn"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.head)\n    \
    \    if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpad4m77mt.scala:19)\n\tat Problem.main(tmpad4m77mt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr.last)\n\
    \        if (maxIndex < 0) -1 else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu41edj27.scala:18)\n\tat Problem.main(tmpu41edj27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj7ik_pf.scala:19)\n\tat Problem.main(tmpfj7ik_pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax(x => x < arr(0))\n       \
    \ if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwlxc6yqv.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax(\e\
    [36mx\e[0m => x < arr(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfMax is not a member of\
    \ List[Long] - did you mean arr.indexOf?\n1 error found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) < maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawhuijy_.scala:25)\n\tat Problem.main(tmpawhuijy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl8b32yjk.scala:19)\n\tat Problem.main(tmpl8b32yjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList == -1) {\n\
    \            return -1\n        }\n        maxIndexInList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ftmupmb.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax(arr.head)\n        if(maxIndex\
    \ == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuex_f1pu.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax(arr.head)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val prevIndex = maxIndex - 1\n        if (prevIndex >= 0) {\n       \
    \     if (arr(prevIndex) <= maxValue) {\n                return prevIndex\n  \
    \          }\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ioauyua.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x <= arr.head)\n\
    \        if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb0rig74h.scala:19)\n\tat Problem.main(tmpb0rig74h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        if (maxIndex == arr.length-1)\n            -1\n        else\n\
    \            maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcawqmg61.scala:28)\n\tat Problem.main(tmpcawqmg61.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.head)\n    \
    \    if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpad4m77mt.scala:19)\n\tat Problem.main(tmpad4m77mt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val m = arr.head\n        val n = arr.last\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) < maxValue) {\n                maxValue = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == arr.length-1) {\n            return -1\n        }\n        if (maxIndex ==\
    \ arr.length-2) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-3) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-4) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-5) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-6) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-7) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-8) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-9) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-10) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-11) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-12) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-13) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-14) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-15) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-16) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-17) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-18) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-19) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-20) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-21) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-22) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-23) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-24) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-25) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-26) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-27) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-28) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-29) {\n            return arr.last\n        }\n        if (maxIndex\
    \ == arr.length-30) {\n            return arr.last\n        }\n        if (maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbr9owvi5.scala:115:4 ---------------------------\e\
    [0m\e[0m\n\e[31m115 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbr9owvi5.scala:114:12 -------------------\e[0m\e[0m\n\e[31m114 |\e[0m\
    \        \e[33mif\e[0m (maxIndex\n\e[31m\e[31m    |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m    |\e[0m            Found:    (maxIndex : Int)\n\e[31m    |\e[0m\
    \            Required: Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        if (maxIndex == arr.length - 1) {\n            return -1\n\
    \        } else {\n            return maxIndex\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3z08s7n2.scala:29)\n\tat Problem.main(tmp3z08s7n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex : Long = -1\n        val maxIndexInner = -1\n\
    \        val maxIndexInnerInner = -1\n        val maxIndexInnerInnerInner = -1\n\
    \        val maxIndexInnerInnerInnerInner = -1\n        val maxIndexInnerInnerInnerInnerInner\
    \ = -1\n        val maxIndexInnerInnerInnerInnerInnerInner = -1\n        val maxIndexInnerInnerInnerInnerInnerInnerInner\
    \ = -1\n        val maxIndexInnerInnerInnerInnerInnerInnerInnerInnerInner = -1\n\
    \        val maxIndexInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInner =\
    \ -1\n        val maxIndexInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInner\
    \ = -1\n        val maxIndexInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInner\
    \ = -1\n        val maxIndexInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInner\
    \ = -1\n        val maxIndexInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInnerInner\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphwwdepat.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphwwdepat.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex == -1) return -1\n        val maxValue = arr.max\n        if\
    \ (maxValue <= arr.head) maxIndex\n        else maxIndex - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpww6gj9kv.scala:21)\n\tat Problem.main(tmpww6gj9kv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr.head)\n\
    \        if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi21dqvrb.scala:19)\n\tat Problem.main(tmpi21dqvrb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj7ik_pf.scala:19)\n\tat Problem.main(tmpfj7ik_pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.head)\n    \
    \    if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmyua0hi.scala:22)\n\tat Problem.main(tmpsmyua0hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 1\n        for (value <- arr) {\n            if (value <= maxValue)\
    \ {\n                maxValue = value\n                maxIndex = index\n    \
    \        }\n            index += 1\n        }\n        if (maxIndex == arr.length)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqbi8yy1x.scala:28)\n\tat Problem.main(tmpqbi8yy1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInArray = 0\n        val maxIndexInArray2 = -1\n        for(i <-\
    \ 0 until arr.length) {\n            val value = arr(i)\n            if(value\
    \ <= maxValue) {\n                if(value == maxValue) {\n                  \
    \  maxIndexInArray = i\n                }\n                val value2 = arr(i-1)\n\
    \                if(value2 > maxValue) {\n                    maxIndexInArray2\
    \ = i\n                }\n            }\n        }\n        if(maxIndexInArray\
    \ == maxIndexInArray2) {\n            return -1\n        }\n        return maxIndexInArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp9t19b3tm.scala:22:36 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    maxIndexInArray = i\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \              Reassignment to val maxIndexInArray\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9t19b3tm.scala:26:37 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    maxIndexInArray2 = i\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               Reassignment to val maxIndexInArray2\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex - 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchuv_cda.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.last\n        val maxIndex = arr.lastIndexWhere(x\
    \ => x >= max)\n        if (maxIndex == -1) {\n            return -1\n       \
    \ }\n        val maxIndex2 = arr.lastIndexWhere(x => x >= max && x < max)\n  \
    \      if (maxIndex2 == -1) {\n            return -1\n        }\n        val maxIndex3\
    \ = arr.lastIndexWhere(x => x >= max && x < max && x < max)\n        if (maxIndex3\
    \ == -1) {\n            return -1\n        }\n        maxIndex3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzrm6u6d.scala:30)\n\tat Problem.main(tmphzrm6u6d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x <= arr.head)\n\
    \        if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp592aysjm.scala:19)\n\tat Problem.main(tmp592aysjm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        if (maxIndex == arr.length) -1\n        else maxIndex\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1srxninp.scala:26)\n\tat Problem.main(tmp1srxninp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 1\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ <= maxValue) {\n                maxValue = arr(i)\n                maxIndex\
    \ = i\n            }\n        }\n        if(maxIndex == arr.length-1)\n      \
    \      -1\n        else\n            maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_guuyj8.scala:29)\n\tat Problem.main(tmpy_guuyj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxVal = -1L\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1g1n_bku.scala:25)\n\tat Problem.main(tmp1g1n_bku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj7ik_pf.scala:19)\n\tat Problem.main(tmpfj7ik_pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98q2sch2.scala:25)\n\tat Problem.main(tmp98q2sch2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxVal = -1L\n        var\
    \ index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) >\
    \ maxVal) {\n                maxVal = arr(i)\n                maxIndex = index\n\
    \            }\n            index += 1\n        }\n        if (maxIndex == -1)\
    \ return -1\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnlmi7rk3.scala:28)\n\tat Problem.main(tmpnlmi7rk3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxValue = arr(0)\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n  \
    \              maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplp4uuaz0.scala:25)\n\tat Problem.main(tmplp4uuaz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val prevIndex = maxIndex - 1\n        if (prevIndex >= 0) {\n       \
    \     if (arr(prevIndex) <= maxValue) {\n                return prevIndex\n  \
    \          }\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ioauyua.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1L)\
    \ -1L\n        else maxIndex + 1L\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqyuxuvj3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1 else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucao9nn3.scala:18)\n\tat Problem.main(tmpucao9nn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexWhere(_\
    \ >= max)\n        if (maxIndex == -1) {\n            return -1\n        }\n \
    \       val maxPrev = arr.take(maxIndex).last\n        val maxNext = arr.drop(maxIndex).last\n\
    \        if (maxNext >= max) {\n            return maxIndex\n        }\n     \
    \   canArrange(arr.drop(maxIndex + 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.canArrange(tmpl_vnzsp_.scala:19)\n\
    \tat Problem$.main(tmpl_vnzsp_.scala:27)\n\tat Problem.main(tmpl_vnzsp_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1 else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucao9nn3.scala:18)\n\tat Problem.main(tmpucao9nn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex - 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchuv_cda.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) < maxValue) {\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        if(maxIndex == arr.length-1)\n            -1\n        else\n\
    \            maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqiu34vyd.scala:28)\n\tat Problem.main(tmpqiu34vyd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) <= maxValue) {\n    \
    \            maxIndex = i\n                maxValue = arr(i)\n            }\n\
    \        }\n        if(maxIndex == arr.length - 1) -1 else maxIndex\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpitk1t3iq.scala:25)\n\tat Problem.main(tmpitk1t3iq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj7ik_pf.scala:19)\n\tat Problem.main(tmpfj7ik_pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\
    \ + 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplpy19yhu.scala:22)\n\tat Problem.main(tmplpy19yhu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        var\
    \ currentIndex = 0\n        for (i <- arr.indices) {\n            if (arr(i) >\
    \ maxVal) {\n                maxVal = arr(i)\n                maxIndex = i\n \
    \           }\n        }\n        if (maxIndex == arr.size - 1) {\n          \
    \  return -1\n        }\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqbfwpg3.scala:29)\n\tat Problem.main(tmpgqbfwpg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexOfMax(max)\n\
    \        if (maxIndex == -1) {\n            return -1\n        }\n        val\
    \ maxPrev = arr.take(maxIndex).last\n        if (maxPrev >= max) {\n         \
    \   return maxIndex\n        }\n        val maxNext = arr.drop(maxIndex).last\n\
    \        if (maxNext >= max) {\n            return maxIndex\n        }\n     \
    \   canArrange(arr.drop(maxIndex + 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfn1vahdn.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax(max)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x\
    \ => x >= maxValue)\n        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n\
    \        val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val\
    \ maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxkubppgd.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxkubppgd.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e[36mx\e[0m => x >= maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkubppgd.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkubppgd.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkubppgd.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexIn"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax(arr.head)\n        if (maxIndex\
    \ == -1) {\n            -1\n        } else {\n            maxIndex\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuszjejit.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax(arr.head)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.last)\n    \
    \    if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc_ec6cnt.scala:19)\n\tat Problem.main(tmpc_ec6cnt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexWhere(x\
    \ => x >= max)\n        if (maxIndex == -1) {\n            return -1\n       \
    \ }\n        val maxPrev = arr.take(maxIndex).last\n        if (maxPrev >= max)\
    \ {\n            return maxIndex\n        }\n        val maxNext = arr.drop(maxIndex).last\n\
    \        if (maxNext >= max) {\n            return maxIndex\n        }\n     \
    \   val maxNextPrev = arr.drop(maxIndex).drop(1).last\n        if (maxNextPrev\
    \ >= max) {\n            return maxIndex\n        }\n        val maxNextNext =\
    \ arr.drop(maxIndex).drop(2).last\n        if (maxNextNext >= max) {\n       \
    \     return maxIndex\n        }\n        val maxNextNextPrev = arr.drop(maxIndex).drop(3).last\n\
    \        if (maxNextNextPrev >= max) {\n            return maxIndex\n        }\n\
    \        val maxNextNextNext = arr.drop(maxIndex).drop(4).last\n        if (maxNextNextNext\
    \ >= max) {\n            return maxIndex\n        }\n        val maxNextNextNextPrev\
    \ = arr.drop(maxIndex).drop(5).last\n        if (maxNextNextNextPrev >= max) {\n\
    \            return maxIndex\n        }\n        val maxNextNextNextNext = arr.drop(maxIndex).drop(6).last\n\
    \        if (maxNextNextNextNext >= max) {\n            return maxIndex\n    \
    \    }\n        val maxNextNextNextNextPrev = arr.drop(maxIndex).drop(7).last\n\
    \        if (maxNextNextNextNextPrev >= max) {\n            return maxIndex\n\
    \        }\n        val maxNextNextNextNextNext = arr.drop(maxIndex).drop(8).last\n\
    \        if (maxNextNextNextNextNext >= max) {\n            return maxIndex\n\
    \        }\n        val maxNextNextNextNextNextPrev = arr.drop(maxIndex).drop(9).last\n\
    \        if (maxNextNextNextNextNextPrev >= max) {\n            return maxIndex\n\
    \        }\n        val maxNextNextNextNextNextNext = arr.drop(maxIndex).drop(10).last\n\
    \        if (maxNextNextNextNextNextNext >= max) {\n            return maxIndex\n\
    \        }\n        val maxNextNextNextNextNextNextPrev = arr.drop(maxIndex).drop(11).last\n\
    \        if (maxNextNextNextNextNextNextPrev >= max) {\n            return maxIndex\n\
    \        }\n        val maxNextNextNextNextNextNextNext = arr.drop(maxIndex).drop(12).last\n\
    \        if (maxNextNextNextNextNextNextNext \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpod11noft.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpod11noft.scala:72:12 --------------------\e[0m\e[0m\n\e[31m72 |\e[0m\
    \        \e[33mif\e[0m (maxNextNextNextNextNextNextNext \n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ Found:    (maxNextNextNextNextNextNextNext : Long)\n\e[31m   |\e[0m        \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val m = arr.head\n        val n = arr.last\n        var\
    \ maxIndex = -1\n        var maxVal = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) < m && arr(i) > maxVal) {\n                maxVal\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2i49o3r.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                maxVal = arr(i)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else arr.lastIndexWhere(x => x <= arr(maxIndex))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplx1vat6o.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj7ik_pf.scala:19)\n\tat Problem.main(tmpfj7ik_pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvezlft1p.scala:84:28 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvezlft1p.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x > maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvezlft1p.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x > maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvezlft1p.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x > maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvezlft1p.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e["
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpygyijpm4.scala:84:28 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpygyijpm4.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    ["
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        if (maxIndex == arr.length) -1\n        else maxIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq1w2wosy.scala:26)\n\tat Problem.main(tmpq1w2wosy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1)\n            -1\n        else\n            arr(maxIndex)\
    \ + 1\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaufttdn3.scala:21)\n\tat Problem.main(tmpaufttdn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.head)\n    \
    \    if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\
    \ + 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxhqi1rr.scala:22)\n\tat Problem.main(tmpsxhqi1rr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex == -1)\n            -1\n        else\n            maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b9nxck9.scala:21)\n\tat Problem.main(tmp7b9nxck9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1L)\
    \ -1L\n        else maxIndex + 1L\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqyuxuvj3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc3n5qtg.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.head)\n    \
    \    if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxn_t9ls.scala:19)\n\tat Problem.main(tmpmxn_t9ls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        var\
    \ currentIndex = 0\n        for (i <- arr.indices) {\n            if (arr(i) >\
    \ maxVal) {\n                maxVal = arr(i)\n                maxIndex = i\n \
    \           }\n        }\n        if (maxIndex == arr.size - 1) {\n          \
    \  return -1\n        }\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqbfwpg3.scala:29)\n\tat Problem.main(tmpgqbfwpg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ <= maxValue) {\n                maxValue = arr(i)\n                index = i\n\
    \            }\n        }\n        if (maxValue == arr(index)) {\n           \
    \ maxIndex = index\n        }\n        return maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvcgymc6a.scala:29)\n\tat Problem.main(tmpvcgymc6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr(0))\n  \
    \      if (maxIndex == -1) return -1\n        val maxValue = arr(maxIndex)\n \
    \       val maxIndex2 = arr.lastIndexWhere(x => x >= maxValue)\n        if (maxIndex2\
    \ == -1) return -1\n        if (maxIndex2 > maxIndex) return -1\n        maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq46znch.scala:23)\n\tat Problem.main(tmpaq46znch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr(arr.length-1))\n\
    \        if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuqvg0t7w.scala:19)\n\tat Problem.main(tmpuqvg0t7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr.head)\n\
    \        if (maxIndex == -1L) -1L\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpthiz_a9x.scala:19)\n\tat Problem.main(tmpthiz_a9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var maxIndexOfMaxValue = -1\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) > maxValue) {\n                maxValue = arr(i)\n       \
    \         maxIndex = i\n                maxIndexOfMaxValue = i\n            }\n\
    \        }\n        if (maxIndexOfMaxValue == -1) {\n            return -1\n \
    \       }\n        return maxIndex\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcla_m6ql.scala:30)\n\tat Problem.main(tmpcla_m6ql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ <= maxValue) {\n                maxValue = arr(i)\n                maxIndex\
    \ = i\n            }\n        }\n        if (maxIndex == arr.length-1)\n     \
    \       return -1\n        else\n            return maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1m3uv7n1.scala:29)\n\tat Problem.main(tmp1m3uv7n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) <= maxVal) {\n         \
    \       maxVal = arr(i)\n                maxIndex = i\n            }\n       \
    \ }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbd6dwaxn.scala:19:25 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcddfxbia.scala:19)\n\tat Problem.main(tmpcddfxbia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ index\n            }\n            index += 1\n        }\n        if(maxIndex\
    \ == arr.length) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsnqz2dqm.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxIndex = index\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.last\n        val maxIndex = arr.lastIndexWhere(_\
    \ <= max)\n        if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_oobl69y.scala:20)\n\tat Problem.main(tmp_oobl69y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex2 = arr.lastIndexWhere(x => x <= maxValue)\n        if (maxIndex2\
    \ == -1) {\n            return -1\n        }\n        val maxValue2 = arr(maxIndex2)\n\
    \        if (maxValue == maxValue2) {\n            return maxIndex\n        }\n\
    \        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzygkuiil.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl8b32yjk.scala:19)\n\tat Problem.main(tmpl8b32yjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(_ <= arr.head)\n        if\
    \ (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyrirb1y.scala:19)\n\tat Problem.main(tmpwyrirb1y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x >= arr(0))\n  \
    \      if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62ek2zg6.scala:19)\n\tat Problem.main(tmp62ek2zg6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 1\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ index\n            }\n            index += 1\n        }\n        if(maxIndex\
    \ == arr.length-1)\n            -1\n        else\n            maxIndex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcm4lu8ec.scala:30)\n\tat Problem.main(tmpcm4lu8ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98q2sch2.scala:25)\n\tat Problem.main(tmp98q2sch2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1L)\
    \ return -1L\n        if (maxIndex < arr.indexOfMax-1L) return maxIndex\n    \
    \    val maxVal = arr(maxIndex)\n        val maxIndex2 = arr.lastIndexOfMax(maxVal)\n\
    \        if (maxIndex2 == -1L) return -1L\n        if (maxIndex2 < maxIndex-1L)\
    \ return maxIndex2\n        val maxVal2 = arr(maxIndex2)\n        val maxIndex3\
    \ = arr.lastIndexOfMax(maxVal2)\n        if (maxIndex3 == -1L) return -1L\n  \
    \      if (maxIndex3 < maxIndex2-1L) return maxIndex3\n        val maxVal3 = arr(maxIndex3)\n\
    \        val maxIndex4 = arr.lastIndexOfMax(maxVal3)\n        if (maxIndex4 ==\
    \ -1L) return -1L\n        if (maxIndex4 < maxIndex3-1L) return maxIndex4\n  \
    \      val maxVal4 = arr(maxIndex4)\n        val maxIndex5 = arr.lastIndexOfMax(maxVal4)\n\
    \        if (maxIndex5 == -1L) return -1L\n        if (maxIndex5 < maxIndex4-1L)\
    \ return maxIndex5\n        val maxVal5 = arr(maxIndex5)\n        val maxIndex6\
    \ = arr.lastIndexOfMax(maxVal5)\n        if (maxIndex6 == -1L) return -1L\n  \
    \      if (maxIndex6 < maxIndex5-1L) return maxIndex6\n        val maxVal6 = arr(maxIndex6)\n\
    \        val maxIndex7 = arr.lastIndexOfMax(maxVal6)\n        if (maxIndex7 ==\
    \ -1L) return -1L\n        if (maxIndex7 < maxIndex6-1L) return maxIndex7\n  \
    \      val maxVal7 = arr(maxIndex7)\n        val maxIndex8 = arr.lastIndexOfMax(maxVal7)\n\
    \        if (maxIndex8 == -1L) return -1L\n        if (maxIndex8 < maxIndex7-1L)\
    \ return maxIndex8\n        val maxVal8 = arr(maxIndex8)\n        val maxIndex9\
    \ = arr.lastIndexOfMax(maxVal8)\n        if (maxIndex9 == -1L) return -1L\n  \
    \      if (maxIndex9 < maxIndex8-1L) return maxIndex9\n        val maxVal9 = arr(maxIndex9)\n\
    \        val maxIndex10 = arr.lastIndexOfMax(maxVal9)\n        if (maxIndex10\
    \ == -1L) return -1L\n        if (maxIndex10 < maxIndex9-1L) return maxIndex10\n\
    \        val maxVal10 = arr(maxIndex10)\n        val maxIndex11 = arr.lastIndexOfMax(maxVal10)\n\
    \        if (maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyuvyih1m.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuvyih1m.scala:14:27\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = arr.indexOfMax\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfMax is not a member of List[Long]\
    \ - did you mean arr.indexOf?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuvyih1m.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex2\e[0m = arr.lastIndexOfMax(maxVal)\n\e[31m\e[31m   |\e[0m       \
    \                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lastIndexOfMax\
    \ is not a member of List[Long] - did you mean arr.lastIndexOf?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyuvyih1m.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex3\e[0m = arr.lastIndexOfMax(maxVal2)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue lastIndexOfMax is not a member of List[Long] - did you mean arr.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuvyih1m.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex4\e[0m = arr.lastIndexOfMax(maxVal3)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue lastIndexOfMax is not a member of List[Long] - did you mean arr.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuvyih1m.scala:30:28 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex5\e[0m = arr.lastIndexOfMax(maxVal4)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue lastIndexOfMax is not a member of List[Long] - did you mean arr.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuvyih1m.scala:34:28 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex6\e[0m = arr.lastIndexOfM"
  stdout: ''
  timestamp: 1659978622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58s4ibsv.scala:25)\n\tat Problem.main(tmp58s4ibsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else arr.lastIndexWhere(_ <= arr(maxIndex - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn2ort6dk.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7x_haptv.scala:19)\n\tat Problem.main(tmp7x_haptv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpygyijpm4.scala:84:28 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpygyijpm4.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    ["
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1l\n        var maxValue = arr(0)\n    \
    \    for (i <- arr.indices) {\n            if (arr(i) > maxValue) {\n        \
    \        maxValue = arr(i)\n                maxIndex = i\n            }\n    \
    \    }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm6oc_o21.scala:25)\n\tat Problem.main(tmpm6oc_o21.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxVal = -1L\n        var\
    \ currentVal = -1L\n        for (i <- 0 until arr.length) {\n            currentVal\
    \ = arr(i)\n            if (currentVal > maxVal) {\n                maxVal = currentVal\n\
    \                maxIndex = i\n            }\n        }\n        maxIndex\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp33qnwmuy.scala:27)\n\tat Problem.main(tmp33qnwmuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.last)\n    \
    \    if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpikltr438.scala:22)\n\tat Problem.main(tmpikltr438.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val prevIndex = maxIndex - 1\n        if (prevIndex >= 0) {\n       \
    \     if (arr(prevIndex) <= maxValue) {\n                return prevIndex\n  \
    \          }\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ioauyua.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) {\n            -1\n        } else {\n            arr.lastIndexWhere(x\
    \ => x < arr(maxIndex))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudycy3d2.scala:22)\n\tat Problem.main(tmpudycy3d2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) < maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp85o6k06g.scala:19:25 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qrv55lp.scala:22)\n\tat Problem.main(tmp6qrv55lp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc3n5qtg.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndex = arr.indexWhere(x => x <= maxValue)\n        if (maxIndex ==\
    \ -1) {\n            return -1\n        }\n        val maxValueIndex = maxIndex\
    \ - 1\n        val maxValuePrev = arr(maxValueIndex)\n        val maxValueNext\
    \ = arr(maxValueIndex + 1)\n        if (maxValuePrev >= maxValueNext) {\n    \
    \        return maxValueIndex\n        } else {\n            return -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi27kzbin.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexOfMax(max)\n\
    \        if (maxIndex == -1) {\n            return -1\n        }\n        val\
    \ maxPrev = arr.take(maxIndex).last\n        if (maxPrev >= max) {\n         \
    \   return maxIndex\n        }\n        val maxNext = arr.drop(maxIndex).last\n\
    \        if (maxNext >= max) {\n            return maxIndex\n        }\n     \
    \   val maxNextPrev = arr.drop(maxIndex).take(maxIndex).last\n        if (maxNextPrev\
    \ >= max) {\n            return maxIndex\n        }\n        val maxNextNext =\
    \ arr.drop(maxIndex).take(maxIndex + 1).last\n        if (maxNextNext >= max)\
    \ {\n            return maxIndex\n        }\n        val maxNextNextPrev = arr.drop(maxIndex\
    \ + 1).take(maxIndex + 1).last\n        if (maxNextNextPrev >= max) {\n      \
    \      return maxIndex\n        }\n        val maxNextNextNext = arr.drop(maxIndex\
    \ + 1).take(maxIndex + 2).last\n        if (maxNextNextNext >= max) {\n      \
    \      return maxIndex\n        }\n        val maxNextNextNextPrev = arr.drop(maxIndex\
    \ + 2).take(maxIndex + 2).last\n        if (maxNextNextNextPrev >= max) {\n  \
    \          return maxIndex\n        }\n        val maxNextNextNextNext = arr.drop(maxIndex\
    \ + 2).take(maxIndex + 3).last\n        if (maxNextNextNextNext >= max) {\n  \
    \          return maxIndex\n        }\n        val maxNextNextNextNextPrev = arr.drop(maxIndex\
    \ + 3).take(maxIndex + 3).last\n        if (maxNextNextNextNextPrev >= max) {\n\
    \            return maxIndex\n        }\n        val maxNextNextNextNextNext =\
    \ arr.drop(maxIndex + 3).take(maxIndex + 4).last\n        if (maxNextNextNextNextNext\
    \ >= max) {\n            return maxIndex\n        }\n        val maxNextNextNextNextNextPrev\
    \ = arr.drop(maxIndex + 4).take(maxIndex + 4).last\n        if (maxNextNextNextNextNextPrev\
    \ >= max) {\n            return maxIndex\n        }\n        val maxNextNextNextNextNextNext\
    \ = arr.drop(maxIndex + 4).take(maxIndex + 5).last\n        if (maxNextNextNextNextNextNextPrev\
    \ >= max) {\n            return maxIndex\n        }\n        val maxNextNextNextNextNextNextPrev\
    \ = arr.drop(maxIndex + 5).take(maxIndex + 5).last\n        if (maxNextNextNextNextNextNextPrev\
    \ >= max) {\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp74zpk3nt.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp74zpk3nt.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = arr.indexOfMax(max)\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfMax is not a member\
    \ of List[Long] - did you mean arr.indexOf?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp74zpk3nt.scala:78:1 ---------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp74zpk3nt.scala:70:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m70 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x <= arr.head)\n\
    \        if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp592aysjm.scala:19)\n\tat Problem.main(tmp592aysjm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.lastIndexWhere(x => x <= arr.head)\n\
    \        if (maxIndex == -1) -1\n        else maxIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp592aysjm.scala:19)\n\tat Problem.main(tmp592aysjm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val prevValue = arr(maxIndex - 1)\n        if (prevValue >= maxValue)\
    \ {\n            return maxIndex\n        }\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pakzz_l.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ -1\n        else maxIndex - 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchuv_cda.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n\
    \        if (maxIndexInList == -1) {\n            return -1\n        }\n     \
    \   val maxIndexInList = arr.indexWhere(x => x <= maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x <= maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpygyijpm4.scala:84:28 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpygyijpm4.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x <= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpygyijpm4.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    ["
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxValue = arr(0)\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n  \
    \              maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplp4uuaz0.scala:25)\n\tat Problem.main(tmplp4uuaz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = arr.indexWhere(x => x > maxValue)\n \
    \       if (maxIndexInList == -1) {\n            return -1\n        }\n      \
    \  val maxIndexInList = arr.indexWhere(x => x > maxValue)\n        if (maxIndexInList\
    \ == -1) {\n            return -1\n        }\n        val maxIndexInList = arr.indexWhere(x\
    \ => x > maxValue)\n        if (maxIndexInList == -1) {\n            return -1\n\
    \        }\n        val maxIndexInList = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvezlft1p.scala:84:28 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvezlft1p.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x > maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvezlft1p.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x > maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvezlft1p.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x > maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvezlft1p.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e["
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1L)\
    \ -1L\n        else maxIndex + 1L\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqyuxuvj3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxValue = arr(0)\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n  \
    \              maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplp4uuaz0.scala:25)\n\tat Problem.main(tmplp4uuaz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x <= arr.last)\n    \
    \    if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpikltr438.scala:22)\n\tat Problem.main(tmpikltr438.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInList = arr.indexWhere(x => x >= maxValue)\n        val maxIndexInList\
    \ = arr.indexWhere(x => x >= maxValue)\n        if (maxIndexInList == -1) {\n\
    \            return -1\n        }\n        maxIndexInList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8yei09_p.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInList\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x >= maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexInList is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 1 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpirtmfsw4.scala:19:25 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr(0))\n       \
    \ if (maxIndex == -1) {\n            -1\n        } else {\n            arr.lastIndexWhere(x\
    \ => x < arr(maxIndex))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudycy3d2.scala:22)\n\tat Problem.main(tmpudycy3d2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        if (maxIndex == arr.length-1)\n            -1\n        else\n       \
    \     maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_z1pjwyg.scala:28)\n\tat Problem.main(tmp_z1pjwyg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.head\n        val maxIndex = arr.indexOfMax\
    \ { x => x <= max }\n        if (maxIndex == -1L) -1L\n        else maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcabomwyd.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\
    \ { \e[36mx\e[0m => x <= max }\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue indexOfMax is not a member of List[Long] - did you mean\
    \ arr.indexOf?\n1 error found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n     \
    \           maxValue = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        if(maxIndex == arr.length) -1\n        else maxIndex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz46y5fh8.scala:26)\n\tat Problem.main(tmpz46y5fh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n   \
    \             maxValue = arr(i)\n                maxIndex = i\n            }\n\
    \        }\n        if (maxIndex == arr.length - 1) {\n            return -1\n\
    \        }\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7q2h43e.scala:28)\n\tat Problem.main(tmpg7q2h43e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ index\n            }\n            index += 1\n        }\n        if (maxIndex\
    \ == arr.length - 1) {\n            return -1\n        } else {\n            return\
    \ maxIndex\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3kn5r2uy.scala:31)\n\tat Problem.main(tmp3kn5r2uy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x < arr.head)\n     \
    \   if (maxIndex == -1) {\n            -1\n        } else {\n            maxIndex\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa706e1ow.scala:22)\n\tat Problem.main(tmpa706e1ow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInArray = 0\n        val maxIndexInArray2 = 0\n        for(i <-\
    \ 0 until arr.length) {\n            if(arr(i) > maxValue) {\n               \
    \ maxValue = arr(i)\n                maxIndexInArray = i\n            }\n    \
    \        if(arr(i) > maxValue && arr(i) != maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndexInArray2 = i\n            }\n        }\n \
    \       if(maxIndexInArray == maxIndexInArray2) {\n            return -1\n   \
    \     }\n        return maxIndexInArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsljqcgs4.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsljqcgs4.scala:21:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                maxIndexInArray\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Reassignment to val maxIndexInArray\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpsljqcgs4.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsljqcgs4.scala:25:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxIndexInArray2\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxIndexInArray2\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxVal = arr(0)\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) > maxVal) {\n          \
    \      maxVal = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpl7xvd6n6.scala:19:25 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        val maxValue = arr(0)\n      \
    \  val maxIndexInd = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ <= maxValue) {\n                maxValue = arr(i)\n                maxIndexInd\
    \ = i\n            }\n        }\n        if(maxIndexInd == arr.length-1)\n   \
    \         -1\n        else\n            maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8vwnfqna.scala:19:25 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8vwnfqna.scala:20:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                maxIndexInd\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxIndexInd\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val max = arr.last\n        val maxIndex = arr.lastIndexWhere(x\
    \ => x >= max)\n        if (maxIndex == -1) {\n            return -1\n       \
    \ }\n        val maxIndexBefore = arr.lastIndexWhere(x => x <= max)\n        if\
    \ (maxIndexBefore == -1) {\n            return -1\n        }\n        if (maxIndexBefore\
    \ < maxIndex) {\n            return maxIndex\n        }\n        return -1\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpu2et19.scala:29)\n\tat Problem.main(tmpdpu2et19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = 0\n        var maxVal = -1L\n        var\
    \ index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) >\
    \ maxVal) {\n                maxVal = arr(i)\n                maxIndex = index\n\
    \            }\n            index += 1\n        }\n        if (maxVal == -1L)\
    \ return -1L\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmprvb3d6zf.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxIndex = index\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1 else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucao9nn3.scala:18)\n\tat Problem.main(tmpucao9nn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var currentIndex = 0\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) > maxValue) {\n                maxValue = arr(i)\n              \
    \  maxIndex = currentIndex\n            }\n            currentIndex += 1\n   \
    \     }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6f7p2ka1.scala:27)\n\tat Problem.main(tmp6f7p2ka1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexWhere(x => x >= arr.last)\n    \
    \    if (maxIndex < 0) -1\n        else maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcddfxbia.scala:19)\n\tat Problem.main(tmpcddfxbia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  for (i <- arr.indices) {\n            if (arr(i) < maxValue) {\n          \
    \      maxValue = arr(i)\n                maxIndex = i\n            }\n      \
    \  }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vort_lp.scala:25)\n\tat Problem.main(tmp0vort_lp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = -1\n        var maxValue = arr(0)\n     \
    \   for (i <- arr.indices) {\n            if (arr(i) > maxValue) {\n         \
    \       maxValue = arr(i)\n                maxIndex = i\n            }\n     \
    \   }\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vvkmer.scala:25)\n\tat Problem.main(tmp07vvkmer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ return -1\n        if (maxIndex == 0) return 0\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex2 = arr.lastIndexWhere(x => x <= maxValue)\n        if (maxIndex2\
    \ == -1) return -1\n        if (maxIndex2 == 0) return 0\n        val maxValue2\
    \ = arr(maxIndex2)\n        if (maxValue == maxValue2) return maxIndex\n     \
    \   if (maxValue < maxValue2) return maxIndex2\n        return maxIndex2\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt4_9n2gm.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex == -1)\
    \ {\n            return -1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        val previousValue = arr(maxIndex - 1)\n        if (maxValue >= previousValue)\
    \ {\n            return maxIndex\n        }\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhm_v8xk.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val maxIndex = arr.indexOfMax\n        if (maxIndex < 0)\
    \ -1\n        else maxIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyu4hk2i.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var currentIndex = 0\n        var currentValue = arr(0)\n        var currentMax\
    \ = arr(0)\n        for (i <- 0 until arr.length) {\n            if (currentValue\
    \ <= currentMax) {\n                currentMax = currentValue\n              \
    \  currentIndex = i\n            }\n            currentValue = arr(i)\n      \
    \  }\n        if (currentValue > maxValue) {\n            maxValue = currentValue\n\
    \            maxIndex = currentIndex\n        }\n        return maxIndex\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2y9rienj.scala:33)\n\tat Problem.main(tmp2y9rienj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var maxIndex = 0\n        var maxValue = arr(0)\n      \
    \  var currentIndex = 1\n        var currentValue = arr(0)\n        while (currentIndex\
    \ < arr.length) {\n            if (currentValue <= maxValue) {\n             \
    \   maxValue = currentValue\n                maxIndex = currentIndex\n       \
    \     }\n            currentValue = arr(currentIndex)\n            currentIndex\
    \ += 1\n        }\n        if (maxIndex == arr.length) {\n            return -1\n\
    \        }\n        return maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzpiks6p.scala:32)\n\tat Problem.main(tmpdzpiks6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
