language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list = list.map(_.toUpperCase)\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyyed1fku.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    A\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    E\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    I\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    O\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defin"
  stdout: ''
  timestamp: 1659806097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        words.filter(_.contains(\"\
    a\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcestzkg.scala:25)\n\tat Problem.main(tmpbcestzkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3h17xvjr.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp3h17xvjr.scala:22:38 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.s"
  stdout: ''
  timestamp: 1659806097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val wordList = mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val letters = word.split(\"\")\n            letters.foreach(letter\
    \ => {\n                if (letter == \"a\" || letter == \"e\" || letter == \"\
    i\" || letter == \"o\" || letter == \"u\") {\n                    wordList +=\
    \ word\n                }\n            })\n        })\n        wordList.takeWhile(word\
    \ => word.length == n).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp31q_93ub.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).sortBy(_.toLowerCase)\n \
    \       list2.map(x => x.split(\"\").filter(_.toString.toChar == \"c\").mkString(\"\
    \")).filter(x => x.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpcvx4p933.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).sortBy(_.toLowerCase)\n\e[31m\e[31m   |\e[0m             \
    \                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcvx4p933.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list2.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e\
    [0m).filter(_.toString.toChar == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m                             \
    \             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        val consonants =\
    \ List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        for\
    \ (i <- 0 until list.size) {\n            val word = list(i)\n            if (word.length\
    \ == n) {\n                for (j <- 0 until word.length) {\n                \
    \    if (consonants.contains(word.charAt(j))) {\n                        result.add(word)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvhsx_77.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvhsx_77.scala:31:24\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer.empty[String]\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCountInWord = vowelsCount / s.length\n        val consonantsCountInWord\
    \ = consonantsCount / s.length\n        val vowelsCountInWordInWord = vowelsCountInWord\
    \ * consonantsCountInWord\n        val vowelsCountInWordInWordInWord = vowelsCountInWordInWord\
    \ * vowelsCountInWord\n        val vowelsCountInWordInWordInWordInWord = vowelsCountInWordInWordInWord\
    \ * consonantsCountInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWord * vowelsCountInWordInWord\n        val\
    \ vowelsCountInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n  \
    \      val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfyu2hfia.scala:37:11 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfyu2hfia.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfyu2hfia.scala:30:82 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWordInWordInWordInWord\e\
    [0m = vowelsCountInWordInWordInWord * consonantsCountInWordInWord\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                      Not found: consonantsCountInWordInWord\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfyu2hfia.scala:33:68 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWordInWordInWordInWordInWordInWordInWord\e\
    [0m = vowelsCountInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWord\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsCountInWordInWordInWordInWordInWordInWordInWord\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfyu2hfia.scala:34:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\e[0m = vowelsCountInWordI"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        if\
    \ (words.length == 0) Nil\n        else words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnipfvx_f.scala:21:170\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.size == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(x\
    \ => x.toString.toList.size == n).toList\n        if (result.isEmpty) List()\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp16mgdehd.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.toList.size\
    \ == n).toList\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"n\"))\n\
    \        val list9 = list.filter(x => x.contains(\"d\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"h\"))\n        val list11 = list.filter(x => x.contains(\"\
    w\"))\n        val list12 = list.filter(x => x.contains(\"s\"))\n        val list13\
    \ = list.filter(x => x.contains(\"p\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"r\"))\n        val list15 = list.filter(x => x.contains(\"f\"))\n\
    \        val list16 = list.filter(x => x.contains(\"g\"))\n        val list17\
    \ = list.filter(x => x.contains(\"t\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"c\"))\n        val list19 = list.filter(x => x.contains(\"k\"))\n\
    \        val list20 = list.filter(x => x.contains(\"m\"))\n        val list21\
    \ = list.filter(x => x.contains(\"y\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"b\"))\n        val list23 = list.filter(x => x.contains(\"j\"))\n\
    \        val list24 = list.filter(x => x.contains(\"q\"))\n        val list25\
    \ = list.filter(x => x.contains(\"x\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"z\"))\n        val list27 = list.filter(x => x.contains(\"v\"))\n\
    \        val list28 = list.filter(x => x.contains(\"w\"))\n        val list29\
    \ = list.filter(x => x.contains(\"z\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list31 = list.filter(x => x.contains(\"x\"))\n\
    \        val list32 = list.filter(x => x.contains(\"z\"))\n        val list33\
    \ = list.filter(x => x.contains(\"v\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"w\"))\n        val list35 = list.filter(x => x.contains(\"z\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt7lx0ht_.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt7lx0ht_.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val wordList = word.split(\"\")\n            val count = wordList.count(_\
    \ == 'a')\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsm5wmp5.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnsm5wmp5.scala:25:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     \e[33mval\e[0m \e[36mcount\e[0m = wordList.count(_ == \e[31m'a'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list2 = list.filterNot(_.isEmpty)\n        val list3 = list2.filterNot(_.isEmpty)\n\
    \        val list4 = list3.filterNot(_.isEmpty)\n        val list5 = list4.filterNot(_.isEmpty)\n\
    \        val list6 = list5.filterNot(_.isEmpty)\n        val list7 = list6.filterNot(_.isEmpty)\n\
    \        val list8 = list7.filterNot(_.isEmpty)\n        val list9 = list8.filterNot(_.isEmpty)\n\
    \        val list10 = list9.filterNot(_.isEmpty)\n        val list11 = list10.filterNot(_.isEmpty)\n\
    \        val list12 = list11.filterNot(_.isEmpty)\n        val list13 = list12.filterNot(_.isEmpty)\n\
    \        val list14 = list13.filterNot(_.isEmpty)\n        val list15 = list14.filterNot(_.isEmpty)\n\
    \        val list16 = list15.filterNot(_.isEmpty)\n        val list17 = list16.filterNot(_.isEmpty)\n\
    \        val list18 = list17.filterNot(_.isEmpty)\n        val list19 = list18.filterNot(_.isEmpty)\n\
    \        val list20 = list19.filterNot(_.isEmpty)\n        val list21 = list20.filterNot(_.isEmpty)\n\
    \        val list22 = list21.filterNot(_.isEmpty)\n        val list23 = list22.filterNot(_.isEmpty)\n\
    \        val list24 = list23.filterNot(_.isEmpty)\n        val list25 = list24.filterNot(_.isEmpty)\n\
    \        val list26 = list25.filterNot(_.isEmpty)\n        val list27 = list26.filterNot(_.isEmpty)\n\
    \        val list28 = list27.filterNot(_.isEmpty)\n        val list29 = list28.filterNot(_.isEmpty)\n\
    \        val list30 = list29.filterNot(_.isEmpty)\n        val list31 = list30.filterNot(_.isEmpty)\n\
    \        val list32 = list31.filterNot(_.isEmpty)\n        val list33 = list32.filterNot(_.isEmpty)\n\
    \        val list34 = list33.filterNot(_.isEmpty)\n        val list35 = list34.filterNot(_.isEmpty)\n\
    \        val list36 = list35.filterNot(_.isEmpty)\n        val list37 = list36.filterNot(_.isEmpty)\n\
    \        val list38 = list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8o_h554w.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd5bw1st_.scala:54:20 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mlist34\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd5bw1st_.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val wordSet = words.toSet\n        val consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\"\
    )\n        val consonantSet = consonants.toSet\n        val consonantList = consonants.toList\n\
    \        val consonantSetList = consonantSet.toList\n        val consonantSetSet\
    \ = consonantSet.toSet\n        val consonantSetSetList = consonantSetSet.toList\n\
    \        val consonantSetSetSet = consonantSetSet.toSet\n        val consonantSetSetSetList\
    \ = consonantSetSetSet.toList\n        val consonantSetSetSetSet = consonantSetSetSet.toSet\n\
    \        val consonantSetSetSetSetList = consonantSetSetSetSet.toList\n      \
    \  val consonantSetSetSetSetSet = consonantSetSetSetSet.toSet\n        val consonantSetSetSetSetSetList\
    \ = consonantSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSet =\
    \ consonantSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpspv61cml.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspv61cml.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSetSetSetSetSetSet\e[0m = consonantSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspv61cml.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSetSetSetSetSetSetList\e\
    [0m = consonantSetSetSetSetSetSetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSetSetSetList is already defined as \e\
    [33mvalue\e[0m \e[35mconsonantSetSetSetSetSetSetSetList\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpspv61cml.scala:41:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSetSetSetSetSetSetSet\e[0m = consonantSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m            Recursive \e[33mvalue\e[0m \e[35mconsonantSetSetSetSetSetSetSetSet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpspv61cml.scala:43:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSetSetSetSetSetSetSetSet\e[0m = consonantSetSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val list = words.toList.filter(_ => _.length == n)\n        list.sortBy(_.length).reverse.map(_.toLowerCase).filter(_.contains(\"\
    CONSONANTS\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1h_klye8.scala:22:44 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.toList.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded function:\n\
    \e[31m   |\e[0m   _$3 => _$3.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659806093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkwsxow5.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    if (result.isEmpty) {\n            List()\n        } else {\n           \
    \ result.toList\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dx0x0ey.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase)\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn9qurol.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- list) {\n            val\
    \ count = count.get(word)\n            if (count == null) {\n                count.update(word,\
    \ 1l)\n            } else {\n                count.update(word, count + 1l)\n\
    \            }\n        }\n        for (word <- count.keys) {\n            if\
    \ (count.getOrElse(word, 0l) == n) {\n                result += List(word)\n \
    \           }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25wuxzsj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25wuxzsj.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \ \").filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\"\
    )).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbev2oi_3.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbev2oi_3.scala:21:95 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonants\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.le"
  stdout: ''
  timestamp: 1659806098
