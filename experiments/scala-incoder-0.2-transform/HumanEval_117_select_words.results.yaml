language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list = list.map(_.toUpperCase)\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyyed1fku.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    A\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    E\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    I\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyyed1fku.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    O\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defin"
  stdout: ''
  timestamp: 1659806097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        words.filter(_.contains(\"\
    a\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcestzkg.scala:25)\n\tat Problem.main(tmpbcestzkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3h17xvjr.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp3h17xvjr.scala:22:38 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e\
    [31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length ==\
    \ n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.length == n).flatMap(_.s"
  stdout: ''
  timestamp: 1659806097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val wordList = mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val letters = word.split(\"\")\n            letters.foreach(letter\
    \ => {\n                if (letter == \"a\" || letter == \"e\" || letter == \"\
    i\" || letter == \"o\" || letter == \"u\") {\n                    wordList +=\
    \ word\n                }\n            })\n        })\n        wordList.takeWhile(word\
    \ => word.length == n).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp31q_93ub.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).sortBy(_.toLowerCase)\n \
    \       list2.map(x => x.split(\"\").filter(_.toString.toChar == \"c\").mkString(\"\
    \")).filter(x => x.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpcvx4p933.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).sortBy(_.toLowerCase)\n\e[31m\e[31m   |\e[0m             \
    \                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcvx4p933.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list2.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e\
    [0m).filter(_.toString.toChar == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m                             \
    \             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        val consonants =\
    \ List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        for\
    \ (i <- 0 until list.size) {\n            val word = list(i)\n            if (word.length\
    \ == n) {\n                for (j <- 0 until word.length) {\n                \
    \    if (consonants.contains(word.charAt(j))) {\n                        result.add(word)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvhsx_77.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvhsx_77.scala:31:24\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer.empty[String]\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCountInWord = vowelsCount / s.length\n        val consonantsCountInWord\
    \ = consonantsCount / s.length\n        val vowelsCountInWordInWord = vowelsCountInWord\
    \ * consonantsCountInWord\n        val vowelsCountInWordInWordInWord = vowelsCountInWordInWord\
    \ * vowelsCountInWord\n        val vowelsCountInWordInWordInWordInWord = vowelsCountInWordInWordInWord\
    \ * consonantsCountInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWord * vowelsCountInWordInWord\n        val\
    \ vowelsCountInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n  \
    \      val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfyu2hfia.scala:37:11 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfyu2hfia.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfyu2hfia.scala:30:82 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWordInWordInWordInWord\e\
    [0m = vowelsCountInWordInWordInWord * consonantsCountInWordInWord\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                      Not found: consonantsCountInWordInWord\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfyu2hfia.scala:33:68 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWordInWordInWordInWordInWordInWordInWord\e\
    [0m = vowelsCountInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWord\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsCountInWordInWordInWordInWordInWordInWordInWord\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfyu2hfia.scala:34:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\e[0m = vowelsCountInWordI"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        if\
    \ (words.length == 0) Nil\n        else words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnipfvx_f.scala:21:170\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.size == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(x\
    \ => x.toString.toList.size == n).toList\n        if (result.isEmpty) List()\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp16mgdehd.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.toList.size\
    \ == n).toList\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"n\"))\n\
    \        val list9 = list.filter(x => x.contains(\"d\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"h\"))\n        val list11 = list.filter(x => x.contains(\"\
    w\"))\n        val list12 = list.filter(x => x.contains(\"s\"))\n        val list13\
    \ = list.filter(x => x.contains(\"p\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"r\"))\n        val list15 = list.filter(x => x.contains(\"f\"))\n\
    \        val list16 = list.filter(x => x.contains(\"g\"))\n        val list17\
    \ = list.filter(x => x.contains(\"t\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"c\"))\n        val list19 = list.filter(x => x.contains(\"k\"))\n\
    \        val list20 = list.filter(x => x.contains(\"m\"))\n        val list21\
    \ = list.filter(x => x.contains(\"y\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"b\"))\n        val list23 = list.filter(x => x.contains(\"j\"))\n\
    \        val list24 = list.filter(x => x.contains(\"q\"))\n        val list25\
    \ = list.filter(x => x.contains(\"x\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"z\"))\n        val list27 = list.filter(x => x.contains(\"v\"))\n\
    \        val list28 = list.filter(x => x.contains(\"w\"))\n        val list29\
    \ = list.filter(x => x.contains(\"z\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list31 = list.filter(x => x.contains(\"x\"))\n\
    \        val list32 = list.filter(x => x.contains(\"z\"))\n        val list33\
    \ = list.filter(x => x.contains(\"v\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"w\"))\n        val list35 = list.filter(x => x.contains(\"z\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt7lx0ht_.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt7lx0ht_.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val wordList = word.split(\"\")\n            val count = wordList.count(_\
    \ == 'a')\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsm5wmp5.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnsm5wmp5.scala:25:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     \e[33mval\e[0m \e[36mcount\e[0m = wordList.count(_ == \e[31m'a'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list2 = list.filterNot(_.isEmpty)\n        val list3 = list2.filterNot(_.isEmpty)\n\
    \        val list4 = list3.filterNot(_.isEmpty)\n        val list5 = list4.filterNot(_.isEmpty)\n\
    \        val list6 = list5.filterNot(_.isEmpty)\n        val list7 = list6.filterNot(_.isEmpty)\n\
    \        val list8 = list7.filterNot(_.isEmpty)\n        val list9 = list8.filterNot(_.isEmpty)\n\
    \        val list10 = list9.filterNot(_.isEmpty)\n        val list11 = list10.filterNot(_.isEmpty)\n\
    \        val list12 = list11.filterNot(_.isEmpty)\n        val list13 = list12.filterNot(_.isEmpty)\n\
    \        val list14 = list13.filterNot(_.isEmpty)\n        val list15 = list14.filterNot(_.isEmpty)\n\
    \        val list16 = list15.filterNot(_.isEmpty)\n        val list17 = list16.filterNot(_.isEmpty)\n\
    \        val list18 = list17.filterNot(_.isEmpty)\n        val list19 = list18.filterNot(_.isEmpty)\n\
    \        val list20 = list19.filterNot(_.isEmpty)\n        val list21 = list20.filterNot(_.isEmpty)\n\
    \        val list22 = list21.filterNot(_.isEmpty)\n        val list23 = list22.filterNot(_.isEmpty)\n\
    \        val list24 = list23.filterNot(_.isEmpty)\n        val list25 = list24.filterNot(_.isEmpty)\n\
    \        val list26 = list25.filterNot(_.isEmpty)\n        val list27 = list26.filterNot(_.isEmpty)\n\
    \        val list28 = list27.filterNot(_.isEmpty)\n        val list29 = list28.filterNot(_.isEmpty)\n\
    \        val list30 = list29.filterNot(_.isEmpty)\n        val list31 = list30.filterNot(_.isEmpty)\n\
    \        val list32 = list31.filterNot(_.isEmpty)\n        val list33 = list32.filterNot(_.isEmpty)\n\
    \        val list34 = list33.filterNot(_.isEmpty)\n        val list35 = list34.filterNot(_.isEmpty)\n\
    \        val list36 = list35.filterNot(_.isEmpty)\n        val list37 = list36.filterNot(_.isEmpty)\n\
    \        val list38 = list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8o_h554w.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd5bw1st_.scala:54:20 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mlist34\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd5bw1st_.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val wordSet = words.toSet\n        val consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\"\
    )\n        val consonantSet = consonants.toSet\n        val consonantList = consonants.toList\n\
    \        val consonantSetList = consonantSet.toList\n        val consonantSetSet\
    \ = consonantSet.toSet\n        val consonantSetSetList = consonantSetSet.toList\n\
    \        val consonantSetSetSet = consonantSetSet.toSet\n        val consonantSetSetSetList\
    \ = consonantSetSetSet.toList\n        val consonantSetSetSetSet = consonantSetSetSet.toSet\n\
    \        val consonantSetSetSetSetList = consonantSetSetSetSet.toList\n      \
    \  val consonantSetSetSetSetSet = consonantSetSetSetSet.toSet\n        val consonantSetSetSetSetSetList\
    \ = consonantSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSet =\
    \ consonantSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSetSetSetSetSet\
    \ = consonantSetSetSetSetSetSetSetSetSet.toSet\n        val consonantSetSetSetSetSetSetSetSetSetList\
    \ = consonantSetSetSetSetSetSetSetSetSetSet.toList\n        val consonantSetSetSetSetSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpspv61cml.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspv61cml.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSetSetSetSetSetSet\e[0m = consonantSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspv61cml.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSetSetSetSetSetSetList\e\
    [0m = consonantSetSetSetSetSetSetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSetSetSetList is already defined as \e\
    [33mvalue\e[0m \e[35mconsonantSetSetSetSetSetSetSetList\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpspv61cml.scala:41:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSetSetSetSetSetSetSet\e[0m = consonantSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m            Recursive \e[33mvalue\e[0m \e[35mconsonantSetSetSetSetSetSetSetSet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpspv61cml.scala:43:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSetSetSetSetSetSetSetSet\e[0m = consonantSetSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val list = words.toList.filter(_ => _.length == n)\n        list.sortBy(_.length).reverse.map(_.toLowerCase).filter(_.contains(\"\
    CONSONANTS\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1h_klye8.scala:22:44 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.toList.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded function:\n\
    \e[31m   |\e[0m   _$3 => _$3.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659806093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkwsxow5.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    if (result.isEmpty) {\n            List()\n        } else {\n           \
    \ result.toList\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dx0x0ey.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase)\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn9qurol.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- list) {\n            val\
    \ count = count.get(word)\n            if (count == null) {\n                count.update(word,\
    \ 1l)\n            } else {\n                count.update(word, count + 1l)\n\
    \            }\n        }\n        for (word <- count.keys) {\n            if\
    \ (count.getOrElse(word, 0l) == n) {\n                result += List(word)\n \
    \           }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25wuxzsj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25wuxzsj.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \ \").filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\"\
    )).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).filter(_.length == n).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \")).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\")).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbev2oi_3.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbev2oi_3.scala:21:95 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonants\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.length ==\
    \ n).map(_.toLowerCase).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.le"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = new mutable.ListBuffer[String]()\n        val\
    \ vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n   \
    \     for (word <- words) {\n            val wordLength = word.length\n      \
    \      val consonantCount = word.count(consonants)\n            if (wordLength\
    \ == n) {\n                if (consonantCount == n) {\n                    result\
    \ += word\n                }\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv6ja67xb.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv6ja67xb.scala:27:44 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mconsonantCount\e[0m\
    \ = word.count(consonants)\n\e[31m\e[31m   |\e[0m                            \
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \             Found:    (consonants : String)\n\e[31m   |\e[0m               \
    \                          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpv6ja67xb.scala:30:27 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    result += word\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a\
    \ member of List[String] - did you mean result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").filter(_.isLetter).toList\n\
    \        val result = list.filter(x => x.count(_ == 'a') <= n).distinct\n    \
    \    result.map(x => x.split(\"\").filter(_.isLetter).mkString(\" \"))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaa2i8gey.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \         value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpaa2i8gey.scala:23:45 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        result.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result: List[String] = new ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word :: \"\")\n        })\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_76u80si.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_76u80si.scala:25:35 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (count == n) result += (word\
    \ :: \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value += is not a member of List[String] - did you mean\
    \ result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_76u80si.scala:25:44\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m\
    \ (count == n) result += (word :: \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                        ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             value :: is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.split(\"[^aeiou]\").length\n         \
    \   if (count == n) result += (word + \" \")\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzqj8l89u.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2upjb4pf.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2upjb4pf.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter( x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") )\n        val list3\
    \ = list2.filter( x => x.contains(\"b\") || x.contains(\"c\") || x.contains(\"\
    d\") || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"h\") || x.contains(\"\
    j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"m\") || x.contains(\"\
    n\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"r\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"v\") || x.contains(\"w\") || x.contains(\"\
    x\") || x.contains(\"y\") || x.contains(\"z\") )\n        val list4 = list3.filter(\
    \ x => x.contains(\"0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"\
    3\") || x.contains(\"4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"\
    7\") || x.contains(\"8\") || x.contains(\"9\") )\n        val list5 = list4.filter(\
    \ x => x.contains(\"A\") || x.contains(\"B\") || x.contains(\"C\") || x.contains(\"\
    D\") || x.contains(\"E\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"\
    H\") || x.contains(\"I\") || x.contains(\"J\") || x.contains(\"K\") || x.contains(\"\
    L\") || x.contains(\"M\") || x.contains(\"N\") || x.contains(\"P\") || x.contains(\"\
    Q\") || x.contains(\"R\") || x.contains(\"S\") || x.contains(\"T\") || x.contains(\"\
    V\") || x.contains(\"W\") || x.contains(\"X\") || x.contains(\"Y\") || x.contains(\"\
    Z\") )\n        val list6 = list5.filter( x => x.contains(\"0\") || x.contains(\"\
    1\") || x.contains(\"2\") || x.contains(\"3\") || x.contains(\"4\") || x.contains(\"\
    5\") || x.contains(\"6\") || x.contains(\"7\") || x.contains(\"8\") || x.contains(\"\
    9\") )\n        val list7 = list6.filter( x => x.contains(\"A\") || x.contains(\"\
    B\") || x.contains(\"C\") || x.contains(\"D\") || \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk33i4bc8.scala:27:114 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlist7\e[0m = list6.filter(\
    \ \e[36mx\e[0m => x.contains(\e[31m\"A\"\e[0m) || x.contains(\e[31m\"B\"\e[0m)\
    \ || x.contains(\e[31m\"C\"\e[0m) || x.contains(\e[31m\"D\"\e[0m) || \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk33i4bc8.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = new mutable.ListBuffer[String]()\n        for(word <- words){\n\
    \            val count = word.count(_ == 'a')\n            if(count == n){\n \
    \               list += word\n            }\n        }\n        list.filter(_\
    \ != \"\").sort\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmpkb7wut.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 = list.filter(x\
    \ => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"i\"\
    ))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = list.filter(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpra1oqj9t.scala:56:33 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = list.filter(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpra1oqj9t.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = new mutable.ListBuffer[String]()\n        for(word\
    \ <- words) {\n            val count = word.count(c => c.isLetter)\n         \
    \   if(count == n) {\n                result ::= word\n            }\n       \
    \ }\n        if(result.isEmpty) {\n            List()\n        } else {\n    \
    \        result.toList\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2hxfhf.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqf2hxfhf.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                result ::= word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ::= is not a member\
    \ of List[String] - did you mean result.::?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val wordList2 = wordList.filter(x => x.contains(\"a\"))\n        val\
    \ wordList3 = wordList2.filter(x => x.contains(\"e\"))\n        val wordList4\
    \ = wordList3.filter(x => x.contains(\"i\"))\n        val wordList5 = wordList4.filter(x\
    \ => x.contains(\"o\"))\n        val wordList6 = wordList5.filter(x => x.contains(\"\
    u\"))\n        val wordList7 = wordList6.filter(x => x.contains(\"l\"))\n    \
    \    val wordList8 = wordList7.filter(x => x.contains(\"n\"))\n        val wordList9\
    \ = wordList8.filter(x => x.contains(\"d\"))\n        val wordList10 = wordList9.filter(x\
    \ => x.contains(\"g\"))\n        val wordList11 = wordList10.filter(x => x.contains(\"\
    e\"))\n        val wordList12 = wordList11.filter(x => x.contains(\"s\"))\n  \
    \      val wordList13 = wordList12.filter(x => x.contains(\"t\"))\n        val\
    \ wordList14 = wordList13.filter(x => x.contains(\"a\"))\n        val wordList15\
    \ = wordList14.filter(x => x.contains(\"m\"))\n        val wordList16 = wordList15.filter(x\
    \ => x.contains(\"p\"))\n        val wordList17 = wordList16.filter(x => x.contains(\"\
    h\"))\n        val wordList18 = wordList17.filter(x => x.contains(\"r\"))\n  \
    \      val wordList19 = wordList18.filter(x => x.contains(\"y\"))\n        val\
    \ wordList20 = wordList19.filter(x => x.contains(\"k\"))\n        val wordList21\
    \ = wordList20.filter(x => x.contains(\"b\"))\n        val wordList22 = wordList21.filter(x\
    \ => x.contains(\"p\"))\n        val wordList23 = wordList22.filter(x => x.contains(\"\
    s\"))\n        val wordList24 = wordList23.filter(x => x.contains(\"e\"))\n  \
    \      val wordList25 = wordList24.filter(x => x.contains(\"c\"))\n        val\
    \ wordList26 = wordList25.filter(x => x.contains(\"h\"))\n        val wordList27\
    \ = wordList26.filter(x => x.contains(\"r\"))\n        val wordList28 = wordList27.filter(x\
    \ => x.contains(\"y\"))\n        val wordList29 = wordList28.filter(x => x.contains(\"\
    k\"))\n        val wordList30 = wordList29.filter(x => x.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphtrdcnli.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphtrdcnli.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).map(_.split(\"\")).filter(x\
    \ => x.forall(_.isLetter)).toList\n        result.filter(x => x.size == n).map(x\
    \ => x.mkString(\"\")).filter(x => x.forall(_.isLetter)).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpjargv0vf.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2.length == n.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjargv0vf.scala:22:93\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = list.filter(_ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(\e\
    [36mx\e[0m => x.forall(_.isLetter)).toList\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val words = x.split(\"[^aeiou]\").length\n            if (words\
    \ == n) result += (x :: \"\")\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnax293bo.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase)\n\
    \        val result = list.filter(_ contains n).sortBy(_.length)\n        result.takeWhile(_\
    \ contains n).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnvj5nx0k.scala:23:39\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result.takeWhile(_ contains\
    \ n).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            if (word.count(_ == 'a') >= n) result += word\n        }\n \
    \       if (result.isEmpty) List()\n        else result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp43haydr.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).toList\n        val list3\
    \ = list2.filter(_ => _.contains(\"a\")).toList\n        val list4 = list3.filter(_\
    \ => _.contains(\"e\")).toList\n        val list5 = list4.filter(_ => _.contains(\"\
    i\")).toList\n        val list6 = list5.filter(_ => _.contains(\"o\")).toList\n\
    \        val list7 = list6.filter(_ => _.contains(\"u\")).toList\n        list7\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0xc80z6m.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).toList\n\e[31m\e[31m   |\e[0m                            \
    \         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0xc80z6m.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m)).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 =>\
    \ _$4.contains(\e[32m\"a\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0xc80z6m.scala:24:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mlist4\e[0m = list3.filter(_ => _.contains(\e[31m\"e\"\e[0m)).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 =>\
    \ _$6.contains(\e[32m\"e\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0xc80z6m.scala:25:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mlist5\e[0m = list4.filter(_ => _.contains(\e[31m\"i\"\e[0m)).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$8 of expanded function:\n\e[31m   |\e[0m   _$8 =>\
    \ _$8.contains(\e[32m\"i\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0xc80z6m.scala:26:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mlist6\e[0m = list5.filter(_ => _.contains(\e[31m\"o\"\e[0m)).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e["
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\
    \n        val consonantCount = s.count(c => consonants.contains(c))\n        val\
    \ vowelCount = s.count(c => vowels.contains(c))\n        val consonantCountInWord\
    \ = consonantCount / n\n        val vowelCountInWord = vowelCount / n\n      \
    \  val consonantCountInWordInWord = consonantCountInWord * n\n        val vowelCountInWordInWord\
    \ = vowelCountInWord * n\n        val consonantCountInWordInWordInWord = consonantCountInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWord = vowelCountInWordInWord * n\n\
    \        val consonantCountInWordInWordInWordInWord = consonantCountInWordInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWordInWord = vowelCountInWordInWordInWord\
    \ * n\n        val consonantCountInWordInWordInWordInWordInWord = consonantCountInWordInWordInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWordInWordInWord = vowelCountInWordInWordInWordInWord\
    \ * n\n        val consonantCountInWordInWordInWordInWordInWordInWord = consonantCountInWordInWordInWordInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWordInWordInWordInWord = vowelCountInWordInWordInWordInWordInWord\
    \ * n\n        val consonantCountInWordInWordInWordInWordInWordInWordInWord =\
    \ consonantCountInWordInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWordInWordInWord * n\n     \
    \   val vowelCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = vowelCountInWordInWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfyjtlhmd.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfyjtlhmd.scala:39:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCountInWordInWordInWordInWordInWordInWordInWord\e[0m = vowelCountInWordInWordInWordInWordInWordInWordInWord\
    \ * n\n\e[31m\e[31m   |\e[0m                                                 \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelCountInWordInWordInWordInWordInWordInWordInWord\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfyjtlhmd.scala:40:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCountInWordInWordInWordInWordInWordInWordInWordInWord\e[0m =\
    \ consonantCountInWordInWordInWordInWordInWordInWordInWordInWord * n\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mconsonantCountInWordInWordInWordInWordInWordInWordInWordInWord\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfyjtlhmd.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            val letters = word.split(\"\")\n            for(letter <- letters)\
    \ {\n                if(letter.length == n) {\n                    list += word\n\
    \                }\n            }\n        }\n        list.filter(_ != \"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfly0vf_4.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val wordSet = words.toSet\n        val consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\"\
    )\n        val consonantSet = consonants.toSet\n        val consonantCount = consonantSet.count\n\
    \        val consonantCountSet = consonantCount.toSet\n        val consonantCountSetSize\
    \ = consonantCountSet.size\n        val consonantCountSetSize2 = consonantCountSetSize\
    \ * consonantCountSetSize\n        val consonantCountSetSize3 = consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize\n        val consonantCountSetSize4\
    \ = consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\n\
    \        val consonantCountSetSize5 = consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\n\
    \        val consonantCountSetSize6 = consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize\n        val consonantCountSetSize7\
    \ = consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize\n        val consonantCountSetSize8\
    \ = consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\n  \
    \      val consonantCountSetSize9 = consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCount\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph9komhef.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountSet\e[0m =\
    \ consonantCount.toSet\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value toSet is not a member of (String => Boolean)\
    \ => Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph9komhef.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = words.filter(_ => _.length == n).map(_.toLowerCase).toList\n\
    \        list.filter(x => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"\
    i\") || x.contains(\"o\") || x.contains(\"u\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpr4_wl4a1.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.filter(_\
    \ => _.length == n).map(_.toLowerCase).toList\n\e[31m\e[31m   |\e[0m         \
    \                            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            val count = word.count(c => c.isLetter)\n            if(count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        if(result.isEmpty) {\n            List()\n        } else {\n        \
    \    result.mkString(\" \")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2w23fz6e.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjmx8yy2d.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93zfmp7o.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"l\"))\n\
    \        val list9 = list.filter(x => x.contains(\"a\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list11 = list.filter(x => x.contains(\"\
    i\"))\n        val list12 = list.filter(x => x.contains(\"o\"))\n        val list13\
    \ = list.filter(x => x.contains(\"u\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list15 = list.filter(x => x.contains(\"l\"))\n\
    \        val list16 = list.filter(x => x.contains(\"a\"))\n        val list17\
    \ = list.filter(x => x.contains(\"e\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list19 = list.filter(x => x.contains(\"o\"))\n\
    \        val list20 = list.filter(x => x.contains(\"u\"))\n        val list21\
    \ = list.filter(x => x.contains(\"l\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list23 = list.filter(x => x.contains(\"a\"))\n\
    \        val list24 = list.filter(x => x.contains(\"e\"))\n        val list25\
    \ = list.filter(x => x.contains(\"i\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list27 = list.filter(x => x.contains(\"u\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"l\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list31 = list.filter(x => x.contains(\"e\"))\n\
    \        val list32 = list.filter(x => x.contains(\"i\"))\n        val list33\
    \ = list.filter(x => x.contains(\"o\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"u\"))\n        val list35 = list.filter(x => x.contains(\"l\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcd6to7dc.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcd6to7dc.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n)\n        val list3 = list2.filter(_\
    \ => _.contains(\"a\"))\n        val list4 = list3.filter(_ => _.contains(\"e\"\
    ))\n        val list5 = list4.filter(_ => _.contains(\"i\"))\n        val list6\
    \ = list5.filter(_ => _.contains(\"o\"))\n        val list7 = list6.filter(_ =>\
    \ _.contains(\"u\"))\n        list7\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4.contains(\e\
    [32m\"a\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:24:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mlist4\e[0m = list3.filter(_ => _.contains(\e[31m\"e\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => _$6.contains(\e\
    [32m\"e\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:25:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mlist5\e[0m = list4.filter(_ => _.contains(\e[31m\"i\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$8 of expanded function:\n\e[31m   |\e[0m   _$8 => _$8.contains(\e\
    [32m\"i\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:26:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mlist6\e[0m = list5.filter(_ => _.contains(\e[31m\"o\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m  Missing\
    \ parameter"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val result = list.filterNot(_.isEmpty).filterNot(_.contains(\"a\")).filterNot(_.contains(\"\
    e\")).filterNot(_.contains(\"i\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"\
    u\")).filterNot(_.contains(\"y\")).filterNot(_.contains(\"h\")).filterNot(_.contains(\"\
    l\")).filterNot(_.contains(\"s\")).filterNot(_.contains(\"d\")).filterNot(_.contains(\"\
    c\")).filterNot(_.contains(\"m\")).filterNot(_.contains(\"p\")).filterNot(_.contains(\"\
    f\")).filterNot(_.contains(\"g\")).filterNot(_.contains(\"b\")).filterNot(_.contains(\"\
    n\")).filterNot(_.contains(\"k\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"\
    x\")).filterNot(_.contains(\"z\")).filterNot(_.contains(\"t\")).filterNot(_.contains(\"\
    r\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"s\")).filterNot(_.contains(\"\
    w\")).filterNot(_.contains(\"v\")).filterNot(_.contains(\"z\")).filterNot(_.contains(\"\
    y\")).filterNot(_.contains(\"a\")).filterNot(_.contains(\"e\")).filterNot(_.contains(\"\
    i\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"u\")).filterNot(_.contains(\"\
    y\")).filterNot(_.contains(\"h\")).filterNot(_.contains(\"l\")).filterNot(_.contains(\"\
    s\")).filterNot(_.contains(\"d\")).filterNot(_.contains(\"c\")).filterNot(_.contains(\"\
    m\")).filterNot(_.contains(\"p\")).filterNot(_.contains(\"f\")).filterNot(_.contains(\"\
    g\")).filterNot(_.contains(\"b\")).filterNot(_.contains(\"n\")).filterNot(_.contains(\"\
    k\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"x\")).filterNot(_.contains(\"\
    z\")).filterNot(_.contains(\"t\")).filterNot(_.contains(\"r\")).filterNot(_.contains(\"\
    q\")).filterNot(_.contains(\"s\")).filterNot(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3l9mwme2.scala:22:1515 -------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filterNot(_.isEmpty).filterNot(_.contains(\e\
    [31m\"a\"\e[0m)).filterNot(_.contains(\e[31m\"e\"\e[0m)).filterNot(_.contains(\e\
    [31m\"i\"\e[0m)).filterNot(_.contains(\e[31m\"o\"\e[0m)).filterNot(_.contains(\e\
    [31m\"u\"\e[0m)).filterNot(_.contains(\e[31m\"y\"\e[0m)).filterNot(_.contains(\e\
    [31m\"h\"\e[0m)).filterNot(_.contains(\e[31m\"l\"\e[0m)).filterNot(_.contains(\e\
    [31m\"s\"\e[0m)).filterNot(_.contains(\e[31m\"d\"\e[0m)).filterNot(_.contains(\e\
    [31m\"c\"\e[0m)).filterNot(_.contains(\e[31m\"m\"\e[0m)).filterNot(_.contains(\e\
    [31m\"p\"\e[0m)).filterNot(_.contains(\e[31m\"f\"\e[0m)).filterNot(_.contains(\e\
    [31m\"g\"\e[0m)).filterNot(_.contains(\e[31m\"b\"\e[0m)).filterNot(_.contains(\e\
    [31m\"n\"\e[0m)).filterNot(_.contains(\e[31m\"k\"\e[0m)).filterNot(_.contains(\e\
    [31m\"q\"\e[0m)).filterNot(_.contains(\e[31m\"x\"\e[0m)).filterNot(_.contains(\e\
    [31m\"z\"\e[0m)).filterNot(_.contains(\e[31m\"t\"\e[0m)).filterNot(_.contains(\e\
    [31m\"r\"\e[0m)).filterNot(_.contains(\e[31m\"q\"\e[0m)).filterNot(_.contains(\e\
    [31m\"s\"\e[0m)).filterNot(_.contains(\e[31m\"w\"\e[0m)).filterNot(_.contains(\e\
    [31m\"v\"\e[0m)).filterNot(_.contains(\e[31m\"z\"\e[0m)).filterNot(_.contains(\e\
    [31m\"y\"\e[0m)).filterNot(_.contains(\e[31m\"a\"\e[0m)).filterNot(_.contains(\e\
    [31m\"e\"\e[0m)).filterNot(_.contains(\e[31m\"i\"\e[0m)).filterNot(_.contains(\e\
    [31m\"o\"\e[0m)).filterNot(_.contains(\e[31m\"u\"\e[0m)).filterNot(_.contains(\e\
    [31m\"y\"\e[0m)).filterNot(_.contains(\e[31m\"h\"\e[0m)).filterNot(_.contains(\e\
    [31m\"l\"\e[0m)).filterNot(_.contains(\e[31m\"s\"\e[0m)).filterNot(_.contains(\e\
    [31m\"d\"\e[0m)).filterNot(_.contains(\e[31m\"c\"\e[0m)).filterNot(_.contains(\e\
    [31m\"m\"\e[0m)).filterNot(_.contains(\e[31m\"p\"\e[0m)).filterNot(_.contains(\e\
    [31m\"f\"\e[0m)).filterNot(_.contains(\e[31m\"g\"\e[0m)).filterNot(_.contains(\e\
    [31m\"b\"\e[0m)).filterNot(_.contains(\e[31m\"n\"\e[0m)).filterNot(_.contains(\e\
    [31m\"k\"\e[0m)).filterNot(_.contains(\e[31m\"q\"\e[0m)).filterNot(_.contains(\e\
    [31m\"x\"\e[0m)).filterNot(_.contains(\e[31m\"z\"\e[0m)).filterNot(_.contains(\e\
    [31m\"t\"\e[0m)).filterNot(_.contains(\e[31m\"r\"\e[0m))"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu43qs7qu.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(_ == 'a')\n            if (count ==\
    \ n) {\n                result += word\n            }\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_bloka7m.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprh4izbjt.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelCountInString = vowelCount / n\n        val consonantCountInString\
    \ = consonantCount / n\n        val consonantCountInString2 = consonantCountInString\
    \ * 2\n        val consonantCountInString3 = consonantCountInString2 * 2\n   \
    \     val consonantCountInString4 = consonantCountInString3 * 2\n        val consonantCountInString5\
    \ = consonantCountInString4 * 2\n        val consonantCountInString6 = consonantCountInString5\
    \ * 2\n        val consonantCountInString7 = consonantCountInString6 * 2\n   \
    \     val consonantCountInString8 = consonantCountInString7 * 2\n        val consonantCountInString9\
    \ = consonantCountInString8 * 2\n        val consonantCountInString10 = consonantCountInString9\
    \ * 2\n        val consonantCountInString11 = consonantCountInString10 * 2\n \
    \       val consonantCountInString12 = consonantCountInString11 * 2\n        val\
    \ consonantCountInString13 = consonantCountInString12 * 2\n        val consonantCountInString14\
    \ = consonantCountInString13 * 2\n        val consonantCountInString15 = consonantCountInString14\
    \ * 2\n        val consonantCountInString16 = consonantCountInString15 * 2\n \
    \       val consonantCountInString17 = consonantCountInString16 * 2\n        val\
    \ consonantCountInString18 = consonantCountInString17 * 2\n        val consonantCountInString19\
    \ = consonantCountInString18 * 2\n        val consonantCountInString20 = consonantCountInString19\
    \ * 2\n        val consonantCountInString21 = consonantCountInString20 * 2\n \
    \       val consonantCountInString22 = consonantCountInString21 * 2\n        val\
    \ consonantCountInString23 = consonantCountInString22 * 2\n        val conson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp26a1e9bk.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26a1e9bk.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp26a1e9bk.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m = s.count(vowels)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                 Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp26a1e9bk.scala:25:37\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m = s.count(consonants)\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Found:    (consonants : String)\n\e[31m   |\e[0m                           \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp26a1e9bk.scala:51:5 ---------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val consonantList = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val consonantSet = consonantList.map(c => c\
    \ -> true)\n        val consonantSetMap = consonantSet.mapValues(_ == true)\n\
    \        val consonantSetMapList = consonantSetMap.mapValues(_.toList)\n     \
    \   val consonantSetMapListMap = consonantSetMapList.mapValues(_.toMap)\n    \
    \    val consonantSetMapListMapList = consonantSetMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMap = consonantSetMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapList = consonantSetMapListMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMap = consonantSetMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapList = consonantSetMapListMapListMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMapListMap = consonantSetMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapListMapList = consonantSetMapListMapListMapListMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMap = consonantSetMapListMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMapList = consonantSetMapListMapListMapListMapListMapListMapList.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMapListMap = consonantSetMapListMapListMapListMapListMapListMapListMap.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMapListMapListMap\
    \ = consonantSetMapListMapListMapListMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuitrc_uq.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuitrc_uq.scala:24:43\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantSetMap\e[0m = consonantSet.mapValues(_ == \e[31mtrue\e[0m)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value mapValues is not a member of List[(String, Boolean)]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuitrc_uq.scala:35:69 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetMapListMapListMapListMapListMapListMapList\e\
    [0m = consonantSetMapListMapListMapListMapListMapListMapList.mapValues(_.toList)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mconsonantSetMapListMapListMapListMapListMapListMapList\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuitrc_uq.scala:36:72\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetMapListMapListMapListMapListMapListMapListMap\e[0m = consonantSetMapListMapListMapListMapListMapListMapListMap.mapValues(_.toMap)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mconsonantSetMapListMapListMapListMapListMapListMapListMap\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuitrc_uq.scala:37:79\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantSetMapListMapListMapListMapListMapListMapListMapListMap\e[0m = consonantSetMapListMapListMapListMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \e[31m\e[31m   |\e[0m                                      "
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.toString.length == n)\n        list2.map(x\
    \ => x.split(\" \").toList)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3vavte7b.scala:23:36\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        list2.map(\e[36mx\e[0m\
    \ => x.split(\e[31m\" \"\e[0m).toList)\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e\
    [0m                       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWords = words.filter(word => consonants.contains(word.toUpperCase)\
    \ && consonantCount <= n)\n        val vowelWords = words.filter(word => vowels.contains(word.toUpperCase)\
    \ && vowelCount <= n)\n        consonantWords ++ vowelWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6m3nmsxj.scala:24:78 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n\e[31m\e[31m   |\e[0m                                          \
    \                                    ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp6m3nmsxj.scala:25:74 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n\e[31m\e[31m   |\e[0m                                \
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp6m3nmsxj.scala:25:89 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n\e[31m\e[31m   |\e[0m                                \
    \                                                         ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6m3nmsxj.scala:28:8 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        consonantWords ++ vowelWords\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            val count = word.count(c\
    \ => c.isLetter)\n            if(count == n) {\n                result += word\n\
    \            }\n        }\n        if(result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprixfoiyy.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) {\n                result += (word + \" \")\n            }\n  \
    \      }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.mkString(\" \")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcr5sqrh.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(\"a\")\n            if (count == n) result\
    \ += word\n        }\n        if (result.isEmpty) List()\n        else result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpftjid4jj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpftjid4jj.scala:24:35\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mcount\e[0m = word.count(\e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Found:    (\e[32m\"a\"\e[0m : String)\n\e[31m   |\e[0m            \
    \                       Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = \n\
    \            s.split(\" \").filter(_.length == n).map(_.split(\"\").filter(_ =>\
    \ !_ == \"c\").mkString(\"\"))\n        val wordsWithNConsonantsSortedByLength\
    \ = wordsWithNConsonants.sortWith(_.length < _.length)\n        wordsWithNConsonantsSortedByLength.takeWhile(_.length\
    \ == n).map(_.mkString(\" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2bsmn_dz.scala:22:76 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_ => !_ == \e[31m\"c\"\e[0m).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => ! _$4 == \e[32m\"c\"\e[0m.\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bsmn_dz.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        wordsWithNConsonantsSortedByLength.takeWhile(_.length\
    \ == n).map(_.mkString(\e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty)\n        val counts = words.map(word => word.split(\"\
    \").map(_.toInt).sum)\n        val maxCount = counts.max\n        val result:\
    \ List[String] = words.filter(word => counts(word) == maxCount).sortBy(word =>\
    \ counts(word))\n        result match {\n            case Nil => List()\n    \
    \        case head :: tail => head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfhtf7qi.scala:21:53\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfhtf7qi.scala:24:63\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = words.filter(\e[36mword\e[0m => counts(word)\
    \ == maxCount).sortBy(\e[36mword\e[0m => counts(word))\n\e[31m\e[31m   |\e[0m\
    \                                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (word :\
    \ String)\n\e[31m   |\e[0m                                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfhtf7qi.scala:24:104\
    \ -------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = words.filter(\e[36mword\e[0m => counts(word)\
    \ == maxCount).sortBy(\e[36mword\e[0m => counts(word))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Found:    (word : String)\n\e[31m   |\e[0m         \
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvfhtf7qi.scala:27:33 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mcase\e[0m head :: tail => head\n\e\
    [31m\e[31m   |\e[0m                                 ^"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).map(_.toLowerCase)\n    \
    \    list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpl6mt0_8k.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val consonants = List(\n            \"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"\n        )\n        val vowels = List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val consonantCount = wordList.filter(_.contains(consonants).length\
    \ == n).map(_.split(\" \").map(_.toLowerCase))\n        val vowelCount = wordList.filter(_.contains(vowels).length\
    \ == n).map(_.split(\" \").map(_.toLowerCase))\n        val consonantWords = consonantCount.flatMap(_.filter(_.contains(\"\
    consonant\"))).distinct\n        val vowelWords = vowelCount.flatMap(_.filter(_.contains(\"\
    vowel\"))).distinct\n        val consonantWordsSet = consonantWords.toSet\n  \
    \      val vowelWordsSet = vowelWords.toSet\n        val wordList = wordList.filter(_.contains(consonantWordsSet)\
    \ || _.contains(vowelWordsSet))\n        wordList.map(_.split(\" \").map(_.toLowerCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsd5j3qva.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = wordList.filter(_.contains(consonantWordsSet)\
    \ || _.contains(vowelWordsSet))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsd5j3qva.scala:26:68 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = wordList.filter(_.contains(consonants).length\
    \ == n).map(_.split(\e[31m\" \"\e[0m).map(_.toLowerCase))\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsd5j3qva.scala:27:60\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelCount\e[0m = wordList.filter(_.contains(vowels).length == n).map(_.split(\e\
    [31m\" \"\e[0m).map(_.toLowerCase))\n\e[31m\e[31m   |\e[0m                   \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value length is not a member of Boolean\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsd5j3qva.scala:33:21 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        wordList.map(_.split(\e[31m\" \"\e[0m).map(_.toLowerCase))\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                     Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase())\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_9fu558s.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_9fu558s.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.isLetter).toList\n        val consonants: List[String] = words.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).toList\n        val vowels: List[String] = words.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).filter(_.contains(\"y\")).toList\n        val\
    \ consonantsAndVowels: List[String] = consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowels ++ consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonants ++ vowels\
    \ ++ consonants\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ ++ consonants ++ vowels ++ consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\n\
    \        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\n\
    \        val consonants\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsq30cmtt.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq30cmtt.scala:21:56\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).toList\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsq30cmtt.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"o\") ||\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        if (result.size == 0) {\n            List()\n        }\n  \
    \      else {\n            val result = result.sortWith((x, y) => x.toString.compareTo(y.toString))\n\
    \            val list = result.take(n)\n            list.toList\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve0iupqw.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpve0iupqw.scala:33:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36mresult\e[0m = result.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareTo(y.toString))\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mresult\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += (word :: \"\")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga2xlfpz.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list3\
    \ = list.filter(x => x.contains(\"b\") || x.contains(\"c\") || x.contains(\"d\"\
    ) || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"h\") || x.contains(\"\
    j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"m\") || x.contains(\"\
    n\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"r\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"v\") || x.contains(\"w\") || x.contains(\"\
    x\") || x.contains(\"y\") || x.contains(\"z\"))\n        val list4 = list.filter(x\
    \ => x.contains(\"0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"\
    3\") || x.contains(\"4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"\
    7\") || x.contains(\"8\") || x.contains(\"9\"))\n        val list5 = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"B\") || x.contains(\"C\") || x.contains(\"\
    D\") || x.contains(\"E\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"\
    H\") || x.contains(\"I\") || x.contains(\"J\") || x.contains(\"K\") || x.contains(\"\
    L\") || x.contains(\"M\") || x.contains(\"N\") || x.contains(\"O\") || x.contains(\"\
    P\") || x.contains(\"Q\") || x.contains(\"R\") || x.contains(\"S\") || x.contains(\"\
    T\") || x.contains(\"V\") || x.contains(\"W\") || x.contains(\"X\") || x.contains(\"\
    Y\") || x.contains(\"Z\"))\n        val list6 = list.filter(x => x.contains(\"\
    0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"3\") || x.contains(\"\
    4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"7\") || x.contains(\"\
    8\") || x.contains(\"9\"))\n        val list7 = list.filter(x => x.contains(\"\
    A\") || x.contains(\"B\") || x.contains(\"C\") || x.contains(\"D\") || x.contains(\"\
    E\") || \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd4o_rls1.scala:27:131 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlist7\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"A\"\e[0m) || x.contains(\e[31m\"B\"\e[0m) ||\
    \ x.contains(\e[31m\"C\"\e[0m) || x.contains(\e[31m\"D\"\e[0m) || x.contains(\e\
    [31m\"E\"\e[0m) || \n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpd4o_rls1.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzgfve4d.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = mutable.ListBuffer[String]()\n\
    \        val wordsWithNConsonantsCount = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount2 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount3\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount4 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount5 = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount6 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount7\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount8 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount9 = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount10 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount11\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount12 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount13 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount14 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount15\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount16 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount17 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount18 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount19\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount20 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount21 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount22 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount23\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount24 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount25 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConson\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdb0c8u_2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdb0c8u_2.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithNConsonants\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdb0c8u_2.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdb0c8u_2.scala:23:41 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount2\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdb0c8u_2.scala:24:41 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount3\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdb0c8u_2.scala:25:41 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val wordList = word.split(\"\")\n            wordList.foreach\
    \ { letter =>\n                if (letter == \"a\" || letter == \"e\" || letter\
    \ == \"i\" || letter == \"o\" || letter == \"u\") {\n                    result.add(word)\n\
    \                }\n            }\n        }\n        if (result.size == 0) {\n\
    \            result.add(\"empty\")\n        }\n        if (result.size == n) {\n\
    \            result.add(\"full\")\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3w1aza6.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.forall(c => c.isLetter) && c.forall(c => c.isLetter))\n       \
    \ val wordCounts = words.map(w => w.length).distinct\n        val wordCount: Long\
    \ = wordCounts.max\n        val wordCountPerLetter: Map[Char, Long] = wordCounts.map(w\
    \ => w.toChar, w).groupBy(_._1).mapValues(_.length)\n        val letterCounts\
    \ = wordCountPerLetter.filter(_._2 > n).map(_._1)\n        letterCounts.toList.sortBy(_.length).reverse.map(w\
    \ => w.take(n)).filter(_.nonEmpty).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmi89jou1.scala:21:83 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c.isLetter) && c.forall(\e[36mc\e[0m => c.isLetter))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmi89jou1.scala:24:80 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mwordCountPerLetter\e[0m: \e[35mMap\e[0m[\e[35mChar\e\
    [0m, \e[35mLong\e[0m] = wordCounts.map(\e[36mw\e[0m => w.toChar, w).groupBy(_._1).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                               Not found: w\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpmi89jou1.scala:24:65 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordCountPerLetter\e[0m:\
    \ \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mLong\e[0m] = wordCounts.map(\e[36mw\e\
    [0m => w.toChar, w).groupBy(_._1).mapValues(_.length)\n\e[31m\e[31m   |\e[0m \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                          Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                          I could not infer the type of the parameter\
    \ w.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi89jou1.scala:24:93 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordCountPerLetter\e[0m:\
    \ \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mLong\e[0m] = wordCounts.map(\e[36mw\e\
    [0m => w.toChar, w).groupBy(_._1).mapValues(_.length)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \         "
  stdout: ''
  timestamp: 1660010194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = words.filter(_.contains(consonants.mkString)).size\n\
    \        val vowelCount = words.filter(_.contains(vowels.mkString)).size\n   \
    \     if (consonantCount == n && vowelCount == n) {\n            words.filter(_.contains(consonants.mkString)).sortBy(_.length).map(_.toLowerCase)\n\
    \        } else {\n            words.filter(_.contains(consonants.mkString)).sortBy(_.length).filter(_.length\
    \ == n).map(_.toLowerCase)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5f40ycfx.scala:33)\n\tat Problem.main(tmp5f40ycfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.matches(\"[b-df-hj-np-tv-z]\"\
    ).toList\n        val consonantCount: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantCounts: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length).filter(_._2\
    \ > n).mapValues(_.toLong)\n        val consonantCountList: List[(String, Long)]\
    \ = consonantCounts.toList.sortBy(_._2).reverse.take(n).map(_._1)\n        val\
    \ consonantCountLists: List[List[(String, Long)]] = consonantCountList.map(x =>\
    \ x.toList)\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountLists.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaoli2tg7.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m: \e\
    [35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but\
    \ 'val' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaoli2tg7.scala:22:128\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonants\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e\
    [0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.matches(\e[31m\"[b-df-hj-np-tv-z]\"\
    \e[0m).toList\n\e[31m\e[31m   |\e[0m                                         \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toList is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaoli2tg7.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val consonantCount = consonants.count(_ == \" \")\n        val vowelCount\
    \ = vowels.count(_ == \" \")\n        val wordCount = s.count(_ == \" \")\n  \
    \      val consonantWords = s.split(\" \").filter(_.count(_ == consonants) ==\
    \ consonantCount)\n        val vowelWords = s.split(\" \").filter(_.count(_ ==\
    \ vowels) == vowelCount)\n        val wordList = consonantWords ++ vowelWords\n\
    \        wordList.foreach(word => {\n            if (word.length == n) {\n   \
    \             result.add(word)\n            }\n        })\n        if (wordCount\
    \ == 0) {\n            result.clear()\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuxey8y9c.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpuxey8y9c.scala:24:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_ == \e[31m\" \"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpuxey8y9c.scala:25:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpuxey8y9c.scala:26:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mwordCount\e[0m = s.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpuxey8y9c.scala:27:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.count(_ == consonants) == consonantCount)\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpuxey8y9c.scala:28:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelWords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.count(_ == vowels"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet = consonants.toSet\n\
    \        val vowelSet = vowels.toSet\n        val result: List[String] = Nil\n\
    \        val words: List[String] = s.split(\" \").filter(_.nonEmpty)\n       \
    \ val wordSet = words.toSet\n        val wordCount = wordSet.size\n        val\
    \ consonantCount = wordSet.filter(consonantSet.contains)\n        val vowelCount\
    \ = wordSet.filter(vowelSet.contains)\n        val consonantWordCount = consonantCount.size\n\
    \        val vowelWordCount = vowelCount.size\n        if (wordCount == 0) {\n\
    \            result\n        } else if (wordCount == 1) {\n            if (consonantWordCount\
    \ == n) {\n                result\n            } else if (vowelWordCount == n)\
    \ {\n                result\n            } else {\n                result\n  \
    \          }\n        } else if (wordCount == 2) {\n            if (consonantWordCount\
    \ == n && vowelWordCount == n) {\n                result\n            } else if\
    \ (consonantWordCount == n && vowelWordCount == 0) {\n                result\n\
    \            } else if (consonantWordCount == 0 && vowelWordCount == n) {\n  \
    \              result\n            } else {\n                result\n        \
    \    }\n        } else if (wordCount == 3) {\n            if (consonantWordCount\
    \ == n && vowelWordCount == n && consonantCount == vowelCount) {\n           \
    \     result\n            } else if (consonantWordCount == n && vowelWordCount\
    \ == n && consonantCount == 0) {\n                result\n            } else if\
    \ (consonantWordCount == 0 && vowelWordCount == n && consonantCount == vowelCount)\
    \ {\n                result\n            } else if (consonantWordCount == n &&\
    \ vowelWordCount == 0 && consonantCount == vowelCount) {\n                result\n\
    \            } else if (consonantWordCount == n && vowelWordCount == n && consonantCount\
    \ == 0) {\n                result\n            } else if (consonantWordCount ==\
    \ 0 && vowelWordCount == n && consonantCount == 0) {\n                result\n\
    \            } else if (consonantWordCount == n && vowelWordCount == 0 && consonantCount\
    \ == 0) {\n                result\n            } else {\n                result\n\
    \            }\n        } else if (wordCount == 4) {\n            if (consonantWordCount\
    \ == n && vowelWordCount == n && consonantCount == vowelCount && vowelCount ==\
    \ consonantCount) {\n                result\n            } else if (consonantWordCount\
    \ == n && vowelWordCount == n && consonantCount == 0 && vowelCount == consonantCount)\
    \ {\n                result\n            } else if (consonantWordCount == n &&\
    \ vowelWord\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7efgyxmf.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7efgyxmf.scala:89:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7efgyxmf.scala:26:53 --------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e\
    [0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty)\n\e[31m\e[31m   |\e[0m   \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7efgyxmf.scala:29:44\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m = wordSet.filter(consonantSet.contains)\n\e[31m\e[31m   |\e[0m           \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (elem : String)\n\e[31m   |\e[0m          \
    \                                  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7efgyxmf.scala:30:40 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = wordSet.filter(vowelSet.contains)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        Found:    (elem : String)\n\e\
    [31m   |\e[0m                                        Required: Char\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp7efgyxmf.scala:56:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m     "
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val words = x.split(\"[^a-zA-Z ]\")\n            val count =\
    \ words.count(_.length == n)\n            if (count == n) {\n                result\
    \ ++= words\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_7hfk8j.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"B\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"C\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"D\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"E\"))\n        val list8 = list7.filter(x => x.contains(\"F\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"G\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"H\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"I\"))\n        val list12 = list11.filter(x => x.contains(\"\
    J\"))\n        val list13 = list12.filter(x => x.contains(\"K\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"L\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"M\"))\n        val list16 = list15.filter(x => x.contains(\"\
    N\"))\n        val list17 = list16.filter(x => x.contains(\"O\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"P\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"Q\"))\n        val list20 = list19.filter(x => x.contains(\"\
    R\"))\n        val list21 = list20.filter(x => x.contains(\"S\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"T\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"U\"))\n        val list24 = list23.filter(x => x.contains(\"\
    V\"))\n        val list25 = list24.filter(x => x.contains(\"W\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"X\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"Y\"))\n        val list28 = list27.filter(x => x.contains(\"\
    Z\"))\n        val list29 = list28.filter(x => x.contains(\"a\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"b\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"c\"))\n        val list32 = list31.filter(x => x.contains(\"\
    d\"))\n        val list33 = list32.filter(x => x.contains(\"e\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnrzwoxmz.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnrzwoxmz.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(x => x.toUpperCase)\n        val consonantSet\
    \ = Set.empty[Char]\n        val consonantSet2 = Set.empty[Char]\n        val\
    \ consonantSet3 = Set.empty[Char]\n        val consonantSet4 = Set.empty[Char]\n\
    \        val consonantSet5 = Set.empty[Char]\n        val consonantSet6 = Set.empty[Char]\n\
    \        val consonantSet7 = Set.empty[Char]\n        val consonantSet8 = Set.empty[Char]\n\
    \        val consonantSet9 = Set.empty[Char]\n        val consonantSet10 = Set.empty[Char]\n\
    \        val consonantSet11 = Set.empty[Char]\n        val consonantSet12 = Set.empty[Char]\n\
    \        val consonantSet13 = Set.empty[Char]\n        val consonantSet14 = Set.empty[Char]\n\
    \        val consonantSet15 = Set.empty[Char]\n        val consonantSet16 = Set.empty[Char]\n\
    \        val consonantSet17 = Set.empty[Char]\n        val consonantSet18 = Set.empty[Char]\n\
    \        val consonantSet19 = Set.empty[Char]\n        val consonantSet20 = Set.empty[Char]\n\
    \        val consonantSet21 = Set.empty[Char]\n        val consonantSet22 = Set.empty[Char]\n\
    \        val consonantSet23 = Set.empty[Char]\n        val consonantSet24 = Set.empty[Char]\n\
    \        val consonantSet25 = Set.empty[Char]\n        val consonantSet26 = Set.empty[Char]\n\
    \        val consonantSet27 = Set.empty[Char]\n        val consonantSet28 = Set.empty[Char]\n\
    \        val consonantSet29 = Set.empty[Char]\n        val consonantSet30 = Set.empty[Char]\n\
    \        val consonantSet31 = Set.empty[Char]\n        val consonantSet32 = Set.empty[Char]\n\
    \        val consonantSet33 = Set.empty[Char]\n        val consonantSet34 = Set.empty[Char]\n\
    \        val consonantSet35 = Set.empty[Char]\n        val consonantSet36 = Set.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbup_sda7.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase)\n        val consonants: List[String]\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels: List[String] = List(\"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\")\n        val consonantCount: Map[String, Long] = words.map(word => word\
    \ -> consonants.count(_ == word)).toMap\n        val vowelCount: Map[String, Long]\
    \ = words.map(word => word -> vowels.count(_ == word)).toMap\n        val consonantWords\
    \ = words.filter(word => consonantCount(word) == n)\n        val vowelWords =\
    \ words.filter(word => vowelCount(word) == n)\n        consonantWords.flatMap(word\
    \ => vowelWords.filter(word == _))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0c_rf9l.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0c_rf9l.scala:24:48\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = words.map(\e[36mword\e\
    [0m => word -> consonants.count(_ == word)).toMap\n\e[31m\e[31m   |\e[0m     \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0c_rf9l.scala:25:44\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = words.map(\e[36mword\e\
    [0m => word -> vowels.count(_ == word)).toMap\n\e[31m\e[31m   |\e[0m         \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants2 = consonants.toList\n\
    \        val vowels2 = vowels.toList\n        val vowels3 = vowels2.filter(_ =>\
    \ vowels2.contains(_))\n        val vowels4 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels5 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels6\
    \ = vowels2.filter(_ => vowels2.contains(_))\n        val vowels7 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels8 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels9 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels10\
    \ = vowels2.filter(_ => vowels2.contains(_))\n        val vowels11 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels12 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels13 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels14 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels15 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels16 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels17 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels18 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels19 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels20 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels21 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels22 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels23 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels24 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels25 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels26 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels27 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels28 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels29 = vowel\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdpt2zzh.scala:25:42\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowels3\e\
    [0m = vowels2.filter(_ => vowels2.contains(_))\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                         Found:    \e[1m\e[31mChar\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m \
    \  |\e[0m                                          Required: Boolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdpt2zzh.scala:26:42 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowels4\e[0m = vowels2.filter(_\
    \ => vowels2.contains(_))\n\e[31m\e[31m   |\e[0m                             \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                    Found:    \e[1m\e[31mChar\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e\
    [0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m                \
    \                          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsdpt2zzh.scala:27:42 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowels5\e[0m = vowels2.filter(_\
    \ => vowels2.contains(_))\n\e[31m\e[31m   |\e[0m                             \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                    Found:    \e[1m\e[31mChar\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e\
    [0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m                \
    \                          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsdpt2zzh.scala:28:42 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowels6\e[0m = vowels2.filter(_\
    \ => vowels2.contains(_))\n\e[31m\e[31m   |\e[0m                             \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        })\n        if (result.isEmpty) result else result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi3vulut7.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\".toList\n  \
    \      val vowelCount = list.count(_.toString.contains(vowels))\n        val consonantCount\
    \ = list.count(_.toString.contains(consonants))\n        val consonantCountInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")))\n        val consonantCountInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\"))\n\
    \        val consonantCountInWordInWordInWord = list.count(_.toString.contains(consonants.mkString(\"\
    \")).mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\"))\n        val\
    \ consonantCountInWordInWordInWordInWordInWordInWordInWordInWord = list.count(_.toString.contains(consonants.mkString(\"\
    \")).mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\"\
    ).mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\"\
    ).mkString(\"\"))\n        val consonantCountIn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2kkcglqq.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2kkcglqq.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2kkcglqq.scala:28:97 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWord\e[0m = list.count(_.toString.contains(consonants.mkString(\e\
    [31m\"\"\e[0m)).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m            \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mkString is not a member of Boolean - did you mean Boolean.toString?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2kkcglqq.scala:29:103 -----------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWordInWord\e\
    [0m = list.count(_.toString.contains(consonants.mkString(\e[31m\"\"\e[0m)).mkString(\e\
    [31m\"\"\e[0m).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mkString is not a member of Boolean - did you mean Boolean.toString?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2kkcglqq.scala:30:109 -----------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWordInWordInWord\e\
    [0m = list.count(_.toString.contains(consonants.mkString(\e[31m\"\"\e[0m)).mkString(\e\
    [31m\"\"\e[0m).mkString(\e[31m\"\"\e[0m).mkString(\e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mval"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiouAEIOU\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val vowelsCount = vowels.count(_ == s)\n        val consonantsCount = consonants.count(_\
    \ == s)\n        val wordCount = vowelsCount + consonantsCount\n        if (wordCount\
    \ == 0) Nil\n        else if (wordCount == 1) List(s)\n        else s.split(\"\
    \ \").filter(word => word.count(_ == n) == wordCount).map(word => word)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_edu0983.scala:23:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp_edu0983.scala:24:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_edu0983.scala:28:13\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m s.split(\e\
    [31m\" \"\e[0m).filter(word => word.count(_ == n) == wordCount).map(word => word)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m             Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase)\n        val consonants: List[String]\
    \ = words.filter(_.contains(\"a\")).map(_.toLowerCase)\n        val vowels: List[String]\
    \ = words.filter(_.contains(\"e\")).map(_.toLowerCase)\n        val consonantsCount:\
    \ Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val vowelsCount: Map[String, Long] = vowels.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantsCountSorted: Map[String, Long] = consonantsCount.sortBy(_._2).reverse\n\
    \        val vowelsCountSorted: Map[String, Long] = vowelsCount.sortBy(_._2).reverse\n\
    \        val consonantsCountSortedByValue: Map[String, Long] = consonantsCountSorted.filter(_._2\
    \ > n).map(_._1)\n        val vowelsCountSortedByValue: Map[String, Long] = vowelsCountSorted.filter(_._2\
    \ > n).map(_._1)\n        val consonantsCountSortedByKey: Map[String, Long] =\
    \ consonantsCountSorted.filter(_._2 > n).map(_._0)\n        val vowelsCountSortedByKey:\
    \ Map[String, Long] = vowelsCountSorted.filter(_._2 > n).map(_._0)\n        val\
    \ consonantsCountSortedByValueAndKey: Map[String, Long] = consonantsCountSortedByValue.filter(_._2\
    \ > n).map(_._1 -> _._0)\n        val vowelsCountSortedByValueAndKey: Map[String,\
    \ Long] = vowelsCountSortedByValue.filter(_._2 > n).map(_._1 -> _._0)\n      \
    \  val consonantsCountSortedByKeyAndValue: Map[String, Long] = consonantsCountSortedByKey.filter(_._2\
    \ > n).map(_._1 -> _._0)\n        val vowelsCountSortedByKeyAndValue: Map[String,\
    \ Long] = vowelsCountSortedByKey.filter(_._2 > n).map(_._1 -> _._0)\n        val\
    \ consonantsCountSortedByValueAndKeyAndValue: Map[String, Long] = consonantsCountSortedByValueAndKey.filter(_._2\
    \ > n).map(_._1 -> _._0)\n        val vowelsCountSortedByValueAndKeyAndValue:\
    \ Map[String, Long] = vowelsCountSortedByValueAndKey.filter(_._2 > n).map(_._1\
    \ -> _._0)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpii388rbc.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpii388rbc.scala:24:92\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m                         Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpii388rbc.scala:25:84\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = vowels.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m                         Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpii388rbc.scala:26:71\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsCountSorted\e[0m: \e[35mMa"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"b\") || x.contains(\"c\") || x.contains(\"d\"\
    ) || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"h\") || x.contains(\"\
    j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"m\") || x.contains(\"\
    n\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"r\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"v\") || x.contains(\"w\") || x.contains(\"\
    x\") || x.contains(\"y\") || x.contains(\"z\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    B\") || x.contains(\"C\") || x.contains(\"D\") || x.contains(\"F\") || x.contains(\"\
    G\") || x.contains(\"H\") || x.contains(\"J\") || x.contains(\"K\") || x.contains(\"\
    L\") || x.contains(\"M\") || x.contains(\"N\") || x.contains(\"P\") || x.contains(\"\
    Q\") || x.contains(\"R\") || x.contains(\"S\") || x.contains(\"T\") || x.contains(\"\
    V\") || x.contains(\"W\") || x.contains(\"X\") || x.contains(\"Y\") || x.contains(\"\
    Z\"))\n        val list = list.filter(x => x.contains(\"0\") || x.contains(\"\
    1\") || x.contains(\"2\") || x.contains(\"3\") || x.contains(\"4\") || x.contains(\"\
    5\") || x.contains(\"6\") || x.contains(\"7\") || x.contains(\"8\") || x.contains(\"\
    9\"))\n        val list = list.filter(x => x.contains(\"!\") || x.contains(\"\
    @\") || x.contains(\"#\") || x.contains(\"$\") || x.contains(\"%\") || x.contains(\"\
    ^\") || x.contains(\"&\") || x.contains(\"*\") || x.contains(\"(\") || x.contains(\"\
    )\") || x.contains(\"_\") || x.contains(\"+\") || x.contains(\"=\") || x.contains(\"\
    [\") || x.contains(\"]\") || x.contains(\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwhkurcsv.scala:27:332 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"!\"\e[0m) || x.contains(\e[31m\"@\"\e[0m) ||\
    \ x.contains(\e[31m\"#\"\e[0m) || x.contains(\e[31m\"$\"\e[0m) || x.contains(\e\
    [31m\"%\"\e[0m) || x.contains(\e[31m\"^\"\e[0m) || x.contains(\e[31m\"&\"\e[0m)\
    \ || x.contains(\e[31m\"*\"\e[0m) || x.contains(\e[31m\"(\"\e[0m) || x.contains(\e\
    [31m\")\"\e[0m) || x.contains(\e[31m\"_\"\e[0m) || x.contains(\e[31m\"+\"\e[0m)\
    \ || x.contains(\e[31m\"=\"\e[0m) || x.contains(\e[31m\"[\"\e[0m) || x.contains(\e\
    [31m\"]\"\e[0m) || x.contains(\"\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \  unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwhkurcsv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"a\"\e[0m) ||\
    \ x.contains(\e[31m\"e\"\e[0m) || x.contains(\e[31m\"i\"\e[0m) || x.contains(\e\
    [31m\"o\"\e[0m) || x.contains(\e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwhkurcsv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"b\"\e[0m) || x.contains(\e[31m\"c\"\e[0m) || x.contains(\e[31m\"d\"\e[0m)\
    \ || x.contains(\e[31m\"f\"\e[0m) || x.contains(\e[31m\"g\"\e[0m) || x.contains(\e\
    [31m\"h\"\e[0m) || x.co"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        words.filter(_.contains(\"\
    a\")).map(_.split(\"\").filter(_.contains(\"a\")).map(_.toLowerCase).toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7myg73a.scala:22:97\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        words.filter(_.contains(\e\
    [31m\"a\"\e[0m)).map(_.split(\e[31m\"\"\e[0m).filter(_.contains(\e[31m\"a\"\e\
    [0m)).map(_.toLowerCase).toList)\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    \e[1m\e\
    [31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m       \
    \                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") && word.contains(\"e\") && word.contains(\"i\") && word.contains(\"o\") &&\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        if (result.size == 0) {\n            result.add(\"empty\")\n\
    \        }\n        if (result.size == n) {\n            result.add(\"full\")\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwogpt8y0.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) result else\
    \ result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivm4vevf.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.map(x => x.split(\"\").toList).flatten\n        val\
    \ list3 = list2.filter(x => x.count(_ == 'a') == n).filter(x => x.count(_ == 'e')\
    \ == n).filter(x => x.count(_ == 'i') == n).filter(x => x.count(_ == 'o') == n).filter(x\
    \ => x.count(_ == 'u') == n).filter(x => x.count(_ == 'y') == n).filter(x => x.count(_\
    \ == 'h') == n).filter(x => x.count(_ == 'l') == n).filter(x => x.count(_ == 's')\
    \ == n).filter(x => x.count(_ == 'w') == n).filter(x => x.count(_ == 'd') == n).filter(x\
    \ => x.count(_ == 'c') == n).filter(x => x.count(_ == 'm') == n).filter(x => x.count(_\
    \ == 'b') == n).filter(x => x.count(_ == 'f') == n).filter(x => x.count(_ == 'p')\
    \ == n).filter(x => x.count(_ == 'v') == n).filter(x => x.count(_ == 'g') == n).filter(x\
    \ => x.count(_ == 'o') == n).filter(x => x.count(_ == 'n') == n).filter(x => x.count(_\
    \ == 'x') == n).filter(x => x.count(_ == 'z') == n).filter(x => x.count(_ == 'j')\
    \ == n).filter(x => x.count(_ == 'q') == n).filter(x => x.count(_ == 'z') == n).filter(x\
    \ => x.count(_ == 'k') == n).filter(x => x.count(_ == 'r') == n).filter(x => x.count(_\
    \ == 't') == n).filter(x => x.count(_ == 's') == n).filter(x => x.count(_ == 'w')\
    \ == n).filter(x => x.count(_ == 'x') == n).filter(x => x.count(_ == 'z') == n).filter(x\
    \ => x.count(_ == 'j') == n).filter(x => x.count(_ == 'q') == n).filter(x => x.count(_\
    \ == 'z') == n).filter(x => x.count(_ == 'k') == n).filter(x => x.count(_ == 'r')\
    \ == n).filter(x => x.count(_ == 't') == n).filter(x => x.count(_ == 's') == n).filter(x\
    \ => x.count(_ == 'w') == n).filter(x => x.count(_ == 'x') == n).filter(x => x.count(_\
    \ == 'z') == n).filter(x => x.count(_ == 'j') == n).filter(x => x.count(_ == 'q')\
    \ == \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2a72eyrl.scala:23:1606 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(\e\
    [36mx\e[0m => x.count(_ == \e[31m'a'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_\
    \ == \e[31m'e'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'i'\e[0m)\
    \ == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'o'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'u'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'y'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'h'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'l'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m's'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'w'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'd'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'c'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'm'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'b'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'f'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'p'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'v'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'g'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'o'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'n'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'x'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'z'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'j'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'q'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'z'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'k'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'r'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m't'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m's'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'w'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'x'\e[0m) ==\
    \ n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'z'\e[0m) == n).filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'j'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ ==\
    \ \e[31m'q'\e[0m) == n).filter(\e[36mx\e[0m => x.count(_ == \e[31m'z'\e[0m) ==\
    \ n).fi"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(x => x.count(_ == 'a') >= n).map(x => x.split(\"\
    \").filter(y => y == 'a').mkString(\"\"))\n        if (result.isEmpty) List()\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpep5_pik0.scala:22:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(\e\
    [36mx\e[0m => x.count(_ == \e[31m'a'\e[0m) >= n).map(\e[36mx\e[0m => x.split(\e\
    [31m\"\"\e[0m).filter(\e[36my\e[0m => y == \e[31m'a'\e[0m).mkString(\e[31m\"\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m                                               \
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        val consonants:\
    \ List[String] = words.filter(_.contains(\"a\") || _.contains(\"e\") || _.contains(\"\
    i\") || _.contains(\"o\") || _.contains(\"u\"))\n        consonants.sortBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpd0qj1fna.scala:22:52 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = words.filter(_.contains(\e[31m\"a\"\e[0m) || _.contains(\e\
    [31m\"e\"\e[0m) || _.contains(\e[31m\"i\"\e[0m) || _.contains(\e[31m\"o\"\e[0m)\
    \ || _.contains(\e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n)\n        result.map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.split(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmphpqw8d0j.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphpqw8d0j.scala:23:104 -------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        result.map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.split(\e[31m\" \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                     Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpewp6a23n.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpewp6a23n.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                result += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val consonantsCount: Map[String, Long] = consonants.groupBy(c\
    \ => c).mapValues(_.size).toMap\n        val consonantsCountMap: Map[String, Long]\
    \ = consonantsCount.filter(_._2 > n).map(_._1).toMap\n        val consonantsCountMapKeys:\
    \ Set[String] = consonantsCountMap.keys\n        val consonantsCountMapValues:\
    \ Set[Long] = consonantsCountMap.values.toSet\n        val consonantsCountMapKeysSorted:\
    \ Set[String] = consonantsCountMapKeys.toSet\n        val consonantsCountMapValuesSorted:\
    \ Set[Long] = consonantsCountMapValues.toSet\n        val consonantsCountMapKeysSortedWithDuplicates:\
    \ Set[String] = consonantsCountMapKeys.toSet.filter(_ != consonantsCountMapKeys.last)\n\
    \        val consonantsCountMapValuesSortedWithDuplicates: Set[Long] = consonantsCountMapValues.toSet.filter(_\
    \ != consonantsCountMapValues.last)\n        val consonantsCountMapKeysSortedWithDuplicatesAndValues:\
    \ Set[String] = consonantsCountMapKeys.toSet.filter(_ != consonantsCountMapKeys.last).filter(_\
    \ != consonantsCountMapValues.last)\n        val consonantsCountMapValuesSortedWithDuplicatesAndValues:\
    \ Set[Long] = consonantsCountMapValues.toSet.filter(_ != consonantsCountMapValues.last).filter(_\
    \ != consonantsCountMapValues.last)\n        val consonantsCountMapKeysSortedWithDuplicatesAndValuesAndValues:\
    \ Set[String] = consonantsCountMapKeys.toSet.filter(_ != consonantsCountMapKeys.last).filter(_\
    \ != consonantsCountMapValues.last).filter(_ != consonantsCountMapValues.last)\n\
    \        val consonantsCountMapValuesSortedWithDuplicatesAndValuesAndValues: Set[Long]\
    \ = consonantsCountMapValues.toSet.filter(_ != consonantsCountMapValues.last).filter(_\
    \ != consonantsCountMapValues.last).filter(_ != consonantsCountMapValues.last)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4a6wse3p.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a6wse3p.scala:23:49 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m: \e\
    [35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonants.groupBy(\e[36mc\e\
    [0m => c).mapValues(_.size).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp4a6wse3p.scala:24:100 ----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountMap\e[0m:\
    \ \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonantsCount.filter(_._2\
    \ > n).map(_._1).toMap\n\e[31m\e[31m   |\e[0m                                \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                     Cannot prove that String <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \  where:    K is a type variable\n\e[31m   |\e[0m                           \
    \                    V is a type variable\n\e[31m   |\e[0m                   \
    \                  .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a6wse3p.scala:25:69\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountMapKeys\e\
    [0m: \e[35mSet\e[0m[\e[35mString\e[0m] = consonantsCountMap.keys\n\e[31m\e[31m\
    \   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Iterable[String]\n\
    \e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet = consonants.toSet\n\
    \        val vowelSet = vowels.toSet\n        val words: List[String] = if (s.isEmpty)\
    \ Nil else s.split(\" \").map(word => word.split(\"\").filter(c => vowelSet.contains(c)\
    \ || consonantSet.contains(c))).filter(word => word.length == n).map(word => word.mkString(\"\
    \")).filter(word => word.length > 0).map(word => word.split(\"\")).filter(word\
    \ => word.length == n).map(word => word.mkString(\"\")).filter(word => word.length\
    \ > 0).map(word => word.split(\"\")).filter(word => word.length == n).map(word\
    \ => word.mkString(\"\")).filter(word => word.length > 0).map(word => word.split(\"\
    \")).filter(word => word.length == n).map(word => word.mkString(\"\")).filter(word\
    \ => word.length > 0).map(word => word.split(\"\")).filter(word => word.length\
    \ == n).map(word => word.mkString(\"\")).filter(word => word.length > 0).map(word\
    \ => word.split(\"\")).filter(word => word.length == n).map(word => word.mkString(\"\
    \")).filter(word => word.length > 0).map(word => word.split(\"\")).filter(word\
    \ => word.length == n).map(word => word.mkString(\"\")).filter(word => word.length\
    \ > 0).map(word => word.split(\"\")).filter(word => word.length == n).map(word\
    \ => word.mkString(\"\")).filter(word => word.length > 0).map(word => word.split(\"\
    \")).filter(word => word.length == n).map(word => word.mkString(\"\")).filter(word\
    \ => word.length > 0).map(word => word.split(\"\")).filter(word => word.length\
    \ == n).map(word => word.mkString(\"\")).filter(word => word.length > 0).map(word\
    \ => word.split(\"\")).filter(word => word.length == n).map(word => word.mkString(\"\
    \")).filter(word => word.length > 0).map(word => word.split(\"\")).filter(word\
    \ => word.length == n).map(word => word.mkString(\"\")).filter(word => word.length\
    \ > 0).map(word => word.split(\"\")).filter(word => word.length == n).map(word\
    \ => word.mkString(\"\")).filter(word => word.length > 0).map(word => word.split(\"\
    \")).filter(word => word.length == n).map(word => word.mkString(\"\")).filter(word\
    \ => word.length > 0).map(word => word.split(\"\")).filter(word => word.length\
    \ == n).map(word => word.mkString(\"\")).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5reku7uw.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5reku7uw.scala:25:128 -------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e\
    [0m] = \e[33mif\e[0m (s.isEmpty) Nil \e[33melse\e[0m s.split(\e[31m\" \"\e[0m).map(\e\
    [36mword\e[0m => word.split(\e[31m\"\"\e[0m).filter(\e[36mc\e[0m => vowelSet.contains(c)\
    \ || consonantSet.contains(c))).filter(\e[36mword\e[0m => word.length == n).map(\e\
    [36mword\e[0m => word.mkString(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length\
    \ > \e[31m0\e[0m).map(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m)).filter(\e\
    [36mword\e[0m => word.length == n).map(\e[36mword\e[0m => word.mkString(\e[31m\"\
    \"\e[0m)).filter(\e[36mword\e[0m => word.length > \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.split(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length == n).map(\e\
    [36mword\e[0m => word.mkString(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length\
    \ > \e[31m0\e[0m).map(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m)).filter(\e\
    [36mword\e[0m => word.length == n).map(\e[36mword\e[0m => word.mkString(\e[31m\"\
    \"\e[0m)).filter(\e[36mword\e[0m => word.length > \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.split(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length == n).map(\e\
    [36mword\e[0m => word.mkString(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length\
    \ > \e[31m0\e[0m).map(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m)).filter(\e\
    [36mword\e[0m => word.length == n).map(\e[36mword\e[0m => word.mkString(\e[31m\"\
    \"\e[0m)).filter(\e[36mword\e[0m => word.length > \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.split(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length == n).map(\e\
    [36mword\e[0m => word.mkString(\e[31m\"\"\e[0m)).filter(\e[36mword\e[0m => word.length\
    \ > \e[31m0\e[0m).map(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m)).filter(\e\
    [36mword\e[0m => word.length == n).map(\e[36mword\e[0m => word.mkString(\e[31m\"\
    \"\e[0m)).filter(\e[36mword\e[0m => word.length > \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.split(\e["
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val wordList = words.toSet\n        val consonants = Set(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantList = consonants.toList\n\
    \        val vowelList = vowels.toList\n        val consonantSet = consonants.toSet\n\
    \        val vowelSet = vowels.toSet\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \        val vowelSetSize = vowels.size\n        val consonantSetSize = consonants.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn4gz4lum.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSize\e[0m =\
    \ consonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn4gz4lum.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelSetSize\e[0m = vowels.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn4gz4lum.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSize\e[0m = consonants.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonantSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn4gz4lum.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelSetSize\e[0m = vowels.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn4gz4lum.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSize\e[0m = consonants.size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonant"
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ != \" \")\n        val list3 = list2.filter(_\
    \ != \" \")\n        val list4 = list3.filter(_ != \" \")\n        val list5 =\
    \ list4.filter(_ != \" \")\n        val list6 = list5.filter(_ != \" \")\n   \
    \     val list7 = list6.filter(_ != \" \")\n        val list8 = list7.filter(_\
    \ != \" \")\n        val list9 = list8.filter(_ != \" \")\n        val list10\
    \ = list9.filter(_ != \" \")\n        val list11 = list10.filter(_ != \" \")\n\
    \        val list12 = list11.filter(_ != \" \")\n        val list13 = list12.filter(_\
    \ != \" \")\n        val list14 = list13.filter(_ != \" \")\n        val list15\
    \ = list14.filter(_ != \" \")\n        val list16 = list15.filter(_ != \" \")\n\
    \        val list17 = list16.filter(_ != \" \")\n        val list18 = list17.filter(_\
    \ != \" \")\n        val list19 = list18.filter(_ != \" \")\n        val list20\
    \ = list19.filter(_ != \" \")\n        val list21 = list20.filter(_ != \" \")\n\
    \        val list22 = list21.filter(_ != \" \")\n        val list23 = list22.filter(_\
    \ != \" \")\n        val list24 = list23.filter(_ != \" \")\n        val list25\
    \ = list24.filter(_ != \" \")\n        val list26 = list25.filter(_ != \" \")\n\
    \        val list27 = list26.filter(_ != \" \")\n        val list28 = list27.filter(_\
    \ != \" \")\n        val list29 = list28.filter(_ != \" \")\n        val list30\
    \ = list29.filter(_ != \" \")\n        val list31 = list30.filter(_ != \" \")\n\
    \        val list32 = list31.filter(_ != \" \")\n        val list33 = list32.filter(_\
    \ != \" \")\n        val list34 = list33.filter(_ != \" \")\n        val list35\
    \ = list34.filter(_ != \" \")\n        val list36 = list35.filter(_ != \" \")\n\
    \        val list37 = list36.filter(_ != \" \")\n        val list38 = list37.filter(_\
    \ != \" \")\n        val list39 = list38.filter(_ != \" \")\n        val list40\
    \ = list39.filter(_ != \" \")\n        val list41 = list40.filter(_ != \" \")\n\
    \        val list42 = list41.filter(_ != \" \")\n        val list43 = list42.filter(_\
    \ != \" \")\n        val list44 = list43.filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmperah_jbk.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val chars = s.toCharArray\n        val count = chars.length\n       \
    \ val index = chars.indexOf(0)\n        val lastIndex = chars.lastIndexOf(0)\n\
    \        val consonants = chars.filter(_ => _ != 'a' && _ != 'e' && _ != 'i' &&\
    \ _ != 'o' && _ != 'u')\n        val vowels = chars.filter(_ => _ == 'a' || _\
    \ == 'e' || _ == 'i' || _ == 'o' || _ == 'u')\n        val consonantCount = consonants.length\n\
    \        val vowelCount = vowels.length\n        val consonantIndex = index\n\
    \        val vowelIndex = lastIndex\n        val consonantLastIndex = consonantIndex\
    \ + consonantCount - 1\n        val vowelLastIndex = vowelIndex + vowelCount -\
    \ 1\n        val consonantChars = consonants.toList\n        val vowelChars =\
    \ vowels.toList\n        val consonantCharsLength = consonantChars.length\n  \
    \      val vowelCharsLength = vowelChars.length\n        val consonantCharsLastIndex\
    \ = consonantCharsLength - 1\n        val vowelCharsLastIndex = vowelCharsLength\
    \ - 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantChars\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn3gtf4lr.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3gtf4lr.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCharsLastIndex\e[0m = consonantCharsIndex + consonantCharsLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCharsLastIndex is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantCharsLastIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3gtf4lr.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mvowelCharsLastIndex\e[0m\
    \ = vowelCharsIndex + vowelCharsLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelCharsLastIndex is already defined as \e[33mvalue\e[0m \e[35mvowelCharsLastIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn3gtf4lr.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mconsonantCharsIndex\e[0m = consonantIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantCharsIndex is already defined as \e[33mvalue\e[0m \e[35mconsonantCharsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn3gtf4lr.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mvowelCharsIndex\e[0m = vowelIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelCharsIndex is already defined as \e[33mvalue\e[0m \e[35mvowel"
  stdout: ''
  timestamp: 1660010208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        for (c <- s) {\n            if (vowelSet.contains(c))\
    \ {\n                vowelCounts(c) = vowelCounts.getOrElse(c, 0)+1\n        \
    \    }\n            else {\n                consonantCounts(c) = consonantCounts.getOrElse(c,\
    \ 0)+1\n            }\n        }\n        for (c <- consonantSet) {\n        \
    \    if (consonantCounts.getOrElse(c, 0)==n) {\n                words += c\n \
    \           }\n        }\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0wih9ho.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp0wih9ho.scala:26:26 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0wih9ho.scala:27:30\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCounts\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqw_7lkcd.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fgr_8gy.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9h52rtfk.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9h52rtfk.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9h52rtfk.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9h52rtfk.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9h52rtfk.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1660010208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfzrkthr.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppfzrkthr.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = new mutable.HashMap[String, Int]()\n      \
    \      word.split(\"\").foreach { c =>\n                if (count.contains(c))\
    \ {\n                    count(c) += 1\n                } else {\n           \
    \         count(c) = 1\n                }\n            }\n            val count\
    \ = count.filter(_._2 > n).map(_._1)\n            if (count.size == 0) {\n   \
    \             result += \"(\" + word + \")\"\n            } else {\n         \
    \       result += \"(\" + count.mkString(\"\") + \")\" + \" \" + word\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7j78or0f.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7j78or0f.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010208
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = words.filter(_.length == n).toList\n        list.sortBy(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcto8ho9l.scala:26)\n\tat Problem.main(tmpcto8ho9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val nConsonants = n\n        val nConsonantsList = List(\"B\", \"C\"\
    , \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val nConsonantsSet\
    \ = Set(nConsonantsList)\n        val nConsonantsSetList = nConsonantsSet.map(_.toString)\n\
    \        val nConsonantsSetListString = nConsonantsSetList.mkString(\"\")\n  \
    \      val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListStringLength = nConsonantsSetListString.length\n\
    \        val nConsonantsSetListString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgaq31taf.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaq31taf.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnConsonantsSetListStringLength\e[0m = nConsonantsSetListString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnConsonantsSetListStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnConsonantsSetListStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaq31taf.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSetListStringLength\e\
    [0m = nConsonantsSetListString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnConsonantsSetListStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnConsonantsSetListStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaq31taf.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSetListStringLength\e\
    [0m = nConsonantsSetListString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnConsonantsSetListStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnConsonantsSetListStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaq31taf.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSetListStringLength\e\
    [0m = nConsonantsSetListString.length\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfzrkthr.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppfzrkthr.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val wordSet = wordList.map(_.toUpperCase)\n        val wordSetSet = wordSet.map(x\
    \ => x.toSet)\n        val wordSetSetSet = wordSetSet.map(x => x.toSet)\n    \
    \    val wordSetSetSetSet = wordSetSetSet.map(x => x.toSet)\n        val wordSetSetSetSetSet\
    \ = wordSetSetSetSet.map(x => x.toSet)\n        val wordSetSetSetSetSetSet = wordSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSet = wordSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnxgo1e8h.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnxgo1e8h.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mwordSetSetSetSetSetSetSetSet\e\
    [0m = wordSetSetSetSetSetSetSet.map(\e[36mx\e[0m => x.toSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mwordSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxgo1e8h.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mwordSetSetSetSetSetSetSetSet\e\
    [0m = wordSetSetSetSetSetSetSet.map(\e[36mx\e[0m => x.toSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mwordSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxgo1e8h.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mwordSetSetSetSetSetSetSetSet\e\
    [0m = wordSetSetSetSetSetSetSet.map(\e[36mx\e[0m => x.toSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mwordSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/t"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.split(\"[^aeiou]\").length\n         \
    \   if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnh9piwps.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val wordSet = wordList.map(_.toUpperCase)\n        val consonantSet =\
    \ Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantList = consonantSet.toList\n\
    \        val consonantSet = consonantList.map(_.toUpperCase)\n        val consonantSet\
    \ = consonantSet.filter(_ != \" \")\n        val consonantSet = consonantSet.filter(_\
    \ != \".\")\n        val consonantSet = consonantSet.filter(_ != \",\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"'\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \":\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"-\")\n        val consonantSet = consonantSet.filter(_ != \"_\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"~\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"#\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"&\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdxkz3cv6.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpdxkz3cv6.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet\e[0m = consonantList.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSet is already defined as \e[33mvalue\e[0m \e[35mconsonantSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdxkz3cv6.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet\e[0m = consonantSet.filter(_\
    \ != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSet is already defined as \e[33mvalue\e[0m \e[35mconsonantSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdxkz3cv6.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet\e[0m = consonantSet.filter(_\
    \ != \e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSet is already defined as \e[33mvalue\e[0m \e[35mconsonantSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdxkz3cv6.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet\e[0m = consonantSet.filter(_\
    \ != \e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSet is already defined"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.split(\"\")).filter(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp15ud5ixq.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp15ud5ixq.scala:22:37 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_ => _.length ==\
    \ n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\
    \"\e[0m)).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m)).filt"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ result else result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55d7vdby.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp55d7vdby.scala:25:35 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (count == n) result += word\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value += is not a member of List[String] - did you mean result.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp55d7vdby.scala:27:55 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (result.isEmpty) result \e[33melse\e\
    [0m result.mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    String\n\e[31m   |\e[0m              \
    \                          Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93zfmp7o.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n)\n        result.map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.split(\"\
    \ \")).toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpiil30v3w.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpiil30v3w.scala:23:111 -------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        result.map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.split(\e[31m\" \"\e[0m)).toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).map(_.split(\"\")).filter(_.forall(_.isLetter)).toList\n\
    \        if (result.isEmpty) List.empty\n        else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpoi5fo4y5.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.forall(_.isLetter)).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2.length == n.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoi5fo4y5.scala:22:88\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = list.filter(_ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.forall(_.isLetter)).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                  value isLetter is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpoi5fo4y5.scala:24:13 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m    \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31m(\e[0m\e\
    [1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m]\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n)\n        val list3 = list2.filter(_\
    \ => _.contains(\"a\"))\n        val list4 = list3.filter(_ => _.contains(\"e\"\
    ))\n        val list5 = list4.filter(_ => _.contains(\"i\"))\n        val list6\
    \ = list5.filter(_ => _.contains(\"o\"))\n        val list7 = list6.filter(_ =>\
    \ _.contains(\"u\"))\n        list7\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4.contains(\e\
    [32m\"a\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:24:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mlist4\e[0m = list3.filter(_ => _.contains(\e[31m\"e\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => _$6.contains(\e\
    [32m\"e\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:25:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mlist5\e[0m = list4.filter(_ => _.contains(\e[31m\"i\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$8 of expanded function:\n\e[31m   |\e[0m   _$8 => _$8.contains(\e\
    [32m\"i\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptmejyv2r.scala:26:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mlist6\e[0m = list5.filter(_ => _.contains(\e[31m\"o\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m  Missing\
    \ parameter"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = \n\
    \            s.split(\" \").filter(_.length == n).map(_.split(\"\").filter(_.toString.toChar\
    \ == 'c').mkString(\"\")).distinct\n        wordsWithNConsonants.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5alkdbh8.scala:22:81 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.toString.toChar == \e[31m'c'\e[0m).mkString(\e\
    [31m\"\"\e[0m)).distinct\n\e[31m\e[31m   |\e[0m                              \
    \                                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  value toChar is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result :+= word\n        })\n        if (result.isEmpty) result :+= \"\
    \"\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp187h11x7.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp187h11x7.scala:25:35 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (count == n) result :+= word\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m     value :+= is not a member of List[String] - did you mean result.:+?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp187h11x7.scala:27:35 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (result.isEmpty) result :+= \e\
    [31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m     value :+= is not a member of List[String] - did you mean result.:+?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val consonantCount = wordList.count(_.toUpperCase in consonants)\n\
    \        val vowelCount = wordList.count(_.toUpperCase in vowels)\n        if\
    \ (consonantCount == n && vowelCount == n) {\n            wordList.filter(_.toUpperCase\
    \ in consonants).filter(_.toUpperCase in vowels)\n        } else {\n         \
    \   wordList.filter(_.toUpperCase in consonants).filter(_.toUpperCase in vowels).filter(_.toUpperCase\
    \ in consonants).filter(_.toUpperCase in vowels)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0658x1so.scala:24:58 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = wordList.count(_.toUpperCase\
    \ in consonants)\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \      value in is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0658x1so.scala:25:54 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = wordList.count(_.toUpperCase\
    \ in vowels)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value in is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0658x1so.scala:27:42\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            wordList.filter(_.toUpperCase\
    \ in consonants).filter(_.toUpperCase in vowels)\n\e[31m\e[31m   |\e[0m      \
    \                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \            value in is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp0658x1so.scala:27:78 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            wordList.filter(_.toUpperCase in consonants).filter(_.toUpperCase\
    \ in vowels)\n\e[31m\e[31m   |\e[0m                                          \
    \                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                      value in is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0658x1so.scala:29:42 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            wordList.filter(_.toUpperCase in consonants).filter(_.toUpperCase\
    \ in vowels).filter(_.toUpperCase in consonants).filter(_.toUpperCase in vowels)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value in is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0658x1so.scala:29:78 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            wordList.filter(_.toUpperCase in consonants).f"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            if (word.count(_ == 'a') >= n) result += word\n        }\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnidqjoa.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantCount = consonants.count(_ == \" \")\n        val vowelCount\
    \ = vowels.count(_ == \" \")\n        val consonantCountInWord = s.count(_ ==\
    \ \" \")\n        val vowelCountInWord = s.count(_ == \" \")\n        val consonantCountInWordWithVowels\
    \ = consonantCountInWord - vowelCountInWord\n        val vowelCountInWordWithVowels\
    \ = vowelCountInWord - consonantCountInWord\n        val consonantCountInWordWithVowelsAndConsonants\
    \ = consonantCountInWordWithVowels + consonantCount\n        val vowelCountInWordWithVowelsAndConsonants\
    \ = vowelCountInWordWithVowels + vowelCount\n        val consonantCountInWordWithVowelsAndConsonantsAndConsonants\
    \ = consonantCountInWordWithVowelsAndConsonants + consonantCount\n        val\
    \ vowelCountInWordWithVowelsAndConsonantsAndConsonants = vowelCountInWordWithVowelsAndConsonants\
    \ + vowelCount\n        val consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants\
    \ = consonantCountInWordWithVowelsAndConsonantsAndConsonants + consonantCount\n\
    \        val vowelCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants\
    \ = vowelCountInWordWithVowelsAndConsonantsAndConsonants + vowelCount\n      \
    \  val consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonantsAndConsonants\
    \ = consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants + consonantCount\n\
    \        val vowelCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonantsAndConsonants\
    \ = vowelCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants + vowelCount\n\
    \        val consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndCon\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxggf07i7.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxggf07i7.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithNConsonants\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpxggf07i7.scala:24:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpxggf07i7.scala:25:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpxggf07i7.scala:26:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWord\e[0m\
    \ = s.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpxggf07i7.scala:27:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCountInWord\e[0m = s.count(_ == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Erro"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet = consonants.toSet\n\
    \        val vowelSet = vowels.toSet\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(vowelSet))\n   \
    \     val wordSet = words.toSet\n        val result: List[String] = if (wordSet.size==n)\
    \ words else List()\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnu434lkg.scala:25:91\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(vowelSet))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.toString.toList.size == n).toList\n        if (result.isEmpty) List()\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm6jv8l8q.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).filter(_ => _.toString.toList.size\
    \ == n).toList\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm6jv8l8q.scala:22:86\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36mresult\e[0m = list.filter(_ => _.length == n).flatMap(_.split(\e[31m\"\
    \"\e[0m)).filter(_ => _.toString.toList.size == n).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$5 of expanded\
    \ function:\n\e[31m   |\e[0m   _$5 => _$5.toString.toList.size == n.\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- words) {\n           \
    \ val count = word.length\n            if (count.toLong == n) {\n            \
    \    list += word\n                count.put(word, count + 1)\n            }\n\
    \        }\n        list.filter(_ != \"\").sortWith(_.compareTo(_) < 0).map(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfvw7lv1.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfvw7lv1.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphfvw7lv1.scala:28:22 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                count.put(word, count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value put is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(_ == 'a')\n            if (count == n)\
    \ result += word\n        }\n        if (result.isEmpty) result else result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbqbeolb.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase)\n        val consonantSet =\
    \ Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantList = consonantSet.toList\n\
    \        val consonantSet2 = consonantList.map(_.toUpperCase)\n        val consonantSet3\
    \ = consonantSet2.map(_.toUpperCase)\n        val consonantSet4 = consonantSet3.map(_.toUpperCase)\n\
    \        val consonantSet5 = consonantSet4.map(_.toUpperCase)\n        val consonantSet6\
    \ = consonantSet5.map(_.toUpperCase)\n        val consonantSet7 = consonantSet6.map(_.toUpperCase)\n\
    \        val consonantSet8 = consonantSet7.map(_.toUpperCase)\n        val consonantSet9\
    \ = consonantSet8.map(_.toUpperCase)\n        val consonantSet10 = consonantSet9.map(_.toUpperCase)\n\
    \        val consonantSet11 = consonantSet10.map(_.toUpperCase)\n        val consonantSet12\
    \ = consonantSet11.map(_.toUpperCase)\n        val consonantSet13 = consonantSet12.map(_.toUpperCase)\n\
    \        val consonantSet14 = consonantSet13.map(_.toUpperCase)\n        val consonantSet15\
    \ = consonantSet14.map(_.toUpperCase)\n        val consonantSet16 = consonantSet15.map(_.toUpperCase)\n\
    \        val consonantSet17 = consonantSet16.map(_.toUpperCase)\n        val consonantSet18\
    \ = consonantSet17.map(_.toUpperCase)\n        val consonantSet19 = consonantSet18.map(_.toUpperCase)\n\
    \        val consonantSet20 = consonantSet19.map(_.toUpperCase)\n        val consonantSet21\
    \ = consonantSet20.map(_.toUpperCase)\n        val consonantSet22 = consonantSet21.map(_.toUpperCase)\n\
    \        val consonantSet23 = consonantSet22.map(_.toUpperCase)\n        val consonantSet24\
    \ = consonantSet23.map(_.toUpperCase)\n        val consonantSet25 = consonantSet24.map(_.toUpperCase)\n\
    \        val consonantSet26 = consonant\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpema_92m6.scala:49:29 ------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet26\e[0m = consonant\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: consonant\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpema_92m6.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filterNot(_.isEmpty).filterNot(_.isDigit).filterNot(_.isLetter).filterNot(_.isSpace).filterNot(_.equals(\"\
    .\")).filterNot(_.equals(\"?\")).filterNot(_.equals(\"!\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equal\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp00n77bkt.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00n77bkt.scala:22:59\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = list.filterNot(_.isEmpty).filterNot(_.isDigit).filterNot(_.isLetter).filterNot(_.isSpace).filterNot(_.equals(\e\
    [31m\".\"\e[0m)).filterNot(_.equals(\e[31m\"?\"\e[0m)).filterNot(_.equals(\e[31m\"\
    !\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\
    \e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e\
    [0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e\
    [31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\"\
    :\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\
    \e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e\
    [0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e\
    [31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\"\
    ;\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\
    \e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e\
    [0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e\
    [31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\"\
    :\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\
    \e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e\
    [0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e\
    [31m\";\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\"\
    ;\"\e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\
    \e[0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e\
    [0m)).filterNot(_.equals(\e[31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals(\e\
    [31m\":\"\e[0m)).filterNot(_.equals(\e[31m\";\"\e[0m)).filterNot(_.equals"
  stdout: ''
  timestamp: 1660010221
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_.replaceAll(\"[^a-zA-Z ]\", \"\").length ==\
    \ n)\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3vcb0jt.scala:26)\n\tat Problem.main(tmpt3vcb0jt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val letters = word.split(\"\").toList\n            val count\
    \ = letters.count(letter => letter == \"a\")\n            if (count == n) {\n\
    \                list += word\n            }\n        })\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcbdg54g.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val wordList = mutable.ListBuffer[String]()\n\
    \        val vowelCount = mutable.Map[String, Int]()\n        val consonantCount\
    \ = mutable.Map[String, Int]()\n        val wordCount = mutable.Map[String, Int]()\n\
    \        val wordList = s.split(\" \").toList\n        wordList.foreach(word =>\
    \ {\n            val vowelCounts = word.count(vowels).toInt\n            val consonantCounts\
    \ = word.count(consonants).toInt\n            val wordCounts = word.count(\" \"\
    ).toInt\n            val wordCount = wordCount + 1\n            wordCount += wordCounts\n\
    \            vowelCount += (\"vowelCount\" -> vowelCounts)\n            consonantCount\
    \ += (\"consonantCount\" -> consonantCounts)\n            wordList += word\n \
    \       })\n        val vowelCounts = vowelCount.filter(_._2 >= n).toMap\n   \
    \     val consonantCounts = consonantCount.filter(_._2 >= n).toMap\n        val\
    \ wordCounts = wordCount.filter(_._2 >= n).toMap\n        val wordList = wordList.filter(_._2\
    \ >= n).toList\n        wordList.foreach(word => {\n            val vowelCounts\
    \ = vowelCount.filter(_._1 == word).toMap\n            val consonantCounts = consonantCount.filter(_._1\
    \ == word).toMap\n            val wordCounts = wordCount.filter(_._1 == word).toMap\n\
    \            val wordCount = wordCount + 1\n            wordCount += wordCounts\n\
    \            vowelCount += (\"vowelCount\" -> vowelCounts)\n            consonantCount\
    \ += (\"consonantCount\" -> consonantCounts)\n            wordList += word\n \
    \       })\n        wordList.filter(_._2 >= n).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4_6b15ra.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = s.split(\e\
    [31m\" \"\e[0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4_6b15ra.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = wordList.filter(_._2\
    \ >= n).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4_6b15ra.scala:23:23 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_6b15ra.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_6b15ra.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCount\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(_ => _.length == n)\n        list2.map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.nonEmpty).map(_.split(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp15hrs_qo.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp15hrs_qo.scala:23:8 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        list2.map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.nonEmpty).map(_.split(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Array[Array[String]]\n\e[31m   |\e[0m  \
    \      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.forall(c => c >= 'a' && c <= 'z'))\n        val consonants: List[String]\
    \ = words.filter(_.forall(c => c >= 'a' && c <= 'z'))\n        val vowels: List[String]\
    \ = words.filter(_.forall(c => c >= 'A' && c <= 'Z'))\n        val consonantCount\
    \ = consonants.map(_.length).sum\n        val vowelCount = vowels.map(_.length).sum\n\
    \        val consonantWords = consonants.filter(w => w.length == n)\n        val\
    \ vowelWords = vowels.filter(w => w.length == n)\n        val consonantWordCount\
    \ = consonantWords.map(_.length).sum\n        val vowelWordCount = vowelWords.map(_.length).sum\n\
    \        if (consonantWordCount == consonantCount && vowelWordCount == vowelCount\
    \ && consonantWordCount == vowelWordCount) {\n            consonantWords.toList\n\
    \        } else {\n            List()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5r59fe0o.scala:21:53\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e\
    [36mc\e[0m => c >= \e[31m'a'\e[0m && c <= \e[31m'z'\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = mutable.ListBuffer[String]()\n\
    \        val wordsWithNConsonantsCounts = mutable.ListBuffer[Long]()\n       \
    \ val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3nx2l2ab.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nx2l2ab.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsWithNConsonantsCounts\e[0m: mutable.ListBuffer[\e[35mLong\e[0m] =\
    \ mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithNConsonantsCounts is already defined as \e[33mvalue\e\
    [0m \e[35mwordsWithNConsonantsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nx2l2ab.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount\e\
    [0m: \e[35mLong\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithNConsonantsCount is already defined as \e[33mvalue\e\
    [0m \e[35mwordsWithNConsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nx2l2ab.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCounts\e\
    [0m: mutable.ListBuffer[\e[35mLong\e[0m] = mutable.ListBuffer()\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithNConsonantsCounts is already defined as \e[33mvalue\e\
    [0m \e[35mwordsWithNConsonantsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nx2l2ab.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount\e\
    [0m: \e[35mLong\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfzrkthr.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppfzrkthr.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter( x => x.toString.count(_ == 'a') <= n )\n  \
    \      result.map(x => x.split(\" \"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponcbp6uy.scala:23:31\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result.map(\e[36mx\e\
    [0m => x.split(\e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    \e[1m\e\
    [31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m      \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantCount = consonants.toSet.size // number of consonants\n\
    \        val vowelCount = vowels.toSet.size // number of vowels\n        val consonantIndex\
    \ = consonants.indexOf(n) // index of consonant\n        val vowelIndex = vowels.indexOf(n)\
    \ // index of vowel\n        val currentWord = s.substring(0,s.length - 1) //\
    \ current word is everything before the last letter\n        val currentWordLength\
    \ = currentWord.length // length of current word\n        val currentWordChars\
    \ = currentWord.toCharArray // current word chars\n        val currentWordCharCount\
    \ = currentWordChars.length // length of current word chars\n        val currentWordCharsCount\
    \ = currentWordChars.size // number of current word chars\n        val currentWordCharsIndex\
    \ = currentWordChars.indexOf(n) // index of current word chars\n        val currentWordCharsIndex2\
    \ = currentWordCharsIndex + 1 // index of current word chars\n        val currentWordCharsIndex3\
    \ = currentWordCharsIndex + 2 // index of current word chars\n        val currentWordCharsIndex4\
    \ = currentWordCharsIndex + 3 // index of current word chars\n        val currentWordCharsIndex5\
    \ = currentWordCharsIndex + 4 // index of current word chars\n        val currentWordCharsIndex6\
    \ = currentWordCharsIndex + 5 // index of current word chars\n        val currentWordCharsIndex7\
    \ = currentWordCharsIndex + 6 // index of current word chars\n        val currentWordCharsIndex8\
    \ = currentWordCharsIndex + 7 // index of current word chars\n        val currentWordCharsIndex9\
    \ = currentWordCharsIndex + 8 // index of current word chars\n        val currentWordCharsIndex10\
    \ = currentWordCharsIndex + 9 // index of current word chars\n        val currentWordCharsIndex11\
    \ = currentWordCharsIndex + 10 // index of current word chars\n        val currentWordCharsIndex12\
    \ = currentWordCharsIndex + 11 // index of current word chars\n        val currentWordCharsIndex13\
    \ = currentWordCharsIndex + 12 // index of current word chars\n        val currentWordCharsIndex14\
    \ = currentWordCharsIndex + 13 // index of current word chars\n        val currentWordCharsIndex15\
    \ = currentWordCharsIndex + 14\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp06cidy3o.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06cidy3o.scala:33:61\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcurrentWordCharsIndex\e\
    [0m = currentWordChars.indexOf(n) \e[34m// index of current word chars\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (n : Long)\n\e[31m   |\e[0m                                     \
    \               Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp06cidy3o.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val wordList2 = wordList.map(x => x.toLowerCase)\n        val wordList3\
    \ = wordList2.filter(x => x.contains(\"a\"))\n        val wordList4 = wordList3.filter(x\
    \ => x.contains(\"e\"))\n        val wordList5 = wordList4.filter(x => x.contains(\"\
    i\"))\n        val wordList6 = wordList5.filter(x => x.contains(\"o\"))\n    \
    \    val wordList7 = wordList6.filter(x => x.contains(\"u\"))\n        val wordList8\
    \ = wordList7.filter(x => x.contains(\"l\"))\n        val wordList9 = wordList8.filter(x\
    \ => x.contains(\"n\"))\n        val wordList10 = wordList9.filter(x => x.contains(\"\
    d\"))\n        val wordList11 = wordList10.filter(x => x.contains(\"h\"))\n  \
    \      val wordList12 = wordList11.filter(x => x.contains(\"w\"))\n        val\
    \ wordList13 = wordList12.filter(x => x.contains(\"s\"))\n        val wordList14\
    \ = wordList13.filter(x => x.contains(\"p\"))\n        val wordList15 = wordList14.filter(x\
    \ => x.contains(\"b\"))\n        val wordList16 = wordList15.filter(x => x.contains(\"\
    f\"))\n        val wordList17 = wordList16.filter(x => x.contains(\"v\"))\n  \
    \      val wordList18 = wordList17.filter(x => x.contains(\"k\"))\n        val\
    \ wordList19 = wordList18.filter(x => x.contains(\"j\"))\n        val wordList20\
    \ = wordList19.filter(x => x.contains(\"q\"))\n        val wordList21 = wordList20.filter(x\
    \ => x.contains(\"x\"))\n        val wordList22 = wordList21.filter(x => x.contains(\"\
    z\"))\n        val wordList23 = wordList22.filter(x => x.contains(\"c\"))\n  \
    \      val wordList24 = wordList23.filter(x => x.contains(\"m\"))\n        val\
    \ wordList25 = wordList24.filter(x => x.contains(\"y\"))\n        val wordList26\
    \ = wordList25.filter(x => x.contains(\"r\"))\n        val wordList27 = wordList26.filter(x\
    \ => x.contains(\"g\"))\n        val wordList28 = wordList27.filter(x => x.contains(\"\
    o\"))\n        val wordList29 = wordList28.filter(x => x.contains(\"t\"))\n  \
    \      val wordList30 = wordList29.filter(x => x.contains(\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwyhxzz63.scala:50:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mwordList30\e[0m = wordList29.filter(\e\
    [36mx\e[0m => x.contains(\"\n\e[31m\e[31m   |\e[0m                           \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                            unclosed string literal\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpwyhxzz63.scala:51:5 ---------------------\e[0m\e[0m\n\
    \e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val wordList = word.split(\"\")\n            wordList.foreach(letter\
    \ => {\n                if (letter == \"a\" || letter == \"e\" || letter == \"\
    i\" || letter == \"o\" || letter == \"u\" || letter == \"y\") {\n            \
    \        result.add(word)\n                }\n            })\n        })\n   \
    \     if (result.size == 0) {\n            result.add(\"empty\")\n        }\n\
    \        if (result.size == n) {\n            result.add(\"full\")\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa48ni8b9.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    if (result.isEmpty) {\n            List()\n        } else {\n           \
    \ result.mkString(\" \")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_y4804.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    n\")) {\n                result.add(word)\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7k88vpj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelsCount = s.count(vowels.toCharArray)\n        val consonantsCount\
    \ = s.count(consonants.toCharArray)\n        val vowelsCount2 = s.count(vowels.toList)\n\
    \        val consonantsCount2 = s.count(consonants.toList)\n        val vowelsCount3\
    \ = s.count(vowels.toSeq)\n        val consonantsCount3 = s.count(consonants.toSeq)\n\
    \        val vowelsCount4 = s.count(vowels.toSet)\n        val consonantsCount4\
    \ = s.count(consonants.toSet)\n        val vowelsCount5 = s.count(vowels.toMap)\n\
    \        val consonantsCount5 = s.count(consonants.toMap)\n        val vowelsCount6\
    \ = s.count(vowels.toSeq.toList)\n        val consonantsCount6 = s.count(consonants.toSeq.toList)\n\
    \        val vowelsCount7 = s.count(vowels.toSeq.toSet)\n        val consonantsCount7\
    \ = s.count(consonants.toSeq.toSet)\n        val vowelsCount8 = s.count(vowels.toSeq.toMap)\n\
    \        val consonantsCount8 = s.count(consonants.toSeq.toMap)\n        val vowelsCount9\
    \ = s.count(vowels.toSeq.toSet.toList)\n        val consonantsCount9 = s.count(consonants.toSeq.toSet.toList)\n\
    \        val vowelsCount10 = s.count(vowels.toSeq.toMap.toList)\n        val consonantsCount10\
    \ = s.count(consonants.toSeq.toMap.toList)\n        val vowelsCount11 = s.count(vowels.toSeq.toMap.toSet)\n\
    \        val consonantsCount11 = s.count(consonants.toSeq.toMap.toSet)\n     \
    \   val vowelsCount12 = s.count(vowels.toSeq.toMap.toSet.toList)\n        val\
    \ consonantsCount12 = s.count(consonants.toSeq.toMap.toSet.toList)\n        val\
    \ vowelsCount13 = s.count(vowels.toSeq.toMap.toSet.toSet)\n        val consonantsCount13\
    \ = s.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsis1datj.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpsis1datj.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsis1datj.scala:24:33 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (vowels : String)\n\e[31m   |\e\
    [0m                                 Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsis1datj.scala:25:37 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    (consonants : String)\n\
    \e[31m   |\e[0m                                     Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsis1datj.scala:26:34\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = s.count(vowels.toCharArray)\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \           Found:    Array[Char]\n\e[31m   |\e[0m                           \
    \       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type M"
  stdout: ''
  timestamp: 1660010228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val letters = word.split(\"\")\n            val count = letters.count(_\
    \ == 'a')\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphap98ls7.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmphap98ls7.scala:25:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     \e[33mval\e[0m \e[36mcount\e[0m = letters.count(_ == \e[31m'a'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            val count = word.count(_\
    \ == 'a')\n            if(count == n) {\n                result += (word :: \"\
    \")\n            }\n        }\n        if(result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8n003jt.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val chars = s.toCharArray\n        val len = chars.length\n        val\
    \ charsCount = chars.map(_.toString.length).sum\n        val consonants = chars.filter(c\
    \ => c.toString.toChar == 'b')\n        val vowels = chars.filter(c => c.toString.toChar\
    \ == 'a')\n        val consonantsCount = consonants.map(_.toString.length).sum\n\
    \        val vowelsCount = vowels.map(_.toString.length).sum\n        val maxConsonants\
    \ = math.min(consonantsCount, n)\n        val maxVowels = math.min(vowelsCount,\
    \ n)\n        val maxCount = math.min(maxConsonants, maxVowels)\n        val maxChars\
    \ = math.min(len, maxCount)\n        val maxCharsCount = maxChars.map(_.toString.length).sum\n\
    \        val maxCharsCountWithConsonants = maxCharsCount + consonantsCount\n \
    \       val maxCharsCountWithVowels = maxCharsCount + vowelsCount\n        val\
    \ maxCharsCountWithConsonantsAndVowels = maxCharsCountWithConsonants + maxCharsCountWithVowels\n\
    \        val maxCharsCountWithConsonantsAndVowelsAndSpaces = maxCharsCountWithConsonantsAndVowels\
    \ + chars.filter(c => c.toString.toChar == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpaces\
    \ = maxCharsCountWithConsonantsAndVowelsAndSpaces + chars.filter(c => c.toString.toChar\
    \ == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpaces\
    \ = maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpaces + chars.filter(c =>\
    \ c.toString.toChar == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpaces + chars.filter(c\
    \ => c.toString.toChar == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = maxCharsCountWithConson\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_3yk8d4.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_3yk8d4.scala:25:54\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonants\e[0m = chars.filter(\e[36mc\e[0m => c.toString.toChar == \e[31m'b'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_3yk8d4.scala:26:50\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowels\e[0m = chars.filter(\e[36mc\e[0m => c.toString.toChar == \e[31m'a'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_3yk8d4.scala:33:37\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxCharsCount\e[0m = maxChars.map(_.toString.length).sum\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                value map is not a member of Long\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpr_3yk8d4.scala:41:96 ------------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\e\
    [0m = maxCharsCountWithConson\n\e[31m\e[31m   |\e[0m                         \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: maxCharsCountWithConson\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling "
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfzrkthr.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppfzrkthr.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.isLetter)\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- words) {\n           \
    \ val count = count.getOrElse(word, 0) + 1\n            count.put(word, count)\n\
    \            if (count.get(word) == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgnq7d3p5.scala:34:25 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            result toList\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgnq7d3p5.scala:21:42 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e[31m\" \"\e[0m).filter(_.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnq7d3p5.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgnq7d3p5.scala:23:24 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            val count = word.count(c => c.isLetter)\n            if(count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        if(result.isEmpty) {\n            List()\n        } else {\n        \
    \    result.mkString(\" \")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdi94oyo.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfzrkthr.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppfzrkthr.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result: List[String] = new ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(_ == 'a')\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3y0zfu5b.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3y0zfu5b.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                result += (word + \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ += is not a member of List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.split(\"\").filter(y => y == \"z\" || y ==\
    \ \"Z\" || y == \"y\" || y == \"Y\" || y == \"x\" || y == \"X\").map(y => y.toLowerCase))\n\
    \        val list3 = list2.map(x => x.filter(y => y == \"a\" || y == \"e\" ||\
    \ y == \"i\" || y == \"o\" || y == \"u\").map(y => y.toLowerCase))\n        val\
    \ list4 = list3.map(x => x.filter(y => y == \"b\" || y == \"c\" || y == \"d\"\
    \ || y == \"f\" || y == \"g\" || y == \"h\" || y == \"j\" || y == \"k\" || y ==\
    \ \"l\" || y == \"m\" || y == \"n\" || y == \"p\" || y == \"q\" || y == \"r\"\
    \ || y == \"s\" || y == \"t\" || y == \"v\" || y == \"w\" || y == \"x\" || y ==\
    \ \"y\" || y == \"z\").map(y => y.toLowerCase))\n        val list5 = list4.map(x\
    \ => x.filter(y => y == \"c\" || y == \"d\" || y == \"f\" || y == \"g\" || y ==\
    \ \"h\" || y == \"j\" || y == \"k\" || y == \"l\" || y == \"m\" || y == \"n\"\
    \ || y == \"p\" || y == \"q\" || y == \"r\" || y == \"s\" || y == \"t\" || y ==\
    \ \"v\" || y == \"w\" || y == \"x\" || y == \"y\" || y == \"z\").map(y => y.toLowerCase))\n\
    \        val list6 = list5.map(x => x.filter(y => y == \"c\" || y == \"d\" ||\
    \ y == \"f\" || y == \"g\" || y == \"h\" || y == \"j\" || y == \"k\" || y == \"\
    l\" || y == \"m\" || y == \"n\" || y == \"p\" || y == \"q\" || y == \"r\" || y\
    \ == \"s\" || y == \"t\" || y == \"v\" || y == \"w\" || y == \"x\" || y == \"\
    y\" || y == \"z\").map(y => y.toLowerCase))\n        val list7 = list6.map(x =>\
    \ x.filter(y => y == \"c\" || y == \"d\" || y == \"f\" || y == \"g\" || y == \"\
    h\" || y == \"j\" || y == \"k\" || y == \"l\" || y == \"m\" || y == \"n\" || y\
    \ == \"p\" || y == \"q\" || y == \"r\" || y == \"s\" || y == \"t\" || y == \"\
    v\" || y == \"w\" || y == \"x\" || y == \"y\" || y == \"z\").map(y => y.toLowerCase))\n\
    \        val list8 = list7.map(x => x.filter(y => y == \"c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcr55ecxs.scala:28:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mlist8\e[0m = list7.map(\e\
    [36mx\e[0m => x.filter(\e[36my\e[0m => y == \"c\n\e[31m\e[31m   |\e[0m       \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                           unclosed string literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpcr55ecxs.scala:30:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcr55ecxs.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcr55ecxs.scala:30:4 -------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: cdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += word\n            }\n        })\n       \
    \ if (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d08d1sc.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = mutable.ListBuffer[String]()\n        for(word <- words) {\n\
    \            val count = word.count(c => c.isLetter)\n            if(count ==\
    \ n) {\n                list += word\n            }\n        }\n        if(list.isEmpty)\
    \ {\n            List()\n        } else {\n            list.toList\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsa9m45kd.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5h92ww4o.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5h92ww4o.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5h92ww4o.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val result = list.filter(_.length == n).map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\").toLowerCase).toList\n        if (result.isEmpty)\
    \ List(\"\") else result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphx94wjir.scala:26)\n\tat Problem.main(tmphx94wjir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase)\n        val wordsWithNConsonantsCount\
    \ = wordsWithNConsonants.map(_.length).sum\n        val wordsWithNConsonantsCountAndWords\
    \ = wordsWithNConsonants.map(w => (w, w.length))\n        val wordsWithNConsonantsCountAndWordsCount\
    \ = wordsWithNConsonantsCountAndWords.map(w => (w, w.length)).sum\n        val\
    \ wordsWithNConsonantsCountAndWordsCountAndWords = wordsWithNConsonantsCountAndWords.map(w\
    \ => (w, w.length)).map(w => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCount\
    \ = wordsWithNConsonantsCountAndWordsCountAndWords.map(w => (w, w.length)).map(w\
    \ => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWords\
    \ = wordsWithNConsonantsCountAndWordsCountAndWords.map(w => (w, w.length)).map(w\
    \ => (w, w.length)).map(w => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCount\
    \ = wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWords.map(w => (w, w.length)).map(w\
    \ => (w, w.length)).map(w => (w, w.length)).map(w => (w, w.length)).sum\n    \
    \    val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWordsCount\
    \ = wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWords.map(w\
    \ => (w, w.length)).map(w => (w, w.length)).map(w => (w, w.length)).map(w => (w,\
    \ w.length)).map(w => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWordsCountAndWords\
    \ = wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWordsCountAndWords.map(w\
    \ => (w, w.length)).map(w => (w, w.length)).map(w => (w, w.length)).map(w => (w,\
    \ w.length)).map(w => (w, w.length)).map(w => (w, w.length)).sum\n        val\
    \ wordsWithNConsonantsCountAndWord\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6mrv71_9.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6mrv71_9.scala:24:102\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithNConsonantsCountAndWordsCount\e[0m = wordsWithNConsonantsCountAndWords.map(\e\
    [36mw\e[0m => (w, w.length)).sum\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value length is not\
    \ a member of (String, Int)\n\e[31m\e[31m-- Error: /tmp/tmp6mrv71_9.scala:24:114\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e\
    [33mval\e[0m \e[36mwordsWithNConsonantsCountAndWordsCount\e[0m = wordsWithNConsonantsCountAndWords.map(\e\
    [36mw\e[0m => (w, w.length)).sum\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for B\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint >:\
    \ ((String, Int), Nothing)\n\e[31m   |\e[0m.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6mrv71_9.scala:25:110 -----------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCountAndWordsCountAndWords\e\
    [0m = wordsWithNConsonantsCountAndWords.map(\e[36mw\e[0m => (w, w.length)).map(\e\
    [36mw\e[0m => (w, w.length)).sum\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value length\
    \ is not a member of (String, Int)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6mrv71_9.scala:25:134\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithNConsonantsCountAndWordsCountAndWords\e[0m = wordsWithNConsonantsCountAndWords.map(\e\
    [36mw\e[0m => (w, w.length)).map(\e[36mw\e[0m => (w, w.length)).sum\n\e[31m\e\
    [31m   |"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(_ == 'a')\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybha4e1t.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \\\\s\").filter(_.length == n).map(_.toLowerCase)\n        val wordsWithNConsonantsSorted\
    \ = wordsWithNConsonants.sortWith(_.length < _.length)\n        val wordsWithNConsonantsSortedUnique\
    \ = wordsWithNConsonantsSorted.distinct\n        val wordsWithNConsonantsSortedUniqueSorted\
    \ = wordsWithNConsonantsSortedUnique.sortWith(_.length < _.length)\n        val\
    \ wordsWithNConsonantsSortedUniqueSortedReversed = wordsWithNConsonantsSortedUniqueSorted.reverse\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSorted = wordsWithNConsonantsSortedUniqueSortedReversed.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUnique\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSorted.distinct\n        val\
    \ wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSorted = wordsWithNConsonantsSortedUniqueSortedReversedSortedUnique.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed.reverse\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUnique\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUnique.distinct\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSorted\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSorted.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversed\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversed.reverse\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversedSorted\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversedSorted.sortWith(_.length\
    \ < _.length)\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgg1byr78.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgg1byr78.scala:29:87 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed\e\
    [0m = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mwordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgg1byr78.scala:30:93\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted\e\
    [0m = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted.sortWith(_.length\
    \ < _.length)\n\e[31m\e[31m   |\e[0m                                         \
    \                                                    ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgg1byr78.scala:31:99 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUnique\e\
    [0m = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUnique.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     "
  stdout: ''
  timestamp: 1660010232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list = list.filterNot(x => x.isEmpty)\n        val list = list.filterNot(x\
    \ => x.contains(\"a\"))\n        val list = list.filterNot(x => x.contains(\"\
    e\"))\n        val list = list.filterNot(x => x.contains(\"i\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"o\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"u\"))\n        val list = list.filterNot(x => x.contains(\"\
    A\"))\n        val list = list.filterNot(x => x.contains(\"E\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"I\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"O\"))\n        val list = list.filterNot(x => x.contains(\"\
    U\"))\n        val list = list.filterNot(x => x.contains(\"a\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"e\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"i\"))\n        val list = list.filterNot(x => x.contains(\"\
    o\"))\n        val list = list.filterNot(x => x.contains(\"u\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"A\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"E\"))\n        val list = list.filterNot(x => x.contains(\"\
    I\"))\n        val list = list.filterNot(x => x.contains(\"O\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"U\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"a\"))\n        val list = list.filterNot(x => x.contains(\"\
    e\"))\n        val list = list.filterNot(x => x.contains(\"i\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"o\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"u\"))\n        val list = list.filterNot(x => x.contains(\"\
    A\"))\n        val list = list.filterNot(x => x.contains(\"E\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"I\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"O\"))\n        val list = list.filterNot(x => x.contains(\"\
    U\"))\n        val list = list.filterNot(x => x.contains(\"a\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"e\"))\n        val list = list.filterNot(x\
    \ => x.contain\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmply8zdyvf.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmply8zdyvf.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filterNot(\e[36mx\e[0m => x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist\
    \ is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmply8zdyvf.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"a\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmply8zdyvf.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(\e[36mx\e[0m =>\
    \ x.contains(\e[31m\"e\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmply8zdyvf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(\e[36mx\e[0m =>\
    \ x.contains(\e[31m\"i\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = wordList.count(_.toString.toLowerCase in\
    \ consonants)\n        val vowelCount = wordList.count(_.toString.toLowerCase\
    \ in vowels)\n        if (consonantCount == n && vowelCount == n) {\n        \
    \    wordList.filter(_.toString.toLowerCase in consonants)\n        } else {\n\
    \            wordList.filter(_.toString.toLowerCase in consonants).filter(_.toString.toLowerCase\
    \ in vowels)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3lxygm.scala:24:67 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = wordList.count(_.toString.toLowerCase\
    \ in consonants)\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value in is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_l3lxygm.scala:25:63 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = wordList.count(_.toString.toLowerCase\
    \ in vowels)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value in is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3lxygm.scala:27:51\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            wordList.filter(_.toString.toLowerCase\
    \ in consonants)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value in is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l3lxygm.scala:29:51 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            wordList.filter(_.toString.toLowerCase in\
    \ consonants).filter(_.toString.toLowerCase in vowels)\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           value in is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_l3lxygm.scala:29:96 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            wordList.filter(_.toString.toLowerCase in\
    \ consonants).filter(_.toString.toLowerCase in vowels)\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value in is not a member\
    \ of String\n5 errors found\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ contains n).sortBy(_.length)\n        result.map(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcr_u7p8.scala:26)\n\tat Problem.main(tmpjcr_u7p8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        })\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18e74qp6.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            val wordList = word.split(\"\")\n            val consonantCount\
    \ = wordList.count(x => x.toString.toLowerCase == \"a\" || x.toString.toLowerCase\
    \ == \"e\" || x.toString.toLowerCase == \"i\" || x.toString.toLowerCase == \"\
    o\" || x.toString.toLowerCase == \"u\")\n            if(consonantCount == n) {\n\
    \                result += word\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn7rw2n3p.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWords = words.filter(word => consonants.contains(word))\n\
    \        val vowelWords = words.filter(word => vowels.contains(word))\n      \
    \  val consonantWordCount = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordCount = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount2 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount2 = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount3 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount3 = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount4 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount4 = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount5 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount5 = vowelWords.map(_.toUpperCase).map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp302sf3if.scala:39:65 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelWordsCount5\e[0m =\
    \ vowelWords.map(_.toUpperCase).map(\n\e[31m\e[31m   |\e[0m                  \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp302sf3if.scala:24:78\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n\e[31m\e[31m   |\e[0m                                          \
    \                                    ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp302sf3if.scala:25:74 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n\e[31m\e[31m   |\e[0m                                \
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp302sf3if.scala:25:89 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n\e[31m\e[31m   |\e[0m                                \
    \                                                         ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp302sf3if.scala:28:91 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantWordCount\e[0m\
    \ = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_ == _)).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \         "
  stdout: ''
  timestamp: 1660010237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val resultList = mutable.ListBuffer[String]()\n        val consonants\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet\
    \ = vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsCount\
    \ = vowelsSet.count\n        val consonantsCount = consonantsSet.count\n     \
    \   val consonantsCountInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val vowelsCountInWord = vowelsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWordInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val vowelsCountInWordInWord = vowelsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWordInWordInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWordInWordInWordInWord = consonantsSet.count(x =>\
    \ wordList.contains(x))\n        val vowelsCountInWordInWordInWordInWord = vowelsSet.count(x\
    \ => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val vowelsCountInWordInWordInWordInWordInWordInWord\
    \ = vowelsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0f56_sf1.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0f56_sf1.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantsCountInWord\e[0m = consonantsSet.count(\e[36mx\e[0m => wordList.contains(x))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCountInWord is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsCountInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0f56_sf1.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWordInWordInWordInWordInWordInWord\e\
    [0m = consonantsSet.count(\e[36mx\e[0m => wordList.contains(x))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCountInWordInWordInWordInWordInWordInWord is already\
    \ defined as \e[33mvalue\e[0m \e[35mconsonantsCountInWordInWordInWordInWordInWordInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0f56_sf1.scala:22:25 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0f56_sf1.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).flatMap(_.split(\"\")).distinct\n\
    \        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpila2dtn9.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).flatMap(_.split(\e[31m\"\"\e[0m)).distinct\n\e[31m\e[31m \
    \  |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length\
    \ == n.\n1 error found\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ wordList.length){\n            val word = wordList(i)\n            val consonants\
    \ = word.filter(x => x.toString.toChar == 'a')\n            if(consonants.length\
    \ == n){\n                result += (word :: Nil)\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgk6i3ead.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk6i3ead.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mconsonants\e[0m = word.filter(\e[36mx\e[0m => x.toString.toChar == \e\
    [31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \  value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiouAEIOU\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsnmfxybj.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsnmfxybj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsnmfxybj.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsnmfxybj.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsnmfxybj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithConsonants = \n \
    \           s.split(\" \").filter(_.forall(c => c != \" \")).map(word => \n  \
    \              word.split(\"\").filter(_.forall(c => c != \"c\" && c != \"C\"\
    )).map(word => \n                    word.split(\"\").filter(_.forall(c => c !=\
    \ \"h\" && c != \"H\")).map(word => \n                        word.split(\"\"\
    ).filter(_.forall(c => c != \"a\" && c != \"A\")).map(word => \n             \
    \               word.split(\"\").filter(_.forall(c => c != \"l\" && c != \"L\"\
    )).map(word => \n                                word.split(\"\").filter(_.forall(c\
    \ => c != \"e\" && c != \"E\")).map(word => \n                               \
    \     word.split(\"\").filter(_.forall(c => c != \"o\" && c != \"O\")).map(word\
    \ => \n                                        word.split(\"\").filter(_.forall(c\
    \ => c != \"n\" && c != \"N\")).map(word => \n                               \
    \             word.split(\"\").filter(_.forall(c => c != \"s\" && c != \"S\")).map(word\
    \ => \n                                                word.split(\"\").filter(_.forall(c\
    \ => c != \"m\" && c != \"M\")).map(word => \n                               \
    \                     word.split(\"\").filter(_.forall(c => c != \"a\" && c !=\
    \ \"A\")).map(word => \n                                                     \
    \   word.split(\"\").filter(_.forall(c => c != \"l\" && c != \"L\")).map(word\
    \ => \n                                                            word.split(\"\
    \").filter(_.forall(c => c != \"e\" && c != \"E\")).map(word => \n           \
    \                                                     word.split(\"\").filter(_.forall(c\
    \ => c != \"o\" && c != \"O\")).map(word => \n                               \
    \                                     word.split(\"\").filter(_.forall(c => c\
    \ != \"n\" && c != \"N\")).map(word => \n                                    \
    \                                    word.split(\"\").filter(_.forall(c => c !=\
    \ \"s\" && c != \"S\")).map(word => \n                                       \
    \                                     word.split(\"\").filter(_.forall(c => c\
    \ != \"m\" && c != \"M\")).map(word => \n                                    \
    \                                            word.split(\"\").filter(_.forall(c\
    \ => c != \"a\" && c != \"A\")).map(word => \n                               \
    \                                                     word.split(\"\").filter(_.forall(c\
    \ => c != \"l\" && c != \"L\")).map(word => \n                               \
    \                                                         word.split(\"\").filter(_.forall(c\
    \ => c != \"e\" && c != \"E\")).map(word => \n                               \
    \                                                             word.split(\"\"\
    ).filter(_.forall(c => c != \"o\" && c != \"O\")).\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl7pkrsvh.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but unindent found\n\e[31m\e[31m-- Error: /tmp/tmpl7pkrsvh.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m => c != \e[31m\"\
    \ \"\e[0m)).map(\e[36mword\e[0m => \n\e[31m\e[31m   |\e[0m                   \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl7pkrsvh.scala:23:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \         word.split(\e[31m\"\"\e[0m).filter(_.forall(\e[36mc\e[0m => c != \e\
    [31m\"c\"\e[0m && c != \e[31m\"C\"\e[0m)).map(\e[36mword\e[0m => \n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpl7pkrsvh.scala:23:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                word.split(\e[31m\"\"\e[0m).filter(_.forall(\e\
    [36mc\e[0m => c != \e[31m\"c\"\e[0m && c != \e[31m\"C\"\e[0m)).map(\e[36mword\e\
    [0m => \n\e[31m\e[31m   |\e[0m                                               \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl7pkrsvh.scala:24:56\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \             word.split(\e[31m\"\"\e[0m).filter(_.forall(\e[36mc\e[0m => c !=\
    \ \e[31m\"h\"\e[0m && c != \e[31m\"H\"\e[0m)).map(\e[36mword\e[0m => \n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl7pkrsvh.scala:24:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    word.split(\e[31m\"\"\e[0m).filter(_.forall(\e\
    [36mc\e[0m => c != \e[31m\"h\""
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(\"a\").toLong + word.count(\"e\").toLong\
    \ + word.count(\"i\").toLong + word.count(\"o\").toLong + word.count(\"u\").toLong\n\
    \            if (count == n) result += word\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplup75mzq.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplup75mzq.scala:24:35\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mcount\e[0m = word.count(\e[31m\"a\"\e[0m).toLong + word.count(\e[31m\"e\"\e\
    [0m).toLong + word.count(\e[31m\"i\"\e[0m).toLong + word.count(\e[31m\"o\"\e[0m).toLong\
    \ + word.count(\e[31m\"u\"\e[0m).toLong\n\e[31m\e[31m   |\e[0m               \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \    Found:    (\e[32m\"a\"\e[0m : String)\n\e[31m   |\e[0m                  \
    \                 Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplup75mzq.scala:24:60 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e\
    [31m\"a\"\e[0m).toLong + word.count(\e[31m\"e\"\e[0m).toLong + word.count(\e[31m\"\
    i\"\e[0m).toLong + word.count(\e[31m\"o\"\e[0m).toLong + word.count(\e[31m\"u\"\
    \e[0m).toLong\n\e[31m\e[31m   |\e[0m                                         \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                                \
    \               Found:    (\e[32m\"e\"\e[0m : String)\n\e[31m   |\e[0m       \
    \                                        Required: Char => Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplup75mzq.scala:24:85 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e\
    [31m\"a\"\e[0m).toLong + word.count(\e[31m\"e\"\e[0m).toLong + word.count(\e[31m\"\
    i\"\e[0m).toLong + word.count(\e[31m\"o\"\e[0m).toLong + word.count(\e[31m\"u\"\
    \e[0m).toLong\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660010240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val result = list.filter(_ => consonants.contains(_))\n    \
    \    val result2 = list.filter(_ => vowels.contains(_))\n        if (result2.length\
    \ == n) result2 else result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3a1fzb9.scala:24:38\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = list.filter(_ => consonants.contains(_))\n\e[31m\e[31m   |\e[0m        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                    Found:    \e[1m\e[31mString\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e\
    [0m                                      Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3a1fzb9.scala:25:39 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = list.filter(_\
    \ => vowels.contains(_))\n\e[31m\e[31m   |\e[0m                              \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \            Found:    \e[1m\e[31mString\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e\
    [1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m                     \
    \                  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val list = list.filter(x\
    \ => x.contains(\"a\"))\n        val list = list.filter(x => x.contains(\"e\"\
    ))\n        val list = list.filter(x => x.contains(\"i\"))\n        val list =\
    \ list.filter(x => x.contains(\"o\"))\n        val list = list.filter(x => x.contains(\"\
    u\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"n\"))\n        val list = list.filter(x => x.contains(\"\
    d\"))\n        val list = list.filter(x => x.contains(\"g\"))\n        val list\
    \ = list.filter(x => x.contains(\"s\"))\n        val list = list.filter(x => x.contains(\"\
    h\"))\n        val list = list.filter(x => x.contains(\"w\"))\n        val list\
    \ = list.filter(x => x.contains(\"c\"))\n        val list = list.filter(x => x.contains(\"\
    m\"))\n        val list = list.filter(x => x.contains(\"p\"))\n        val list\
    \ = list.filter(x => x.contains(\"b\"))\n        val list = list.filter(x => x.contains(\"\
    f\"))\n        val list = list.filter(x => x.contains(\"v\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"t\"))\n        val list\
    \ = list.filter(x => x.contains(\"q\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"s\"))\n        val list\
    \ = list.filter(x => x.contains(\"r\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"t\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"s\"))\n        val list = list.filter(x => x.contains(\"\
    r\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"z\"))\n        val list = list.filter(x => x.contains(\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqzdouqw3.scala:60:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\"\n\e[31m\e[31m   |\e[0m                           \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \              unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqzdouqw3.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"a\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqzdouqw3.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"e\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqzdouqw3.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"i\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqzdouqw3.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"o\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as "
  stdout: ''
  timestamp: 1660010240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"o\") ||\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        if (result.size == 0) {\n            List()\n        } else\
    \ {\n            result.take(n).toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdx8ty1j.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toChar).filter(c\
    \ => consonants.contains(c)).count\n        val vowelCount = words.map(_.toUpperCase).map(_.toChar).filter(c\
    \ => vowels.contains(c)).count\n        if (consonantCount == n && vowelCount\
    \ == n) {\n            words.filter(_.toUpperCase).map(_.toChar).filter(c => consonants.contains(c)).sortBy(c\
    \ => c)\n        } else {\n            List()\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp88ciew0e.scala:24:60 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = words.map(_.toUpperCase).map(_.toChar).filter(\e\
    [36mc\e[0m => consonants.contains(c)).count\n\e[31m\e[31m   |\e[0m           \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  value toChar is not a member of String\n\e\
    [31m\e[31m-- Error: /tmp/tmp88ciew0e.scala:24:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = words.map(_.toUpperCase).map(_.toChar).filter(\e\
    [36mc\e[0m => consonants.contains(c)).count\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp88ciew0e.scala:25:56\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toChar).filter(\e[36mc\e\
    [0m => vowels.contains(c)).count\n\e[31m\e[31m   |\e[0m                      \
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    value toChar is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp88ciew0e.scala:25:63 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toChar).filter(\e\
    [36mc\e[0m => vowels.contains(c)).count\n\e[31m\e[31m   |\e[0m               \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                     No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp88ciew0e.scala:27:25\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            words.filter(_.toUpperCase).map(_.toChar).filter(\e\
    [36m"
  stdout: ''
  timestamp: 1660010241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"n\") || x.contains(\"h\") || x.contains(\"l\"\
    ) || x.contains(\"d\") || x.contains(\"r\") || x.contains(\"m\") || x.contains(\"\
    p\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"y\"))\n       \
    \ val list = list.filter(x => x.contains(\"c\") || x.contains(\"k\") || x.contains(\"\
    m\") || x.contains(\"p\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    y\"))\n        val list = list.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n       \
    \ val list = list.filter(x => x.contains(\"n\") || x.contains(\"h\") || x.contains(\"\
    l\") || x.contains(\"d\") || x.contains(\"r\") || x.contains(\"m\") || x.contains(\"\
    p\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"y\"))\n       \
    \ val list = list.filter(x => x.contains(\"c\") || x.contains(\"k\") || x.contains(\"\
    m\") || x.contains(\"p\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    y\"))\n        val list = list.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n       \
    \ val list = list.filter(x => x.contains(\"n\") || x.contains(\"h\") || x.contains(\"\
    l\") || x.contains(\"d\") || x.contains(\"r\") || x.contains(\"m\") || x.contains(\"\
    p\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"y\"))\n       \
    \ val list = list.filter(x => x.contains(\"c\") || x.contains(\"k\") || x.contains(\"\
    m\") || x.contains(\"p\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    y\"))\n        val list = list.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n       \
    \ val list = list.filter(x => x.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_h2gdcj.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv_h2gdcj.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"a\"\e[0m) || x.contains(\e[31m\"e\"\e[0m) || x.contains(\e[31m\"i\"\e[0m)\
    \ || x.contains(\e[31m\"o\"\e[0m) || x.contains(\e[31m\"u\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv_h2gdcj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"n\"\e[0m) || x.contains(\e[31m\"h\"\e[0m) || x.contains(\e[31m\"l\"\e[0m)\
    \ || x.contains(\e[31m\"d\"\e[0m) || x.contains(\e[31m\"r\"\e[0m) || x.contains(\e\
    [31m\"m\"\e[0m) || x.contains(\e[31m\"p\"\e[0m) || x.contains(\e[31m\"s\"\e[0m)\
    \ || x.contains(\e[31m\"t\"\e[0m) || x.contains(\e[31m\"y\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv_h2gdcj.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"c\"\e[0m) || x.contains(\e[31m\"k\"\e[0m) || x.contains(\e[31m\"m\"\e[0m)\
    \ || x.contains(\e[31m\"p\"\e[0m) || x.contains(\e[31m\"s\"\e[0m"
  stdout: ''
  timestamp: 1660010241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filterNot(_.isEmpty)\n        val list3 = list2.filter(_\
    \ => list2.count(_ == n) == n)\n        list3.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx0p38wye.scala:23:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ => list2.count(_ == n) == n)\n\e[31m\e[31m   |\e[0m                        \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Long cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ list.foreach(x => {\n            val count = x.count(_ == 'a')\n           \
    \ val count = x.count(_ == 'e')\n            val count = x.count(_ == 'i')\n \
    \           val count = x.count(_ == 'o')\n            val count = x.count(_ ==\
    \ 'u')\n            if (count == n) result += x\n        })\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7tgrqha3.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7tgrqha3.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = x.count(_\
    \ == \e[31m'e'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcount is already defined as \e[33mvalue\e[0m \e[35mcount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7tgrqha3.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = x.count(_ == \e[31m'i'\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcount is already defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7tgrqha3.scala:27:16 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = x.count(_ == \e[31m'o'\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcount is already defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7tgrqha3.scala:28:16 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = x.count(_ == \e[31m'u'\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcount is already defined a"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ x =>\n            val count = x.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += x\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbl_eyz8.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase)\n\
    \        val result = list.filter(_ contains n).map(_.split(\"\").takeWhile(_\
    \ != n).mkString(\"\"))\n        if (result.isEmpty) Nil\n        else result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprvdr_4bo.scala:22:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ contains n).map(_.split(\e[31m\"\"\e[0m).takeWhile(_ != n).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                            ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Long cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprvdr_4bo.scala:24:13 --------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m         \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Array[String])\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val count = x.count(_ == 'a')\n            if (count == n) result\
    \ += x\n        }\n        if (result.isEmpty) List()\n        else result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl2hn8u93.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = words.filter(word => word.count(_ == 'a') >= n).toList\n \
    \       list.sortWith(_.length < _.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpokb5_9a_.scala:26)\n\tat Problem.main(tmpokb5_9a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list3\
    \ = list2.filter(x => x.contains(\"n\"))\n        val list4 = list3.filter(x =>\
    \ x.contains(\"h\"))\n        val list5 = list4.filter(x => x.contains(\"l\"))\n\
    \        val list6 = list5.filter(x => x.contains(\"a\"))\n        val list7 =\
    \ list6.filter(x => x.contains(\"e\"))\n        val list8 = list7.filter(x =>\
    \ x.contains(\"i\"))\n        val list9 = list8.filter(x => x.contains(\"o\"))\n\
    \        val list10 = list9.filter(x => x.contains(\"u\"))\n        val list11\
    \ = list10.filter(x => x.contains(\"n\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"h\"))\n        val list13 = list12.filter(x => x.contains(\"\
    l\"))\n        val list14 = list13.filter(x => x.contains(\"a\"))\n        val\
    \ list15 = list14.filter(x => x.contains(\"e\"))\n        val list16 = list15.filter(x\
    \ => x.contains(\"i\"))\n        val list17 = list16.filter(x => x.contains(\"\
    o\"))\n        val list18 = list17.filter(x => x.contains(\"u\"))\n        val\
    \ list19 = list18.filter(x => x.contains(\"n\"))\n        val list20 = list19.filter(x\
    \ => x.contains(\"h\"))\n        val list21 = list20.filter(x => x.contains(\"\
    l\"))\n        val list22 = list21.filter(x => x.contains(\"a\"))\n        val\
    \ list23 = list22.filter(x => x.contains(\"e\"))\n        val list24 = list23.filter(x\
    \ => x.contains(\"i\"))\n        val list25 = list24.filter(x => x.contains(\"\
    o\"))\n        val list26 = list25.filter(x => x.contains(\"u\"))\n        val\
    \ list27 = list26.filter(x => x.contains(\"n\"))\n        val list28 = list27.filter(x\
    \ => x.contains(\"h\"))\n        val list29 = list28.filter(x => x.contains(\"\
    l\"))\n        val list30 = list29.filter(x => x.contains(\"a\"))\n        val\
    \ list31 = list30.filter(x => x.contains(\"e\"))\n        val list32 = list31.filter(x\
    \ => x.contain\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsk7ef20k.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7ef20k.scala:52:42\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e\
    [36mlist32\e[0m = list31.filter(\e[36mx\e[0m => x.contain\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \   value contain is not a member of String - did you mean x.contains?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsk7ef20k.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.split(\"[^aeiou]\").length\n         \
    \   if (count == n) {\n                result += word\n            }\n       \
    \ }\n        if (result.isEmpty) {\n            List()\n        } else {\n   \
    \         result.toList\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtxaf1m3.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            val count = word.count(c => c.isLetter)\n            if(count\
    \ == n) {\n                list += word\n            }\n        }\n        if(list.isEmpty)\
    \ {\n            List()\n        } else {\n            list.toList\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgxdrge03.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) {\n                result += (word + \" \")\n            }\n  \
    \      }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.mkString(\" \")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm4sirv7.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd5bw1st_.scala:54:20 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mlist34\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd5bw1st_.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val list = words.filter(x => x.contains(n)).map(x => x.split(\"\").filter(y\
    \ => y.contains(n)).mkString(\"\").toLowerCase).toList\n        list.filter(x\
    \ => x.length == n).map(x => x.split(\"\").filter(y => y.contains(n)).mkString(\"\
    \").toLowerCase).toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwzwm0d3n.scala:26)\n\tat Problem.main(tmpwzwm0d3n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiouAEIOU\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val wordCount = vowelCount + consonantCount\n        val wordList = s.split(\"\
    \ \").filter(_.length == wordCount)\n        val consonantList = wordList.map(word\
    \ => word.count(consonants))\n        val vowelList = wordList.map(word => word.count(vowels))\n\
    \        val consonantCount = consonantList.sum\n        val vowelCount = vowelList.sum\n\
    \        val wordList = wordList.filter(word => word.count(consonants) == n)\n\
    \        wordList.map(word => word.split(consonants))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwscna91x.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonantList.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwscna91x.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelList.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwscna91x.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordList\e[0m = wordList.filter(\e[36mword\e[0m => word.count(consonants)\
    \ == n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpwscna91x.scala:23:33 --------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (vowels : String)\n\e[31m   |\e\
    [0m                                 Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwscna91x.scala:24:37 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(consonants)\n\
    \e[31m\e[31m  "
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        })\n        if (result.isEmpty) List()\n     \
    \   else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4q38h3vx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list2 = list.filter(x => x.contains(\"A\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"E\"))\n        val list4 = list.filter(x => x.contains(\"\
    I\"))\n        val list5 = list.filter(x => x.contains(\"O\"))\n        val list6\
    \ = list.filter(x => x.contains(\"U\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list8 = list.filter(x => x.contains(\"e\"))\n\
    \        val list9 = list.filter(x => x.contains(\"i\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"o\"))\n        val list11 = list.filter(x => x.contains(\"\
    u\"))\n        val list12 = list.filter(x => x.contains(\"A\"))\n        val list13\
    \ = list.filter(x => x.contains(\"E\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"I\"))\n        val list15 = list.filter(x => x.contains(\"O\"))\n\
    \        val list16 = list.filter(x => x.contains(\"U\"))\n        val list17\
    \ = list.filter(x => x.contains(\"a\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list19 = list.filter(x => x.contains(\"i\"))\n\
    \        val list20 = list.filter(x => x.contains(\"o\"))\n        val list21\
    \ = list.filter(x => x.contains(\"u\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"A\"))\n        val list23 = list.filter(x => x.contains(\"E\"))\n\
    \        val list24 = list.filter(x => x.contains(\"I\"))\n        val list25\
    \ = list.filter(x => x.contains(\"O\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"U\"))\n        val list27 = list.filter(x => x.contains(\"a\"))\n\
    \        val list28 = list.filter(x => x.contains(\"e\"))\n        val list29\
    \ = list.filter(x => x.contains(\"i\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list31 = list.filter(x => x.contains(\"u\"))\n\
    \        val list32 = list.filter(x => x.contains(\"A\"))\n        val list33\
    \ = list.filter(x => x.contains(\"E\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"I\"))\n        val list35 = list.filter(x => x.contains(\"O\"))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bqlmx2v.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- list) {\n            val\
    \ count = count.get(word)\n            if (count == null) {\n                count.put(n,\
    \ 1l)\n            } else {\n                count.put(n, count.get + l)\n   \
    \         }\n        }\n        val keys = count.keys.toList\n        val values\
    \ = count.values.toList\n        for (key <- keys) {\n            if (values ==\
    \ key.filter(_ == n)) {\n                result += key\n            }\n      \
    \  }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddwehxis.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddwehxis.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").map(_.toUpperCase)\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val consonantCount = consonants.count(_ == s.charAt(0))\n  \
    \      val vowelCount = vowels.count(_ == s.charAt(0))\n        val consonantWords\
    \ = wordList.filter(word => consonants.count(_ == word.charAt(0)) == n)\n    \
    \    val vowelWords = wordList.filter(word => vowels.count(_ == word.charAt(0))\
    \ == n)\n        val consonantWordsCount = consonantWords.size\n        val vowelWordsCount\
    \ = vowelWords.size\n        if (consonantWordsCount == 0 && vowelWordsCount ==\
    \ 0) {\n            List()\n        } else if (consonantWordsCount == 0 && vowelWordsCount\
    \ > 0) {\n            vowelWords\n        } else if (consonantWordsCount > 0 &&\
    \ vowelWordsCount == 0) {\n            consonantWords\n        } else {\n    \
    \        consonantWords ++ vowelWords\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprx1vs8wx.scala:24:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == s.charAt(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                          \
    \                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprx1vs8wx.scala:25:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ == s.charAt(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprx1vs8wx.scala:26:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = wordList.filter(\e\
    [36mword\e[0m => consonants.count(_ == word.charAt(\e[31m0\e[0m)) == n)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprx1vs8wx.scala:27:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelWords\e[0m = wordList.filter(\e[36mword\e[0m => vowels.count(_\
    \ == word.charAt(\e[31m0\e[0m)) == n)\n\e[31m\e[31m   |\e[0m                 \
    \                                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprx1vs8wx.scala:33:12\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            vowelWords\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (vowelWords : Array[String])\n\e[31m   |\e[0m            Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprx1vs8wx.scala:35"
  stdout: ''
  timestamp: 1660010249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7qfjdvt.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >= 'A'\
    \ && c <= 'Z')\n            if (count == n) {\n                result += word\n\
    \            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd1w1pzc.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\".toList\n  \
    \      val vowelCount = list.count(x => vowels.contains(x))\n        val consonantCount\
    \ = list.count(x => consonants.contains(x))\n        val totalCount = vowelCount\
    \ + consonantCount\n        if (totalCount > n) {\n            list.filter(x =>\
    \ vowels.contains(x)).take(n).foreach(x => result += x)\n        } else {\n  \
    \          list.filter(x => consonants.contains(x)).take(n).foreach(x => result\
    \ += x)\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwysc9h5j.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwysc9h5j.scala:29:54\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            list.filter(\e[36mx\e\
    [0m => vowels.contains(x)).take(n).foreach(\e[36mx\e[0m => result += x)\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwysc9h5j.scala:31:58\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            list.filter(\e[36mx\e\
    [0m => consonants.contains(x)).take(n).foreach(\e[36mx\e[0m => result += x)\n\e\
    [31m\e[31m   |\e[0m                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase)\n        val result: List[String]\
    \ = words.filter(word => word.count(_ == 'a') <= n).distinct\n        result.filter(word\
    \ => word.count(_ == 'a') > n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5annp43j.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val wordList = list.filter(x => x.toString.toList.size == n)\n      \
    \  wordList.map(x => x.split(\"\").filter(x => x.toString.toList.size == n).mkString(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsgyjedxz.scala:26)\n\tat Problem.main(tmpsgyjedxz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = words.map(_.filter(c => consonants.contains(c))).map(_.length).sum\n\
    \        val vowelCount = words.map(_.filter(c => vowels.contains(c))).map(_.length).sum\n\
    \        val consonantWords = words.map(_.filter(c => consonants.contains(c))).filter(_.length\
    \ == n).map(_.toLowerCase)\n        val vowelWords = words.map(_.filter(c => vowels.contains(c))).filter(_.length\
    \ == n).map(_.toLowerCase)\n        val consonantWordsCount = consonantWords.map(_.length).sum\n\
    \        val vowelWordsCount = vowelWords.map(_.length).sum\n        val consonantWordsCountWithVowels\
    \ = consonantWordsCount + vowelWordsCount\n        val vowelWordsCountWithConsonants\
    \ = vowelWordsCount + consonantWordsCount\n        val consonantWordsCountWithVowelsAndConsonants\
    \ = consonantWordsCountWithVowels + vowelWordsCountWithConsonants\n        val\
    \ vowelWordsCountWithConsonantsAndVowels = vowelWordsCountWithConsonants + consonantWordsCountWithVowels\n\
    \        val consonantWordsCountWithVowelsAndConsonantsAndVowels = consonantWordsCountWithVowelsAndConsonants\
    \ + vowelWordsCountWithConsonantsAndVowels\n        val vowelWordsCountWithConsonantsAndVowelsAndConsonants\
    \ = vowelWordsCountWithConsonantsAndVowels + consonantWordsCountWithVowelsAndConsonantsAndVowels\n\
    \        val consonantWordsCountWithVowelsAndConsonantsAndVowelsAndConsonants\
    \ = consonantWordsCountWithVowelsAndConsonantsAndVowels + vowelWordsCountWithConsonantsAndVowelsAndConsonants\n\
    \        val vowelWordsCountWithConsonantsAndVowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnw7k6iwp.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnw7k6iwp.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase)\n        wordsWithNConsonants.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaqc9afjh.scala:25)\n\tat Problem.main(tmpaqc9afjh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        })\n        if (result.isEmpty) List()\n     \
    \   else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpooewc5ac.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >= 'A'\
    \ && c <= 'Z')\n            if (count == n) {\n                list += word\n\
    \            }\n        }\n        if (list.size == 0) {\n            List()\n\
    \        } else {\n            list.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpho830s3d.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelCountInString = vowelCount / n\n        val consonantCountInString\
    \ = consonantCount / n\n        val consonantCountInString2 = consonantCount %\
    \ n\n        val vowelCountInString2 = vowelCount % n\n        val consonantCountInString3\
    \ = consonantCount % n\n        val vowelCountInString3 = vowelCount % n\n   \
    \     val consonantCountInString4 = consonantCount % n\n        val vowelCountInString4\
    \ = vowelCount % n\n        val consonantCountInString5 = consonantCount % n\n\
    \        val vowelCountInString5 = vowelCount % n\n        val consonantCountInString6\
    \ = consonantCount % n\n        val vowelCountInString6 = vowelCount % n\n   \
    \     val consonantCountInString7 = consonantCount % n\n        val vowelCountInString7\
    \ = vowelCount % n\n        val consonantCountInString8 = consonantCount % n\n\
    \        val vowelCountInString8 = vowelCount % n\n        val consonantCountInString9\
    \ = consonantCount % n\n        val vowelCountInString9 = vowelCount % n\n   \
    \     val consonantCountInString10 = consonantCount % n\n        val vowelCountInString10\
    \ = vowelCount % n\n        val consonantCountInString11 = consonantCount % n\n\
    \        val vowelCountInString11 = vowelCount % n\n        val consonantCountInString12\
    \ = consonantCount % n\n        val vowelCountInString12 = vowelCount % n\n  \
    \      val consonantCountInString13 = consonantCount % n\n        val vowelCountInString13\
    \ = vowelCount % n\n        val consonantCountInString14 = consonantCount % n\n\
    \        val vowelCountInString14 = vowelCount % n\n        val consonantCountInString15\
    \ = consonantCount % n\n        val vowelCountInString15 = vowelCount % n\n  \
    \      val consonantCountInString16 = consonantCount % n\n        val vowelCountInString16\
    \ = vowelCount \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpadfdkhd2.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadfdkhd2.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m = s.count(vowels)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                 Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadfdkhd2.scala:25:37\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m = s.count(consonants)\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Found:    (consonants : String)\n\e[31m   |\e[0m                           \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpadfdkhd2.scala:58:5 ---------------------\e[0m\e\
    [0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val wordsWithConsonants = words.filter(word => word.forall(c => c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'))\n        val wordsWithConsonantsCount\
    \ = wordsWithConsonants.map(word => word.count(c => c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u'))\n        val wordsWithConsonantsCountAndSum\
    \ = wordsWithConsonantsCount.zip(wordsWithConsonantsCount.map(_.sum))\n      \
    \  val wordsWithConsonantsCountAndSumCount = wordsWithConsonantsCountAndSum.filter(x\
    \ => x._2 == x._1)\n        val wordsWithConsonantsCountAndSumCountSorted = wordsWithConsonantsCountAndSumCount\n\
    \            .sortWith((x, y) => x._1 < y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversed\
    \ = wordsWithConsonantsCountAndSumCount\n            .sortWith((x, y) => x._1\
    \ > y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCount\
    \ = wordsWithConsonantsCountAndSumCountSortedReversed\n            .filter(x =>\
    \ x._2 == x._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSorted\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCount\n            .sortWith((x,\
    \ y) => x._1 < y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n   \
    \         .sortWith((x, y) => x._1 > y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedCount\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n   \
    \         .filter(x => x._2 == x._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedSortedReversed\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n   \
    \         .sortWith((x, y) => x._1 < y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedSortedReversedCount\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedSortedReversed\n\
    \            .sortWith((x, y) => x._1 > y._1)\n        val wordsWithConson\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm67pm2p2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm67pm2p2.scala:24:105\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithConsonantsCountAndSum\e[0m = wordsWithConsonantsCount.zip(wordsWithConsonantsCount.map(_.sum))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                               ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                      value sum is not a member of Int\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpm67pm2p2.scala:34:83 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\e\
    [0m = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mwordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm67pm2p2.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val result = new mutable.ListBuffer[String]()\n        wordList.foreach(word\
    \ => {\n            val wordList = word.split(\"[^aeiou]\").map(_.toLowerCase).toList\n\
    \            wordList.foreach(c => {\n                if (c.length == n) {\n \
    \                   result += word\n                }\n            })\n      \
    \  })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0bg8yn73.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010250
