language: scala
name: HumanEval_96_count_up_to
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor5 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor6\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor11 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor12\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor17 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor18\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor19 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor23 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor24\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor25 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor26 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor27\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor28 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptmpv00x4.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptmpv00x4.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptmpv00x4.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set.empty[Long]\n        val primesSet2 = mutable.Set.empty[Long]\n\
    \        val primesSet3 = mutable.Set.empty[Long]\n        val primesSet4 = mutable.Set.empty[Long]\n\
    \        val primesSet5 = mutable.Set.empty[Long]\n        val primesSet6 = mutable.Set.empty[Long]\n\
    \        val primesSet7 = mutable.Set.empty[Long]\n        val primesSet8 = mutable.Set.empty[Long]\n\
    \        val primesSet9 = mutable.Set.empty[Long]\n        val primesSet10 = mutable.Set.empty[Long]\n\
    \        val primesSet11 = mutable.Set.empty[Long]\n        val primesSet12 =\
    \ mutable.Set.empty[Long]\n        val primesSet13 = mutable.Set.empty[Long]\n\
    \        val primesSet14 = mutable.Set.empty[Long]\n        val primesSet15 =\
    \ mutable.Set.empty[Long]\n        val primesSet16 = mutable.Set.empty[Long]\n\
    \        val primesSet17 = mutable.Set.empty[Long]\n        val primesSet18 =\
    \ mutable.Set.empty[Long]\n        val primesSet19 = mutable.Set.empty[Long]\n\
    \        val primesSet20 = mutable.Set.empty[Long]\n        val primesSet21 =\
    \ mutable.Set.empty[Long]\n        val primesSet22 = mutable.Set.empty[Long]\n\
    \        val primesSet23 = mutable.Set.empty[Long]\n        val primesSet24 =\
    \ mutable.Set.empty[Long]\n        val primesSet25 = mutable.Set.empty[Long]\n\
    \        val primesSet26 = mutable.Set.empty[Long]\n        val primesSet27 =\
    \ mutable.Set.empty[Long]\n        val primesSet28 = mutable.Set.empty[Long]\n\
    \        val primesSet29 = mutable.Set.empty[Long]\n        val primesSet30 =\
    \ mutable.Set.empty[Long]\n        val primesSet31 = mutable.Set.empty[Long]\n\
    \        val primesSet32 = mutable.Set.empty[Long]\n        val primesSet33 =\
    \ mutable.Set.empty[Long]\n        val primesSet34 = mutable.Set.empty[Long]\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnb2x0684.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnb2x0684.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnb2x0684.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnb2x0684.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnb2x0684.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnb2x0684.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m   "
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val primesSet = mutable.Set[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n        val primesArray = primes.toArray\n\
    \        val primesArraySet = primesSet.toArray\n        val primesArrayArray\
    \ = primesArray.toArray\n        val primesArraySetArray = primesArraySet.toArray\n\
    \        val primesArrayArrayArray = primesArrayArray.toArray\n        val primesArraySetArrayArray\
    \ = primesArraySetArray.toArray\n        val primesArrayArrayArrayArray = primesArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArray = primesArraySetArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArrayArray = primesArraySetArrayArrayArray.toArray\n\
    \        val primesArraySetArraySetArrayArrayArray = primesArraySetArraySetArrayArray.toArray\n\
    \        val primesArraySetArraySetArraySetArrayArray = primesArraySetArraySetArraySetArray.toArray\n\
    \        val primesArraySetArraySetArraySetArraySetArray = primesArraySetArraySetArraySetArraySetArray.toArray\n\
    \        val primesArraySetArraySetArraySetArraySetArraySet = primesArraySetArraySetArraySetArraySetArraySet.toArray\n\
    \        val primesArraySetArraySetArraySetArraySetArraySetArray = primesArraySetArraySetArraySetArraySetArraySetArray.toArray\n\
    \        val primesArraySetArraySetArraySetArraySetArraySetArraySet = primesArraySetArraySetArraySetArraySetArraySetArraySet.toArray\n\
    \        val primesArraySetArraySetArraySetArraySetArraySetArraySetArray = primesArraySetArraySetArraySetArraySetArraySetArraySetArraySet.toArray\n\
    \        val primesArraySetArraySetArraySetArraySetArraySetArraySetArraySet =\
    \ primesArraySetArraySetArraySetArraySetArraySetArraySetArraySet.toArray\n   \
    \     val primesArraySetArraySetArraySetArraySetArraySetArraySetArraySet = primesArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8hbzww95.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mprimesArraySetArraySetArraySetArraySetArraySetArraySetArraySet\e\
    [0m = primesArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArraySetArraySetArraySetArraySetArraySetArraySetArraySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesArraySetArraySetArraySetArraySetArraySetArraySetArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8hbzww95.scala:20:21 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong, \e[31m5l\e[0m.toLong, \e[31m7l\e[0m.toLong,\
    \ \e[31m11l\e[0m.toLong, \e[31m13l\e[0m.toLong, \e[31m17l\e[0m.toLong, \e[31m19l\e\
    [0m.toLong)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8hbzww95.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong, \e[31m5l\e[0m.toLong,\
    \ \e[31m7l\e[0m.toLong, \e[31m11l\e[0m.toLong, \e[31m13l\e[0m.toLong, \e[31m17l\e\
    [0m.toLong, \e[31m19l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hbzww95.scala:31:52\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesArraySetArraySetArrayArrayArray\e[0m = primesArraySetArraySetArrayArray.toArray\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpde6mkvsn.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArraySet = mutable.HashSet[Long]()\n        val primesArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n       \
    \ val primesArrayArrayArraySet = mutable.HashSet[Long]()\n        val primesArrayArrayArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArrayArrayArraySet\
    \ = mutable.HashSet[Long]()\n        val primesArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n  \
    \      val primesArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9gkrtu3q.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gkrtu3q.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9gkrtu3q.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9gkrtu3q.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same g"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter3 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter4\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter6 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter9 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter10\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter12 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter15 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter18 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter21 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter24 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter26 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter27 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter28\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter29 = mutable.ListBuffer[Boolean]()\n\
    \        val is\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8yvzde33.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yvzde33.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yvzde33.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yvzde33.scala:22:26\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misPrimeIter\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8yvzde33.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36misPrimeIter2\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8yvzde33.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeIter3\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val primesCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount4 = mutable.ArrayBuffer.empty[Long]\n        val primesCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount7 = mutable.ArrayBuffer.empty[Long]\n        val primesCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount10 = mutable.ArrayBuffer.empty[Long]\n        val primesCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount13 = mutable.ArrayBuffer.empty[Long]\n        val primesCount14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount16 = mutable.ArrayBuffer.empty[Long]\n        val primesCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount19 = mutable.ArrayBuffer.empty[Long]\n        val primesCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount22 = mutable.ArrayBuffer.empty[Long]\n        val primesCount23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount25 = mutable.ArrayBuffer.empty[Long]\n        val primesCount26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount28 = mutable.ArrayBuffer.empty[Long]\n        val primesCount29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount31 = mutable.ArrayBuffer.empty[Long]\n        val primesCount32\
    \ = mutable.ArrayBuffer.empty[Long]\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpak122maq.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount2 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount3 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount4 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount5 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount6 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount7 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount8 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount9 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount10 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount11 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount12 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount13 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount14 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount15 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount16 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount17 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount18 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9m4o4yut.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9m4o4yut.scala:21:26 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount2\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjn0tvec.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactors = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorsPrimeFactorsPrime = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorsPrimeFactorsPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezg8r2lq.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezg8r2lq.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezg8r2lq.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpezg8r2lq.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpezg8r2lq.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezg8r2lq.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659803850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                i += 2l\n            }\n       \
    \     else {\n                i += 1\n            }\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6szxk_6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn6szxk_6.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArraySet = mutable.Set[Long]()\n        val primesArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n       \
    \ val primesArrayArrayArraySet = mutable.Set[Long]()\n        val primesArrayArrayArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n      \
    \  val primesArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n \
    \       val primesArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphj2ht9uk.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmphj2ht9uk.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphj2ht9uk.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphj2ht9uk.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount21 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount27 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwot44l0p.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwot44l0p.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwot44l0p.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while(i <= n) {\n            val isPrime = true\n\
    \            for(j <- 2 to i by 2) {\n                if(i % j == 0) {\n     \
    \               isPrime = false\n                    break\n                }\n\
    \            }\n            if(isPrime) {\n                primes += i\n     \
    \       }\n            i += 1\n        }\n        primes.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkja295b.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpbkja295b.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbkja295b.scala:27:20 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                val p = i\n                while (p < n) {\n         \
    \           val isPrime = true\n                    for (j <- 2l to p by 2) {\n\
    \                        if (p % j == 0)\n                            isPrime\
    \ = false\n                    }\n                    if (isPrime)\n         \
    \               primes += p\n                    p += 1\n                }\n \
    \           }\n            i += 1\n        }\n        primes.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputgk3qhx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmputgk3qhx.scala:32:36 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                            isPrime = \e[31mfalse\e[0m\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Reassignment to val isPrime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmputgk3qhx.scala:36:22 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    p += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ += is not a member of Long - did you mean p.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmputgk3qhx.scala:39:14 ------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ i.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val primesSet = primes.toSet\n        val primesSetIterator = primes.iterator\n\
    \        val primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorNextNext\
    \ = primesSetIteratorNext.next\n        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr6bx0_i0.scala:38:83 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr6bx0_i0.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr6bx0_i0.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr6bx0_i0.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpde6mkvsn.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while(i <= n){\n            val isPrime = true\n \
    \           for(j <- 2 to i){\n                if(i % j == 0){\n             \
    \       isPrime = false\n                    break\n                }\n      \
    \      }\n            if(isPrime){\n                primes += i\n            }\n\
    \            i += 1\n        }\n        primes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1by2ctk5.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp1by2ctk5.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1by2ctk5.scala:27:20 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                val prime = primes.last\n                primes.dropRight(1)\n\
    \                if (prime > n) {\n                    primes -= prime\n     \
    \           }\n            }\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezi2rylt.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpezi2rylt.scala:33:14 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i <= n){\n            val isPrime = true\n\
    \            for(j <- 2l*i to n){\n                if(i % j == 0){\n         \
    \           isPrime = false\n                    break\n                }\n  \
    \          }\n            if(isPrime){\n                primes += i.toLong\n \
    \           }\n            i += 1\n        }\n        primes.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_i3327n.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp2_i3327n.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2_i3327n.scala:27:20 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        var i = 2l\n        while (i <= n) {\n\
    \            if (isPrime(i)) {\n                primes += i\n                primeFactors\
    \ += i\n                isPrime += true\n            }\n            i += 1\n \
    \       }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpae6gasve.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpae6gasve.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpae6gasve.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwo3plklm.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwo3plklm.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwo3plklm.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwo3plklm.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp535vlz0c.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesCount is already defined as \e[33mvalue\e[0m \e[35mprimesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp535vlz0c.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrime is already defined as \e[33mvalue\e[0m \e[35misPrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp535vlz0c.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeCount is already defined as \e[33mvalue\e[0m \e[35misPrimeCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp535vlz0c.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesCount is already defined as \e[33mvalue\e[0m \e[35mprimesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp535vlz0c.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesCount = mutable.Map[Long,\
    \ Int]()\n        val primesCountSet = mutable.Set[Long]()\n        val primesCountSet2\
    \ = mutable.Set[Long]()\n        val primesCountSet3 = mutable.Set[Long]()\n \
    \       val primesCountSet4 = mutable.Set[Long]()\n        val primesCountSet5\
    \ = mutable.Set[Long]()\n        val primesCountSet6 = mutable.Set[Long]()\n \
    \       val primesCountSet7 = mutable.Set[Long]()\n        val primesCountSet8\
    \ = mutable.Set[Long]()\n        val primesCountSet9 = mutable.Set[Long]()\n \
    \       val primesCountSet10 = mutable.Set[Long]()\n        val primesCountSet11\
    \ = mutable.Set[Long]()\n        val primesCountSet12 = mutable.Set[Long]()\n\
    \        val primesCountSet13 = mutable.Set[Long]()\n        val primesCountSet14\
    \ = mutable.Set[Long]()\n        val primesCountSet15 = mutable.Set[Long]()\n\
    \        val primesCountSet16 = mutable.Set[Long]()\n        val primesCountSet17\
    \ = mutable.Set[Long]()\n        val primesCountSet18 = mutable.Set[Long]()\n\
    \        val primesCountSet19 = mutable.Set[Long]()\n        val primesCountSet20\
    \ = mutable.Set[Long]()\n        val primesCountSet21 = mutable.Set[Long]()\n\
    \        val primesCountSet22 = mutable.Set[Long]()\n        val primesCountSet23\
    \ = mutable.Set[Long]()\n        val primesCountSet24 = mutable.Set[Long]()\n\
    \        val primesCountSet25 = mutable.Set[Long]()\n        val primesCountSet26\
    \ = mutable.Set[Long]()\n        val primesCountSet27 = mutable.Set[Long]()\n\
    \        val primesCountSet28 = mutable.Set[Long]()\n        val primesCountSet29\
    \ = mutable.Set[Long]()\n        val primesCountSet30 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw2femu72.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2femu72.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2femu72.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2femu72.scala:22:26\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw2femu72.scala:23:29 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCountSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2femu72.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCountSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not foun"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesLessThanN = primes.takeWhile(_\
    \ < n)\n        primesLessThanN.takeWhile(_ % _ != 0).takeWhile(_ < n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyt577oc2.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSetIterator =\
    \ primesSet.iterator\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = primesSetIterator.hasNext\n        val\
    \ primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorHasNext\
    \ = primesSetIterator.hasNext\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorHasNext = prime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxl417xx1.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNext\e\
    [0m = primesSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNext is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNext\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxl417xx1.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorHasNext\e\
    [0m = primesSetIterator.hasNext\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorHasNext is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorHasNext\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxl417xx1.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNext\e\
    [0m = primesSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNext is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNext\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxl417xx1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorHasNext\e\
    [0m = primesSetIterator.hasNext\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorHasNext is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorHasNext\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxl417x"
  stdout: ''
  timestamp: 1660029108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0)\n       \
    \ val isPrimeIter2 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ %\
    \ _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ < n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_ +\
    \ 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdgd0zv7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzdgd0zv7.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpzdgd0zv7.scala:22:79 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrimeIter\e[0m = Iterator.iterate(\e\
    [31m2l\e[0m)(_ + \e[31m2l\e[0m).takeWhile(_ < n).filter(_ % _ != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpzdgd0zv7.scala:23:80 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeIter2\e[0m = Iterator.iterate(\e\
    [31m2l\e[0m)(_ + \e[31m2l\e[0m).takeWhile(_ < n).filter(_ % _ == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \             Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpzdgd0zv7.scala:24:80 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeIter3\e[0m = Iterator.iterate(\e\
    [31m2l\e[0m)(_ + \e[31m2l\e[0m).takeWhile(_ < n).filter(_ % _ == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i < n) {\n            val isPrime = true\n\
    \            for(j <- 2l to i by 2) {\n                if(i % j == 0)\n      \
    \              isPrime = false\n            }\n            if(isPrime)\n     \
    \           primes += i.toLong\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcqi39ua.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpvcqi39ua.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorsCount = mutable.ListBuffer[Long]()\n\
    \        val factorsCount2 = mutable.ListBuffer[Long]()\n        val factorsCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount5 = mutable.ListBuffer[Long]()\n        val factorsCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount8 = mutable.ListBuffer[Long]()\n        val factorsCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount11 = mutable.ListBuffer[Long]()\n        val factorsCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount14 = mutable.ListBuffer[Long]()\n        val factorsCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount17 = mutable.ListBuffer[Long]()\n        val factorsCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount20 = mutable.ListBuffer[Long]()\n        val factorsCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount23 = mutable.ListBuffer[Long]()\n        val factorsCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount26 = mutable.ListBuffer[Long]()\n        val factorsCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount29 = mutable.ListBuffer[Long]()\n        val factorsCount30\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp04i0innk.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04i0innk.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04i0innk.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp04i0innk.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp04i0innk.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp04i0innk.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Long]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount3 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Long]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount6 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Long]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount9 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Long]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount12 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Long]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount15 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Long]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount18 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Long]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount21 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Long]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount24 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Long]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount27 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Long]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps89f84br.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps89f84br.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps89f84br.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextChar = primesSetIterator.nextChar\n\
    \        val primesSetIteratorNextBoolean = primesSetIterator.nextBoolean\n  \
    \      val primesSetIteratorNextByte = primesSetIterator.nextByte\n        val\
    \ primesSetIteratorNextShort = primesSetIterator.nextShort\n        val primesSetIteratorNextByte\
    \ = primesSetIterator.nextByte\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextChar = primesSetIterator.nextChar\n\
    \        val primesSetIteratorNextBoolean = primesSetIterator.nextBoolean\n  \
    \      val primesSetIteratorNextByte = primesSetIterator.nextByte\n        val\
    \ primesSetIteratorNextShort = primesSetIterator.nextShort\n        val primesSetIteratorNextByte\
    \ = primesSetIterator.nextByte\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextChar = primesSetIterator.nextChar\n\
    \        val primesSetIteratorNextBoolean = primesSetIterator.nextBoolean\n  \
    \      val primesSetIteratorNextByte = primesSetIterator.nextByte\n        val\
    \ primesSetIteratorNextShort = primesSetIterator.nextShort\n        val primesSetIteratorNextByte\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv924x_jg.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv924x_jg.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextByte\e[0m = primesSetIterator.nextByte\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextByte is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextByte\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv924x_jg.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextInt\e\
    [0m = primesSetIterator.nextInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv924x_jg.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextLong\e\
    [0m = primesSetIterator.nextLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv924x_jg.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextDouble\e\
    [0m = primesSetIterator.nextDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIt"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsSet\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactorsSetSize = mutable.Set[Long]()\n        val primeFactorsSetSize\
    \ = mutable.Set[Long]()\n        val primeFactorsSetSize = mutable.Set[Long]()\n\
    \        val primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_rehgo98.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_rehgo98.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorsSetSize\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mprimeFactorsSetSize is already defined as \e[33mvalue\e[0m \e[35mprimeFactorsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_rehgo98.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsSetSize\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_rehgo98.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsSetSize\e[0m\
    \ = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_rehgo98.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsSetSize\e[0m\
    \ = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorsSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorsSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1660029106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                primes.takeWhile(p => p < n).foreach(p => primes += p)\n\
    \            }\n            i += 1\n        }\n        primes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0iouolu.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr0iouolu.scala:29:14 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                i += 1\n            }\n        \
    \    i += 1\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1hr3ofh1.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1hr3ofh1.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val limit = n / 2\n        val i = 2\n        while (i <= limit) {\n\
    \            if (n % i == 0) {\n                primes += i\n                i\
    \ += 2\n            }\n            else {\n                i += 1\n          \
    \  }\n        }\n        primes.take(n - primes.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3kt80rz.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpj3kt80rz.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                i += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3kt80rz.scala:29:18\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n\
    \        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n\
    \        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n\
    \        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n\
    \        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n\
    \        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 =\
    \ mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n\
    \        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 =\
    \ mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n\
    \        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 =\
    \ mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n\
    \        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 =\
    \ mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n\
    \        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 =\
    \ mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n\
    \        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 =\
    \ mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n\
    \        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 =\
    \ mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n\
    \        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhng8gev.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwhng8gev.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwhng8gev.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhng8gev.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhng8gev.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhng8gev.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m   "
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiswpw117.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpiswpw117.scala:20:21 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiswpw117.scala:34:76 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiswpw117.scala:36:84\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNe"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Long]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount3 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Long]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount6 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Long]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount9 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Long]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount12 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Long]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount15 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Long]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount18 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Long]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount21 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Long]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount24 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Long]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount27 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Long]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps89f84br.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps89f84br.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps89f84br.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Long]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Long]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Long]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Long]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhjfpkwi.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhjfpkwi.scala:22:32 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhjfpkwi.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            primes += i\n      \
    \      i += 1\n        }\n        primes.takeWhile(p => p < n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp64nc4oh4.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq63btnck.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq63btnck.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq63btnck.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined "
  stdout: ''
  timestamp: 1660029115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val count = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2l\n        while(i <= n){\n            val isPrime = primes.contains(i)\n\
    \            if(isPrime.isEmpty){\n                primes += i\n             \
    \   count += i\n                isPrime += false\n            }\n            else{\n\
    \                isPrime += true\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvavbm20n.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvavbm20n.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvavbm20n.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Long]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount3 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Long]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount6 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Long]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount9 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Long]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount12 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Long]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount15 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Long]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount18 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Long]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount21 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Long]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount24 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Long]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount27 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Long]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps89f84br.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps89f84br.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps89f84br.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextAsLong = primesSetIteratorNext.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOf = primesSetIteratorNextAsLong.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOf = primesSetIteratorNextAsLongAsInstanceOf.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOf =\
    \ primesSetIteratorNextAsLongAsInstanceOfAsInstanceOf.asInstanceOf[Long]\n   \
    \     val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfOf.asInstanceOf[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiarnuzta.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\e\
    [0m = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpiarnuzta.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\e\
    [0m = primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOfAsInstanceOf\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpiarnuzta.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextAsLongAsInstanceOfAsInstanceOfAsInsta"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor5 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor6\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor11 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor12\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor17 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor18\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor19 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor23 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor24\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor25 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor26 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor27\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor28 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptmpv00x4.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptmpv00x4.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptmpv00x4.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val limit = n / 2\n        for(i <- 2 to limit) {\n            for(j\
    \ <- 2 to i) {\n                if(i % j == 0) primes += j.toLong\n          \
    \  }\n        }\n        primes.takeWhile(p => p < n).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5p084p_.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy5p084p_.scala:22:22 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to limit) {\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (limit : Long)\n\e[31m   |\e[0m                    \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                val j = (i * i).toInt\n                while (j < n) {\n\
    \                    primes += j\n                    j = (j * j).toInt\n    \
    \            }\n            }\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj506ee49.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpj506ee49.scala:30:22 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    j = (j * j).toInt\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Reassignment to val j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpj506ee49.scala:33:14 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Long - did you mean i.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val primesCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount4 = mutable.ArrayBuffer.empty[Long]\n        val primesCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount7 = mutable.ArrayBuffer.empty[Long]\n        val primesCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount10 = mutable.ArrayBuffer.empty[Long]\n        val primesCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount13 = mutable.ArrayBuffer.empty[Long]\n        val primesCount14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount16 = mutable.ArrayBuffer.empty[Long]\n        val primesCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount19 = mutable.ArrayBuffer.empty[Long]\n        val primesCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount22 = mutable.ArrayBuffer.empty[Long]\n        val primesCount23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount25 = mutable.ArrayBuffer.empty[Long]\n        val primesCount26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount28 = mutable.ArrayBuffer.empty[Long]\n        val primesCount29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount31 = mutable.ArrayBuffer.empty[Long]\n        val primesCount32\
    \ = mutable.ArrayBuffer.empty[Long]\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpak122maq.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch6zrp5c.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpch6zrp5c.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val result = mutable.ListBuffer[Long]()\n\
    \        val limit = n / primes.last\n        primes.takeWhile(p => p < limit).foreach\
    \ { p =>\n            if (n % p == 0) {\n                result.add(p)\n     \
    \           n /= p\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlqrieba.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlqrieba.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val counter = mutable.ListBuffer[Long]()\n        val limit = (2l*n.toLong).toInt\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime3 = mutable.ListBuffer[Boolean]()\n        val isPrime4 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime6 = mutable.ListBuffer[Boolean]()\n        val isPrime7 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime9 = mutable.ListBuffer[Boolean]()\n        val isPrime10 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime12 = mutable.ListBuffer[Boolean]()\n        val isPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime15 = mutable.ListBuffer[Boolean]()\n        val isPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime18 = mutable.ListBuffer[Boolean]()\n        val isPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime21 = mutable.ListBuffer[Boolean]()\n        val isPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime24 = mutable.ListBuffer[Boolean]()\n        val isPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime27 = mutable.ListBuffer[Boolean]()\n        val isPrime28\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime29 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime30 = mutable.ListBuffer[Boolean]()\n        val isPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_i2doeu.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_i2doeu.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_i2doeu.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mcounter\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_i2doeu.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_i2doeu.scala:24:23\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime2\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_i2doeu.scala:25:23\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime3\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesCount = mutable.Map[Long,\
    \ Int]()\n        val primesCountSet = mutable.Set[Int]()\n        val primesCountSet2\
    \ = mutable.Set[Int]()\n        val primesCountSet3 = mutable.Set[Int]()\n   \
    \     val primesCountSet4 = mutable.Set[Int]()\n        val primesCountSet5 =\
    \ mutable.Set[Int]()\n        val primesCountSet6 = mutable.Set[Int]()\n     \
    \   val primesCountSet7 = mutable.Set[Int]()\n        val primesCountSet8 = mutable.Set[Int]()\n\
    \        val primesCountSet9 = mutable.Set[Int]()\n        val primesCountSet10\
    \ = mutable.Set[Int]()\n        val primesCountSet11 = mutable.Set[Int]()\n  \
    \      val primesCountSet12 = mutable.Set[Int]()\n        val primesCountSet13\
    \ = mutable.Set[Int]()\n        val primesCountSet14 = mutable.Set[Int]()\n  \
    \      val primesCountSet15 = mutable.Set[Int]()\n        val primesCountSet16\
    \ = mutable.Set[Int]()\n        val primesCountSet17 = mutable.Set[Int]()\n  \
    \      val primesCountSet18 = mutable.Set[Int]()\n        val primesCountSet19\
    \ = mutable.Set[Int]()\n        val primesCountSet20 = mutable.Set[Int]()\n  \
    \      val primesCountSet21 = mutable.Set[Int]()\n        val primesCountSet22\
    \ = mutable.Set[Int]()\n        val primesCountSet23 = mutable.Set[Int]()\n  \
    \      val primesCountSet24 = mutable.Set[Int]()\n        val primesCountSet25\
    \ = mutable.Set[Int]()\n        val primesCountSet26 = mutable.Set[Int]()\n  \
    \      val primesCountSet27 = mutable.Set[Int]()\n        val primesCountSet28\
    \ = mutable.Set[Int]()\n        val primesCountSet29 = mutable.Set[Int]()\n  \
    \      val primesCountSet30 = mutable.Set[Int]()\n        val prime\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4bq01jml.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bq01jml.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bq01jml.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bq01jml.scala:22:26\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4bq01jml.scala:23:29 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCountSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bq01jml.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCountSet2\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found:"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIteratorNext.toInt\n\
    \        val primesSetIteratorNextLong = primesSetIteratorNext.toLong\n      \
    \  val primesSetIteratorNextDouble = primesSetIteratorNext.toDouble\n        val\
    \ primesSetIteratorNextFloat = primesSetIteratorNext.toFloat\n        val primesSetIteratorNextDoubleOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextLongOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextFloatOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextDoubleOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextLongOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextFloatOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextDoubleOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextLongOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextFloatOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextDoubleOrNullOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextLongOrNullOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextFloatOrNullOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextDoubleOrNullOrNullOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextLongOrNullOrNullOrNullOrNullOrNull\
    \ = primesSetIteratorNext.orElse(null)\n        val primesSetIteratorNextFloatOrNullOrNullOrNullOrNullOrNull\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1djhlhub.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1djhlhub.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1djhlhub.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.Array[Long]()\n\
    \        val primesArraySet = mutable.Set[Long]()\n        val primesArrayArray\
    \ = mutable.Array[Long]()\n        val primesArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArraySet = mutable.Set[Long]()\n        val\
    \ primesArrayArrayArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n \
    \       val primesArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb6ab4e0v.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb6ab4e0v.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb6ab4e0v.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArray is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb6ab4e0v.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                i += 1\n            }\n        \
    \    i += 1\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1hr3ofh1.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1hr3ofh1.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo3 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo4 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo7 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo15 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo16 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo19 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo23\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeo_vc82e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeo_vc82e.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                val isPrime = primes.forall(x => i % x == 0)\n       \
    \         if (isPrime) {\n                    primes += i\n                }\n\
    \            }\n            i += 1\n        }\n        primes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmgm30x7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsmgm30x7.scala:32:14 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                i += 1\n            }\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1t2mvj2_.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while(i <= n) {\n            primes += i\n      \
    \      i += 1\n        }\n        primes.takeWhile(x => x < n).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaz4ucj35.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpaz4ucj35.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.Array[Long]()\n\
    \        val primesArraySet = mutable.Set[Long]()\n        val primesArrayArray\
    \ = mutable.Array[Long]()\n        val primesArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArraySet = mutable.Set[Long]()\n        val\
    \ primesArrayArrayArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n \
    \       val primesArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb6ab4e0v.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb6ab4e0v.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb6ab4e0v.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArray is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb6ab4e0v.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        for (i <- 2 to n) {\n            if (isPrime(i))\
    \ {\n                primes += i.toLong\n            }\n        }\n        primes.take(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkco0wwwo.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpkco0wwwo.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkco0wwwo.scala:23:16 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i <= n){\n            val isPrime = true\n\
    \            for(j <- 2l; j < (i.toLong / 2l) ; j++){\n                if(i %\
    \ j == 0){\n                    isPrime = false\n                    break\n \
    \               }\n            }\n            if(isPrime){\n                primes\
    \ += i.toLong\n            }\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkmec3jxt.scala:24:45 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j <- \e[31m2l\e[0m; j < (i.toLong\
    \ / \e[31m2l\e[0m) ; j++){\n\e[31m\e[31m   |\e[0m                            \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \        '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkmec3jxt.scala:24:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e\
    [0m(j <- \e[31m2l\e[0m; j < (i.toLong / \e[31m2l\e[0m) ; j++){\n\e[31m\e[31m \
    \  |\e[0m                                                  ^\e[0m\n\e[31m   |\e\
    [0m                                                  pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmec3jxt.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkmec3jxt.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j <- \e[31m2l\e[0m; j < (i.toLong\
    \ / \e[31m2l\e[0m) ; j++){\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\
    \e[31m   |\e[0m                     value foreach is not a member of Long\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while(i <= n){\n            primes += i\n        \
    \    i += 1\n        }\n        primes.takeWhile(x => x < n).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvfh2gqe.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 2l\n       \
    \ }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3lex5ct1.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3lex5ct1.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextAsLong = primesSetIteratorNext.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLong = primesSetIteratorNextAsLongAsInt.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsInt = primesSetIteratorNextAsLongAsIntAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLong = primesSetIteratorNextAsLongAsIntAsLongAsInt.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsInt = primesSetIteratorNextAsLongAsIntAsLongAsIntAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLong = primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsInt.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsInt\
    \ = primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLong.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLong\
    \ = primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsInt.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsInt\
    \ = primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLong.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLong\
    \ = primesSetIteratorNextAsLongAsIntAs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptph1dtmv.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptph1dtmv.scala:34:97 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLongAsIntAsLong\e\
    [0m = primesSetIteratorNextAsLongAsIntAs\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: primesSetIteratorNextAsLongAsIntAs\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptph1dtmv.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i : Long = 1\n        while (i <= n) {\n            primes += i\n\
    \            i += 1\n        }\n        primes.takeWhile(p => p < n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26p44y1g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.Array[Long]()\n\
    \        val primesArraySet = mutable.Set[Long]()\n        val primesArrayArray\
    \ = mutable.Array[Long]()\n        val primesArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArraySet = mutable.Set[Long]()\n        val\
    \ primesArrayArrayArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n \
    \       val primesArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb6ab4e0v.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb6ab4e0v.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb6ab4e0v.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArray is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb6ab4e0v.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val primesCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount4 = mutable.ArrayBuffer.empty[Long]\n        val primesCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount7 = mutable.ArrayBuffer.empty[Long]\n        val primesCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount10 = mutable.ArrayBuffer.empty[Long]\n        val primesCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount13 = mutable.ArrayBuffer.empty[Long]\n        val primesCount14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount16 = mutable.ArrayBuffer.empty[Long]\n        val primesCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount19 = mutable.ArrayBuffer.empty[Long]\n        val primesCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount22 = mutable.ArrayBuffer.empty[Long]\n        val primesCount23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount25 = mutable.ArrayBuffer.empty[Long]\n        val primesCount26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount28 = mutable.ArrayBuffer.empty[Long]\n        val primesCount29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount31 = mutable.ArrayBuffer.empty[Long]\n        val primesCount32\
    \ = mutable.ArrayBuffer.empty[Long]\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpak122maq.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjej_9g3g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount2 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount3\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount4 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount5 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount6\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount7 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount8 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount11 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeCount12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount15 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeCount16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount19 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeCount20 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount23 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeCount24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount27 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeCount28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpovbxtvcp.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovbxtvcp.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovbxtvcp.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpovbxtvcp.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e[35mBoolean\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpovbxtvcp.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpovbxtvcp.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i <= n) {\n            primes += i\n      \
    \      i += 1\n        }\n        primes.takeWhile(p => p < n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffu5_73h.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjej_9g3g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val limit = n / 2\n        val i = 2\n        while (i <= limit) {\n\
    \            if (n % i == 0) {\n                primes += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n \
    \           primes += n\n        }\n        primes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzq1r8hqp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzq1r8hqp.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzq1r8hqp.scala:28:14\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i < n) {\n            primes += i\n       \
    \     i += 2l\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwtjm878c.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set.empty[Long]\n        val primesCount = mutable.Map.empty[Long,\
    \ Int]\n        val primesCountSet = mutable.Set.empty[Long]\n        val primesCountSet2\
    \ = mutable.Set.empty[Long]\n        val primesCountSet3 = mutable.Set.empty[Long]\n\
    \        val primesCountSet4 = mutable.Set.empty[Long]\n        val primesCountSet5\
    \ = mutable.Set.empty[Long]\n        val primesCountSet6 = mutable.Set.empty[Long]\n\
    \        val primesCountSet7 = mutable.Set.empty[Long]\n        val primesCountSet8\
    \ = mutable.Set.empty[Long]\n        val primesCountSet9 = mutable.Set.empty[Long]\n\
    \        val primesCountSet10 = mutable.Set.empty[Long]\n        val primesCountSet11\
    \ = mutable.Set.empty[Long]\n        val primesCountSet12 = mutable.Set.empty[Long]\n\
    \        val primesCountSet13 = mutable.Set.empty[Long]\n        val primesCountSet14\
    \ = mutable.Set.empty[Long]\n        val primesCountSet15 = mutable.Set.empty[Long]\n\
    \        val primesCountSet16 = mutable.Set.empty[Long]\n        val primesCountSet17\
    \ = mutable.Set.empty[Long]\n        val primesCountSet18 = mutable.Set.empty[Long]\n\
    \        val primesCountSet19 = mutable.Set.empty[Long]\n        val primesCountSet20\
    \ = mutable.Set.empty[Long]\n        val primesCountSet21 = mutable.Set.empty[Long]\n\
    \        val primesCountSet22 = mutable.Set.empty[Long]\n        val primesCountSet23\
    \ = mutable.Set.empty[Long]\n        val primesCountSet24 = mutable.Set.empty[Long]\n\
    \        val primesCountSet25 = mutable.Set.empty[Long]\n        val primesCountSet26\
    \ = mutable.Set.empty[Long]\n        val primesCountSet27 = mutable.Set.empty[Long]\n\
    \        val primesCountSet28 = mutable.Set.empty[Long]\n        val primesCountSet29\
    \ = mutable.Set.empty[Long]\n        val primesCountSet30 = mutable.Set.empty[Long]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9d33t7_3.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d33t7_3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9d33t7_3.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9d33t7_3.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d33t7_3.scala:23:29\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCountSet\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9d33t7_3.scala:24:30 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesCountSet2\e[0m = mutable.Set.empt"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3ej083vw.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ej083vw.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ej083vw.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3ej083vw.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3ej083vw.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ej083vw.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660029127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val i = 2\n        while(i <= n) {\n       \
    \     val isPrime = true\n            for(j <- 2 to i by 2) {\n              \
    \  if(i % j == 0)\n                    isPrime = false\n            }\n      \
    \      if(isPrime)\n                primes += i.toLong\n            i += 1\n \
    \       }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5lk88_ap.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp5lk88_ap.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp5lk88_ap.scala:27:28 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5lk88_ap.scala:31:14 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean i.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val primesSet = primes.toSet\n        val primesSetIterator = primes.iterator\n\
    \        val primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorNextNext\
    \ = primesSetIteratorNext.next\n        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo2al4syy.scala:38:83 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo2al4syy.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2al4syy.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2al4syy.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set.empty[Long]\n        val primesSetSize =\
    \ mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.empty[Long]\n\
    \        val primesSetSize = mutable.Set.empty[Long]\n        val primesSetSize\
    \ = mutable.Set.empty[Long]\n        val primesSetSize = mutable.Set.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzklprvf5.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzklprvf5.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesSetSize\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSize is already defined as \e[33mvalue\e[0m \e[35mprimesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzklprvf5.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSize\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSize is already defined as \e[33mvalue\e[0m \e[35mprimesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzklprvf5.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSize\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSize is already defined as \e[33mvalue\e[0m \e[35mprimesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzklprvf5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSize\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSize is already defined as \e[33mvalue\e[0m \e[35mprimesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                i += 1\n            }\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm38a2py6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprb38m0yp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.Array[Long]()\n\
    \        val primesArray2 = mutable.Array[Long]()\n        val primesArray3 =\
    \ mutable.Array[Long]()\n        val primesArray4 = mutable.Array[Long]()\n  \
    \      val primesArray5 = mutable.Array[Long]()\n        val primesArray6 = mutable.Array[Long]()\n\
    \        val primesArray7 = mutable.Array[Long]()\n        val primesArray8 =\
    \ mutable.Array[Long]()\n        val primesArray9 = mutable.Array[Long]()\n  \
    \      val primesArray10 = mutable.Array[Long]()\n        val primesArray11 =\
    \ mutable.Array[Long]()\n        val primesArray12 = mutable.Array[Long]()\n \
    \       val primesArray13 = mutable.Array[Long]()\n        val primesArray14 =\
    \ mutable.Array[Long]()\n        val primesArray15 = mutable.Array[Long]()\n \
    \       val primesArray16 = mutable.Array[Long]()\n        val primesArray17 =\
    \ mutable.Array[Long]()\n        val primesArray18 = mutable.Array[Long]()\n \
    \       val primesArray19 = mutable.Array[Long]()\n        val primesArray20 =\
    \ mutable.Array[Long]()\n        val primesArray21 = mutable.Array[Long]()\n \
    \       val primesArray22 = mutable.Array[Long]()\n        val primesArray23 =\
    \ mutable.Array[Long]()\n        val primesArray24 = mutable.Array[Long]()\n \
    \       val primesArray25 = mutable.Array[Long]()\n        val primesArray26 =\
    \ mutable.Array[Long]()\n        val primesArray27 = mutable.Array[Long]()\n \
    \       val primesArray28 = mutable.Array[Long]()\n        val primesArray29 =\
    \ mutable.Array[Long]()\n        val primesArray30 = mutable.Array[Long]()\n \
    \       val primesArray31 = mutable.Array[Long]()\n        val primesArray32 =\
    \ mutable.Array[Long]()\n        val primesArray33 = mutable.Array[Long]()\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpl9z2t81g.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesArray\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesArray2\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesArray3\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2kj_0kt.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextInt\e[0m = primesSetIterator.nextInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextLong\e\
    [0m = primesSetIterator.nextLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextDouble\e\
    [0m = primesSetIterator.nextDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextDouble is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextFloat\e\
    [0m = primesSetIterator.nextFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpri"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSetIterator =\
    \ primesSet.iterator\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(primesSetIteratorNext)\n        primesSetIterator.foreach(primesSetIteratorNext)\n\
    \        primesSetIterator.foreach(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprnu0kdu6.scala:54:34 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        primesSetIterator.foreach(\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprnu0kdu6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprnu0kdu6.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val counter = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorsCounter = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeCounter\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCounter = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorCounter2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCounter5 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorCounter6 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCounter9 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorCounter10 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCounter13 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorCounter14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCounter17 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorCounter18 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCounter21 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorCounter22 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCounter\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpox4o3x8z.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox4o3x8z.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox4o3x8z.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mcounter\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox4o3x8z.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpox4o3x8z.scala:23:34 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCounter\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox4o3x8z.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not"
  stdout: ''
  timestamp: 1660029130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        var i = 2\n\
    \        while (i <= n) {\n            val isPrime = primes.contains(i)\n    \
    \        val isPrimeCount = primesCount.contains(i)\n            if (isPrime)\
    \ {\n                primesCount += i\n                if (primesCount.size ==\
    \ n) {\n                    primes += i\n                    if (primes.size ==\
    \ n) {\n                        primesCount += i\n                        primes\
    \ += i\n                    }\n                }\n            } else {\n     \
    \           primes += i\n                if (primes.size == n) {\n           \
    \         primesCount += i\n                    primes += i\n                }\n\
    \            }\n            i += 1\n        }\n        primes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpys15rv7_.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpys15rv7_.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpys15rv7_.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpys15rv7_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        var i = 2\n  \
    \      while (i <= n) {\n            if (primes.contains(i)) {\n             \
    \   primeFactors += i\n            }\n            primes += i\n            i +=\
    \ 1\n        }\n        primeFactors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkelmtmg8.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkelmtmg8.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val i = 2\n        while (i <= n) {\n      \
    \      if (primes.contains(i)) {\n                primes += i\n            }\n\
    \            else {\n                val j = (i * i).toInt\n                while\
    \ (j <= n) {\n                    if (primes.contains(j)) {\n                \
    \        primes += j\n                    }\n                    j += i\n    \
    \            }\n            }\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjom3gcsj.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpjom3gcsj.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjom3gcsj.scala:33:22 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                    j += i\n\e[31m\e[31m   |\e[0m        \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                    value += is not a member\
    \ of Int - did you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjom3gcsj.scala:36:14\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean i.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        var i = 2l\n \
    \       while(i <= n) {\n            val isPrime = true\n            for(j <-\
    \ primeFactors) {\n                if(i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if(isPrime) {\n                primes += i\n                primeFactors\
    \ += i\n            }\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplg2p01oa.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplg2p01oa.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor5 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor6\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor11 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor12\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor17 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor18\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor19 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor23 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor24\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor25 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor26 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor27\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor28 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactor\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptmpv00x4.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptmpv00x4.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptmpv00x4.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmpv00x4.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while(i < n) {\n            val isPrime = true\n\
    \            for(j <- 2l to i by 2) {\n                if(i % j == 0) {\n    \
    \                isPrime = false\n                    break\n                }\n\
    \            }\n            if(isPrime) {\n                primes += i\n     \
    \       }\n            i += 1\n        }\n        primes.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66tupjkr.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp66tupjkr.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp66tupjkr.scala:27:20 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66tupjkr.scala:33:14\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 2l\n       \
    \ }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3lex5ct1.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3lex5ct1.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                i += 1\n            }\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm38a2py6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprb38m0yp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprb38m0yp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1660029128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i < n) {\n            val isPrime = primes.forall(p\
    \ => i % p == 0)\n            if(isPrime) {\n                primes += i\n   \
    \         }\n            i += 1\n        }\n        primes.takeWhile(p => p <\
    \ n).toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2byx4exj.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjej_9g3g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Long]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Long]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Long]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Long]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhjfpkwi.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhjfpkwi.scala:22:32 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhjfpkwi.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var prime = 1\n        while (prime <= n) {\n            if (n % prime\
    \ == 0) {\n                primes += prime\n            }\n            prime +=\
    \ 1\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmedyeb3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            val isPrime = true\n\
    \            while (isPrime) {\n                val isPrime = true\n         \
    \       for (j <- 2 to i) {\n                    if (i % j == 0) {\n         \
    \               isPrime = false\n                        break\n             \
    \       }\n                }\n                if (isPrime) {\n               \
    \     primes += i\n                }\n                i += 1\n            }\n\
    \            i += 1\n        }\n        primes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6oxsn18g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6oxsn18g.scala:26:31 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m (j <- \e[31m2\e[0m to\
    \ i) {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (i : Long)\n\e[31m   |\e[0m      \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp6oxsn18g.scala:28:32 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                        isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6oxsn18g.scala:29:24 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6oxsn18g.scala:35:18\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Long - did you mean i.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6oxsn18g.scala:37:14 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!"
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch6zrp5c.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpch6zrp5c.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val numFactors = mutable.ListBuffer[Long]()\n        val numPrimes =\
    \ mutable.ListBuffer[Long]()\n        val numPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo2\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo3 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo4 = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo5\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo6 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo7 = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo8\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo9 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo10 = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo11\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo12 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo13 = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo14\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo15 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo16 = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo17\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo18 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo19 = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo20\
    \ = mutable.ListBuffer[Long]()\n        val numPrimeFactorsUpTo21 = mutable.ListBuffer[Long]()\n\
    \        val numPrimeFactorsUpTo22 = mutable.ListBuffer[Long]()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwzztyga8.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwzztyga8.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwzztyga8.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwzztyga8.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwzztyga8.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumPrimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwzztyga8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        "
  stdout: ''
  timestamp: 1660029131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val primesSet = mutable.Set[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n        val primesArray = primes.toArray\n\
    \        val primesArraySet = primesSet.toArray\n        val primesArrayArray\
    \ = primesArray.toArray\n        val primesArraySetArray = primesArraySet.toArray\n\
    \        val primesArrayArrayArray = primesArrayArray.toArray\n        val primesArraySetArrayArray\
    \ = primesArraySetArray.toArray\n        val primesArrayArrayArrayArray = primesArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArray = primesArraySetArrayArray.toArray\n\
    \        val primesArrayArrayArrayArrayArray = primesArrayArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArrayArray = primesArraySetArrayArrayArray.toArray\n\
    \        val primesArrayArrayArrayArrayArrayArray = primesArrayArrayArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArrayArrayArray = primesArraySetArrayArrayArrayArray.toArray\n\
    \        val primesArrayArrayArrayArrayArrayArrayArray = primesArrayArrayArrayArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArrayArrayArrayArray = primesArraySetArrayArrayArrayArrayArrayArray.toArray\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = primesArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArrayArrayArrayArrayArrayArray = primesArraySetArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = primesArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = primesArraySetArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n    \
    \    val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val primesArraySetArrayArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp61kr9ad6.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61kr9ad6.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong, \e[31m7l\e[0m.toLong, \e[31m11l\e[0m.toLong, \e[31m13l\e\
    [0m.toLong, \e[31m17l\e[0m.toLong, \e[31m19l\e[0m.toLong)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61kr9ad6.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e\
    [0m.toLong, \e[31m5l\e[0m.toLong, \e[31m7l\e[0m.toLong, \e[31m11l\e[0m.toLong,\
    \ \e[31m13l\e[0m.toLong, \e[31m17l\e[0m.toLong, \e[31m19l\e[0m.toLong)\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp61kr9ad6.scala:35:59 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArraySetArrayArrayArrayArrayArrayArray\e\
    [0m = primesArraySetArrayArrayArrayArrayArrayArray.toArray\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m Recursive \e[33mvalue\e[0m \e[35mprimesArraySetArrayArrayArrayArrayArrayArray\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp61kr9ad6.scala:36:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArray\e[0m = primesArrayArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660029132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i : Long = 1\n        while (i <= n) {\n            if (isPrime(i))\
    \ {\n                primes += i\n                i += 1\n            }\n    \
    \        i += 1\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg6lr1d_2.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg6lr1d_2.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIteratorNext.toInt\n\
    \        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n     \
    \   val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val\
    \ primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt\
    \ = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n\
    \        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n     \
    \   val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val\
    \ primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt\
    \ = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n\
    \        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n     \
    \   val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val\
    \ primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt\
    \ = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n\
    \        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n     \
    \   val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val\
    \ primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt\
    \ = primesSetIteratorNextInt.toInt\n        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n\
    \        val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n     \
    \   val primesSetIteratorNextInt = primesSetIteratorNextInt.toInt\n        val\
    \ primesSetIteratorNextInt = primesSetIteratorNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp262shgrf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextInt\e\
    [0m = primesSetIteratorNextInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp262shgrf.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextInt\e\
    [0m = primesSetIteratorNextInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp262shgrf.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextInt\e\
    [0m = primesSetIteratorNextInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp262shgrf.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextInt\e\
    [0m = primesSetIteratorNextInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same gr"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val primesCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount4 = mutable.ArrayBuffer.empty[Long]\n        val primesCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount7 = mutable.ArrayBuffer.empty[Long]\n        val primesCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount10 = mutable.ArrayBuffer.empty[Long]\n        val primesCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount13 = mutable.ArrayBuffer.empty[Long]\n        val primesCount14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount16 = mutable.ArrayBuffer.empty[Long]\n        val primesCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount19 = mutable.ArrayBuffer.empty[Long]\n        val primesCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount22 = mutable.ArrayBuffer.empty[Long]\n        val primesCount23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount25 = mutable.ArrayBuffer.empty[Long]\n        val primesCount26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount28 = mutable.ArrayBuffer.empty[Long]\n        val primesCount29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesCount30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount31 = mutable.ArrayBuffer.empty[Long]\n        val primesCount32\
    \ = mutable.ArrayBuffer.empty[Long]\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpak122maq.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpak122maq.scala"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val counter = mutable.ListBuffer[Long]()\n        val primesUpTo = mutable.ListBuffer[Long]()\n\
    \        val counterUpTo = mutable.ListBuffer[Long]()\n        val primesUpToCounter\
    \ = mutable.ListBuffer[Long]()\n        val counterUpToPrimes = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounter = mutable.ListBuffer[Long]()\n        val primesUpToCounterPrimes\
    \ = mutable.ListBuffer[Long]()\n        val counterUpToCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounter = mutable.ListBuffer[Long]()\n        val\
    \ counterUpToCounterCounter = mutable.ListBuffer[Long]()\n        val primesUpToCounterCounterPrimes\
    \ = mutable.ListBuffer[Long]()\n        val counterUpToCounterCounterPrimes =\
    \ mutable.ListBuffer[Long]()\n        val primesUpToCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounter = mutable.ListBuffer[Long]()\n \
    \       val primesUpToCounterCounterCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounterCounterCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounterCounterCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounterPrimes = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val counterUpToCounterCounterCounterCounter = mutable.ListBuffer[Long]()\n\
    \        val primesUpToCounterCounterCounterCounterPrimes = mutable.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcri_sjvg.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcri_sjvg.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mcounterUpToCounterCounterCounterPrimes\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcounterUpToCounterCounterCounterPrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mcounterUpToCounterCounterCounterPrimes\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcri_sjvg.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesUpToCounterCounterCounterCounter\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesUpToCounterCounterCounterCounter is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesUpToCounterCounterCounterCounter\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcri_sjvg.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mcounterUpToCounterCounterCounterCounter\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcounterUpToCounterCounterCounterCounter is already defined\
    \ as \e[33mvalue\e[0m \e[35mcounterUpToCounterCounterCounterCounter\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcri_sjvg.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m   "
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.HashSet.empty[Long]\n        val primesArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray3 = mutable.ArrayBuffer.empty[Long]\n        val primesArray4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray6 = mutable.ArrayBuffer.empty[Long]\n        val primesArray7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray9 = mutable.ArrayBuffer.empty[Long]\n        val primesArray10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray12 = mutable.ArrayBuffer.empty[Long]\n        val primesArray13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray15 = mutable.ArrayBuffer.empty[Long]\n        val primesArray16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray18 = mutable.ArrayBuffer.empty[Long]\n        val primesArray19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray21 = mutable.ArrayBuffer.empty[Long]\n        val primesArray22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray24 = mutable.ArrayBuffer.empty[Long]\n        val primesArray25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray27 = mutable.ArrayBuffer.empty[Long]\n        val primesArray28\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArray29 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArray30 = mutable.ArrayBuffer.empty[Long]\n        val primesArray31\
    \ = mutable.ArrayBuffer.empty[Long]\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigguan86.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpigguan86.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpigguan86.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpigguan86.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesArray2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpigguan86.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesArray3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpigguan86.scala:25:27 ------"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextAsLong = primesSetIteratorNext.asInstanceOf[Long]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstanceOf[Int]\n\
    \        val primesSetIteratorNextAsLongAsInt = primesSetIteratorNextAsLong.asInstance\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzoms9zfq.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextAsLongAsInt\e\
    [0m = primesSetIteratorNextAsLong.asInstanceOf[\e[35mInt\e[0m]\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextAsLongAsInt is already defined as \e\
    [33mvalue\e[0m \e[35mprimesSetIteratorNextAsLongAsInt\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzoms9zfq.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextAsLongAsInt\e[0m = primesSetIteratorNextAsLong.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextAsLongAsInt is already defined as \e\
    [33mvalue\e[0m \e[35mprimesSetIteratorNextAsLongAsInt\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzoms9zfq.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextAsLongAsInt\e[0m = primesSetIteratorNextAsLong.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextAsLongAsInt is already defined as \e\
    [33mvalue\e[0m \e[35mprimesSetIteratorNextAsLongAsInt\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzoms9zfq.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextAsLongAsInt\e[0m = primesSetIteratorNextAsLong.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo3 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo4 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo7 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo15 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo16 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo19 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo23\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeo_vc82e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeo_vc82e.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjej_9g3g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount21 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount27 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwot44l0p.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwot44l0p.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwot44l0p.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                i += 1\n            }\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm38a2py6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjn0tvec.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjej_9g3g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjej_9g3g.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextN\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1660029120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val i = 2\n        while (i <= n) {\n      \
    \      if (primes.contains(i)) {\n                primes += i\n            }\n\
    \            i += 1\n        }\n        primes.take(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfba_gcqz.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpfba_gcqz.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfba_gcqz.scala:27:14 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        var primesCountIndex\
    \ = 0\n        var primesIndex = 0\n        var primesCountIndex2 = 0\n      \
    \  var primesIndex2 = 0\n        var primesCountIndex3 = 0\n        var primesIndex3\
    \ = 0\n        var primesCountIndex4 = 0\n        var primesIndex4 = 0\n     \
    \   var primesCountIndex5 = 0\n        var primesIndex5 = 0\n        var primesCountIndex6\
    \ = 0\n        var primesIndex6 = 0\n        var primesCountIndex7 = 0\n     \
    \   var primesIndex7 = 0\n        var primesCountIndex8 = 0\n        var primesIndex8\
    \ = 0\n        var primesCountIndex9 = 0\n        var primesIndex9 = 0\n     \
    \   var primesCountIndex10 = 0\n        var primesIndex10 = 0\n        var primesCountIndex11\
    \ = 0\n        var primesIndex11 = 0\n        var primesCountIndex12 = 0\n   \
    \     var primesIndex12 = 0\n        var primesCountIndex13 = 0\n        var primesIndex13\
    \ = 0\n        var primesCountIndex14 = 0\n        var primesIndex14 = 0\n   \
    \     var primesCountIndex15 = 0\n        var primesIndex15 = 0\n        var primesCountIndex16\
    \ = 0\n        var primesIndex16 = 0\n        var primesCountIndex17 = 0\n   \
    \     var primesIndex17 = 0\n        var primesCountIndex18 = 0\n        var primesIndex18\
    \ = 0\n        var primesCountIndex19 = 0\n        var primesIndex19 = 0\n   \
    \     var primesCountIndex20 = 0\n        var primesIndex20 = 0\n        var primesCountIndex21\
    \ = 0\n        var primesIndex21 = 0\n        var primesCountIndex22 = 0\n   \
    \     var primesIndex22 = 0\n        var primesCountIndex23 = 0\n        var primesIndex23\
    \ = 0\n        var primesCountIndex24 = 0\n        var primesIndex24 = 0\n   \
    \     var primesCountIndex25 = 0\n        var primesIndex25 = 0\n        var primesCountIndex26\
    \ = 0\n        var primesIndex26 = 0\n        var primesCountIndex27 = 0\n   \
    \     var primesIndex27 = 0\n        var primesCountIndex28 = 0\n        var primesIndex28\
    \ = 0\n        var primesCountIndex29 = 0\n        var primesIndex29 = 0\n   \
    \     var primesCountIndex30 = 0\n        var primesIndex30 = 0\n        var primesCountIndex31\
    \ = 0\n        var primesIndex31 = 0\n        var primesCountIndex32 = 0\n   \
    \     var primesIndex32 = 0\n        var primesCountIndex33 = 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgn0ng69.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwgn0ng69.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwgn0ng69.scala:87:5 ---------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesCount = mutable.ListBuffer[Long]()\n        var\
    \ i = 2l.toLong\n        while (i <= n) {\n            val isPrime = true\n  \
    \          primes.foreach { p =>\n                if (i % p == 0) {\n        \
    \            isPrime = false\n                }\n            }\n            if\
    \ (isPrime) {\n                primesCount += i.toLong\n                primes\
    \ += i.toLong\n                i += 1\n            }\n        }\n        primesCount.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeoaowcf.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeoaowcf.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextChar = primesSetIterator.nextChar\n\
    \        val primesSetIteratorNextBoolean = primesSetIterator.nextBoolean\n  \
    \      val primesSetIteratorNextByte = primesSetIterator.nextByte\n        val\
    \ primesSetIteratorNextShort = primesSetIterator.nextShort\n        val primesSetIteratorNextInt\
    \ = primesSetIterator.nextInt\n        val primesSetIteratorNextLong = primesSetIterator.nextLong\n\
    \        val primesSetIteratorNextDouble = primesSetIterator.nextDouble\n    \
    \    val primesSetIteratorNextFloat = primesSetIterator.nextFloat\n        val\
    \ primesSetIteratorNextChar = primesSetIterator.nextChar\n        val primesSetIteratorNextBoolean\
    \ = primesSetIterator.nextBoolean\n        val primesSetIteratorNextByte = primesSetIterator.nextByte\n\
    \        val primesSetIteratorNextShort = primesSetIterator.nextShort\n      \
    \  val primesSetIteratorNextInt = primesSetIterator.nextInt\n        val primesSetIteratorNextLong\
    \ = primesSetIterator.nextLong\n        val primesSetIteratorNextDouble = primesSetIterator.nextDouble\n\
    \        val primesSetIteratorNextFloat = primesSetIterator.nextFloat\n      \
    \  val primesSetIteratorNextChar = primesSetIterator.nextChar\n        val primesSetIteratorNextBoolean\
    \ = primesSetIterator.nextBoolean\n        val primesSetIteratorNextByte = primesSetIterator.nextByte\n\
    \        val primesSetIteratorNextShort = primesSetIterator.nextShort\n      \
    \  val primesSetIteratorNextInt = primesSetIterator.nextInt\n        val primesSetIteratorNextLong\
    \ = primesSetIterator.nextLong\n        val primesSetIteratorNextDouble\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdt_fhhd3.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt_fhhd3.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextInt\e[0m = primesSetIterator.nextInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt_fhhd3.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextLong\e\
    [0m = primesSetIterator.nextLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt_fhhd3.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextDouble\e\
    [0m = primesSetIterator.nextDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextDouble is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt_fhhd3.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextFloat\e\
    [0m = primesSetIterator.nextFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpri"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Long]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Long]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Long]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Long]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhjfpkwi.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhjfpkwi.scala:22:32 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhjfpkwi.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhjfpkwi.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorsCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while(i <= n) {\n            primes += i\n      \
    \      i += 2l\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvy2o3_87.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvy2o3_87.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i += \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount21 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount27 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwot44l0p.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwot44l0p.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwot44l0p.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextNext = primesSetIteratorNext.next\n\
    \        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq63btnck.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq63btnck.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq63btnck.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined "
  stdout: ''
  timestamp: 1660029115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorsCount = mutable.ListBuffer[Long]()\n\
    \        val factorsCount2 = mutable.ListBuffer[Long]()\n        val factorsCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount5 = mutable.ListBuffer[Long]()\n        val factorsCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount8 = mutable.ListBuffer[Long]()\n        val factorsCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount11 = mutable.ListBuffer[Long]()\n        val factorsCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount14 = mutable.ListBuffer[Long]()\n        val factorsCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount17 = mutable.ListBuffer[Long]()\n        val factorsCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount20 = mutable.ListBuffer[Long]()\n        val factorsCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount23 = mutable.ListBuffer[Long]()\n        val factorsCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount26 = mutable.ListBuffer[Long]()\n        val factorsCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorsCount29 = mutable.ListBuffer[Long]()\n        val factorsCount30\
    \ = mutable.ListBuffer[Long]()\n        val factorsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp04i0innk.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04i0innk.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04i0innk.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp04i0innk.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp04i0innk.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp04i0innk.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val primesSet = primes.toSet\n        val primesSetIterator = primes.iterator\n\
    \        val primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorNextNext\
    \ = primesSetIteratorNext.next\n        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxkqod63_.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxkqod63_.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkqod63_.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkqod63_.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount21 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeCount27 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Boolean]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwot44l0p.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwot44l0p.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwot44l0p.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwot44l0p.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.Array[Long]()\n\
    \        val primesArray2 = mutable.Array[Long]()\n        val primesArray3 =\
    \ mutable.Array[Long]()\n        val primesArray4 = mutable.Array[Long]()\n  \
    \      val primesArray5 = mutable.Array[Long]()\n        val primesArray6 = mutable.Array[Long]()\n\
    \        val primesArray7 = mutable.Array[Long]()\n        val primesArray8 =\
    \ mutable.Array[Long]()\n        val primesArray9 = mutable.Array[Long]()\n  \
    \      val primesArray10 = mutable.Array[Long]()\n        val primesArray11 =\
    \ mutable.Array[Long]()\n        val primesArray12 = mutable.Array[Long]()\n \
    \       val primesArray13 = mutable.Array[Long]()\n        val primesArray14 =\
    \ mutable.Array[Long]()\n        val primesArray15 = mutable.Array[Long]()\n \
    \       val primesArray16 = mutable.Array[Long]()\n        val primesArray17 =\
    \ mutable.Array[Long]()\n        val primesArray18 = mutable.Array[Long]()\n \
    \       val primesArray19 = mutable.Array[Long]()\n        val primesArray20 =\
    \ mutable.Array[Long]()\n        val primesArray21 = mutable.Array[Long]()\n \
    \       val primesArray22 = mutable.Array[Long]()\n        val primesArray23 =\
    \ mutable.Array[Long]()\n        val primesArray24 = mutable.Array[Long]()\n \
    \       val primesArray25 = mutable.Array[Long]()\n        val primesArray26 =\
    \ mutable.Array[Long]()\n        val primesArray27 = mutable.Array[Long]()\n \
    \       val primesArray28 = mutable.Array[Long]()\n        val primesArray29 =\
    \ mutable.Array[Long]()\n        val primesArray30 = mutable.Array[Long]()\n \
    \       val primesArray31 = mutable.Array[Long]()\n        val primesArray32 =\
    \ mutable.Array[Long]()\n        val primesArray33 = mutable.Array[Long]()\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpl9z2t81g.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesArray\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesArray2\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9z2t81g.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesArray3\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount2 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount3 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount4 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount5 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount6 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount7 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount8 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount9 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount10 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount11 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount12 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount13 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount14 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount15 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount16 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount17 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount18 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9m4o4yut.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9m4o4yut.scala:21:26 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount2\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount = mutable.ListBuffer(2l.toLong)\n        val primesCount2\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount3 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount4 = mutable.ListBuffer(2l.toLong)\n        val primesCount5\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount6 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount7 = mutable.ListBuffer(2l.toLong)\n        val primesCount8\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount9 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount10 = mutable.ListBuffer(2l.toLong)\n        val primesCount11\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount12 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount13 = mutable.ListBuffer(2l.toLong)\n        val primesCount14\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount15 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount16 = mutable.ListBuffer(2l.toLong)\n        val primesCount17\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount18 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount19 = mutable.ListBuffer(2l.toLong)\n        val primesCount20\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount21 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount22 = mutable.ListBuffer(2l.toLong)\n        val primesCount23\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount24 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount25 = mutable.ListBuffer(2l.toLong)\n        val primesCount26\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount27 = mutable.ListBuffer(2l.toLong)\n\
    \        val primesCount28 = mutable.ListBuffer(2l.toLong)\n        val primesCount29\
    \ = mutable.ListBuffer(2l.toLong)\n        val primesCount30 = mutable.ListBuffer(2l.toLong)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplypegez3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplypegez3.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplypegez3.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplypegez3.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplypegez3.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplypegez3.scala:25:27 ---"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount2 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount3 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount4 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount5 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount6 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount7 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount8 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount9 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount10 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount11 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount12 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount13 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount14 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount15 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount16 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount17 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesCount18 = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9m4o4yut.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9m4o4yut.scala:21:26 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount2\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e\
    [0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e[0m, \e[31m17l\e[0m, \e[31m19l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9m4o4yut.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m, \e[31m7l\e[0m, \e[31m11l\e[0m, \e[31m13l\e\
    [0m, \e[31m17l\e[0m, \e[31m19l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo3 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo4 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo7 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo15 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo16 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo19 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsUpTo20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsUpTo22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsUpTo23\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeo_vc82e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeo_vc82e.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_vc82e.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660029118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesCount = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n\
    \        val primesCount2 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n      \
    \  val primesCount3 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount4\
    \ = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount5 = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesCount6 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n\
    \        val primesCount7 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n      \
    \  val primesCount8 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount9\
    \ = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount10 = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesCount11 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n\
    \        val primesCount12 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n     \
    \   val primesCount13 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val\
    \ primesCount14 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount15\
    \ = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount16 = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesCount17 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n\
    \        val primesCount18 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n     \
    \   val primesCount19 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val\
    \ primesCount20 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount21\
    \ = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n        val primesCount22 = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesCount23 = mutable.ArrayBuffer(2l.toLong, 3l.toLong)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4ysg7x5.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4ysg7x5.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz4ysg7x5.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4ysg7x5.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount3\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz4ysg7x5.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation avail"
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong)\n        val primesSet = mutable.Set[Long]()\n        val primesSet2\
    \ = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n      \
    \  val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw76e4sru.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw76e4sru.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw76e4sru.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw76e4sru.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw76e4sru.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw76e4sru.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m"
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            } else {\n                primes\
    \ += i\n                i += 1\n            }\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm38a2py6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            primes += i\n     \
    \       i += 1\n        }\n        primes.takeWhile(p => p < n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphpe6tshx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2kj_0kt.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextInt\e[0m = primesSetIterator.nextInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextLong\e\
    [0m = primesSetIterator.nextLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextDouble\e\
    [0m = primesSetIterator.nextDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextDouble is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextFloat\e\
    [0m = primesSetIterator.nextFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpri"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer(2l.toLong,\
    \ 3l.toLong)\n        var primesCount = 0\n        var primesCount2 = 0\n    \
    \    var primesCount3 = 0\n        var primesCount4 = 0\n        var primesCount5\
    \ = 0\n        var primesCount6 = 0\n        var primesCount7 = 0\n        var\
    \ primesCount8 = 0\n        var primesCount9 = 0\n        var primesCount10 =\
    \ 0\n        var primesCount11 = 0\n        var primesCount12 = 0\n        var\
    \ primesCount13 = 0\n        var primesCount14 = 0\n        var primesCount15\
    \ = 0\n        var primesCount16 = 0\n        var primesCount17 = 0\n        var\
    \ primesCount18 = 0\n        var primesCount19 = 0\n        var primesCount20\
    \ = 0\n        var primesCount21 = 0\n        var primesCount22 = 0\n        var\
    \ primesCount23 = 0\n        var primesCount24 = 0\n        var primesCount25\
    \ = 0\n        var primesCount26 = 0\n        var primesCount27 = 0\n        var\
    \ primesCount28 = 0\n        var primesCount29 = 0\n        var primesCount30\
    \ = 0\n        var primesCount31 = 0\n        var primesCount32 = 0\n        var\
    \ primesCount33 = 0\n        var primesCount34 = 0\n        var primesCount35\
    \ = 0\n        var primesCount36 = 0\n        var primesCount37 = 0\n        var\
    \ primesCount38 = 0\n        var primesCount39 = 0\n        var primesCount40\
    \ = 0\n        var primesCount41 = 0\n        var primesCount42 = 0\n        var\
    \ primesCount43 = 0\n        var primesCount44 = 0\n        var primesCount45\
    \ = 0\n        var primesCount46 = 0\n        var primesCount47 = 0\n        var\
    \ primesCount48 = 0\n        var primesCount49 = 0\n        var primesCount50\
    \ = 0\n        var primesCount51 = 0\n        var primesCount52 = 0\n        var\
    \ primesCount53 = 0\n        var primesCount54 = 0\n        var primesCount55\
    \ = 0\n        var primesCount56 = 0\n        var primesCount57 = 0\n        var\
    \ primesCount58 = 0\n        var primesCount59 = 0\n        var primesCount60\
    \ = 0\n        var primesCount61 = 0\n        var primesCount62 = 0\n        var\
    \ primesCount63 = 0\n        var primesCount64 = 0\n        var primesCount65\
    \ = 0\n        var primesCount66 = 0\n        var primesCount67 = 0\n        var\
    \ primesCount68 = 0\n        var primesCount69 = 0\n        var primesCount70\
    \ = 0\n        var primesCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl88iz4z4.scala:92:4 ----------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl88iz4z4.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer(\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl88iz4z4.scala:92:5 ---------------------\e[0m\e[0m\n\e[31m92\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val primesCountList\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList2 = mutable.ListBuffer[Boolean]()\n        val primesCountList2\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList4 = mutable.ListBuffer[Boolean]()\n        val primesCountList3\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList6 = mutable.ListBuffer[Boolean]()\n        val primesCountList4\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList8 = mutable.ListBuffer[Boolean]()\n        val primesCountList5\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList10 = mutable.ListBuffer[Boolean]()\n        val primesCountList6\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList12 = mutable.ListBuffer[Boolean]()\n        val primesCountList7\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList14 = mutable.ListBuffer[Boolean]()\n        val primesCountList8\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList16 = mutable.ListBuffer[Boolean]()\n        val primesCountList9\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeList17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeList18 = mutable.ListBuffer[Boolean]()\n        val primesCountList10\
    \ = mutable.ListBuffer[Long]()\n        val is\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpec246_y3.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpec246_y3.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpec246_y3.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpec246_y3.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpec246_y3.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpec246_y3.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCountList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesArray = mutable.Array[Long]()\n\
    \        val primesArraySet = mutable.Set[Long]()\n        val primesArrayArray\
    \ = mutable.Array[Long]()\n        val primesArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArraySet = mutable.Set[Long]()\n        val\
    \ primesArrayArrayArrayArrayArray = mutable.Array[Long]()\n        val primesArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val primesArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n \
    \       val primesArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjq3yvoh.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsjq3yvoh.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArray is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsjq3yvoh.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet is\
    \ already defined as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsjq3yvoh.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mprimesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val primesSet = primes.toSet\n        val primesSetIterator = primes.iterator\n\
    \        val primesSetIteratorNext = primesSetIterator.next\n        val primesSetIteratorNextNext\
    \ = primesSetIteratorNext.next\n        val primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n\
    \        val primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = prime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzhiu3r0j.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzhiu3r0j.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzhiu3r0j.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var prime = 0\n        var count = 0\n        while (prime < n) {\n \
    \           prime = prime + 1\n            primes += prime\n            count\
    \ += 1\n        }\n        primes.take(count).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bp2bomk.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while(i <= n){\n            val isPrime = true\n\
    \            for(j <- 2l; j < (i.toLong * i.toLong); j += i){\n              \
    \  if(i % j == 0){\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if(isPrime){\n                primes\
    \ += i.toLong\n            }\n            i += 1\n        }\n        primes.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjjfdjntf.scala:24:50 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j <- \e[31m2l\e[0m; j < (i.toLong\
    \ * i.toLong); j += i){\n\e[31m\e[31m   |\e[0m                               \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \          '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjjfdjntf.scala:24:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e\
    [0m(j <- \e[31m2l\e[0m; j < (i.toLong * i.toLong); j += i){\n\e[31m\e[31m   |\e\
    [0m                                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                            '<-' expected, but ')' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjjfdjntf.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjjfdjntf.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j <- \e[31m2l\e[0m; j < (i.toLong\
    \ * i.toLong); j += i){\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e\
    [31m   |\e[0m                     value foreach is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjjfdjntf.scala:33:14 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnt5cmyp.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2kj_0kt.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextInt\e[0m = primesSetIterator.nextInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextLong\e\
    [0m = primesSetIterator.nextLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextDouble\e\
    [0m = primesSetIterator.nextDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextDouble is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextFloat\e\
    [0m = primesSetIterator.nextFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpri"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while(i <= n) {\n            primes += i\n      \
    \      i += 2l\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvy2o3_87.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvy2o3_87.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i += \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val primesCount2\
    \ = mutable.ListBuffer[Long]()\n        val primesCount3 = mutable.ListBuffer[Long]()\n\
    \        val primesCount4 = mutable.ListBuffer[Long]()\n        val primesCount5\
    \ = mutable.ListBuffer[Long]()\n        val primesCount6 = mutable.ListBuffer[Long]()\n\
    \        val primesCount7 = mutable.ListBuffer[Long]()\n        val primesCount8\
    \ = mutable.ListBuffer[Long]()\n        val primesCount9 = mutable.ListBuffer[Long]()\n\
    \        val primesCount10 = mutable.ListBuffer[Long]()\n        val primesCount11\
    \ = mutable.ListBuffer[Long]()\n        val primesCount12 = mutable.ListBuffer[Long]()\n\
    \        val primesCount13 = mutable.ListBuffer[Long]()\n        val primesCount14\
    \ = mutable.ListBuffer[Long]()\n        val primesCount15 = mutable.ListBuffer[Long]()\n\
    \        val primesCount16 = mutable.ListBuffer[Long]()\n        val primesCount17\
    \ = mutable.ListBuffer[Long]()\n        val primesCount18 = mutable.ListBuffer[Long]()\n\
    \        val primesCount19 = mutable.ListBuffer[Long]()\n        val primesCount20\
    \ = mutable.ListBuffer[Long]()\n        val primesCount21 = mutable.ListBuffer[Long]()\n\
    \        val primesCount22 = mutable.ListBuffer[Long]()\n        val primesCount23\
    \ = mutable.ListBuffer[Long]()\n        val primesCount24 = mutable.ListBuffer[Long]()\n\
    \        val primesCount25 = mutable.ListBuffer[Long]()\n        val primesCount26\
    \ = mutable.ListBuffer[Long]()\n        val primesCount27 = mutable.ListBuffer[Long]()\n\
    \        val primesCount28 = mutable.ListBuffer[Long]()\n        val primesCount29\
    \ = mutable.ListBuffer[Long]()\n        val primesCount30 = mutable.ListBuffer[Long]()\n\
    \        val primesCount31 = mutable.ListBuffer[Long]()\n        val primesCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprhgztxn6.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprhgztxn6.scala:25:27 ------------------"
  stdout: ''
  timestamp: 1659803851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch6zrp5c.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpch6zrp5c.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Long]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount3 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Long]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount6 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Long]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount9 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Long]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount12 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Long]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount15 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Long]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount18 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Long]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount21 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Long]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount24 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Long]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount27 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Long]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps89f84br.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps89f84br.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps89f84br.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        for (i <- 2 to n) {\n\
    \            if (isPrime(i)) {\n                primes += i\n                nums\
    \ += i\n            }\n        }\n        nums.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrzmjsc4.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwrzmjsc4.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwrzmjsc4.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrzmjsc4.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(i)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArraySet = mutable.HashSet[Long]()\n        val primesArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n       \
    \ val primesArrayArrayArraySet = mutable.HashSet[Long]()\n        val primesArrayArrayArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArrayArrayArraySet\
    \ = mutable.HashSet[Long]()\n        val primesArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n  \
    \      val primesArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.HashSet[Long]()\n\
    \        val primesArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primesArrayArrayArrayArrayArrayArrayArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr572v856.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr572v856.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mprimesArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr572v856.scala:20:21 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr572v856.scala:21:24 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpr572v856.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr572v856.scala:23:29 ------------------------\e\
    [0m\e"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Long]()\n        val isPrimeCount2\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount3 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount4 = mutable.ListBuffer[Long]()\n        val isPrimeCount5\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount6 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount7 = mutable.ListBuffer[Long]()\n        val isPrimeCount8\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount9 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount10 = mutable.ListBuffer[Long]()\n        val isPrimeCount11\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount12 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount13 = mutable.ListBuffer[Long]()\n        val isPrimeCount14\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount15 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount16 = mutable.ListBuffer[Long]()\n        val isPrimeCount17\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount18 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount19 = mutable.ListBuffer[Long]()\n        val isPrimeCount20\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount21 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount22 = mutable.ListBuffer[Long]()\n        val isPrimeCount23\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount24 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount25 = mutable.ListBuffer[Long]()\n        val isPrimeCount26\
    \ = mutable.ListBuffer[Long]()\n        val isPrimeCount27 = mutable.ListBuffer[Long]()\n\
    \        val isPrimeCount28 = mutable.ListBuffer[Long]()\n        val isPrimeCount29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps89f84br.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps89f84br.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps89f84br.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps89f84br.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found"
  stdout: ''
  timestamp: 1660029107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while(i < n) {\n            primes += i\n       \
    \     i += 1\n        }\n        primes.takeWhile(p => p < n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwt42les.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjn0tvec.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer(2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l)\n        val primesSet = primes.toSet\n    \
    \    val primesSetIterator = primes.iterator\n        val primesSetIteratorNext\
    \ = primesSetIterator.next\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble = primesSetIterator.nextDouble\n        val primesSetIteratorNextFloat\
    \ = primesSetIterator.nextFloat\n        val primesSetIteratorNextInt = primesSetIterator.nextInt\n\
    \        val primesSetIteratorNextLong = primesSetIterator.nextLong\n        val\
    \ primesSetIteratorNextDouble\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2kj_0kt.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextInt\e[0m = primesSetIterator.nextInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimesSetIteratorNextInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimesSetIteratorNextInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextLong\e\
    [0m = primesSetIterator.nextLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextLong is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextDouble\e\
    [0m = primesSetIterator.nextDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextDouble is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetIteratorNextDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2kj_0kt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextFloat\e\
    [0m = primesSetIterator.nextFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpri"
  stdout: ''
  timestamp: 1660029129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpde6mkvsn.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmproll0aj_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmproll0aj_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmproll0aj_.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproll0aj_.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimePrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not fo"
  stdout: ''
  timestamp: 1659803851
