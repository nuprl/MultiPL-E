name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n\
  \    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n\
  \    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>>\
  \ hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = num.toCharArray.map(_.toString.toInt)\n        val\
    \ hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => hexKey.put(x,\
    \ hexKey.getOrElse(x, 0) + 1))\n        hexKey.values.toList.filter(x => x > 1).length",
  "        val hex = num.map(x => x.toInt)\n        val primes = hex.filter(x => x\
    \ % 2 == 0).filter(x => x % 3 == 0).filter(x => x % 5 == 0).filter(x => x % 7\
    \ == 0).filter(x => x % 11 == 0).filter(x => x % 13 == 0).filter(x => x % 17 ==\
    \ 0).filter(x => x % 19 == 0).filter(x => x % 23 == 0).filter(x => x % 29 == 0).filter(x\
    \ => x % 31 == 0).filter(x => x % 37 == 0).filter(x => x % 41 == 0).filter(x =>\
    \ x % 43 == 0).filter(x => x % 47 == 0).filter(x => x % 53 == 0).filter(x => x\
    \ % 59 == 0).filter(x => x % 61 == 0).filter(x => x % 67 == 0).filter(x => x %\
    \ 71 == 0).filter(x => x % 73 == 0).filter(x => x % 79 == 0).filter(x => x % 83\
    \ == 0).filter(x => x % 89 == 0).filter(x => x % 97 == 0).filter(x => x % 101\
    \ == 0).filter(x => x % 103 == 0).filter(x => x % 107 == 0).filter(x => x % 109\
    \ == 0).filter(x => x % 113 == 0).filter(x => x % 117 == 0).filter(x => x % 121\
    \ == 0).filter(x => x % 123 == 0).filter(x => x % 127 == 0).filter(x => x % 131\
    \ == 0).filter(x => x % 137 == 0).filter(x => x % 139 == 0).filter(x => x % 143\
    \ == 0).filter(x => x % 147 == 0).filter(x => x % 151 == 0).filter(x => x % 157\
    \ == 0).filter(x => x % 161 == 0).filter(x => x % 165 == 0).filter(x => x % 169\
    \ == 0).filter(x => x % 173 == 0).filter(x => x % 177 == 0).filter(x => x % 181\
    \ == 0).filter(x => x % 185 == 0).filter(x => x % 189 == 0).filter(x => x % 193\
    \ == 0).filter(x => x % 197 == 0).filter(x => x % 201 == 0).filter(x => x % 205\
    \ == 0).filter(x => x % 209 == 0).filter(x => x % 213 == 0).filter(x => x % 217\
    \ == 0).filter(x => x % 221 == 0).filter(x => x % 225 == 0).filter(x => x % 229\
    \ == 0).filter(x => x % 233 == 0).filter(x => x % 237 == 0).filter(x => x % 24",
  "        val hex = num.toCharArray.map(_.toInt)\n        val hexString = hex.mkString(\"\
    \")\n        val hexKey = new mutable.HashMap[String, Long]()\n        hexString.toList.foreach(x\
    \ => {\n            val hexKey = hexKey.getOrElse(x.toString, 0L)\n          \
    \  hexKey.update(x.toString, hexKey + 1)\n        })\n        hexKey.getOrElse(\"\
    0\", 0L)", "        val hex = num.toCharArray.map(_.toString.toInt)\n        val\
    \ hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n     \
    \       hexKey.getOrElse(x, 0)\n        })\n        hexKey.values.sum", "    \
    \    val hex = num.toCharArray\n        val hexKey = hex.filter(_ >= '0' && _\
    \ <='9').length\n        val hexDigits = hex.filter(_ >= '0' && _ <='9').toList\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.to", "        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit * digit}\n\
    \        hexKey", "        val hex = num.map(x => x.toInt)\n        val primes\
    \ = hex.filter(x => x % 2 == 0 && x != 0)\n        val primesCount = primes.count()\n\
    \        val hexCount = hex.count()\n        val hexDigits = hexCount / hex.length\n\
    \        val primeDigits = primesCount / primes.length\n        val primeDigit\
    \ = primeDigits.toInt\n        val prime = primeDigits.toLong\n        val hexDigit\
    \ = hexDigits.toLong\n        val hexDigitCount = hexDigit / hex.length\n    \
    \    val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        ", "        val nums = num.split(\"\\\\\").toList\n        val numsLength\
    \ = nums.length\n        val hexDigits = nums.map(_.toInt)\n        val hexDigitsLength\
    \ = hexDigits.length\n        val hexDigitsLength = hexDigitsLength.toLong\n \
    \       val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        ", "        val hex = num.toCharArray\n   \
    \     val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKey",
  "        val hex = num.toCharArray\n        val hexKey = hex.map(x => x.toInt)\n\
    \        val hexKeyArray = hexKey.toArray\n        val hexKeyArrayLength = hexKeyArray.length\n\
    \        val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArray", "        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit.toLong }\n\
    \        hexKey", "        val hex = num.toCharArray\n        val hexKey = new\
    \ mutable.HashMap[Char, Long]()\n        hex.foreach(c => {\n            hexKey.put(c.toUpperCase,\
    \ hexKey.getOrElse(c, 0l) + 1)\n        })\n        hexKey.getOrElse(\"A\", 0l)\
    \ + 1", "        val hex = num.map(x => x.toInt)\n        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val prime", "        val\
    \ hex = num.toCharArray.map(_.toString.toInt)\n        val hexArray = hex.toArray\n\
    \        val hexCount = hexArray.length\n        val hexArray2 = hexArray.filter(_\
    \ % 2 == 0)\n        val hexArray3 = hexArray2.filter(_ % 3 == 0)\n        val\
    \ hexArray4 = hexArray3.filter(_ % 5 == 0)\n        val hexArray5 = hexArray4.filter(_\
    \ % 7 == 0)\n        val hexArray6 = hexArray5.filter(_ % 11 == 0)\n        val\
    \ hexArray7 = hexArray6.filter(_ % 13 == 0)\n        val hexArray8 = hexArray7.filter(_\
    \ % 17 == 0)\n        val hexArray9 = hexArray8.filter(_ % 19 == 0)\n        val\
    \ hexArray10 = hexArray9.filter(_ % 23 == 0)\n        val hexArray11 = hexArray10.filter(_\
    \ % 29 == 0)\n        val hexArray12 = hexArray11.filter(_ % 31 == 0)\n      \
    \  val hexArray13 = hexArray12.filter(_ % 37 == 0)\n        val hexArray14 = hexArray13.filter(_\
    \ % 41 == 0)\n        val hexArray15 = hexArray14.filter(_ % 43 == 0)\n      \
    \  val hexArray16 = hexArray15.filter(_ % 47 == 0)\n        val hexArray17 = hexArray16.filter(_\
    \ % 51 == 0)\n        val hexArray18 = hexArray17.filter(_ % 53 == 0)\n      \
    \  val hexArray19 = hexArray18.filter(_ % 57 == 0)\n        val hexArray20 = hexArray19.filter(_\
    \ % 61 == 0)\n        val hexArray21 = hexArray20.filter(_ % 67 == 0)\n      \
    \  val hexArray22 = hexArray21.filter(_ % 71 == 0)\n        val hexArray23 = hexArray22.filter(_\
    \ % 73 == 0)\n        val hexArray24 = hexArray23.filter(_ % 79 == 0)\n      \
    \  val hexArray25 = hexArray24.filter(_ % 83 == 0)\n        val hexArray26 = hexArray25.filter(_\
    \ % 89 == 0)\n        val hexArray27 = hexArray26.filter(_ % 97 == 0)\n      \
    \  val hexArray28 = hexArray27.filter(_ % 101 == 0)\n        val hexArray29 =\
    \ hexArray28.filter(_ % 103 == 0)\n        val hexArray30 = hexArray29.filter(_\
    \ % 107 == 0)\n        val hexArray31 = hexArray30.filter(_ % 111 == 0)\n    \
    \    val hexArray32 = hexArray31.filter(_ % 117", "        val hex = num.toCharArray\n\
    \        val hexCount = hex.count(_ == '0')\n        val hexDigits = hex.count(_\
    \ >= '0' && _ <='9')\n        val hexDigitPrimes = hexDigits.filter(_ > 0)\n \
    \       val hexDigitPrimeCount = hexDigitPrimes.count(_ > 0)\n        val hexDigitPrimePrimes\
    \ = hexDigitPrimes.filter(_ == 0)\n        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimes = hexDigitPrimePrimes.filter(_ ==\
    \ 0)\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.",
  "        val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey32 = new ", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).count(x => x == 0)\n        hexKey",
  "        val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey32 = new ", "        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = hexKey.toList\n        val\
    \ hexKeyLen = hexKey.length\n        val hexKeySet = hexKey.toSet\n        val\
    \ hexKeySetLen = hexKeySet.size\n        val hexKeySetSet = hexKeySet.toSet\n\
    \        val hexKeySetSetLen = hexKeySetSet.size\n        val hexKeySetSetSetLen\
    \ = hexKeySetSetLen\n        val hexKeySetSetSetSetLen = hexKeySetSetSetLen\n\
    \        val hexKeySetSetSetSetLen = hexKeySetSetSetSetLen\n        val hexKeySetSetSetSetSetLen\
    \ = hexKeySetSetSetSetLen\n        val hexKeySetSetSetSetSetLen = hexKeySetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetLen\n     \
    \   val hexKeySetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetLen\n        val\
    \ hexKeySetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetLen\n        val\
    \ hexKeySetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetLen\n    \
    \    val hexKeySetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hex", "        val hex = num.toCharArray.map(_.toInt)\n        val\
    \ hexKey = hex.map(x => x % 16).filter(_ > 0).count(x => x % 2 == 0)\n       \
    \ hexKey"]
stop_tokens:
- "\n    }\n"
