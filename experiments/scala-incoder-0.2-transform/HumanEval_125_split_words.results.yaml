language: scala
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51k7eki.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.map(_.toLowerCase).map(_.length).filter(x\
    \ => x % 2 == 1).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e5039tl.scala:21)\n\tat Problem.main(tmp5e5039tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ noWhitespaceWords = words.filter(!_.contains(\"\\\\s\"))\n        val noLetterWords\
    \ = words.filter(!_.contains(\"[a-z]\"))\n        val noLetterWordsOddOrder =\
    \ words.filter(!_.contains(\"[a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 != 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpephb89z2.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpephb89z2.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsEvenOrder\e[0m = words.filter(!_.contains(\e\
    [31m\"[a-z]\"\e[0m) || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLetterWordsEvenOrder is already defined as \e[33mvalue\e\
    [0m \e[35mnoLetterWordsEvenOrder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpephb89z2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsEvenOrder\e\
    [0m = words.filter(!_.contains(\e[31m\"[a-z]\"\e[0m) || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLetterWordsEvenOrder is already defined as \e[33mvalue\e\
    [0m \e[35mnoLetterWordsEvenOrder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpephb89z2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsEvenOrder\e\
    [0m = words.filter(!_.contains(\e[31m\"[a-z]\"\e[0m) || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evens = words.filter(_.toLowerCase == \"even\")\n            val odds = words.filter(_.toLowerCase\
    \ == \"odd\")\n            val evensCount = evens.count(_ % 2 == 0)\n        \
    \    val oddsCount = odds.count(_ % 2 == 0)\n            val evensOddsCount =\
    \ evensCount + oddsCount\n            val evensOddsCountInt = evensOddsCount.toInt\n\
    \            val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbewiy38j.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbewiy38j.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbewiy38j.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e[0m = evensOddsCountInt\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevensOddsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbewiy38j.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e\
    [0m = evensOddsCountInt + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevensOddsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbewiy38j.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e\
    [0m = evensOddsCountInt + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevensOddsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbewiy38j.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e\
    [0m = evensOddsCountInt + \e[31m1\e[0m\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numOfWords = words.length\n        val\
    \ numOfLetters = txt.length.toString.toInt\n        val numOfLettersOddOrder =\
    \ numOfLetters.toString.toInt.filter(_ % 2 != 0).length\n        val numOfLettersEvenOrder\
    \ = numOfLetters.toString.toInt.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderOdd\
    \ = numOfLettersEvenOrder.filter(_ % 2 != 0).length\n        val numOfLettersEvenOrderEven\
    \ = numOfLettersEvenOrder.filter(_ % 2 == 0).length\n        val numOfLettersOddOrderOdd\
    \ = numOfLettersOddOrder.filter(_ % 2 != 0).length\n        val numOfLettersOddOrderEven\
    \ = numOfLettersOddOrder.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 != 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOf\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3f0cy3pn.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumOfLettersEvenOrderEvenOdd\e[0m = numOfLettersEvenOrderEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumOfLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumOfLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumOfLettersEvenOrderEvenOdd\e\
    [0m = numOfLettersEvenOrderEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumOfLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumOfLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumOfLettersEvenOrderEvenOdd\e\
    [0m = numOfLettersEvenOrderEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumOfLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumOfLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:28:12 ---------"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    ,\").filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).length\n\
    \        val oddLetters = letters.filter(_ % 2 != 0).length\n        val result\
    \ = if (words.length == commaWords.length) Right(words.length) else Left(commaWords.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzax3mrxu.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzax3mrxu.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Either[Int,\
    \ Int])\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ evenWords = words.filter(word => word.forall(_.isDigit) && word.forall(_.isLower))\n\
    \        val oddWords = words.filter(word => word.forall(_.isDigit) && word.forall(_.isLower)\
    \ && word.forall(!_.isDigit))\n        val evenLetters = evenWords.filter(word\
    \ => word.forall(_.isLetter))\n        val oddLetters = oddWords.filter(word =>\
    \ word.forall(_.isLetter))\n        val evenLettersCount = evenLetters.map(word\
    \ => word.length).sum\n        val oddLettersCount = oddLetters.map(word => word.length).sum\n\
    \        val evenLettersCountInWords = evenLetters.map(word => word.length).foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWords = oddLetters.map(word => word.length).foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSum = evenLettersCountInWords.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSum = oddLettersCountInWords.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWords = evenLettersCountInWordsSum.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSumInWords = oddLettersCountInWordsSum.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWordsSum = evenLettersCountInWordsSumInWords.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSumInWordsSum = oddLettersCountInWordsSumInWords.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWordsSumInWords = evenLettersCountInWordsSumInWordsSum.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSumInWordsSumInWords = oddLettersCountInWordsSumInWordsSum.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6m98zrmw.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m98zrmw.scala:26:65\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mevenLettersCountInWordsSum\e[0m = evenLettersCountInWords.foldLeft(\e[31m0\e\
    [0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value foldLeft is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m98zrmw.scala:27:63\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36moddLettersCountInWordsSum\e[0m = oddLettersCountInWords.foldLeft(\e[31m0\e\
    [0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value foldLeft is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6m98zrmw.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evenWords = words.filter(word => word.forall(c => c.isLetter) && c.toLower ==\
    \ \"a\")\n            val oddWords = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower == \"b\")\n            val evenLetters = evenWords.map(word =>\
    \ word.map(c => c.toLower).filter(c => c.toLower == \"a\").length)\n         \
    \   val oddLetters = oddWords.map(word => word.map(c => c.toLower).filter(c =>\
    \ c.toLower == \"b\").length)\n            val evenLettersCount = evenLetters.reduce((a,\
    \ b) => a + b)\n            val oddLettersCount = oddLetters.reduce((a, b) =>\
    \ a + b)\n            val evenLettersCountInt = evenLettersCount.toInt\n     \
    \       val oddLettersCountInt = oddLettersCount.toInt\n            if (evenLettersCountInt\
    \ == oddLettersCountInt) Right(evenLettersCountInt)\n            else Left(oddLettersCountInt)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvsodj1s.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m\"\
    a\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                           Not found: c\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvsodj1s.scala:20:80 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m\"\
    b\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                          Not found: c\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpdvsodj1s.scala:21:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toLower).filter(\e[36mc\e[0m => c.toLower\
    \ == \e[31m\"a\"\e[0m).length)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpdvsodj1s.scala:22:87 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toLower).filter(\e[36mc\e[0m => c.toLower\
    \ == \e[31m\"b\"\e[0m).length)\n\e[31m\e[31m   |\e[0m                        \
    \                                                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == "
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51k7eki.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Right(words.size)\n     \
    \   else if (words.length == 1) Right(words.size)\n        else {\n          \
    \  val wordList = words.toList\n            val wordListWithSpace = wordList.map(word\
    \ => if (word.contains(\" \")) {\n                val wordWithSpace = word.split(\"\
    \ \")\n                wordWithSpace(0)\n            } else {\n              \
    \  word\n            })\n            val wordListWithComma = wordList.map(word\
    \ => if (word.contains(\",\")) {\n                val wordWithComma = word.split(\"\
    ,\")\n                wordWithComma(0)\n            } else {\n               \
    \ word\n            })\n            val wordListWithLetters = wordList.map(word\
    \ => if (word.contains(\" \") || word.contains(\",\")) {\n                val\
    \ wordWithLetters = word.split(\"\")\n                wordWithLetters.count(_\
    \ % 2 == 1)\n            } else {\n                word\n            })\n    \
    \        val wordListWithLettersOdd = wordList.map(word => if (word.contains(\"\
    \ \") || word.contains(\",\")) {\n                val wordWithLettersOdd = word.split(\"\
    \")\n                wordWithLettersOdd.count(_ % 2 == 1)\n            } else\
    \ {\n                word\n            })\n            val wordListWithLettersEven\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\")) {\n\
    \                val wordWithLettersEven = word.split(\"\")\n                wordWithLettersEven.count(_\
    \ % 2 == 0)\n            } else {\n                word\n            })\n    \
    \        val wordListWithLettersOddAndEven = wordList.map(word => if (word.contains(\"\
    \ \") || word.contains(\",\")) {\n                val wordWithLettersOddAndEven\
    \ = word.split(\"\")\n                wordWithLettersOddAndEven.count(_ % 2 ==\
    \ 0) && wordWithLettersOddAndEven.count(_ % 2 == 1)\n            } else {\n  \
    \              word\n            })\n            val wordListWithLettersOddAndEvenAndOdd\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\")) {\n\
    \                val wordWithLettersOddAndEvenAndOdd = word.split(\"\")\n    \
    \            wordWithLettersOddAndEvenAndOdd.count(_ % 2 == 0) && wordWithLettersOddAndEvenAndOdd.count(_\
    \ % 2 == 1) && wordWithLettersOddAndEvenAndOdd.count(_ % 2 == 2)\n           \
    \ } else {\n                word\n            })\n            val wordListWithLettersOddAndEvenAndOddAndEven\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo5lbg7vu.scala:62:122 ----------------------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m            \e[33mval\e[0m \e[36mwordListWithLettersOddAndEvenAndOddAndEven\e\
    [0m = wordList.map(\e[36mword\e[0m => \e[33mif\e[0m (word.contains(\e[31m\" \"\
    \e[0m) || word.contains(\",\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpo5lbg7vu.scala:64:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m64 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5lbg7vu.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5lbg7vu.scala:34:40\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                wordWithLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5lbg7vu.scala:40:43\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                wordWithLettersOdd.count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val evenWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isUpper))\n\
    \            val evenWordsCount = evenWords.filter(word => word.forall(_.isLetter)).size\n\
    \            val oddWordsCount = oddWords.filter(word => word.forall(_.isLetter)).size\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountIn\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuggk_6_.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuggk_6_.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiuggk_6_.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e[0m = evenWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiuggk_6_.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiuggk_6_.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiuggk_6_.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(w => w.length == w.toLowerCase * 2).map(w =>\
    \ w.toLowerCase * 2)\n            val odd = words.filter(w => w.length == w.toLowerCase\
    \ * 2 + 1).map(w => w.toLowerCase * 2 + 1)\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 1)\n            val\
    \ count = evenCount + oddCount\n            Right(count)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp576sc_fe.scala:19:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase * \e[31m2\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ * \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp576sc_fe.scala:20:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e[36mw\e[0m => w.length ==\
    \ w.toLowerCase * \e[31m2\e[0m + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ * \e[31m2\e[0m + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \      Values of types Int and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp576sc_fe.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp576sc_fe.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.length % 2 == 0)\n            val odd = words.filter(word\
    \ => word.length % 2 != 0)\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            val evenLetters\
    \ = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n            val\
    \ oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n  \
    \          val evenOrder = evenLetters / (evenLetters + oddLetters)\n        \
    \    val oddOrder = oddLetters / (evenLetters + oddLetters)\n            val evenOrderInt\
    \ = evenOrder.toInt\n            val oddOrderInt = oddOrder.toInt\n          \
    \  if (evenOrderInt % 2 == 0) Right(evenOrder)\n            else if (oddOrderInt\
    \ % 2 == 0) Left(odd)\n            else Left(even)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfu3ich8r.scala:23:63 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfu3ich8r.scala:24:61\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu3ich8r.scala:30:48\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddOrderInt % \e[31m2\e[0m == \e[31m0\e[0m) Left(odd)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    (odd : Array[String])\n\e\
    [31m   |\e[0m                                         Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu3ich8r.scala:31:22\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33melse\e[0m Left(even)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              Found:    (even : Array[String])\n\e[31m   |\e[0m             \
    \         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.length % 2 == 0).map(word => word.substring(0,word.length/2))\n\
    \            val odd = words.filter(word => word.length % 2 == 1).map(word =>\
    \ word.substring(0,word.length/2))\n            val evenCount = even.map(word\
    \ => word.split(\"\\\\W+\").length).sum\n            val oddCount = odd.map(word\
    \ => word.split(\"\\\\W+\").length).sum\n            val evenOrder = even.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val oddOrder =\
    \ odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val\
    \ evenLetters = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLetters = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersCount = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLettersCount = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrder = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLettersOrder = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.split(\"\\\\W+\"\
    ).map(_.length).sum).sum\n            val oddLettersOrderCount = odd.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val evenLettersOrderCount\
    \ = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n         \
    \   val oddLettersOrderCount = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.split(\"\\\\W+\"\
    ).map(_.length).sum).sum\n            val oddLettersOrderCount = odd.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val evenLettersOrderCount\
    \ = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n         \
    \   val oddLettersOrderCount = odd.map(word => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpin64_69m.scala:38:54 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36moddLettersOrderCount\e\
    [0m = odd.map(\e[36mword\e[0m => \n\e[31m\e[31m   |\e[0m                     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpin64_69m.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpin64_69m.scala:33:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersOrderCount\e[0m = even.map(\e[36mword\e[0m => word.split(\e\
    [31m\"\\\\W+\"\e[0m).map(_.length).sum).sum\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersOrderCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpin64_69m.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36moddLettersOrderCount\e\
    [0m = odd.map(\e[36mword\e[0m => word.split(\e[31m\"\\\\W+\"\e[0m).map(_.length).sum).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersOrderCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpin64_69m.scala:35:16 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mevenLettersOrderCount\e\
    [0m = even.map(\e[36mword\e[0m => word.split(\e[31m\"\\\\W+\"\e[0m).map(_.length).sum)"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOdd = numLetters % 2\n        val numLettersEven\
    \ = numLetters - numLettersOdd\n        val numLettersEvenOdd = numLettersEven\
    \ % 2\n        val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n \
    \       val numLettersOddOdd = numLettersOdd - numLettersEvenOdd\n        val\
    \ numLettersOddEven = numLettersOdd - numLettersEvenEven\n        val numLettersEvenEvenOdd\
    \ = numLettersEvenEven - numLettersOddOdd\n        val numLettersEvenOddOdd =\
    \ numLettersEvenOdd - numLettersOddEven\n        val numLettersOddEvenOdd = numLettersOddEven\
    \ - numLettersEvenEvenOdd\n        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd\
    \ - numLettersOddOdd\n        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n\
    \        val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOddOdd\e[0m\
    \ = numLettersEvenOdd - numLettersOddEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOddOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersEvenOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddEvenOdd\e[0m\
    \ = numLettersOddEven - numLettersEvenEvenOdd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersOddEvenOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersOddEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenEvenEvenOdd\e\
    [0m = numLettersEvenEvenOdd - numLettersOddOdd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenEvenEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumLettersEvenEvenEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOddOdd\e[0m\
    \ = numLettersEvenOdd - numLettersOddEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOddOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersEvenOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95veqkx3.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else Left(words.tail.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkubh0fzt.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words.tail.map(_.length).sum)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Int\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n        val\
    \ wordCount = words.map(_.length).sum\n        val lowerCaseWordsCount = words.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase\
    \ == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase\
    \ == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase\
    \ == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase\
    \ == \"y\" || _.toLowerCase == \"z\").map(_.length).sum\n        val oddOrderWordsCount\
    \ = words.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase\
    \ == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase\
    \ == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase\
    \ == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\").filter(_.toLowerCase\
    \ != \"a\" && _.toLowerCase != \"b\" && _.toLowerCase != \"c\" && _.toLowerCase\
    \ != \"d\" && _.toLowerCase != \"e\" && _.toLowerCase != \"f\" && _.toLowerCase\
    \ != \"g\" && _.toLowerCase != \"h\" && _.toLowerCase != \"i\" && _.toLowerCase\
    \ != \"j\" && \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8hmpa_xt.scala:20:914 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddOrderWordsCount\e[0m\
    \ = words.filter(_.toLowerCase == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"\
    b\"\e[0m || _.toLowerCase == \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e\
    [0m || _.toLowerCase == \e[31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m\
    \ || _.toLowerCase == \e[31m\"g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"i\"\e[0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase\
    \ == \e[31m\"k\"\e[0m || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"m\"\e[0m || _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase == \e\
    [31m\"o\"\e[0m || _.toLowerCase == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"\
    q\"\e[0m || _.toLowerCase == \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e\
    [0m || _.toLowerCase == \e[31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m\
    \ || _.toLowerCase == \e[31m\"v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"x\"\e[0m || _.toLowerCase == \e[31m\"y\"\e[0m || _.toLowerCase\
    \ == \e[31m\"z\"\e[0m).filter(_.toLowerCase != \e[31m\"a\"\e[0m && _.toLowerCase\
    \ != \e[31m\"b\"\e[0m && _.toLowerCase != \e[31m\"c\"\e[0m && _.toLowerCase !=\
    \ \e[31m\"d\"\e[0m && _.toLowerCase != \e[31m\"e\"\e[0m && _.toLowerCase != \e\
    [31m\"f\"\e[0m && _.toLowerCase != \e[31m\"g\"\e[0m && _.toLowerCase != \e[31m\"\
    h\"\e[0m && _.toLowerCase != \e[31m\"i\"\e[0m && _.toLowerCase != \e[31m\"j\"\e\
    [0m && \n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     "
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOdd = numLetters % 2\n        val numLettersEven\
    \ = numLetters - numLettersOdd\n        val numLettersEvenOdd = numLettersEven\
    \ % 2\n        val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n \
    \       val numLettersOddEven = numLettersOdd - numLettersEvenOdd\n        val\
    \ numLettersOddOdd = numLettersOdd - numLettersOddEven\n        val numLettersEvenEvenOdd\
    \ = numLettersEvenEven - numLettersEvenOdd\n        val numLettersEvenOddOdd =\
    \ numLettersEvenOdd - numLettersOddOdd\n        val numLettersOddEvenOdd = numLettersOddEven\
    \ - numLettersEvenOdd\n        val numLettersOddOddEven = numLettersOddOdd - numLettersEvenOdd\n\
    \        val numLettersEvenEvenOddOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOddEven = numLettersEvenOddOdd - numLettersEvenEvenOdd\n\
    \        val numLettersOddEvenOddOdd = numLettersOddEvenOdd - numLettersOddOddEven\n\
    \        val numLettersOddOddEvenOddEven = numLettersOddOddEvenOdd - numLettersEvenOddOdd\n\
    \        val numLettersEvenEvenOddOddOddEven = numLettersEvenEvenOddOddEven -\
    \ numLettersOddOddOddEven\n        val numLettersEvenOddOddOddEvenOdd = numLettersEvenOddOddEvenOdd\
    \ - numLettersEvenOddOddOddEven\n        val numLettersOddEvenOddOddEvenOddEven\
    \ = numLettersOddEvenOddOddEvenOddEven - numLettersEvenOddOddOddOddEvenOdd\n \
    \       val numLettersEvenEvenOddOddOddEvenOddOdd = numLettersEvenEvenOddOddO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodrkmv6m.scala:31:42 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOddEvenOddEven\e\
    [0m = numLettersOddOddEvenOdd - numLettersEvenOddOdd\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: numLettersOddOddEvenOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodrkmv6m.scala:32:46\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenEvenOddOddOddEven\e[0m = numLettersEvenEvenOddOddEven - numLettersOddOddOddEven\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: numLettersEvenEvenOddOddEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodrkmv6m.scala:33:45\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOddOddOddEvenOdd\e[0m = numLettersEvenOddOddEvenOdd - numLettersEvenOddOddOddEven\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: numLettersEvenOddOddEvenOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpodrkmv6m.scala:34:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersOddEvenOddOddEvenOddEven\e[0m = numLettersOddEvenOddOddEvenOddEven\
    \ - numLettersEvenOddOddOddOddEvenOdd\n\e[31m\e[31m   |\e[0m                 \
    \                                ^\e[0m\n\e[31m   |\e[0m           Recursive \e\
    [33mvalue\e[0m \e[35mnumLettersOddEvenOddOddEvenOddEven\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodr"
  stdout: ''
  timestamp: 1659800547
