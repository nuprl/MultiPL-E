language: scala
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51k7eki.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.map(_.toLowerCase).map(_.length).filter(x\
    \ => x % 2 == 1).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e5039tl.scala:21)\n\tat Problem.main(tmp5e5039tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ noWhitespaceWords = words.filter(!_.contains(\"\\\\s\"))\n        val noLetterWords\
    \ = words.filter(!_.contains(\"[a-z]\"))\n        val noLetterWordsOddOrder =\
    \ words.filter(!_.contains(\"[a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 != 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpephb89z2.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpephb89z2.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsEvenOrder\e[0m = words.filter(!_.contains(\e\
    [31m\"[a-z]\"\e[0m) || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLetterWordsEvenOrder is already defined as \e[33mvalue\e\
    [0m \e[35mnoLetterWordsEvenOrder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpephb89z2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsEvenOrder\e\
    [0m = words.filter(!_.contains(\e[31m\"[a-z]\"\e[0m) || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLetterWordsEvenOrder is already defined as \e[33mvalue\e\
    [0m \e[35mnoLetterWordsEvenOrder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpephb89z2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsEvenOrder\e\
    [0m = words.filter(!_.contains(\e[31m\"[a-z]\"\e[0m) || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evens = words.filter(_.toLowerCase == \"even\")\n            val odds = words.filter(_.toLowerCase\
    \ == \"odd\")\n            val evensCount = evens.count(_ % 2 == 0)\n        \
    \    val oddsCount = odds.count(_ % 2 == 0)\n            val evensOddsCount =\
    \ evensCount + oddsCount\n            val evensOddsCountInt = evensOddsCount.toInt\n\
    \            val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbewiy38j.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbewiy38j.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbewiy38j.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e[0m = evensOddsCountInt\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevensOddsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbewiy38j.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e\
    [0m = evensOddsCountInt + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevensOddsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbewiy38j.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e\
    [0m = evensOddsCountInt + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevensOddsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbewiy38j.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountInt\e\
    [0m = evensOddsCountInt + \e[31m1\e[0m\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numOfWords = words.length\n        val\
    \ numOfLetters = txt.length.toString.toInt\n        val numOfLettersOddOrder =\
    \ numOfLetters.toString.toInt.filter(_ % 2 != 0).length\n        val numOfLettersEvenOrder\
    \ = numOfLetters.toString.toInt.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderOdd\
    \ = numOfLettersEvenOrder.filter(_ % 2 != 0).length\n        val numOfLettersEvenOrderEven\
    \ = numOfLettersEvenOrder.filter(_ % 2 == 0).length\n        val numOfLettersOddOrderOdd\
    \ = numOfLettersOddOrder.filter(_ % 2 != 0).length\n        val numOfLettersOddOrderEven\
    \ = numOfLettersOddOrder.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 != 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd\
    \ = numOfLettersEvenOrderEven.filter(_ % 2 == 0).length\n        val numOf\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3f0cy3pn.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumOfLettersEvenOrderEvenOdd\e[0m = numOfLettersEvenOrderEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumOfLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumOfLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumOfLettersEvenOrderEvenOdd\e\
    [0m = numOfLettersEvenOrderEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumOfLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumOfLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumOfLettersEvenOrderEvenOdd\e\
    [0m = numOfLettersEvenOrderEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumOfLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumOfLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3f0cy3pn.scala:28:12 ---------"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    ,\").filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).length\n\
    \        val oddLetters = letters.filter(_ % 2 != 0).length\n        val result\
    \ = if (words.length == commaWords.length) Right(words.length) else Left(commaWords.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzax3mrxu.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzax3mrxu.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Either[Int,\
    \ Int])\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ evenWords = words.filter(word => word.forall(_.isDigit) && word.forall(_.isLower))\n\
    \        val oddWords = words.filter(word => word.forall(_.isDigit) && word.forall(_.isLower)\
    \ && word.forall(!_.isDigit))\n        val evenLetters = evenWords.filter(word\
    \ => word.forall(_.isLetter))\n        val oddLetters = oddWords.filter(word =>\
    \ word.forall(_.isLetter))\n        val evenLettersCount = evenLetters.map(word\
    \ => word.length).sum\n        val oddLettersCount = oddLetters.map(word => word.length).sum\n\
    \        val evenLettersCountInWords = evenLetters.map(word => word.length).foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWords = oddLetters.map(word => word.length).foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSum = evenLettersCountInWords.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSum = oddLettersCountInWords.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWords = evenLettersCountInWordsSum.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSumInWords = oddLettersCountInWordsSum.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWordsSum = evenLettersCountInWordsSumInWords.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSumInWordsSum = oddLettersCountInWordsSumInWords.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWordsSumInWords = evenLettersCountInWordsSumInWordsSum.foldLeft(0)(_\
    \ + _)\n        val oddLettersCountInWordsSumInWordsSumInWords = oddLettersCountInWordsSumInWordsSum.foldLeft(0)(_\
    \ + _)\n        val evenLettersCountInWordsSumInWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6m98zrmw.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m98zrmw.scala:26:65\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mevenLettersCountInWordsSum\e[0m = evenLettersCountInWords.foldLeft(\e[31m0\e\
    [0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value foldLeft is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m98zrmw.scala:27:63\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36moddLettersCountInWordsSum\e[0m = oddLettersCountInWords.foldLeft(\e[31m0\e\
    [0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value foldLeft is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6m98zrmw.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evenWords = words.filter(word => word.forall(c => c.isLetter) && c.toLower ==\
    \ \"a\")\n            val oddWords = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower == \"b\")\n            val evenLetters = evenWords.map(word =>\
    \ word.map(c => c.toLower).filter(c => c.toLower == \"a\").length)\n         \
    \   val oddLetters = oddWords.map(word => word.map(c => c.toLower).filter(c =>\
    \ c.toLower == \"b\").length)\n            val evenLettersCount = evenLetters.reduce((a,\
    \ b) => a + b)\n            val oddLettersCount = oddLetters.reduce((a, b) =>\
    \ a + b)\n            val evenLettersCountInt = evenLettersCount.toInt\n     \
    \       val oddLettersCountInt = oddLettersCount.toInt\n            if (evenLettersCountInt\
    \ == oddLettersCountInt) Right(evenLettersCountInt)\n            else Left(oddLettersCountInt)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvsodj1s.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m\"\
    a\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                           Not found: c\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvsodj1s.scala:20:80 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m\"\
    b\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                          Not found: c\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpdvsodj1s.scala:21:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toLower).filter(\e[36mc\e[0m => c.toLower\
    \ == \e[31m\"a\"\e[0m).length)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpdvsodj1s.scala:22:87 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toLower).filter(\e[36mc\e[0m => c.toLower\
    \ == \e[31m\"b\"\e[0m).length)\n\e[31m\e[31m   |\e[0m                        \
    \                                                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == "
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51k7eki.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Right(words.size)\n     \
    \   else if (words.length == 1) Right(words.size)\n        else {\n          \
    \  val wordList = words.toList\n            val wordListWithSpace = wordList.map(word\
    \ => if (word.contains(\" \")) {\n                val wordWithSpace = word.split(\"\
    \ \")\n                wordWithSpace(0)\n            } else {\n              \
    \  word\n            })\n            val wordListWithComma = wordList.map(word\
    \ => if (word.contains(\",\")) {\n                val wordWithComma = word.split(\"\
    ,\")\n                wordWithComma(0)\n            } else {\n               \
    \ word\n            })\n            val wordListWithLetters = wordList.map(word\
    \ => if (word.contains(\" \") || word.contains(\",\")) {\n                val\
    \ wordWithLetters = word.split(\"\")\n                wordWithLetters.count(_\
    \ % 2 == 1)\n            } else {\n                word\n            })\n    \
    \        val wordListWithLettersOdd = wordList.map(word => if (word.contains(\"\
    \ \") || word.contains(\",\")) {\n                val wordWithLettersOdd = word.split(\"\
    \")\n                wordWithLettersOdd.count(_ % 2 == 1)\n            } else\
    \ {\n                word\n            })\n            val wordListWithLettersEven\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\")) {\n\
    \                val wordWithLettersEven = word.split(\"\")\n                wordWithLettersEven.count(_\
    \ % 2 == 0)\n            } else {\n                word\n            })\n    \
    \        val wordListWithLettersOddAndEven = wordList.map(word => if (word.contains(\"\
    \ \") || word.contains(\",\")) {\n                val wordWithLettersOddAndEven\
    \ = word.split(\"\")\n                wordWithLettersOddAndEven.count(_ % 2 ==\
    \ 0) && wordWithLettersOddAndEven.count(_ % 2 == 1)\n            } else {\n  \
    \              word\n            })\n            val wordListWithLettersOddAndEvenAndOdd\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\")) {\n\
    \                val wordWithLettersOddAndEvenAndOdd = word.split(\"\")\n    \
    \            wordWithLettersOddAndEvenAndOdd.count(_ % 2 == 0) && wordWithLettersOddAndEvenAndOdd.count(_\
    \ % 2 == 1) && wordWithLettersOddAndEvenAndOdd.count(_ % 2 == 2)\n           \
    \ } else {\n                word\n            })\n            val wordListWithLettersOddAndEvenAndOddAndEven\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo5lbg7vu.scala:62:122 ----------------------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m            \e[33mval\e[0m \e[36mwordListWithLettersOddAndEvenAndOddAndEven\e\
    [0m = wordList.map(\e[36mword\e[0m => \e[33mif\e[0m (word.contains(\e[31m\" \"\
    \e[0m) || word.contains(\",\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpo5lbg7vu.scala:64:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m64 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5lbg7vu.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5lbg7vu.scala:34:40\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                wordWithLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5lbg7vu.scala:40:43\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                wordWithLettersOdd.count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val evenWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isUpper))\n\
    \            val evenWordsCount = evenWords.filter(word => word.forall(_.isLetter)).size\n\
    \            val oddWordsCount = oddWords.filter(word => word.forall(_.isLetter)).size\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountIn\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuggk_6_.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiuggk_6_.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiuggk_6_.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e[0m = evenWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiuggk_6_.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiuggk_6_.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiuggk_6_.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(w => w.length == w.toLowerCase * 2).map(w =>\
    \ w.toLowerCase * 2)\n            val odd = words.filter(w => w.length == w.toLowerCase\
    \ * 2 + 1).map(w => w.toLowerCase * 2 + 1)\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 1)\n            val\
    \ count = evenCount + oddCount\n            Right(count)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp576sc_fe.scala:19:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase * \e[31m2\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ * \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp576sc_fe.scala:20:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e[36mw\e[0m => w.length ==\
    \ w.toLowerCase * \e[31m2\e[0m + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ * \e[31m2\e[0m + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \      Values of types Int and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp576sc_fe.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp576sc_fe.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.length % 2 == 0)\n            val odd = words.filter(word\
    \ => word.length % 2 != 0)\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            val evenLetters\
    \ = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n            val\
    \ oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n  \
    \          val evenOrder = evenLetters / (evenLetters + oddLetters)\n        \
    \    val oddOrder = oddLetters / (evenLetters + oddLetters)\n            val evenOrderInt\
    \ = evenOrder.toInt\n            val oddOrderInt = oddOrder.toInt\n          \
    \  if (evenOrderInt % 2 == 0) Right(evenOrder)\n            else if (oddOrderInt\
    \ % 2 == 0) Left(odd)\n            else Left(even)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfu3ich8r.scala:23:63 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfu3ich8r.scala:24:61\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu3ich8r.scala:30:48\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddOrderInt % \e[31m2\e[0m == \e[31m0\e[0m) Left(odd)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    (odd : Array[String])\n\e\
    [31m   |\e[0m                                         Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu3ich8r.scala:31:22\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33melse\e[0m Left(even)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              Found:    (even : Array[String])\n\e[31m   |\e[0m             \
    \         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.length % 2 == 0).map(word => word.substring(0,word.length/2))\n\
    \            val odd = words.filter(word => word.length % 2 == 1).map(word =>\
    \ word.substring(0,word.length/2))\n            val evenCount = even.map(word\
    \ => word.split(\"\\\\W+\").length).sum\n            val oddCount = odd.map(word\
    \ => word.split(\"\\\\W+\").length).sum\n            val evenOrder = even.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val oddOrder =\
    \ odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val\
    \ evenLetters = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLetters = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersCount = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLettersCount = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrder = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLettersOrder = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.split(\"\\\\W+\"\
    ).map(_.length).sum).sum\n            val oddLettersOrderCount = odd.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val evenLettersOrderCount\
    \ = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n         \
    \   val oddLettersOrderCount = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.split(\"\\\\W+\"\
    ).map(_.length).sum).sum\n            val oddLettersOrderCount = odd.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val evenLettersOrderCount\
    \ = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n         \
    \   val oddLettersOrderCount = odd.map(word => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpin64_69m.scala:38:54 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36moddLettersOrderCount\e\
    [0m = odd.map(\e[36mword\e[0m => \n\e[31m\e[31m   |\e[0m                     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpin64_69m.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpin64_69m.scala:33:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersOrderCount\e[0m = even.map(\e[36mword\e[0m => word.split(\e\
    [31m\"\\\\W+\"\e[0m).map(_.length).sum).sum\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersOrderCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpin64_69m.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36moddLettersOrderCount\e\
    [0m = odd.map(\e[36mword\e[0m => word.split(\e[31m\"\\\\W+\"\e[0m).map(_.length).sum).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersOrderCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersOrderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpin64_69m.scala:35:16 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mevenLettersOrderCount\e\
    [0m = even.map(\e[36mword\e[0m => word.split(\e[31m\"\\\\W+\"\e[0m).map(_.length).sum)"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOdd = numLetters % 2\n        val numLettersEven\
    \ = numLetters - numLettersOdd\n        val numLettersEvenOdd = numLettersEven\
    \ % 2\n        val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n \
    \       val numLettersOddOdd = numLettersOdd - numLettersEvenOdd\n        val\
    \ numLettersOddEven = numLettersOdd - numLettersEvenEven\n        val numLettersEvenEvenOdd\
    \ = numLettersEvenEven - numLettersOddOdd\n        val numLettersEvenOddOdd =\
    \ numLettersEvenOdd - numLettersOddEven\n        val numLettersOddEvenOdd = numLettersOddEven\
    \ - numLettersEvenEvenOdd\n        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd\
    \ - numLettersOddOdd\n        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n\
    \        val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOddOdd\e[0m\
    \ = numLettersEvenOdd - numLettersOddEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOddOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersEvenOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddEvenOdd\e[0m\
    \ = numLettersOddEven - numLettersEvenEvenOdd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersOddEvenOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersOddEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenEvenEvenOdd\e\
    [0m = numLettersEvenEvenOdd - numLettersOddOdd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenEvenEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumLettersEvenEvenEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcchnc04g.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOddOdd\e[0m\
    \ = numLettersEvenOdd - numLettersOddEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOddOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersEvenOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95veqkx3.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else Left(words.tail.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkubh0fzt.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words.tail.map(_.length).sum)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Int\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n        val\
    \ wordCount = words.map(_.length).sum\n        val lowerCaseWordsCount = words.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase\
    \ == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase\
    \ == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase\
    \ == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase\
    \ == \"y\" || _.toLowerCase == \"z\").map(_.length).sum\n        val oddOrderWordsCount\
    \ = words.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase\
    \ == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase\
    \ == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase\
    \ == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\").filter(_.toLowerCase\
    \ != \"a\" && _.toLowerCase != \"b\" && _.toLowerCase != \"c\" && _.toLowerCase\
    \ != \"d\" && _.toLowerCase != \"e\" && _.toLowerCase != \"f\" && _.toLowerCase\
    \ != \"g\" && _.toLowerCase != \"h\" && _.toLowerCase != \"i\" && _.toLowerCase\
    \ != \"j\" && \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8hmpa_xt.scala:20:914 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddOrderWordsCount\e[0m\
    \ = words.filter(_.toLowerCase == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"\
    b\"\e[0m || _.toLowerCase == \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e\
    [0m || _.toLowerCase == \e[31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m\
    \ || _.toLowerCase == \e[31m\"g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"i\"\e[0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase\
    \ == \e[31m\"k\"\e[0m || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"m\"\e[0m || _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase == \e\
    [31m\"o\"\e[0m || _.toLowerCase == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"\
    q\"\e[0m || _.toLowerCase == \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e\
    [0m || _.toLowerCase == \e[31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m\
    \ || _.toLowerCase == \e[31m\"v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"x\"\e[0m || _.toLowerCase == \e[31m\"y\"\e[0m || _.toLowerCase\
    \ == \e[31m\"z\"\e[0m).filter(_.toLowerCase != \e[31m\"a\"\e[0m && _.toLowerCase\
    \ != \e[31m\"b\"\e[0m && _.toLowerCase != \e[31m\"c\"\e[0m && _.toLowerCase !=\
    \ \e[31m\"d\"\e[0m && _.toLowerCase != \e[31m\"e\"\e[0m && _.toLowerCase != \e\
    [31m\"f\"\e[0m && _.toLowerCase != \e[31m\"g\"\e[0m && _.toLowerCase != \e[31m\"\
    h\"\e[0m && _.toLowerCase != \e[31m\"i\"\e[0m && _.toLowerCase != \e[31m\"j\"\e\
    [0m && \n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     "
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOdd = numLetters % 2\n        val numLettersEven\
    \ = numLetters - numLettersOdd\n        val numLettersEvenOdd = numLettersEven\
    \ % 2\n        val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n \
    \       val numLettersOddEven = numLettersOdd - numLettersEvenOdd\n        val\
    \ numLettersOddOdd = numLettersOdd - numLettersOddEven\n        val numLettersEvenEvenOdd\
    \ = numLettersEvenEven - numLettersEvenOdd\n        val numLettersEvenOddOdd =\
    \ numLettersEvenOdd - numLettersOddOdd\n        val numLettersOddEvenOdd = numLettersOddEven\
    \ - numLettersEvenOdd\n        val numLettersOddOddEven = numLettersOddOdd - numLettersEvenOdd\n\
    \        val numLettersEvenEvenOddOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOddEven = numLettersEvenOddOdd - numLettersEvenEvenOdd\n\
    \        val numLettersOddEvenOddOdd = numLettersOddEvenOdd - numLettersOddOddEven\n\
    \        val numLettersOddOddEvenOddEven = numLettersOddOddEvenOdd - numLettersEvenOddOdd\n\
    \        val numLettersEvenEvenOddOddOddEven = numLettersEvenEvenOddOddEven -\
    \ numLettersOddOddOddEven\n        val numLettersEvenOddOddOddEvenOdd = numLettersEvenOddOddEvenOdd\
    \ - numLettersEvenOddOddOddEven\n        val numLettersOddEvenOddOddEvenOddEven\
    \ = numLettersOddEvenOddOddEvenOddEven - numLettersEvenOddOddOddOddEvenOdd\n \
    \       val numLettersEvenEvenOddOddOddEvenOddOdd = numLettersEvenEvenOddOddO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodrkmv6m.scala:31:42 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOddEvenOddEven\e\
    [0m = numLettersOddOddEvenOdd - numLettersEvenOddOdd\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: numLettersOddOddEvenOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodrkmv6m.scala:32:46\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenEvenOddOddOddEven\e[0m = numLettersEvenEvenOddOddEven - numLettersOddOddOddEven\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: numLettersEvenEvenOddOddEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodrkmv6m.scala:33:45\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOddOddOddEvenOdd\e[0m = numLettersEvenOddOddEvenOdd - numLettersEvenOddOddOddEven\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: numLettersEvenOddOddEvenOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpodrkmv6m.scala:34:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersOddEvenOddOddEvenOddEven\e[0m = numLettersOddEvenOddOddEvenOddEven\
    \ - numLettersEvenOddOddOddOddEvenOdd\n\e[31m\e[31m   |\e[0m                 \
    \                                ^\e[0m\n\e[31m   |\e[0m           Recursive \e\
    [33mvalue\e[0m \e[35mnumLettersOddEvenOddOddEvenOddEven\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodr"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List())\n        else\
    \ if (words.size == 1) Right(words.length)\n        else if (words.size == 2)\
    \ Right(List(words(0), words(1)))\n        else if (words.size == 3) Right(List(words(0),\
    \ words(1), words(2)))\n        else if (words.size == 4) Right(List(words(0),\
    \ words(1), words(2), words(3)))\n        else if (words.size == 5) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4)))\n        else if (words.size == 6)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5)))\n  \
    \      else if (words.size == 7) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6)))\n        else if (words.size == 8) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7)))\n   \
    \     else if (words.size == 9) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8)))\n        else if (words.size\
    \ == 10) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9)))\n        else if (words.size == 11)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10)))\n        else if (words.size == 12)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10), words(11)))\n        else if (words.size\
    \ == 13) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9), words(10), words(11), words(12)))\n\
    \        else if (words.size == 14) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8), words(9), words(10), words(11),\
    \ words(12), words(13)))\n        else if (words.size == 15) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7), words(8),\
    \ words(9), words(10), words(11\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv9fr5pya.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv9fr5pya.scala:18:44 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.size == \e[31m2\e[0m) Right(List(words(\e\
    [31m0\e[0m), words(\e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              Found:    List[String]\n\e[31m   |\e[0m       \
    \                                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv9fr5pya.scala:19:44 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m3\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9fr5pya.scala:20:44 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m4\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [31m2\e[0m), words(\e[31m3\e[0m)))\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    List[String]\n\e[31m\
    \   |\e[0m                                        Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9fr5pya.scala:21:44 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e[0"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n    \
    \        val odd = letters.count(_ % 2 == 1)\n            Left(words.take(words.length\
    \ - odd))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppuxq75ph.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmppuxq75ph.scala:19:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                      No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppuxq75ph.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(words.take(words.length\
    \ - odd))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                 Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1rt09a_9.scala:59:13\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m43\e[0m) Right\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            words.foreach(word\
    \ => wordList += word)\n            val evenOrderWords = wordList.filter(word\
    \ => word.forall(c => c.isLetter) && word.forall(c => c.isLower) && word.forall(c\
    \ => c.toInt % 2 == 0))\n            val oddOrderWords = wordList.filter(word\
    \ => word.forall(c => c.isLetter) && word.forall(c => c.isLower) && word.forall(c\
    \ => c.toInt % 2 != 0))\n            val evenOrderWordsCount = evenOrderWords.count()\n\
    \            val oddOrderWordsCount = oddOrderWords.count()\n            if (evenOrderWordsCount\
    \ == 0) Right(evenOrderWordsCount)\n            else if (oddOrderWordsCount ==\
    \ 0) Left(oddOrderWordsCount)\n            else Left(evenOrderWordsCount + oddOrderWordsCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jhvtmtc.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val noWhiteSpaceWords = words.filter(_.nonEmpty)\n\
    \        val noCommaWords = words.filter(_.contains(\",\"))\n        val noLettersOddOrder\
    \ = words.filter(_.toLowerCase contains \"a\" ||\n            _.toLowerCase contains\
    \ \"b\" ||\n            _.toLowerCase contains \"c\" ||\n            _.toLowerCase\
    \ contains \"d\" ||\n            _.toLowerCase contains \"e\" ||\n           \
    \ _.toLowerCase contains \"f\" ||\n            _.toLowerCase contains \"g\" ||\n\
    \            _.toLowerCase contains \"h\" ||\n            _.toLowerCase contains\
    \ \"i\" ||\n            _.toLowerCase contains \"j\" ||\n            _.toLowerCase\
    \ contains \"k\" ||\n            _.toLowerCase contains \"l\" ||\n           \
    \ _.toLowerCase contains \"m\" ||\n            _.toLowerCase contains \"n\" ||\n\
    \            _.toLowerCase contains \"o\" ||\n            _.toLowerCase contains\
    \ \"p\" ||\n            _.toLowerCase contains \"q\" ||\n            _.toLowerCase\
    \ contains \"r\" ||\n            _.toLowerCase contains \"s\" ||\n           \
    \ _.toLowerCase contains \"t\" ||\n            _.toLowerCase contains \"u\" ||\n\
    \            _.toLowerCase contains \"v\" ||\n            _.toLowerCase contains\
    \ \"w\" ||\n            _.toLowerCase contains \"x\" ||\n            _.toLowerCase\
    \ contains \"y\" ||\n            _.toLowerCase contains \"z\")\n        val noLettersEvenOrder\
    \ = words.filter(_.toLowerCase contains \"a\" ||\n            _.toLowerCase contains\
    \ \"b\" ||\n            _.toLowerCase contains \"c\" ||\n            _.toLowerCase\
    \ contains \"d\" ||\n            _.toLowerCase contains \"e\" ||\n           \
    \ _.toLowerCase contains \"f\" ||\n            _.toLowerCase contains \"g\" ||\n\
    \            _.toLowerCase contains \"h\" ||\n            _.toLowerCase contains\
    \ \"i\" ||\n            _.toLowerCase contains \"j\" ||\n            _.toLowerCase\
    \ contains \"k\" ||\n            _.toLowerCase contains \"l\" ||\n           \
    \ _.toLowerCase contains \"m\" ||\n            _.toLowerCase contains \"n\" ||\n\
    \            _.toLowerCase contains \"o\" ||\n            _.toLowerCase contains\
    \ \"p\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9c8c7gxy.scala:59:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m            _.toLowerCase contains \"p\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp9c8c7gxy.scala:61:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp9c8c7gxy.scala:18:45 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOddOrder\e[0m =\
    \ words.filter(_.toLowerCase contains \e[31m\"a\"\e[0m ||\n\e[31m\e[31m   |\e\
    [0m                                             ^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m19\
    \ |\e[0m            _.toLowerCase contains \e[31m\"b\"\e[0m ||\n\e[31m20 |\e[0m\
    \            _.toLowerCase contains \e[31m\"c\"\e[0m ||\n\e[31m21 |\e[0m     \
    \       _.toLowerCase contains \e[31m\"d\"\e[0m ||\n\e[31m22 |\e[0m          \
    \  _.toLowerCase contains \e[31m\"e\"\e[0m ||\n\e[31m23 |\e[0m            _.toLowerCase\
    \ contains \e[31m\"f\"\e[0m ||\n\e[31m24 |\e[0m            _.toLowerCase contains\
    \ \e[31m\"g\"\e[0m ||\n\e[31m25 |\e[0m            _.toLowerCase contains \e[31m\"\
    h\"\e[0m ||\n\e[31m26 |\e[0m            _.toLowerCase contains \e[31m\"i\"\e[0m\
    \ ||\n\e[31m27 |\e[0m            _.toLowerCase contains \e[31m\"j\"\e[0m ||\n\e\
    [31m28 |\e[0m            _.toLowerCase contains \e[31m\"k\"\e[0m ||\n\e[31m29\
    \ |\e[0m            _.toLowerCase contains \e[31m\"l\"\e[0m ||\n\e[31m30 |\e[0m\
    \            _.toLowerCase contains \e[31m\"m\"\e[0m ||\n\e[31m31 |\e[0m     \
    \       _.toLowerCase contains \e[31m\"n\"\e[0m ||\n\e[31m32 |\e[0m          \
    \  _.toLowerCase contains \e[31m\"o\"\e[0m ||\n\e[31m33 |\e[0m            _.toLowerCase\
    \ contains \e[31m\"p\"\e[0m ||\n\e[31m34 |\e[0m            _.toLowerCase contains\
    \ \e[31m\"q\"\e[0m ||\n\e[31m35 |\e[0m            _.toLowerC"
  stdout: ''
  timestamp: 1660028997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = txt.filter(_.isLetter)\n            val odd = letters.filter(_.toString.toLowerCase\
    \ == \"a\" ||\n                _.toString.toLowerCase == \"b\" ||\n          \
    \      _.toString.toLowerCase == \"c\" ||\n                _.toString.toLowerCase\
    \ == \"d\" ||\n                _.toString.toLowerCase == \"e\" ||\n          \
    \      _.toString.toLowerCase == \"f\" ||\n                _.toString.toLowerCase\
    \ == \"g\" ||\n                _.toString.toLowerCase == \"h\" ||\n          \
    \      _.toString.toLowerCase == \"i\" ||\n                _.toString.toLowerCase\
    \ == \"j\" ||\n                _.toString.toLowerCase == \"k\" ||\n          \
    \      _.toString.toLowerCase == \"l\" ||\n                _.toString.toLowerCase\
    \ == \"m\" ||\n                _.toString.toLowerCase == \"n\" ||\n          \
    \      _.toString.toLowerCase == \"o\" ||\n                _.toString.toLowerCase\
    \ == \"p\" ||\n                _.toString.toLowerCase == \"q\" ||\n          \
    \      _.toString.toLowerCase == \"r\" ||\n                _.toString.toLowerCase\
    \ == \"s\" ||\n                _.toString.toLowerCase == \"t\" ||\n          \
    \      _.toString.toLowerCase == \"u\" ||\n                _.toString.toLowerCase\
    \ == \"v\" ||\n                _.toString.toLowerCase == \"w\" ||\n          \
    \      _.toString.toLowerCase == \"x\" ||\n                _.toString.toLowerCase\
    \ == \"y\" ||\n                _.toString.toLowerCase == \"z\").length\n     \
    \       Right(odd)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpsy8qpn4m.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = letters.filter(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m ||\n\e[31m\e[31m   |\e[0m                              \
    \       ^\e[0m\n\e[31m   |\e[0m                                 Wrong number of\
    \ parameters, expected: 1\n\e[31m21 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"b\"\e[0m ||\n\e[31m22 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"c\"\e[0m ||\n\e[31m23 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"d\"\e[0m ||\n\e[31m24 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"e\"\e[0m ||\n\e[31m25 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"f\"\e[0m ||\n\e[31m26 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m ||\n\e[31m27 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"h\"\e[0m ||\n\e[31m28 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"i\"\e[0m ||\n\e[31m29 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"j\"\e[0m ||\n\e[31m30 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"k\"\e[0m ||\n\e[31m31 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"l\"\e[0m ||\n\e[31m32 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"m\"\e[0m ||\n\e[31m33 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"n\"\e[0m ||\n\e[31m34 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"o\"\e[0m ||\n\e[31m35 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"p\"\e[0m ||\n\e[31m36 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"q\"\e[0m ||\n\e[31m37 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"r\"\e[0m ||\n\e[31m38 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"s\"\e[0m ||\n\e[31m39 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"t\"\e[0m ||\n\e[31m40 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"u\"\e[0m ||\n\e[31m41 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"v\"\e[0m ||\n\e[31m42 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"w\"\e[0m ||\n\e[31m43 |\e[0m                _.toString.toLowerCase\
    \ == \e[31m\"x\"\e[0m ||\n\e[31m44 |\e[0m                _.toString.toLowerCase\
    \ == \e[31"
  stdout: ''
  timestamp: 1660028994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhitespaces = words.filter(_.nonEmpty)\n\
    \        val noCommas = noWhitespaces.filter(_.contains(\",\"))\n        val noLetters\
    \ = noCommas.filter(_.forall(_.toLowerCase == 'a') || _.forall(_.toLowerCase ==\
    \ 'b') || _.forall(_.toLowerCase == 'c') || _.forall(_.toLowerCase == 'd') ||\
    \ _.forall(_.toLowerCase == 'e') || _.forall(_.toLowerCase == 'f') || _.forall(_.toLowerCase\
    \ == 'g') || _.forall(_.toLowerCase == 'h') || _.forall(_.toLowerCase == 'i')\
    \ || _.forall(_.toLowerCase == 'j') || _.forall(_.toLowerCase == 'k') || _.forall(_.toLowerCase\
    \ == 'l') || _.forall(_.toLowerCase == 'm') || _.forall(_.toLowerCase == 'n')\
    \ || _.forall(_.toLowerCase == 'o') || _.forall(_.toLowerCase == 'p') || _.forall(_.toLowerCase\
    \ == 'q') || _.forall(_.toLowerCase == 'r') || _.forall(_.toLowerCase == 's')\
    \ || _.forall(_.toLowerCase == 't') || _.forall(_.toLowerCase == 'u') || _.forall(_.toLowerCase\
    \ == 'v') || _.forall(_.toLowerCase == 'w') || _.forall(_.toLowerCase == 'x')\
    \ || _.forall(_.toLowerCase == 'y') || _.forall(_.toLowerCase == 'z'))\n     \
    \   val noLettersOdd = noLetters.filter(_.forall(_.toLowerCase == 'a') || _.forall(_.toLowerCase\
    \ == 'b') || _.forall(_.toLowerCase == 'c') || _.forall(_.toLowerCase == 'd')\
    \ || _.forall(_.toLowerCase == 'e') || _.forall(_.toLowerCase == 'f') || _.forall(_.toLowerCase\
    \ == 'g') || _.forall(_.toLowerCase == 'h') || _.forall(_.toLowerCase == 'i')\
    \ || _.forall(_.toLowerCase == 'j') || _.forall(_.toLowerCase == 'k') || _.forall(_.toLowerCase\
    \ == 'l') || _.forall(_.toLowerCase == 'm') || _.forall(_.toLowerCase == 'n')\
    \ || _.forall(_.toLowerCase == 'o') || _.forall(_.toLowerCase == 'p') || _.forall(_.toLowerCase\
    \ == 'q') || _.forall(_.toLowerCase == 'r') || _.forall(_.toLowerCase == 's')\
    \ || _.forall(\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm0u7_kfm.scala:19:699 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOdd\e[0m = noLetters.filter(_.forall(_.toLowerCase\
    \ == \e[31m'a'\e[0m) || _.forall(_.toLowerCase == \e[31m'b'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'c'\e[0m) || _.forall(_.toLowerCase == \e[31m'd'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'e'\e[0m) || _.forall(_.toLowerCase == \e[31m'f'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'g'\e[0m) || _.forall(_.toLowerCase == \e[31m'h'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'i'\e[0m) || _.forall(_.toLowerCase == \e[31m'j'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'k'\e[0m) || _.forall(_.toLowerCase == \e[31m'l'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'm'\e[0m) || _.forall(_.toLowerCase == \e[31m'n'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'o'\e[0m) || _.forall(_.toLowerCase == \e[31m'p'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'q'\e[0m) || _.forall(_.toLowerCase == \e[31m'r'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m's'\e[0m) || _.forall(\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpm0u7_kfm.scala:18:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoL"
  stdout: ''
  timestamp: 1660028998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ evenWords = words.filter(word => word.forall(c => c.isLetter) && word.count(_\
    \ == 'a') % 2 == 0)\n        val oddWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && word.count(_ == 'a') % 2 != 0)\n        val evenLetters =\
    \ evenWords.map(word => word.count(_ == 'a'))\n        val oddLetters = oddWords.map(word\
    \ => word.count(_ == 'a'))\n        val evenLettersCount = evenLetters.reduce((a,\
    \ b) => a + b)\n        val oddLettersCount = oddLetters.reduce((a, b) => a +\
    \ b)\n        val evenLettersCountEither = evenLetters.reduceLeft(_ + _)\n   \
    \     val oddLettersCountEither = oddLetters.reduceLeft(_ + _)\n        val evenLettersCountEitherRight\
    \ = evenLetters.reduceRight(_ + _)\n        val oddLettersCountEitherRight = oddLetters.reduceRight(_\
    \ + _)\n        val evenLettersCountEitherLeft = evenLetters.reduceLeft(_ + _)\n\
    \        val oddLettersCountEitherLeft = oddLetters.reduceLeft(_ + _)\n      \
    \  val evenLettersCountEitherLeftRight = evenLetters.reduceRight(_ + _)\n    \
    \    val oddLettersCountEitherLeftRight = oddLetters.reduceRight(_ + _)\n    \
    \    val evenLettersCountEitherLeftRightLeft = evenLetters.reduceRight(_ + _)\n\
    \        val oddLettersCountEitherLeftRightLeft = oddLetters.reduceRight(_ + _)\n\
    \        val evenLettersCountEitherLeftRightLeftRight = evenLetters.reduceRight(_\
    \ + _)\n        val oddLettersCountEitherLeftRightLeftRight = oddLetters.reduceRight(_\
    \ + _)\n        val evenLettersCountEitherLeftRightLeftRightLeft = evenLetters.reduceRight(_\
    \ + _)\n        val oddLettersCountEitherLeftRightLeftRightLeft = oddLetters.reduceRight(_\
    \ + _)\n        val evenLettersCountEitherLeftRightLeftRightLeftRight = evenLetters.reduceRight(_\
    \ + _)\n        val oddLettersCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfydrildw.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfydrildw.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(x => x.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(x => x.toLowerCase == \"odd\")\n            val evenSize\
    \ = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            val evenOrder = even.map(_.toChar).map(_.toInt).map(x => x - ord('a'))\
    \ match {\n                case Nil => 0\n                case x => x.sum\n  \
    \          }\n            val oddOrder = odd.map(_.toChar).map(_.toInt).map(x\
    \ => x - ord('a')) match {\n                case Nil => 0\n                case\
    \ x => x.sum\n            }\n            val evenOrderOdd = evenOrder + oddOrder\n\
    \            val evenOrderEven = evenOrder - evenOrderOdd\n            val oddOrderEven\
    \ = oddOrder - evenOrderOdd\n            val evenOrderOddEven = evenOrderEven\
    \ + oddOrderEven\n            val evenOrderEvenOdd = evenOrderEven - evenOrderOdd\n\
    \            val oddOrderEvenOdd = oddOrderEven - evenOrderOdd\n            val\
    \ evenOrderOddEvenOdd = evenOrderOddEven + oddOrderEvenOdd\n            val evenOrderEvenOddOdd\
    \ = evenOrderOddEven - oddOrderEvenOdd\n            val oddOrderEvenOddOdd = oddOrderEvenOdd\
    \ - evenOrderOddEvenOdd\n            val evenOrderOddEvenOddOdd = evenOrderOddEvenOdd\
    \ + oddOrderEvenOddOdd\n            val evenOrderEvenOddOddOdd = evenOrderOddEvenOdd\
    \ - oddOrderEvenOddOdd\n            val oddOrderEvenOddOddOdd = oddOrderEvenOddOdd\
    \ - evenOrderOddEvenOddOdd\n            val evenOrderOddEvenOddOddOdd = evenOrderOddEvenOddOdd\
    \ + oddOrderEvenOddOddOdd\n            val evenOrderEvenOddOddOddOdd = evenOrderOddEvenOddOdd\
    \ - oddOrderEvenOddOddOdd\n            val oddOrderEvenOddOddOddOdd = oddOrderEvenOddOddOdd\
    \ - evenOrderOddEvenO\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe1kzo6em.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe1kzo6em.scala:23:39\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toChar).map(_.toInt).map(\e[36mx\e[0m => x\
    \ - ord(\e[31m'a'\e[0m)) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m           \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpe1kzo6em.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \     \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toChar).map(_.toInt).map(\e\
    [36mx\e[0m => x - ord(\e[31m'a'\e[0m)) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0m     \
    \                                     No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe1kzo6em.scala:27:37\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddOrder\e[0m = odd.map(_.toChar).map(_.toInt).map(\e[36mx\e[0m => x -\
    \ ord(\e[31m'a'\e[0m)) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpe1kzo6em.scala:27:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \     \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(_.toChar).map(_.toInt).map(\e\
    [36mx\e[0m => x - ord(\e[31m'a'\e[0m)) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                            ^\e[0m\n\e[31m   |\e[0m       \
    \                                   No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe1kzo6em.scala:45:67\
    \ ------"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val wordList = words.toList\n        val wordCount\
    \ = wordList.size\n        val lowerCaseCount = wordList.count(x => x.toLowerCase().contains(x.toLowerCase()))\n\
    \        val oddOrderCount = wordList.count(x => x.toString.toLowerCase contains\
    \ x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4dar135w.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dar135w.scala:19:103\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36moddOrderCount\e[0m = wordList.count(\e[36mx\e[0m => x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toLowerCase\
    \ && x.toString.toLowerCase contains x.toString.toLowerCase && x.toString.toLowerCase\
    \ contains x.toString.toLowerCase && x.toString.toLowerCase contains x.toString.toL"
  stdout: ''
  timestamp: 1660028998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.toLowerCase == \"even\")\n            val odd = words.filter(_.toLowerCase\
    \ == \"odd\")\n            val evenCount = even.count(_.toLowerCase == \"a\")\n\
    \            val oddCount = odd.count(_.toLowerCase == \"a\")\n            val\
    \ evenOddCount = evenCount + oddCount\n            val evenOddCountString = evenOddCount.toString\n\
    \            val evenOddCountString = if (evenOddCountString.length < 2) \"0\"\
    \ + evenOddCountString\n            val evenOddCountString = if (evenOddCountString.length\
    \ < 2) \"0\" + evenOddCountString\n            val evenOddCountString = if (evenOddCountString.length\
    \ < 2) \"0\" + evenOddCountString\n            Right(evenOddCountString)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj3awmr05.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountString\e\
    [0m = \e[33mif\e[0m (evenOddCountString.length < \e[31m2\e[0m) \e[31m\"0\"\e[0m\
    \ + evenOddCountString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOddCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj3awmr05.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountString\e\
    [0m = \e[33mif\e[0m (evenOddCountString.length < \e[31m2\e[0m) \e[31m\"0\"\e[0m\
    \ + evenOddCountString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOddCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj3awmr05.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountString\e\
    [0m = \e[33mif\e[0m (evenOddCountString.length < \e[31m2\e[0m) \e[31m\"0\"\e[0m\
    \ + evenOddCountString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOddCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpj3awmr05.scala:28:18 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            Right(evenOddCountString)\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        Found:    (evenOddCountString : String)\n\e[31"
  stdout: ''
  timestamp: 1660028997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = words.toList\n            val wordCount = wordList.map(_.length).sum\n\
    \            val oddCount = wordList.filter(_.toLowerCase == 'a').length\n   \
    \         Right(wordCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3loexzu2.scala:21:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = wordList.filter(_.toLowerCase\
    \ == \e[31m'a'\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.toLowerCase == \"even\")\n            val odd = words.filter(_.toLowerCase\
    \ == \"odd\")\n            val evenCount = even.count(_.toLowerCase == \"a\")\n\
    \            val oddCount = odd.count(_.toLowerCase == \"a\")\n            val\
    \ evenOddCount = evenCount + oddCount\n            Right(evenOddCount)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1uahaxur.scala:28)\n\tat Problem.main(tmp1uahaxur.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val numWords = words.length\n            val numLetters = txt.length\n\
    \            val numLettersWithOddOrder = numLetters % 2\n            val numLettersWithOddOrderInAlphabet\
    \ = numLettersWithOddOrder + ord('a')\n            val numLettersWithOddOrderInAlphabetInWords\
    \ = numLettersWithOddOrderInAlphabet * numWords\n            val numLettersWithOddOrderInAlphabetInWordsWithCommas\
    \ = numLettersWithOddOrderInAlphabetInWords + 1\n            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWords\
    \ = numLettersWithOddOrderInAlphabetInWordsWithCommas * numWords\n           \
    \ val numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommas = numLettersWithOddOrderInAlphabetInWordsWithCommasInWords\
    \ + 1\n            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWords\
    \ = numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommas * numWords\n\
    \            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommas\
    \ = numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWords\
    \ + 1\n            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWords\
    \ = numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommas\
    \ * numWords\n            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommas\
    \ = numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommas\
    \ + 1\n            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommasInWords\
    \ = numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommas\n\
    \            val numLettersWithOddOrderInAlphabetInWordsWithCommasInWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuw5sqvv8.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuw5sqvv8.scala:44:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpuw5sqvv8.scala:20:76 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnumLettersWithOddOrderInAlphabet\e\
    [0m = numLettersWithOddOrder + ord(\e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                                                        ^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuw5sqvv8.scala:28:119\
    \ --------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mnumLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommas\e\
    [0m = numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommas\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  numLettersWithOddOrderInAlphabetInWordsWithCommasInWordsWithCommasInWordsWithCommasInWordsWithCommas\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuw5sqvv8.scala:43:1 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpuw5sqvv8.scala:32:4 ---------------------------------------"
  stdout: ''
  timestamp: 1660028997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) Left(List[String]())\n      \
    \  else if (words.size == 1) Right(words.head.toLong)\n        else {\n      \
    \      val firstWord = words.head\n            val secondWord = words.tail.head\n\
    \            val firstLetter = firstWord.head\n            val secondLetter =\
    \ secondWord.head\n            val firstLetterCount = firstWord.tail.head\n  \
    \          val secondLetterCount = secondWord.tail.head\n            val firstLetterLetterCount\
    \ = firstWord.tail.tail.head\n            val secondLetterLetterCount = secondWord.tail.tail.head\n\
    \            val firstLetterLetterCountOdd = firstWord.tail.tail.tail.head\n \
    \           val secondLetterLetterCountOdd = secondWord.tail.tail.tail.head\n\
    \            val firstLetterLetterCountEven = firstWord.tail.tail.tail.tail.head\n\
    \            val secondLetterLetterCountEven = secondWord.tail.tail.tail.tail.head\n\
    \            val firstLetterLetterCountOddAndEven = firstWord.tail.tail.tail.tail.tail.head\n\
    \            val secondLetterLetterCountOddAndEven = secondWord.tail.tail.tail.tail.tail.head\n\
    \            val firstLetterLetterCountEvenAndOdd = firstWord.tail.tail.tail.tail.tail.tail.head\n\
    \            val secondLetterLetterCountEvenAndOdd = secondWord.tail.tail.tail.tail.tail.tail.head\n\
    \            val firstLetterLetterCountOddAndEvenAndOdd = firstWord.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val secondLetterLetterCountOddAndEvenAndOdd = secondWord.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val firstLetterLetterCountEvenAndOddAndOdd = firstWord.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val secondLetterLetterCountEvenAndOddAndOdd = secondWord.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val firstLetterLetterCountOddAndEvenAndOddAndOdd = firstWord.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val secondLetterLetterCountOddAndEvenAndOddAndOdd = secondWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpri9lvgt9.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpri9lvgt9.scala:53:1\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpri9lvgt9.scala:42:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m42 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660028999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val noWhiteSpaceWords = words.filter(_.nonEmpty)\n\
    \        val noCommaWords = words.filter(_.contains(\",\"))\n        val noLettersWords\
    \ = words.filter(_.forall(_.isLetter))\n        val noLettersWordsCount = noLettersWords.count\n\
    \        val noLettersWordsCountOdd = noLettersWordsCount % 2\n        val noLettersWordsCountEven\
    \ = noLettersWordsCount - noLettersWordsCountOdd\n        val noLettersWordsCountEvenCount\
    \ = noLettersWordsCountEven.count\n        val noLettersWordsCountEvenCountOdd\
    \ = noLettersWordsCountEvenCount % 2\n        val noLettersWordsCountEvenCountEven\
    \ = noLettersWordsCountEvenCount - noLettersWordsCountEvenCountOdd\n        val\
    \ noLettersWordsCountEvenCountEvenCount = noLettersWordsCountEvenCountEven.count\n\
    \        val noLettersWordsCountEvenCountEvenCountOdd = noLettersWordsCountEvenCountEvenCount\
    \ % 2\n        val noLettersWordsCountEvenCountEvenCountEven = noLettersWordsCountEvenCountEvenCount\
    \ - noLettersWordsCountEvenCountEvenCountOdd\n        val noLettersWordsCountEvenCountEvenCountEvenCount\
    \ = noLettersWordsCountEvenCountEvenCountEven.count\n        val noLettersWordsCountEvenCountEvenCountEvenCountOdd\
    \ = noLettersWordsCountEvenCountEvenCountEvenCount % 2\n        val noLettersWordsCountEvenCountEvenCountEvenCountEven\
    \ = noLettersWordsCountEvenCountEvenCountEvenCount - noLettersWordsCountEvenCountEvenCountEvenCountOdd\n\
    \        val noLettersWordsCountEvenCountEvenCountEvenCountEvenCount = noLettersWordsCountEvenCountEvenCountEvenCountEven.count\n\
    \        val noLettersWordsCountEvenCountEvenCountEvenCountEvenCountOdd = noLettersWordsCountEvenCountEvenCountEvenCountEvenCount\
    \ % 2\n        val noLettersWordsCountEvenCountEvenCountEvenCountEvenCountEven\
    \ = noLettersWordsCountEvenCountEvenCountEvenCountEvenCountEvenCount - noLettersWordsCountEvenCountEvenCountEvenCountEvenCountOdd\n\
    \        val noLettersWordsCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzxfwnck.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzxfwnck.scala:20:57\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLettersWordsCountOdd\e[0m = noLettersWordsCount % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue % is not a member of (String => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzxfwnck.scala:21:58\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnoLettersWordsCountEven\e[0m = noLettersWordsCount - noLettersWordsCountOdd\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (String => Boolean) => Int, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzxfwnck.scala:33:74 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnoLettersWordsCountEvenCountEvenCountEvenCountEvenCountEven\e\
    [0m = noLettersWordsCountEvenCountEvenCountEvenCountEvenCountEvenCount - noLettersWordsCountEvenCountEvenCountEvenCountEvenCountOdd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: noLettersWordsCo"
  stdout: ''
  timestamp: 1660028999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmpdf55md7s.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpdf55md7s.scala:18)\n\
    \tat Problem$.main(tmpdf55md7s.scala:21)\n\tat Problem.main(tmpdf55md7s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase)\n        val commas = txt.split(\",\"\
    )\n        val letters = txt.length.toString.toInt\n        val evenLetters =\
    \ letters.filter(_ % 2 == 0)\n        val oddLetters = letters.filter(_ % 2 !=\
    \ 0)\n        val evenLettersCount = evenLetters.toList.length\n        val oddLettersCount\
    \ = oddLetters.toList.length\n        val evenLettersCountString = evenLettersCount.toString\n\
    \        val oddLettersCountString = oddLettersCount.toString\n        val evenLettersCountLong\
    \ = evenLettersCount.toLong\n        val oddLettersCountLong = oddLettersCount.toLong\n\
    \        val evenLettersCountLongString = evenLettersCountLong.toString\n    \
    \    val oddLettersCountLongString = oddLettersCountLong.toString\n        val\
    \ evenLettersCountLongLong = evenLettersCountLong.toLong\n        val oddLettersCountLongLong\
    \ = oddLettersCountLong.toLong\n        val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \        val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \        val evenLettersCountLongLongLong = evenLettersCountLongLong.toLong\n\
    \        val oddLettersCountLongLongLong = oddLettersCountLongLong.toLong\n  \
    \      val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \        val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \        val evenLettersCountLongLongLongLong = evenLettersCountLongLongLong.toLong\n\
    \        val oddLettersCountLongLongLongLong = oddLettersCountLongLongLong.toLong\n\
    \        val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLong.toString\n\
    \        val oddLettersCountLongLongLongLongString = oddLettersCountLongLongLongLong.toString\n\
    \        val evenLettersCountLongLongLongLongLong = evenLettersCountLongLongLongLong.toLong\n\
    \        val oddLettersCountLongLongLongLongLong = oddLettersCountLongLongLongLong.toLong\n\
    \        val evenLettersCountLongLongLongLongLongString = evenLettersCountLongLongLongLongLong.toString\n\
    \        val oddLettersCountLongLongLongLongLongString = oddLettersCountLongLongLongLongLong.toString\n\
    \        val evenLettersCountLongLongLongLongLongLong = evenLetters\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps822d_l4.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps822d_l4.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36moddLetters\e[0m = letters.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      value filter is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps822d_l4.scala:45:5 ---------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val evenOddCount = evenCount + oddCount\n            Right(evenOddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj4hpvce6.scala:28)\n\tat Problem.main(tmpj4hpvce6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val wordList = new mutable.ListBuffer[String]()\n            val wordCount\
    \ = 0\n            words.foreach(word => {\n                if (word.length ==\
    \ 0) wordCount += 1\n                else {\n                    wordCount +=\
    \ word.length\n                    wordList += word\n                }\n     \
    \       })\n            if (wordCount == 0) Right(0) else {\n                val\
    \ wordList2 = new mutable.ListBuffer[String]()\n                val wordCount2\
    \ = 0\n                words.foreach(word => {\n                    if (word.length\
    \ == 0) wordCount2 += 1\n                    else {\n                        wordCount2\
    \ += word.length\n                        wordList2 += word\n                \
    \    }\n                })\n                if (wordCount2 == 0) Right(wordList.length)\
    \ else {\n                    val wordList3 = new mutable.ListBuffer[String]()\n\
    \                    val wordCount3 = 0\n                    words.foreach(word\
    \ => {\n                        if (word.length == 0) wordCount3 += 1\n      \
    \                  else {\n                            wordCount3 += word.length\n\
    \                            wordList3 += word\n                        }\n  \
    \                  })\n                    if (wordCount3 == 0) Right(wordList2.length)\
    \ else {\n                        val wordList4 = new mutable.ListBuffer[String]()\n\
    \                        val wordCount4 = 0\n                        words.foreach(word\
    \ => {\n                            if (word.length == 0) wordCount4 += 1\n  \
    \                          else {\n                                wordCount4\
    \ += word.length\n                                wordList4 += word\n        \
    \                    }\n                        })\n                        if\
    \ (wordCount4 == 0) Right(wordList3.length) else {\n                         \
    \   val wordList5 = new mutable.ListBuffer[String]()\n                       \
    \     val wordCount5 = 0\n                            words.foreach(word => {\n\
    \                                if (word.length == 0) wordCount5 += 1\n     \
    \                           else {\n                                    wordCount5\
    \ += word.length\n                                    wordList5 += word\n    \
    \                            }\n                            })\n             \
    \               if (wordCount5 == 0) Right(wordList4.length) else {\n        \
    \                        val wordList6 = new mutable.ListBuffer[String]()\n  \
    \                              val wordCount6 = 0\n                          \
    \      words.foreach(word => {\n                                    if (word.length\
    \ == 0) wordCount6 += 1\n                                    else {\n        \
    \                                wordCount6 += word.length\n                 \
    \                       wordList6 += word\n                                  \
    \  }\n                                })\n                                if (wordCount6\
    \ == 0) Right(wordList5.length) else {\n                                    val\
    \ wordList7 = new mutable.ListBuffer[String]()\n                             \
    \       val wordCount7 = 0\n                                    words.foreach(word\
    \ => {\n                                        if (word.length == 0) wordCount7\
    \ += 1\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthvuvubz.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpthvuvubz.scala:94:0 ----------------------------\e[0m\e[0m\n\e[31m94\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthvuvubz.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpthvuvubz.scala:20:48\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e\
    [0m (word.length == \e[31m0\e[0m) wordCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value += is not a member of Int - did you mean wordCount.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpthvuvubz.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    wordCount += word.length\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value += is not a member of Int - did you mean wordCount.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthvuvubz.scala:27:36 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mwordList2\e[0m =\
    \ \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpthvuvubz.scala:30:53 ------------------------\e\
    [0m"
  stdout: ''
  timestamp: 1660028999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase).toList\n        val commaWords =\
    \ words.filter(_.contains(\",\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n\
    \        val letterWords = words.filter(_.contains(\"a\"))\n        val letterWordsCount\
    \ = letterWords.map(_.length).sum\n        val letterWordsCountOdd = letterWords.filter(_.contains(\"\
    b\")).map(_.length).sum\n        val letterWordsCountEven = letterWords.filter(_.contains(\"\
    c\")).map(_.length).sum\n        val letterWordsCountOddEven = letterWords.filter(_.contains(\"\
    d\")).map(_.length).sum\n        val letterWordsCountOddOdd = letterWords.filter(_.contains(\"\
    e\")).map(_.length).sum\n        val letterWordsCountOddEvenOdd = letterWords.filter(_.contains(\"\
    f\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEven = letterWords.filter(_.contains(\"\
    g\")).map(_.length).sum\n        val letterWordsCountOddEvenOddOdd = letterWords.filter(_.contains(\"\
    h\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOdd = letterWords.filter(_.contains(\"\
    i\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOddEven = letterWords.filter(_.contains(\"\
    j\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOddOdd = letterWords.filter(_.contains(\"\
    k\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOddEvenOdd\
    \ = letterWords.filter(_.contains(\"l\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOddEvenOddEven\
    \ = letterWords.filter(_.contains(\"m\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOddEvenOddOdd\
    \ = letterWords.filter(_.contains(\"n\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOddEvenOddEvenOdd\
    \ = letterWords.filter(_.contains(\"o\")).map(_.length).sum\n        val letterWordsCountOddEvenOddEvenOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk4b4j1gs.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpk4b4j1gs.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(_.toLowerCase == \"even\")\n            val odd = words.filter(_.toLowerCase\
    \ == \"odd\")\n            val evenCount = even.count(_.toLowerCase == \"a\")\n\
    \            val oddCount = odd.count(_.toLowerCase == \"a\")\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__czy4xu.scala:27)\n\tat Problem.main(tmp__czy4xu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) {\n            Right(words.size)\n\
    \        } else {\n            val wordList = words.toList\n            val wordListWithSpaces\
    \ = wordList.map(word => if (word.contains(\" \")) {\n                word\n \
    \           } else {\n                word + \",\"\n            })\n         \
    \   val wordListWithCommas = wordListWithSpaces.map(word => if (word.contains(\"\
    ,\")) {\n                word\n            } else {\n                word + \"\
    ,\"\n            })\n            val wordListWithLetters = wordListWithCommas.map(word\
    \ => if (word.contains(\" \")) {\n                word.count(_ == ' ')\n     \
    \       } else {\n                word.count(_ == ',')\n            })\n     \
    \       val wordListWithLettersOdd = wordListWithLetters.filter(word => word %\
    \ 2 == 1)\n            val wordListWithLettersEven = wordListWithLetters.filter(word\
    \ => word % 2 == 0)\n            val wordListWithLettersOddCount = wordListWithLettersOdd.map(word\
    \ => word.count(_ == ' '))\n            val wordListWithLettersEvenCount = wordListWithLettersEven.map(word\
    \ => word.count(_ == ' '))\n            val wordListWithLettersOddAndEvenCount\
    \ = wordListWithLettersOdd.zip(wordListWithLettersEven).map(word => word.count(_\
    \ == ' '))\n            val wordListWithLettersOddAndEvenCountSum = wordListWithLettersOddAndEvenCount.sum\n\
    \            val wordListWithLettersOddAndEvenCountSumOdd = wordListWithLettersOddAndEvenCountSum.filter(word\
    \ => word % 2 == 1)\n            val wordListWithLettersOddAndEvenCountSumEven\
    \ = wordListWithLettersOddAndEvenCountSum.filter(word => word % 2 == 0)\n    \
    \        val wordListWithLettersOddAndEvenCountSumOddAndEven = wordListWithLettersOddAndEvenCountSumOdd.zip(wordListWithLettersOddAndEvenCountSumEven).map(word\
    \ => word.count(_ == ' '))\n            val wordListWithLettersOddAndEvenCountSumOddAndEvenSum\
    \ = wordListWithLettersOddAndEvenCountSumOddAndEven.sum\n            val wordListWithLettersOddAndEvenCountSumOddAndEvenSumOdd\
    \ = wordListWithLettersOddAndEvenCountSumOddAndEvenSum.filter(word => word % 2\
    \ == 1)\n            val wordListWithLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfyz4y40.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfyz4y40.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxfyz4y40.scala:37:86 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m            \e[33mval\e[0m \e[36mwordListWithLettersOddCount\e\
    [0m = wordListWithLettersOdd.map(\e[36mword\e[0m => word.count(_ == \e[31m' '\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ count is not a member of Int - did you mean word.toInt?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxfyz4y40.scala:38:88 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36mwordListWithLettersEvenCount\e\
    [0m = wordListWithLettersEven.map(\e[36mword\e[0m => word.count(_ == \e[31m' '\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \ value count is not a member of Int - did you mean word.toInt?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxfyz4y40.scala:39:122 -----------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mwordListWithLettersOddAndEvenCount\e\
    [0m = wordListWithLettersOdd.zip(wordListWithLettersEven).map(\e[36mword\e[0m\
    \ => word.count(_ == \e[31m' '\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value count is not\
    \ a member of (Int, Int) - did you mean word.clone?\n\e[31m\e[31m-- Error: /tmp/tmpxfyz4y40.scala:40:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m       \
    \     \e[33mval\e[0m \e[36mwordListWithLettersOddAndEvenCountSum\e[0m = wordListWithLettersOddAndEvenCount.sum\n\
    \e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.forall(_.isLetter) && word.length\
    \ % 2 == 0).map(word => word.map(_.toLowerCase).toList)\n            val odd =\
    \ words.filter(word => word.forall(_.isLetter) && word.length % 2 != 0).map(word\
    \ => word.map(_.toLowerCase).toList)\n            val evenCount = even.count(word\
    \ => word.count(_ == 'a') || word.count(_ == 'b') || word.count(_ == 'c') || word.count(_\
    \ == 'd') || word.count(_ == 'e') || word.count(_ == 'f') || word.count(_ == 'g')\
    \ || word.count(_ == 'h') || word.count(_ == 'i') || word.count(_ == 'j') || word.count(_\
    \ == 'k') || word.count(_ == 'l') || word.count(_ == 'm') || word.count(_ == 'n')\
    \ || word.count(_ == 'o') || word.count(_ == 'p') || word.count(_ == 'q') || word.count(_\
    \ == 'r') || word.count(_ == 's') || word.count(_ == 't') || word.count(_ == 'u')\
    \ || word.count(_ == 'v') || word.count(_ == 'w') || word.count(_ == 'x') || word.count(_\
    \ == 'y') || word.count(_ == 'z'))\n            val oddCount = odd.count(word\
    \ => word.count(_ == 'a') || word.count(_ == 'b') || word.count(_ == 'c') || word.count(_\
    \ == 'd') || word.count(_ == 'e') || word.count(_ == 'f') || word.count(_ == 'g')\
    \ || word.count(_ == 'h') || word.count(_ == 'i') || word.count(_ == 'j') || word.count(_\
    \ == 'k') || word.count(_ == 'l') || word.count(_ == 'm') || word.count(_ == 'n')\
    \ || word.count(_ == 'o') || word.count(_ == 'p') || word.count(_ == 'q') || word.count(_\
    \ == 'r') || word.count(_ == 's') || word.count(_ == 't') || word.count(_ == 'u')\
    \ || word.count(_ == 'v') || word.count(_ == 'w') || word.count(_ == 'x') || word.count(_\
    \ == 'y') || word.count(_ == 'z'))\n            if (evenCount == 0) Left(List[String]())\n\
    \            else if (evenCount == 1) Right(evenCount)\n            else Left(List[String]())\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcfk5_4ws.scala:19:116 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(_.isLetter) && word.length % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(\e[36mword\e[0m => word.map(_.toLowerCase).toList)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpcfk5_4ws.scala:19:136 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(_.isLetter) && word.length % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(\e[36mword\e[0m => word.map(_.toLowerCase).toList)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcfk5_4ws.scala:20:115\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mword\e[0m => word.forall(_.isLetter) &&\
    \ word.length % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mword\e[0m => word.map(_.toLowerCase).toList)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpcfk5_4ws.scala:20:135 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(_.isLetter) && word.length % \e[31m2\e[0m != \e[31m0\e\
    [0m).map(\e[36mword\e[0m => word.map(_.toLowerCase).toList)\n\e[31m\e[31m   |\e\
    [0m      "
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Left(Nil)\n        else if\
    \ (words.length == 1) Right(words.length)\n        else {\n            val wordList\
    \ = new mutable.ListBuffer[String]()\n            words.foreach(word => wordList\
    \ += word)\n            val wordSet = wordList.toSet\n            val numLetters\
    \ = wordSet.filter(_.isLetter).length\n            val numLettersOdd = numLetters\
    \ % 2\n            val numLettersEven = numLetters - numLettersOdd\n         \
    \   val numLettersEvenOrOdd = if (numLettersEven == 0) \"even\" else \"odd\"\n\
    \            val numLettersEvenOrOddOrZero = if (numLettersEvenOrOdd == 0) \"\
    zero\" else \"odd\"\n            val numLettersEvenOrOddOrOne = if (numLettersEvenOrOdd\
    \ == 1) \"one\" else \"even\"\n            val numLettersEvenOrOddOrTwo = if (numLettersEvenOrOdd\
    \ == 2) \"two\" else \"odd\"\n            val numLettersEvenOrOddOrThree = if\
    \ (numLettersEvenOrOdd == 3) \"three\" else \"even\"\n            val numLettersEvenOrOddOrFour\
    \ = if (numLettersEvenOrOdd == 4) \"four\" else \"odd\"\n            val numLettersEvenOrOddOrFive\
    \ = if (numLettersEvenOrOdd == 5) \"five\" else \"even\"\n            val numLettersEvenOrOddOrSix\
    \ = if (numLettersEvenOrOdd == 6) \"six\" else \"odd\"\n            val numLettersEvenOrOddOrSeven\
    \ = if (numLettersEvenOrOdd == 7) \"seven\" else \"even\"\n            val numLettersEvenOrOddOrEight\
    \ = if (numLettersEvenOrOdd == 8) \"eight\" else \"odd\"\n            val numLettersEvenOrOddOrNine\
    \ = if (numLettersEvenOrOdd == 9) \"nine\" else \"even\"\n            val numLettersEvenOrOddOrTen\
    \ = if (numLettersEvenOrOdd == 10) \"ten\" else \"odd\"\n            val numLettersEvenOrOddOrEleven\
    \ = if (numLettersEvenOrOdd == 11) \"eleven\" else \"even\"\n            val numLettersEvenOrOddOrTwelve\
    \ = if (numLettersEven\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyvp179wi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyvp179wi.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpyvp179wi.scala:19:31 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpyvp179wi.scala:26:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrZero\e[0m = \e[33mif\e[0m (numLettersEvenOrOdd\
    \ == \e[31m0\e[0m) \e[31m\"zero\"\e[0m \e[33melse\e[0m \e[31m\"odd\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyvp179wi.scala:27:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrOne\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd == \e[31m1\e[0m) \e[31m\"one\"\e[0m \e\
    [33melse\e[0m \e[31m\"even\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \     Values of types String and Int cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpyvp179wi.scala:28:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrTwo\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd == \e[31m2\e[0m) \e[31m\"two\"\e[0m \e\
    [33melse\e[0m \e[31m\"odd\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else if\
    \ (words.length == 2) Right(words.head.length + words.last.length)\n        else\
    \ Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptayuar5q.scala:19:18\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    \ \").filter(_.nonEmpty).filter(_.contains(\",\"))\n        val letters = txt.filter(_.isLetter).filter(_.isLower).length\n\
    \        val oddLetters = letters.filter(_ % 2 != 0)\n        val result = if\
    \ (words.length == commaWords.length) words else commaWords\n        val result\
    \ = if (words.length == commaWords.length) words else commaWords\n        val\
    \ result = if (words.length == commaWords.length) words else commaWords\n    \
    \    val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val result = if (words.length == commaWords.length) words else commaWords\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqnw_9d9t.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqnw_9d9t.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (words.length == commaWords.length) words \e[33melse\e[0m commaWords\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqnw_9d9t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (words.length\
    \ == commaWords.length) words \e[33melse\e[0m commaWords\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqnw_9d9t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (words.length\
    \ == commaWords.length) words \e[33melse\e[0m commaWords\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqnw_9d9t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (words.lengt"
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n        val\
    \ lowerCaseWords = words.filter(_.forall(_.isLower))\n        val lowerCaseWordsCount\
    \ = lowerCaseWords.map(_.length).sum\n        val oddWordsCount = lowerCaseWords.filter(word\
    \ => word.forall(_.isDigit) && word.forall(_.isDigit).forall(_.toInt % 2 == 1)).map(_.length).sum\n\
    \        val result = if (commaWordsCount == 0) lowerCaseWordsCount else oddWordsCount\n\
    \        Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqe2r_ok_.scala:20:107 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddWordsCount\e[0m = lowerCaseWords.filter(\e\
    [36mword\e[0m => word.forall(_.isDigit) && word.forall(_.isDigit).forall(_.toInt\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)).map(_.length).sum\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              value forall is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.toLowerCase == \"even\")\n            val odd\
    \ = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 0)\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptitx72gy.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptitx72gy.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.count(_.toLowerCase\
    \ == \"even\")\n            val oddCount = odd.count(_.toLowerCase == \"odd\"\
    )\n            val evenLetters = even.count(_.toLowerCase == \"a\")\n        \
    \    val oddLetters = odd.count(_.toLowerCase == \"a\")\n            val evenLettersCount\
    \ = even.count(_.toLowerCase == \"z\")\n            val oddLettersCount = odd.count(_.toLowerCase\
    \ == \"z\")\n            val evenLettersCount2 = even.count(_.toLowerCase == \"\
    b\")\n            val oddLettersCount2 = odd.count(_.toLowerCase == \"b\")\n \
    \           val evenLettersCount3 = even.count(_.toLowerCase == \"c\")\n     \
    \       val oddLettersCount3 = odd.count(_.toLowerCase == \"c\")\n           \
    \ val evenLettersCount4 = even.count(_.toLowerCase == \"d\")\n            val\
    \ oddLettersCount4 = odd.count(_.toLowerCase == \"d\")\n            val evenLettersCount5\
    \ = even.count(_.toLowerCase == \"e\")\n            val oddLettersCount5 = odd.count(_.toLowerCase\
    \ == \"e\")\n            val evenLettersCount6 = even.count(_.toLowerCase == \"\
    f\")\n            val oddLettersCount6 = odd.count(_.toLowerCase == \"f\")\n \
    \           val evenLettersCount7 = even.count(_.toLowerCase == \"g\")\n     \
    \       val oddLettersCount7 = odd.count(_.toLowerCase == \"g\")\n           \
    \ val evenLettersCount8 = even.count(_.toLowerCase == \"h\")\n            val\
    \ oddLettersCount8 = odd.count(_.toLowerCase == \"h\")\n            val evenLettersCount9\
    \ = even.count(_.toLowerCase == \"i\")\n            val oddLettersCount9 = odd.count(_.toLowerCase\
    \ == \"i\")\n            val evenLettersCount10 = even.count(_.toLowerCase ==\
    \ \"j\")\n            val oddLettersCount10 = odd.count(_.toLowerCase == \"j\"\
    )\n            val evenLettersCount11 = even.count(_.toLowerCase == \"k\")\n \
    \           val oddLettersCount11 = odd.count(_.toLower\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1sw1tbbc.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1sw1tbbc.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1sw1tbbc.scala:46:48 ------------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount11\e[0m = odd.count(_.toLower\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1sw1tbbc.scala:59:1\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp1sw1tbbc.scala:48:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.forall(_.isLetter) && word.length % 2 == 0).map(_.toLowerCase).toList\n\
    \            val odd = words.filter(word => word.forall(_.isLetter) && word.length\
    \ % 2 != 0).map(_.toLowerCase).toList\n            val evenCount = even.count(_\
    \ == 'a')\n            val oddCount = odd.count(_ == 'a')\n            val result\
    \ = if (evenCount == oddCount) evenCount else evenCount + 1\n            Left(result)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm88m0flj.scala:21:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpm88m0flj.scala:22:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     \e[33mval\e[0m \e[36moddCount\e[0m = odd.count(_ == \e[31m'a'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm88m0flj.scala:24:17\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Left(result)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    (result : Int)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List.empty)\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmpdko2f9oq.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpdko2f9oq.scala:18)\n\
    \tat Problem$.main(tmpdko2f9oq.scala:21)\n\tat Problem.main(tmpdko2f9oq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(x => x.toLowerCase == \"even\")\n          \
    \  val odd = words.filter(x => x.toLowerCase == \"odd\")\n            val evenCount\
    \ = even.map(x => x.toLowerCase == \"even\").count(_ == true)\n            val\
    \ oddCount = odd.map(x => x.toLowerCase == \"odd\").count(_ == true)\n       \
    \     val evenLetters = even.map(x => x.toLowerCase == \"even\").count(_ == true)\n\
    \            val oddLetters = odd.map(x => x.toLowerCase == \"odd\").count(_ ==\
    \ true)\n            val evenLettersCount = even.map(x => x.toLowerCase == \"\
    even\").count(_ == true)\n            val oddLettersCount = odd.map(x => x.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountSum = evenLetters.sum\n\
    \            val oddLettersCountSum = oddLetters.sum\n            val evenLettersCountSum\
    \ = evenLetters.sum\n            val oddLettersCountSum = oddLetters.sum\n   \
    \         val evenLettersCountSum = evenLetters.sum\n            val oddLettersCountSum\
    \ = oddLetters.sum\n            val evenLettersCountSum = evenLetters.sum\n  \
    \          val oddLettersCountSum = oddLetters.sum\n            val evenLettersCountSum\
    \ = evenLetters.sum\n            val oddLettersCountSum = oddLetters.sum\n   \
    \         val evenLettersCountSum = evenLetters.sum\n            val oddLettersCountSum\
    \ = oddLetters.sum\n            val evenLettersCountSum = evenLetters.sum\n  \
    \          val oddLettersCountSum = oddLetters.sum\n            val evenLettersCountSum\
    \ = evenLetters.sum\n            val oddLettersCountSum = oddLetters.sum\n   \
    \         val evenLettersCountSum = evenLetters.sum\n            val oddLettersCountSum\
    \ = oddLetters.sum\n            val evenLettersCountSum = evenLetters.sum\n  \
    \          val oddLettersCountSum = oddLetters.sum\n            val evenLettersCountSum\
    \ = evenLetters.sum\n            val oddLettersCountSum = oddLetters.sum\n   \
    \         val evenLettersCountSum = evenLetters.sum\n            val oddLettersCountSum\
    \ = oddLetters.sum\n            val evenLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd2kaicb_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd2kaicb_.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd2kaicb_.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e[0m = evenLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCountSum is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd2kaicb_.scala:30:16 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountSum\e[0m = oddLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddLettersCountSum is already defined as \e[33mvalue\e[0m \e[35moddLettersCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd2kaicb_.scala:31:16 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e[0m = evenLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCountSum is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd2kaicb_.scala:32:16 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountSum\e[0m = oddLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Left(0)\n\
    \        else Right(words.size)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5k2vrik3.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (words.isEmpty)\
    \ Left(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                ^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (\e[31m0\e[0m :\
    \ Int)\n\e[31m   |\e[0m                                Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val wordCounts = words.map(_.toLowerCase).map(_.length).filter(x\
    \ => x % 2 == 1).map(x => x -> 1).toMap\n        val wordCountList = wordCounts.toList\n\
    \        val wordCountListSorted = wordCountList.sortBy(_._1).reverse\n      \
    \  val wordCountListSortedWithCount = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n\
    \        val wordCountListSortedWithCountAndLetter = wordCountListSorted.takeWhile(_._2\
    \ > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCount =\
    \ wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetter\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCount\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetter\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCount\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetter\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCount\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetter\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCount\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetterWithCountAndLetter\
    \ = wordCountListSorted.takeWhile(_._2 > 1).map(_._1)\n        val wordCountListSortedWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptxfrqa_y.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptxfrqa_y.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List())\n\
    \        else if (words.size == 1) Right(List(words(0)))\n        else if (words.size\
    \ == 2) Right(List(words(0), words(1)))\n        else if (words.size == 3) Right(List(words(0),\
    \ words(1), words(2)))\n        else if (words.size == 4) Right(List(words(0),\
    \ words(1), words(2), words(3)))\n        else if (words.size == 5) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4)))\n        else if (words.size == 6)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5)))\n  \
    \      else if (words.size == 7) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6)))\n        else if (words.size == 8) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7)))\n   \
    \     else if (words.size == 9) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8)))\n        else if (words.size\
    \ == 10) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9)))\n        else if (words.size == 11)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10)))\n        else if (words.size == 12)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10), words(11)))\n        else if (words.size\
    \ == 13) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9), words(10), words(11), words(12)))\n\
    \        else if (words.size == 14) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8), words(9), words(10), words(11),\
    \ words(12), words(13)))\n        else if (words.size == 15) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7), words(8),\
    \ words(9\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe3bz0s9a.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpe3bz0s9a.scala:17:44 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.size == \e[31m1\e[0m) Right(List(words(\e\
    [31m0\e[0m)))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3bz0s9a.scala:18:44 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m2\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3bz0s9a.scala:19:44 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m3\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3bz0s9a.scala:20:44 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m4\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [3"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length.toString.toInt\n        val numLettersWithOddOrder = numLetters.filter(_\
    \ % 2 != 0).length\n        val numLettersWithEvenOrder = numLetters.filter(_\
    \ % 2 == 0).length\n        val numLettersWithOddOrderWords = numLettersWithOddOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersWithEvenOrderWords = numLettersWithEvenOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersWithOddOrderWordsAndLettersWithEvenOrderWords\
    \ = numLettersWithOddOrderWords + numLettersWithEvenOrderWords\n        val numLettersWithOddOrderWordsAndLettersWithOddOrderWords\
    \ = numLettersWithOddOrderWords + numLettersWithOddOrderWordsAndLettersWithEvenOrderWords\n\
    \        val numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\
    \ = numLettersWithOddOrderWordsAndLettersWithEvenOrderWords + numLettersWithOddOrderWordsAndLettersWithOddOrderWords\n\
    \        val numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWords\
    \ = numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\
    \ + numLettersWithOddOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWords\n\
    \        val numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\
    \ = numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\
    \ + numLettersWithOddOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\n\
    \        val numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\
    \ = numLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\
    \ + numLettersWithOddOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWordsAndLettersWithEvenOrderWordsAndLettersWithOddOrderWords\n\
    \        val numLettersWith\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiz5r0s2m.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiz5r0s2m.scala:18:48\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersWithOddOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m != \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value filter is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiz5r0s2m.scala:19:49\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersWithEvenOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value filter is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiz5r0s2m.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length.toString.toInt\n        val result = if (numWords == 0) Left(numLetters)\
    \ else Right(numWords)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp01l8jje3.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Either[Int,\
    \ Int])\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        val numWords = words.size + 1\n        val numLetters = txt.length.toString.toInt\n\
    \        val numLettersWithOddOrder = numLetters.toString.toInt\n        if (numLettersWithOddOrder\
    \ % 2 == 0) Right(numWords)\n        else Left(words)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2gvdjsh.scala:21:18\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val result = words.map(_.toLowerCase).map(_.toChar).map(c => (c.toInt,\
    \ c)).toMap\n            val even = result.filter(_._2 % 2 == 0).map(_._1).sum\n\
    \            val odd = result.filter(_._2 % 2 == 1).map(_._1).sum\n          \
    \  Right(if (even > odd) even else odd)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj9rf1sab.scala:19:56 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = words.map(_.toLowerCase).map(_.toChar).map(\e\
    [36mc\e[0m => (c.toInt, c)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     value toChar is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpj9rf1sab.scala:19:63 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = words.map(_.toLowerCase).map(_.toChar).map(\e\
    [36mc\e[0m => (c.toInt, c)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                               No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val evenWords = wordList.filter(word\
    \ => word.forall(_.isLetter) && word.count(_ == 'a') % 2 == 0)\n            val\
    \ oddWords = wordList.filter(word => word.forall(_.isLetter) && word.count(_ ==\
    \ 'a') % 2 != 0)\n            val evenLetters = evenWords.count(word => word.count(_\
    \ == 'a'))\n            val oddLetters = oddWords.count(word => word.count(_ ==\
    \ 'a'))\n            val evenLettersCount = evenLetters.toLong\n            val\
    \ oddLettersCount = oddLetters.toLong\n            if (evenLettersCount < oddLettersCount)\
    \ Right(evenLettersCount)\n            else Left(oddLettersCount)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsn6qdgnj.scala:22:64\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mevenLetters\e[0m = evenWords.count(\e[36mword\e[0m => word.count(_ == \e[31m'a'\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                         Found:    Int\n\e[31m   |\e[0m                     \
    \                                 Required: Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsn6qdgnj.scala:23:62 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.count(\e\
    [36mword\e[0m => word.count(_ == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    Int\n\
    \e[31m   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsn6qdgnj.scala:27:22\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m Left(oddLettersCount)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (oddLettersCount : Long)\n\e[31m   |\e[0m \
    \                     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commas = txt.split(\",\"\
    ).filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).filter(_.isLower)\n\
    \        val odd = letters.filter(letter => letter.toString.toInt.toString % 2\
    \ != 0).length\n        val even = letters.length - odd\n        val result =\
    \ if (words.length == 0) Right(odd)\n        else if (commas.length == 0) Right(even)\n\
    \        else Left(words)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgh5o32ju.scala:18:74 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter.toString.toInt.toString % \e[31m2\e[0m != \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgh5o32ju.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[\e[1m\e[31mArray\e[0m[String],\
    \ \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[\e\
    [1m\e[32mList\e[0m[String], \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evens = words.filter(w => w.length == w.toLowerCase + 1).map(w =>\
    \ w.toLowerCase + w.toUpperCase)\n            val odds = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase + w.toUpperCase).filter(w => w.toLowerCase\
    \ + w.toUpperCase.length % 2 == 1)\n            val evensCount = evens.map(w =>\
    \ w.length).sum\n            val oddsCount = odds.map(w => w.length).sum\n   \
    \         Right(evensCount + oddsCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp82tpp6oc.scala:19:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ + w.toUpperCase)\n\e[31m\e[31m   |\e[0m                                    \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp82tpp6oc.scala:20:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     \e[33mval\e[0m \e[36modds\e[0m = words.filter(\e[36mw\e[0m => w.length ==\
    \ w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + w.toUpperCase).filter(\e\
    [36mw\e[0m => w.toLowerCase + w.toUpperCase.length % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp82tpp6oc.scala:20:124 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modds\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ + w.toUpperCase).filter(\e[36mw\e[0m => w.toLowerCase + w.toUpperCase.length\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Values of types String and Int cannot be compared with\
    \ == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head.length)\n        else if (words.size ==\
    \ 2) Right(words.last.length)\n        else if (words.size == 3) Right(words.last.length)\n\
    \        else if (words.size == 4) Right(words.last.length)\n        else if (words.size\
    \ == 5) Right(words.last.length)\n        else if (words.size == 6) Right(words.last.length)\n\
    \        else if (words.size == 7) Right(words.last.length)\n        else if (words.size\
    \ == 8) Right(words.last.length)\n        else if (words.size == 9) Right(words.last.length)\n\
    \        else if (words.size == 10) Right(words.last.length)\n        else if\
    \ (words.size == 11) Right(words.last.length)\n        else if (words.size ==\
    \ 12) Right(words.last.length)\n        else if (words.size == 13) Right(words.last.length)\n\
    \        else if (words.size == 14) Right(words.last.length)\n        else if\
    \ (words.size == 15) Right(words.last.length)\n        else if (words.size ==\
    \ 16) Right(words.last.length)\n        else if (words.size == 17) Right(words.last.length)\n\
    \        else if (words.size == 18) Right(words.last.length)\n        else if\
    \ (words.size == 19) Right(words.last.length)\n        else if (words.size ==\
    \ 20) Right(words.last.length)\n        else if (words.size == 21) Right(words.last.length)\n\
    \        else if (words.size == 22) Right(words.last.length)\n        else if\
    \ (words.size == 23) Right(words.last.length)\n        else if (words.size ==\
    \ 24) Right(words.last.length)\n        else if (words.size == 25) Right(words.last.length)\n\
    \        else if (words.size == 26) Right(words.last.length)\n        else if\
    \ (words.size == 27) Right(words.last.length)\n        else if (words.size ==\
    \ 28) Right(words.last.length)\n        else if (words.size == 29) Right(words.last.length)\n\
    \        else if (words.size == 30) Right(words.last.length)\n        else if\
    \ (words.size == 31) Right(words.last.length)\n        else if (words.size ==\
    \ 32) Right(words.last.length)\n        else if (words.size == 33) Right(words.last.length)\n\
    \        else if (words.size == 34) Right(words.last.length)\n        else if\
    \ (words.size == 35) Right(words.last.length)\n        else if (words.size ==\
    \ 36) Right(words.last.length)\n        else if (words.size == 37) Right(words.last.length)\n\
    \        else if (words.size == 38) Right(words.last.length)\n        else if\
    \ (words.size == 39) Right(words.last.length)\n        else if (words.size ==\
    \ 40) Right(words.last.length)\n        else if (words.size == 41) Right(words.last.length)\n\
    \        else if (words.size == 42) Right(words.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp44w2g9oc.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp44w2g9oc.scala:58:13 --------------------\e[0m\e[0m\n\e[31m58 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.size == \e[31m42\e[0m) Right(words.last\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val splitWords = words.map(_.toLowerCase)\n            val evenOrder\
    \ = splitWords.filter(_.toCharArray.forall(c => c.toInt % 2 == 0))\n         \
    \   val oddOrder = splitWords.filter(_.toCharArray.forall(c => c.toInt % 2 !=\
    \ 0))\n            val evenOrderCount = evenOrder.length\n            val oddOrderCount\
    \ = oddOrder.length\n            if (evenOrderCount == 0) Right(evenOrderCount)\n\
    \            else if (oddOrderCount == 0) Left(oddOrderCount)\n            else\
    \ {\n                val evenOrderWords = evenOrder.map(_.toCharArray)\n     \
    \           val oddOrderWords = oddOrder.map(_.toCharArray)\n                val\
    \ evenOrderWordsCount = evenOrderWords.length\n                val oddOrderWordsCount\
    \ = oddOrderWords.length\n                if (evenOrderWordsCount == 0) Right(evenOrderWordsCount)\n\
    \                else if (oddOrderWordsCount == 0) Left(oddOrderWordsCount)\n\
    \                else {\n                    val evenOrderWordsSum = evenOrderWords.map(_.sum).sum\n\
    \                    val oddOrderWordsSum = oddOrderWords.map(_.sum).sum\n   \
    \                 val evenOrderWordsSumCount = evenOrderWordsSum / evenOrderWordsCount\n\
    \                    val oddOrderWordsSumCount = oddOrderWordsSum / oddOrderWordsCount\n\
    \                    if (evenOrderWordsSumCount == 0) Right(evenOrderWordsSumCount)\n\
    \                    else if (oddOrderWordsSumCount == 0) Left(oddOrderWordsSumCount)\n\
    \                    else {\n                        val evenOrderWordsSumCount\
    \ = evenOrderWordsSum / evenOrderWordsCount\n                        val oddOrderWordsSumCount\
    \ = oddOrderWordsSum / oddOrderWordsCount\n                        if (evenOrderWordsSumCount\
    \ == oddOrderWordsSumCount) Right(evenOrderWordsSumCount)\n                  \
    \      else Left(oddOrderWordsSumCount)\n                    }\n             \
    \   }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7j2qapvh.scala:25:46\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddOrderCount == \e[31m0\e[0m) Left(oddOrderCount)\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Found:    (oddOrderCount\
    \ : Int)\n\e[31m   |\e[0m                                         Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7j2qapvh.scala:32:55\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (oddOrderWordsCount == \e[31m0\e[0m) Left(oddOrderWordsCount)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (oddOrderWordsCount\
    \ : Int)\n\e[31m   |\e[0m                                    Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7j2qapvh.scala:39:62\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m                    \e[33melse\e\
    [0m \e[33mif\e[0m (oddOrderWordsSumCount == \e[31m0\e[0m) Left(oddOrderWordsSumCount)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Found:    (oddOrderWordsSumCount : Int)\n\e[31m   |\e[0m              \
    \                   Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7j2qapvh.scala:44:34 --------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m                        \e[33melse\e[0m Left(oddOrderWordsSumCount)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (oddOrderWordsSumCount\
    \ : Int)\n\e[31m   |\e[0m                               "
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersWithOddOrder = numLetters.filter(_ % 2 !=\
    \ 0).length\n        val numLettersWithEvenOrder = numLetters.filter(_ % 2 ==\
    \ 0).length\n        val numLettersWithOddOrderInAlphabet = numLettersWithOddOrder.filter(_\
    \ % 26 == 0).length\n        val numLettersWithEvenOrderInAlphabet = numLettersWithEvenOrder.filter(_\
    \ % 26 == 0).length\n        val numLettersWithOddOrderInAlphabetInAlphabet =\
    \ numLettersWithOddOrderInAlphabet.filter(_ % 26 == 0).filter(_ % 26 == 0).length\n\
    \        val numLettersWithEvenOrderInAlphabetInAlphabet = numLettersWithEvenOrderInAlphabet.filter(_\
    \ % 26 == 0).filter(_ % 26 == 0).length\n        val numLettersWithOddOrderInAlphabetInAlphabetInAlphabet\
    \ = numLettersWithOddOrderInAlphabetInAlphabet.filter(_ % 26 == 0).filter(_ %\
    \ 26 == 0).filter(_ % 26 == 0).length\n        val numLettersWithEvenOrderInAlphabetInAlphabetInAlphabet\
    \ = numLettersWithEvenOrderInAlphabetInAlphabet.filter(_ % 26 == 0).filter(_ %\
    \ 26 == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).length\n        val numLettersWithOddOrderInAlphabetInAlphabetInAlphabetInAlphabet\
    \ = numLettersWithOddOrderInAlphabetInAlphabetInAlphabet.filter(_ % 26 == 0).filter(_\
    \ % 26 == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).length\n\
    \        val numLettersWithEvenOrderInAlphabetInAlphabetInAlphabetInAlphabet =\
    \ numLettersWithEvenOrderInAlphabetInAlphabet.filter(_ % 26 == 0).filter(_ % 26\
    \ == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).filter(_ %\
    \ 26 == 0).length\n        val numLettersWithOddOrderInAlphabetInAlphabetInAlphabetInAlphabetInAlphabet\
    \ = numLettersWithOddOrderInAlphabetInAlphabetInAlphabet.filter(_ % 26 == 0).filter(_\
    \ % 26 == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).filter(_ % 26 == 0).filter(_\
    \ % 26 == 0).filter(_ % 26 == 0).length\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5vcg2mp.scala:18:48 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumLettersWithOddOrder\e\
    [0m = numLetters.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value filter is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5vcg2mp.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumLettersWithEvenOrder\e\
    [0m = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value filter is not a member of\
    \ Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5vcg2mp.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val noSpaceWords = words.filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val noCommaWords\
    \ = words.filter(_.contains(\",\"))\n        val noLetterWords = words.filter(_.toLowerCase\
    \ contains \"a\")\n        val noLetterWordsOdd = words.filter(_.toLowerCase contains\
    \ \"a\").filter(_.toLowerCase contains \"b\").filter(_.toLowerCase contains \"\
    c\")\n        val noLetterWordsEven = words.filter(_.toLowerCase contains \"a\"\
    ).filter(_.toLowerCase contains \"b\").filter(_.toLowerCase contains \"c\").filter(_.toLowerCase\
    \ contains \"d\")\n        val noLetterWordsOddEven = words.filter(_.toLowerCase\
    \ contains \"a\").filter(_.toLowerCase contains \"b\").filter(_.toLowerCase contains\
    \ \"c\").filter(_.toLowerCase contains \"d\").filter(_.toLowerCase contains \"\
    e\")\n        val noLetterWordsOddEvenOdd = words.filter(_.toLowerCase contains\
    \ \"a\").filter(_.toLowerCase contains \"b\").filter(_.toLowerCase contains \"\
    c\").filter(_.toLowerCase contains \"d\").filter(_.toLowerCase contains \"e\"\
    ).filter(_.toLowerCase contains \"f\")\n        val noLetterWordsOddEvenOddEven\
    \ = words.filter(_.toLowerCase contains \"a\").filter(_.toLowerCase contains \"\
    b\").filter(_.toLowerCase contains \"c\").filter(_.toLowerCase contains \"d\"\
    ).filter(_.toLowerCase contains \"e\").filter(_.toLowerCase contains \"f\").filter(_.toLowerCase\
    \ contains \"g\")\n        val noLetterWordsOddEvenOddEvenOdd = words.filter(_.toLowerCase\
    \ contains \"a\").filter(_.toLowerCase contains \"b\").filter(_.toLowerCase contains\
    \ \"c\").filter(_.toLowerCase contains \"d\").filter(_.toLowerCase contains \"\
    e\").filter(_.toLowerCase contains \"f\").filter(_.toLowerCase contains \"g\"\
    ).filter(_.toLowerCase contains \"h\")\n        val noLetterWordsOddEvenOddEvenOddEven\
    \ = words.filter(_.toLowerCase contains \"a\").filter(_.toLowerCase contains \"\
    b\").filter(_.toLowerCase contains \"c\").filter(_.toLowerCase contains \"d\"\
    ).filter(_.toLowerCase contains \"e\").filter(_.toLowerCase contains \"f\").filter(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_tqnf5kh.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_tqnf5kh.scala:26:272 -------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mnoLetterWordsOddEvenOddEvenOddEven\e[0m = words.filter(_.toLowerCase\
    \ contains \e[31m\"a\"\e[0m).filter(_.toLowerCase contains \e[31m\"b\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"c\"\e[0m).filter(_.toLowerCase contains \e[31m\"d\"\e[0m).filter(_.toLowerCase\
    \ contains \e[31m\"e\"\e[0m).filter(_.toLowerCase contains \e[31m\"f\"\e[0m).filter(_.to\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                ^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    scala.collection.Factory[Char, Any]\
    \ => Any\n\e[31m   |\e[0m                    Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tqnf5kh.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.forall(_.isLetter) && word.count(_ == 'a')\
    \ % 2 == 0)\n            val oddOrderWords = lowerCaseWords.filter(word => word.forall(_.isLetter)\
    \ && word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.map(word\
    \ => word.count(_ == 'a')).sum\n            val oddOrderWordsCount = oddOrderWords.map(word\
    \ => word.count(_ == 'a')).sum\n            val evenOrderWordsCountString = evenOrderWordsCount.toString\n\
    \            val oddOrderWordsCountString = oddOrderWordsCount.toString\n    \
    \        val evenOrderWordsCountLong = Long.parseLong(evenOrderWordsCountString)\n\
    \            val oddOrderWordsCountLong = Long.parseLong(oddOrderWordsCountString)\n\
    \            val evenOrderWordsCountLongString = evenOrderWordsCountLong.toString\n\
    \            val oddOrderWordsCountLongString = oddOrderWordsCountLong.toString\n\
    \            val evenOrderWordsCountLongLong = Long.parseLong(evenOrderWordsCountLongString)\n\
    \            val oddOrderWordsCountLongLong = Long.parseLong(oddOrderWordsCountLongString)\n\
    \            val evenOrderWordsCountLongLongString = evenOrderWordsCountLongLong.toString\n\
    \            val oddOrderWordsCountLongLongString = oddOrderWordsCountLongLong.toString\n\
    \            val evenOrderWordsCountLongLongLong = Long.parseLong(evenOrderWordsCountLongLongString)\n\
    \            val oddOrderWordsCountLongLongLong = Long.parseLong(oddOrderWordsCountLongLongString)\n\
    \            val evenOrderWordsCountLongLongLongString = evenOrderWordsCountLongLongLong.toString\n\
    \            val oddOrderWordsCountLongLongLongString = oddOrderWordsCountLongLongLong.toString\n\
    \            val evenOrderWordsCountLongLongLongLong = Long.parseLong(evenOrderWordsCountLongLongLongString)\n\
    \            val oddOrderWordsCountLongLongLongLong = Long.parseLong(oddOrderWordsCountLongLongLongString)\n\
    \            val evenOrderWordsCountLongLongLongLongString = evenOrderWordsCountLongLongLongLongLong.toString\n\
    \            val odd\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpupffz3r4.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpupffz3r4.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpupffz3r4.scala:26:47 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLong\e[0m =\
    \ Long.parseLong(evenOrderWordsCountString)\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpupffz3r4.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountLong\e\
    [0m = Long.parseLong(oddOrderWordsCountString)\n\e[31m\e[31m   |\e[0m        \
    \                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                   value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpupffz3r4.scala:30:51 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLongLong\e\
    [0m = Long.parseLong(evenOrderWordsCountLongString)\n\e[31m\e[31m   |\e[0m   \
    \                                           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value parseLong is not a member of object Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpupffz3r4.scala:31:50 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountLongLong\e\
    [0m = Long.parseLong(oddOrderWordsCountLongString)\n\e[31m\e[31m   |\e[0m    \
    \                                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value parseLong is not a member of object Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpupffz3r4.scala:34:55 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36meve"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 1)\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gzhtshg.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gzhtshg.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9alwcu0g.scala:59:43 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numLetters = words.map(_.length).sum\n\
    \        val numWords = words.length\n        val numCommas = words.map(_.split(\"\
    ,\").length).sum\n        val numCommasEven = words.map(_.split(\",\").filter(_.toLowerCase\
    \ == \"even\").length).sum\n        val numCommasOdd = words.map(_.split(\",\"\
    ).filter(_.toLowerCase == \"odd\").length).sum\n        val numCommasEvenOdd =\
    \ words.map(_.split(\",\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase\
    \ == \"odd\").length).sum\n        val numCommasEvenOddEven = words.map(_.split(\"\
    ,\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\").filter(_.toLowerCase\
    \ == \"even\").length).sum\n        val numCommasEvenOddOdd = words.map(_.split(\"\
    ,\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\").filter(_.toLowerCase\
    \ == \"odd\").length).sum\n        val numCommasEvenOddEvenOdd = words.map(_.split(\"\
    ,\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\").filter(_.toLowerCase\
    \ == \"even\").filter(_.toLowerCase == \"odd\").length).sum\n        val numCommasEvenOddEvenOddEven\
    \ = words.map(_.split(\",\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase\
    \ == \"odd\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\"\
    ).filter(_.toLowerCase == \"even\").length).sum\n        val numCommasEvenOddEvenOddOdd\
    \ = words.map(_.split(\",\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase\
    \ == \"odd\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\"\
    ).filter(_.toLowerCase == \"odd\").length).sum\n        val numCommasEvenOddEvenOddEvenOdd\
    \ = words.map(_.split(\",\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase\
    \ == \"odd\").filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\"\
    ).filter(_.toLowerCase == \"even\").filter(_.toLowerCase == \"odd\").length).sum\n\
    \        val numCommasEvenOddEvenOddEvenOddEven = words.map(_.split(\",\").filter(_.toLowerCase\
    \ == \"even\").filter(_.toLowerCase == \"odd\").filter(_.toLowerCase == \"even\"\
    ).filter(_.to\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnmzsd4ec.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnmzsd4ec.scala:28:174 -------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \        \e[33mval\e[0m \e[36mnumCommasEvenOddEvenOddEvenOddEven\e[0m = words.map(_.split(\e\
    [31m\",\"\e[0m).filter(_.toLowerCase == \e[31m\"even\"\e[0m).filter(_.toLowerCase\
    \ == \e[31m\"odd\"\e[0m).filter(_.toLowerCase == \e[31m\"even\"\e[0m).filter(_.to\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                          ^^^^\e[0m\n\e[31m   |\e[0m        \
    \            Found:    scala.collection.Factory[Char, Any] => Any\n\e[31m   |\e\
    [0m                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnmzsd4ec.scala:29:5 ---------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9alwcu0g.scala:59:43 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val letters = txt.split(\"\\\\W+\")\n            if (letters.length\
    \ == 0)\n                Left(List[String]())\n            else if (letters.length\
    \ == 1)\n                Right(letters.length)\n            else {\n         \
    \       val letterCounts = letters.map(letter => letter.toLowerCase -> 1)\n  \
    \              val letterCountMap = letterCounts.toMap\n                val letterCountList:\
    \ List[(String, Int)] = letterCountMap.toList.sortBy(_._2).reverse\n         \
    \       val letterCountListWithOddOrder = letterCountList.filter(_._2 % 2 == 1)\n\
    \                val letterCountListWithEvenOrder = letterCountList.filter(_._2\
    \ % 2 == 0)\n                val letterCountListWithOddOrderAndEvenOrder = letterCountList.filter(_._2\
    \ % 2 == 0 && _._2 % 2 == 1)\n                val letterCountListWithOddOrderAndEvenOrderAndOddOrder\
    \ = letterCountList.filter(_._2 % 2 == 0 && _._2 % 2 == 1 && _._2 % 2 == 0)\n\
    \                val letterCountListWithOddOrderAndEvenOrderAndOddOrderAndEvenOrder\
    \ = letterCountList.filter(_._2 % 2 == 0 && _._2 % 2 == 1 && _._2 % 2 == 0 &&\
    \ _._2 % 2 == 1)\n                val letterCountListWithOddOrderAndEvenOrderAndOddOrderAndEvenOrderAndOddOrder\
    \ = letterCountList.filter(_._2 % 2 == 0 && _._2 % 2 == 1 && _._2 % 2 == 0 &&\
    \ _._2 % 2 == 1 && _._2 % 2 == 0)\n                val letterCountListWithOddOrderAndEvenOrderAndOddOrderAndEvenOrderAndOddOrderAndEvenOrder\
    \ = letterCountList.filter(_._2 % 2 == 0 && _._2 % 2 == 1 && _._2 % 2 == 0 &&\
    \ _._2 % 2 == 1 && _._2 % 2 == 0 && _._2 % 2 == 1)\n                val letterCountListWithOddOrderAndEvenOrderAndOddOrderAndEvenOrderAndOddOrderAndEvenOrderAndOddOrder\
    \ = letterCountList.filter(_._2 % 2 == 0 && _._2 % 2 == 1 && _._2 % 2 == 0 &&\
    \ _._2 % 2 == 1 && _._2 % 2 == 0 && _._2 % 2 == 1 && _._2 % 2 == 0)\n        \
    \        val letterCountListWithOddOrderAndEvenOrderAndOddOrder\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzv8ofax.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzv8ofax.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfzv8ofax.scala:32:87 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                \e[33mval\e[0m \e[36mletterCountListWithOddOrderAndEvenOrder\e\
    [0m = letterCountList.filter(_._2 % \e[31m2\e[0m == \e[31m0\e[0m && _._2 % \e\
    [31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                          ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                      value _2 is not a member of String\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpfzv8ofax.scala:33:96 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mletterCountListWithOddOrderAndEvenOrderAndOddOrder\e\
    [0m = letterCountList.filter(_._2 % \e[31m2\e[0m == \e[31m0\e[0m && _._2 % \e\
    [31m2\e[0m == \e[31m1\e[0m && _._2 % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpfzv8ofax.scala:34:108\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                \e[33mval\e\
    [0m \e[36mletterCountListWithOddOrderAndEvenOrderAndOddOrderAndEvenOrder\e[0m\
    \ = letterCountList.filter(_._2 % \e[31m2\e[0m == \e[31m0\e[0m && _._2 % \e[31m2\e\
    [0m == \e[31m1\e[0m && _._2 % \e[31m2\e[0m == \e[31m0\e[0m && _._2 % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmjda7l5i.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val letters = words.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n\
    \            val odd = letters.filter(x => x.toString.toInt % 2 == 1).size\n \
    \           Right(odd)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp3m0f11n7.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmp3m0f11n7.scala:19:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                      No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val numWords = words.length\n            val numLetters = txt.length\n\
    \            val numLettersOdd = numLetters % 2\n            val numLettersEven\
    \ = numLetters - numLettersOdd\n            val numLettersEvenOdd = numLettersEven\
    \ % 2\n            val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n\
    \            val numLettersOddEven = numLettersOdd - numLettersEvenOdd\n     \
    \       val numLettersOddOdd = numLettersOdd - numLettersOddEven\n           \
    \ val numLettersEvenOddEven = numLettersEvenOdd - numLettersEvenEven\n       \
    \     val numLettersEvenEvenOdd = numLettersEvenEven - numLettersOddOdd\n    \
    \        val numLettersEvenEvenEven = numLettersEvenEven - numLettersEvenOdd\n\
    \            val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenOdd\n\
    \            val numLettersOddOddEven = numLettersOddOdd - numLettersOddEvenEven\n\
    \            val numLettersEvenOddEvenOdd = numLettersEvenOddEven - numLettersEvenEvenOdd\n\
    \            val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddEvenOdd\n\
    \            val numLettersEvenEvenEvenEven = numLettersEvenEvenEvenOdd - numLettersEvenOddEven\n\
    \            val numLettersOddEvenOddEven = numLettersOddEvenOddEven - numLettersEvenOddEvenOdd\n\
    \            val numLettersOddOddEvenEven = numLettersOddOddEvenEven - numLettersOddEvenEvenOdd\n\
    \            val numLettersEvenOddEvenEvenOdd = numLettersEvenOddEvenEvenOdd -\
    \ numLettersEvenEvenEvenOdd\n            val numLettersEvenEvenEvenEvenOdd = numLettersEvenEvenEvenOdd\
    \ - numLettersOddOddEvenOdd\n            val numLettersEvenEvenEvenEvenEven =\
    \ numLettersEvenEvenEvenEvenOdd - numLettersEvenOddEvenEven\n            val num\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjv3mj10i.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjv3mj10i.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpjv3mj10i.scala:29:58 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m            \e[33mval\e[0m \e[36mnumLettersOddOddEven\e[0m = numLettersOddOdd\
    \ - numLettersOddEvenEven\n\e[31m\e[31m   |\e[0m                             \
    \                             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    Not found: numLettersOddEvenEven\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjv3mj10i.scala:33:43 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mnumLettersOddEvenOddEven\e\
    [0m = numLettersOddEvenOddEven - numLettersEvenOddEvenOdd\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \             Recursive \e[33mvalue\e[0m \e[35mnumLettersOddEvenOddEven\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjv3mj10i.scala:34:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e\
    [0m \e[36mnumLettersOddOddEvenEven\e[0m = numLettersOddOddEvenEven - numLettersOddEvenEvenOdd\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mnumLettersOddOddEvenEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjv3mj10i.scala:35:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36mnumLettersEvenOddEvenEvenOdd\e[0m = numLettersEvenOddEvenEvenOdd - numLettersEvenEve"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n        else\
    \ if (words.size == 1) Right(words.head)\n        else Left(words)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqo8gfwca.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m    \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqo8gfwca.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val letterWords = words.filter(_.contains(\" \"))\n        val\
    \ letterWordsCount = letterWords.map(_.length).sum\n        val commaWordsCount\
    \ = commaWords.map(_.length).sum\n        val wordCount = letterWordsCount + commaWordsCount\n\
    \        val wordCountEither = wordCount.toEither\n        val wordCountEitherRight\
    \ = wordCountEither.right\n        val wordCountEitherLeft = wordCountEither.left\n\
    \        val wordCountEitherRightRight = wordCountEitherRight.right\n        val\
    \ wordCountEitherLeftRight = wordCountEitherLeft.right\n        val wordCountEitherRightLeftRight\
    \ = wordCountEitherRightLeft.right\n        val wordCountEitherLeftLeftRight =\
    \ wordCountEitherLeftRight.right\n        val wordCountEitherLeftRightLeft = wordCountEitherLeftLeft.right\n\
    \        val wordCountEitherRightLeftLeft = wordCountEitherRightLeft.left\n  \
    \      val wordCountEitherRightLeftRightLeft = wordCountEitherRightLeftRight.left\n\
    \        val wordCountEitherRightLeftLeftRightLeft = wordCountEitherRightLeftLeftRight.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeft = wordCountEitherRightLeftLeftLeftRight.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeftLeft = wordCountEitherRightLeftLeftLeftRightLeft.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeftRightLeft = wordCountEitherRightLeftLeftLeftRightLeftRightLeft.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeftRightLeftLeft = wordCountEitherRightLeftLeftLeftRightLeftRightLeftLeft.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeftRightLeftRightLeft = wordCountEitherRightLeftLeftLeftRightLeftRightLeftRightLeft.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeftRightLeftRightLeftRightLeft\
    \ = wordCountEitherRightLeftLeftLeftRightLeftRightLeftRightLeftRightLeft.left\n\
    \        val wordCountEitherRightLeftLeftLeftRightLeftRightLeftRightLeftRightLeftRightRightLeft\
    \ = wordCount\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp05qo1xkv.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwordCountEither\e[0m = wordCount.toEither\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value toEither is not a member of Int\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05qo1xkv.scala:26:44 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwordCountEitherRightLeftRight\e\
    [0m = wordCountEitherRightLeft.right\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                 Not found: wordCountEitherRightLeft\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05qo1xkv.scala:28:43 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mwordCountEitherLeftRightLeft\e\
    [0m = wordCountEitherLeftLeft.right\n\e[31m\e[31m   |\e[0m                   \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                               Not found: wordCountEitherLeftLeft\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05qo1xkv.scala:29:43 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mwordCountEitherRightLeftLeft\e\
    [0m = wordCountEitherRightLeft.left\n\e[31m\e[31m   |\e[0m                   \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                               Not found: wordCountEitherRightLeft\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05qo1xkv.scala:31:52 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mwordCountEitherRightLeftLeftRightLeft\e\
    [0m = wordCountEitherRightLeftLeftRight.left\n\e[31m\e[31m   |\e[0m          \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = words.map(_.toLowerCase).toSet\n            val oddLetters\
    \ = letters.filter(_ % 2 != 0)\n            Right(oddLetters.size)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4kvb61t6.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else {\n\
    \            val even = words.filter(_.length%2 == 0)\n            val odd = words.filter(_.length%2\
    \ != 0)\n            val evenCount = even.count(_.toLowerCase == \"a\")\n    \
    \        val oddCount = odd.count(_.toLowerCase == \"a\")\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp64m7j09w.scala:27)\n\tat Problem.main(tmp64m7j09w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        val noWhiteSpaceWords = words.filter(_.nonEmpty)\n\
    \        val noCommaWords = words.filter(_.contains(\",\"))\n        val noLettersWords\
    \ = words.filter(_.forall(_.isLetter))\n        val noLettersWordsCount = noLettersWords.map(_.length).sum\n\
    \        val noLettersWordsCountEven = noLettersWordsCount % 2\n        val noLettersWordsCountOdd\
    \ = noLettersWordsCount - noLettersWordsCountEven\n        val noLettersWordsCountEvenLetters\
    \ = noLettersWordsCountEven / 2\n        val noLettersWordsCountOddLetters = noLettersWordsCountOdd\
    \ / 2\n        val noLettersWordsCountEvenLettersOdd = noLettersWordsCountEvenLetters\
    \ + noLettersWordsCountOddLetters\n        val noLettersWordsCountEvenLettersOddLetters\
    \ = noLettersWordsCountEvenLettersOdd / 2\n        val noLettersWordsCountEvenLettersOddLettersOdd\
    \ = noLettersWordsCountEvenLettersOdd / 3\n        val noLettersWordsCountEvenLettersOddLettersOddLetters\
    \ = noLettersWordsCountEvenLettersOddLettersOdd / 4\n        val noLettersWordsCountEvenLettersOddLettersOddLettersOdd\
    \ = noLettersWordsCountEvenLettersOddLettersOddLetters / 5\n        val noLettersWordsCountEvenLettersOddLettersOddLettersOddLetters\
    \ = noLettersWordsCountEvenLettersOddLettersOddLettersOdd / 6\n        val noLettersWordsCountEvenLettersOddLettersOddLettersOddLettersOdd\
    \ = noLettersWordsCountEvenLettersOddLettersOddLettersOddLetters / 7\n       \
    \ val noLettersWordsCountEvenLettersOddLettersOddLettersOddLettersOddLetters =\
    \ noLettersWordsCountEvenLettersOddLettersOddLettersOddLettersOdd / 8\n      \
    \  val noLettersWordsCountEvenLettersOddLettersOddLettersOddLettersOddLettersOdd\
    \ = no\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd0nh4a1t.scala:32:88 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnoLettersWordsCountEvenLettersOddLettersOddLettersOddLettersOddLettersOdd\e\
    [0m = no\n\e[31m\e[31m   |\e[0m                                              \
    \                                          ^^\e[0m\n\e[31m   |\e[0m          \
    \                                                 Not found: no\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd0nh4a1t.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.toLowerCase == \"even\")\n            val odd\
    \ = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            Right(evenCount\
    \ + oddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch1bc_0u.scala:27)\n\tat Problem.main(tmpch1bc_0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words(0))\n        else Left(words)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvtt5wbc7.scala:17:45\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words(\e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    Found:    String\n\e[31m   |\e[0m       \
    \                                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvtt5wbc7.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else if (words.length ==\
    \ 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmth39_kg.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val wordList = words.toList\n            val wordCount = wordList.map(_.length).sum\n\
    \            val oddCount = wordList.count(x => x.toLowerCase == \"a\" || x.toLowerCase\
    \ == \"b\" || x.toLowerCase == \"c\" || x.toLowerCase == \"d\" || x.toLowerCase\
    \ == \"e\" || x.toLowerCase == \"f\" || x.toLowerCase == \"g\" || x.toLowerCase\
    \ == \"h\" || x.toLowerCase == \"i\" || x.toLowerCase == \"j\" || x.toLowerCase\
    \ == \"k\" || x.toLowerCase == \"l\" || x.toLowerCase == \"m\" || x.toLowerCase\
    \ == \"n\" || x.toLowerCase == \"o\" || x.toLowerCase == \"p\" || x.toLowerCase\
    \ == \"q\" || x.toLowerCase == \"r\" || x.toLowerCase == \"s\" || x.toLowerCase\
    \ == \"t\" || x.toLowerCase == \"u\" || x.toLowerCase == \"v\" || x.toLowerCase\
    \ == \"w\" || x.toLowerCase == \"x\" || x.toLowerCase == \"y\" || x.toLowerCase\
    \ == \"z\")\n            Right(wordCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4uxq3wvh.scala:26)\n\tat Problem.main(tmp4uxq3wvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List.empty)\n     \
    \   else if (words.size == 1) Right(words.head.length)\n        else if (words.size\
    \ == 2) Right(words.head.length + words.last.length)\n        else if (words.size\
    \ == 3) Right(words.head.length + words.last.length + words.last.length)\n   \
    \     else if (words.size == 4) Right(words.head.length + words.last.length +\
    \ words.last.length + words.last.length)\n        else if (words.size == 5) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.size == 6) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.size == 7) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.size == 8) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.size == 9) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.size == 10)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.size == 11)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.size == 12) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.size == 13) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.size == 14) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl4ulyz9w.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl4ulyz9w.scala:30:13 --------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.size == \e[31m14\e[0m) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.length == words.length)\n            val odd\
    \ = words.filter(_.length != words.length)\n            val evenOrder = even.map(_.toLowerCase\
    \ - 'a')\n            val oddOrder = odd.map(_.toLowerCase - 'a')\n          \
    \  val evenOrderCount = evenOrder.count(_ % 2 == 0)\n            val oddOrderCount\
    \ = oddOrder.count(_ % 2 == 0)\n            val evenOrderCountInt = evenOrderCount.toInt\n\
    \            val oddOrderCountInt = oddOrderCount.toInt\n            val evenOrderCountInt\
    \ = evenOrderCount.toInt\n            val oddOrderCountInt = oddOrderCount.toInt\n\
    \            val evenOrderCountInt = evenOrderCount.toInt\n            val oddOrderCountInt\
    \ = oddOrderCount.toInt\n            val evenOrderCountInt = evenOrderCount.toInt\n\
    \            val oddOrderCountInt = oddOrderCount.toInt\n            val evenOrderCountInt\
    \ = evenOrderCount.toInt\n            val oddOrderCountInt = oddOrderCount.toInt\n\
    \            val evenOrderCountInt = evenOrderCount.toInt\n            val oddOrderCountInt\
    \ = oddOrderCount.toInt\n            val evenOrderCountInt = evenOrderCount.toInt\n\
    \            val oddOrderCountInt = oddOrderCount.toInt\n            val evenOrderCountInt\
    \ = evenOrderCount.toInt\n            val oddOrderCountInt = oddOrderCount.toInt\n\
    \            val evenOrderCountInt = evenOrderCount.toInt\n            val oddOrderCountInt\
    \ = oddOrderCount.toInt\n            val evenOrderCountInt = evenOrderCount.toInt\n\
    \            val oddOrderCountInt = oddOrderCount.toInt\n            val evenOrderCountInt\
    \ = evenOrderCount.toInt\n            val oddOrderCountInt = oddOrderCount.toInt\n\
    \            val evenOrderCountInt = evenOrderCount.toInt\n            val oddOrderCountInt\
    \ = oddOrderCount.toInt\n            val evenOrderCountInt = evenOrderCount.toInt\n\
    \            val oddOrderCountInt = oddOrderCount.toInt\n            val evenOrderCountInt\
    \ = evenOrderCount.toInt\n            val oddOrderCountInt = oddOrderCount.toInt\n\
    \            val evenOrder\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbqnu0tlt.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbqnu0tlt.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbqnu0tlt.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mevenOrderCountInt\e[0m = evenOrderCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenOrderCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbqnu0tlt.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddOrderCountInt\e[0m\
    \ = oddOrderCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddOrderCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbqnu0tlt.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenOrderCountInt\e\
    [0m = evenOrderCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenOrderCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbqnu0tlt.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddOrderCountInt\e[0m\
    \ = oddOrderCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ oddLetters = words.map(_.toLowerCase filter (_ % 2 != 0))\n            val evenLetters\
    \ = words.map(_.toLowerCase filter (_ % 2 == 0))\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'a')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'a')\n            val evenLettersCount = evenLetters.count(_ == 'b')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'b')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'c')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'c')\n            val evenLettersCount = evenLetters.count(_ == 'd')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'd')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'e')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'e')\n            val evenLettersCount = evenLetters.count(_ == 'f')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'f')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'g')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'g')\n            val evenLettersCount = evenLetters.count(_ == 'h')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'h')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'i')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'i')\n            val evenLettersCount = evenLetters.count(_ == 'j')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'j')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'k')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'k')\n            val evenLettersCount = evenLetters.count(_ == 'l')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'l')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'm')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'm')\n            val evenLettersCount = evenLetters.count(_ == 'n')\n  \
    \          val oddLettersCount = oddLetters.count(_ == 'n')\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'o')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'o')\n            \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpitko0u0h.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpitko0u0h.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = evenLetters.count(_ == \e[31m'b'\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpitko0u0h.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.count(_ == \e[31m'b'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpitko0u0h.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(_ == \e[31m'c'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpitko0u0h.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.count(_ == \e[31m'c'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660029029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi81wbtzy.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5l7ah_61.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5l7ah_61.scala:18:71 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase).toList\n        if (words.isEmpty)\
    \ Left(List.empty)\n        else if (words.size == 1) Right(words.size)\n    \
    \    else if (words.size == 2) Right(words.size)\n        else if (words.size\
    \ == 3) Right(words.size)\n        else if (words.size == 4) Right(words.size)\n\
    \        else if (words.size == 5) Right(words.size)\n        else if (words.size\
    \ == 6) Right(words.size)\n        else if (words.size == 7) Right(words.size)\n\
    \        else if (words.size == 8) Right(words.size)\n        else if (words.size\
    \ == 9) Right(words.size)\n        else if (words.size == 10) Right(words.size)\n\
    \        else if (words.size == 11) Right(words.size)\n        else if (words.size\
    \ == 12) Right(words.size)\n        else if (words.size == 13) Right(words.size)\n\
    \        else if (words.size == 14) Right(words.size)\n        else if (words.size\
    \ == 15) Right(words.size)\n        else if (words.size == 16) Right(words.size)\n\
    \        else if (words.size == 17) Right(words.size)\n        else if (words.size\
    \ == 18) Right(words.size)\n        else if (words.size == 19) Right(words.size)\n\
    \        else if (words.size == 20) Right(words.size)\n        else if (words.size\
    \ == 21) Right(words.size)\n        else if (words.size == 22) Right(words.size)\n\
    \        else if (words.size == 23) Right(words.size)\n        else if (words.size\
    \ == 24) Right(words.size)\n        else if (words.size == 25) Right(words.size)\n\
    \        else if (words.size == 26) Right(words.size)\n        else if (words.size\
    \ == 27) Right(words.size)\n        else if (words.size == 28) Right(words.size)\n\
    \        else if (words.size == 29) Right(words.size)\n        else if (words.size\
    \ == 30) Right(words.size)\n        else if (words.size == 31) Right(words.size)\n\
    \        else if (words.size == 32) Right(words.size)\n        else if (words.size\
    \ == 33) Right(words.size)\n        else if (words.size == 34) Right(words.size)\n\
    \        else if (words.size == 35) Right(words.size)\n        else if (words.size\
    \ == 36) Right(words.size)\n        else if (words.size == 37) Right(words.size)\n\
    \        else if (words.size == 38) Right(words.size)\n        else if (words.size\
    \ == 39) Right(words.size)\n        else if (words.size == 40) Right(words.size)\n\
    \        else if (words.size == 41) Right(words.size)\n        else if (words.size\
    \ == 42) Right(words.size)\n        else if (words.size == 43) Right(words.size)\n\
    \        else if (words.size == 44) Right(words.size)\n        else if (words.size\
    \ == 45) Right(words.size)\n        else if (words.size == 46) Right(words.size)\n\
    \        else if (words.size == 47) Right(words.size)\n        else if (words.size\
    \ == 48) Right(words.size)\n        else if (words.size == 49) Right(words.size)\n\
    \        else if (words.size == 50) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1v9pp8vo.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val letterWords = words.filter(_.contains(\"a\"))\n        val\
    \ letterWordsOdd = letterWords.filter(_.toString.toLowerCase % 2 != 0)\n     \
    \   val letterWordsEven = letterWords.filter(_.toString.toLowerCase % 2 == 0)\n\
    \        val letterWordsOddLength = letterWordsOdd.length\n        val letterWordsEvenLength\
    \ = letterWordsEven.length\n        val letterWordsOddOrder = letterWordsOdd.map(_.toString.toLowerCase\
    \ % 26).sum\n        val letterWordsEvenOrder = letterWordsEven.map(_.toString.toLowerCase\
    \ % 26).sum\n        val letterWordsOddOrderLength = letterWordsOddOrder.length\n\
    \        val letterWordsEvenOrderLength = letterWordsEvenOrder.length\n      \
    \  val letterWordsOddOrderLetters = letterWordsOdd.map(_.toString.toLowerCase\
    \ % 26).map(_.toString).sum\n        val letterWordsEvenOrderLetters = letterWordsEven.map(_.toString.toLowerCase\
    \ % 26).map(_.toString).sum\n        val letterWordsOddOrderLettersLength = letterWordsOddOrderLetters.length\n\
    \        val letterWordsEvenOrderLettersLength = letterWordsEvenOrderLetters.length\n\
    \        val letterWordsOddOrderLettersLetters = letterWordsOddOrderLetters.map(_.toString.toLowerCase\
    \ % 26).map(_.toString).sum\n        val letterWordsEvenOrderLettersLetters =\
    \ letterWordsEvenOrderLetters.map(_.toString.toLowerCase % 26).map(_.toString).sum\n\
    \        val letterWordsOddOrderLettersLettersLength = letterWordsOddOrderLettersLetters.length\n\
    \        val letterWordsEvenOrderLettersLettersLength = letterWordsEvenOrderLettersLetters.length\n\
    \        val letterWordsOddOrderLettersLettersLetters = letterWordsOddOrderLettersLetters.map(_.toString.toLowerCase\
    \ % 26).map(_.toString).sum\n        val letterWordsEvenOrderLettersLettersLetters\
    \ = letterWordsEvenOrderLettersLetters.map(_.toString.toLowerCase % 26).map(_.toString).sum\n\
    \        val letterWordsOddOrderLettersLettersLettersLength = letterWordsOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pgcgmg2.scala:18:71 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mletterWordsOdd\e[0m = letterWords.filter(_.toString.toLowerCase\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pgcgmg2.scala:19:72\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsEven\e[0m = letterWords.filter(_.toString.toLowerCase % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pgcgmg2.scala:22:76\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsOddOrder\e[0m = letterWordsOdd.map(_.toString.toLowerCase % \e\
    [31m26\e[0m).sum\n\e[31m\e[31m   |\e[0m                                      \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp8pgcgmg2.scala:22:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mletterWordsOddOrder\e[0m\
    \ = letterWordsOdd.map(_.toString.toLowerCase % \e[31"
  stdout: ''
  timestamp: 1660029039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val wordList = words.toList\n            val evenWords = wordList.filter(word\
    \ => word.length % 2 == 0)\n            val oddWords = wordList.filter(word =>\
    \ word.length % 2 != 0)\n            val evenLetters = evenWords.map(word => word.count(_\
    \ == 'a'))\n            val oddLetters = oddWords.map(word => word.count(_ ==\
    \ 'a'))\n            val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n            val oddLettersCountString = oddLetters.mkString(\",\")\n   \
    \         val evenLettersCountLong = evenLettersCount.toLong\n            val\
    \ oddLettersCountLong = oddLettersCount.toLong\n            val evenLettersCountString\
    \ = evenLettersCount.toString\n            val oddLettersCountString = oddLettersCount.toString\n\
    \            val evenLettersCountLongString = evenLettersCountLong.toString\n\
    \            val oddLettersCountLongString = oddLettersCountLong.toString\n  \
    \          val evenLettersCountLongString = \"(\" + evenLettersCountLongString\
    \ + \")\"\n            val oddLettersCountLongString = \"(\" + oddLettersCountLongString\
    \ + \")\"\n            val evenLettersCountLongStringLong = evenLettersCountLongString.toLong\n\
    \            val oddLettersCountLongStringLong = oddLettersCountLongString.toLong\n\
    \            val evenLettersCountLongStringLong = evenLettersCountLongStringLong.toLong\n\
    \            val oddLettersCountLongStringLong = oddLettersCountLongStringLong.toLong\n\
    \            val evenLettersCountLongStringLong = evenLettersCountLongStringLong.toLong\n\
    \            val oddLettersCountLongStringLong = oddLettersCountLongStringLong.toLong\n\
    \            val evenLettersCountLongStringLong = evenLettersCountLongStringLong.toLong\n\
    \            val oddLettersCountLongStringLong = oddLettersCountLongStringLong.toLong\n\
    \            val evenLettersCountLongStringLong = evenLettersCountLongStringLong.toLong\n\
    \            val oddLettersCountLongStringLong = oddLettersCountLongStringLong.toLong\n\
    \            val evenLettersCountLongStringLong = evenLettersCountLongStringLong.toLong\n\
    \            val oddLettersCountLongStringLong = oddLettersCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkal5vwih.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkal5vwih.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountString\e[0m = evenLettersCount.toString\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkal5vwih.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountString\e\
    [0m = oddLettersCount.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkal5vwih.scala:32:16 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLongString\e\
    [0m = \e[31m\"(\"\e[0m + evenLettersCountLongString + \e[31m\")\"\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountLongString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountLongString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkal5vwih.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountLongString\e\
    [0m = \e[31m\"(\"\e[0m + oddLettersCountLongString + \e[31m\")\"\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) Left(Nil)\n\
    \        else if (words.size == 1) Right(words.head)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8yb5hy1r.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m    \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8yb5hy1r.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val even = words.filter(_.toLowerCase == \"even\")\n            val odd\
    \ = words.filter(_.toLowerCase == \"odd\")\n            val evenSize = even.length\n\
    \            val oddSize = odd.length\n            val evenLetters = even.map(_.toLowerCase\
    \ - ord('a'))\n            val oddLetters = odd.map(_.toLowerCase - ord('a'))\n\
    \            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n          \
    \  val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n\
    \            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_\
    \ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n\
    \            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n          \
    \  val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n\
    \            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_\
    \ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n\
    \            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n          \
    \  val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n\
    \            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiip6tz78.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiip6tz78.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = evenLetters.count(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiip6tz78.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiip6tz78.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiip6tz78.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moddLettersCount is already defined"
  stdout: ''
  timestamp: 1660029042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.length == words.length)\n            val odd\
    \ = words.filter(_.length % 2 == 1)\n            val evenLetters = even.map(_.toLowerCase).filter(_.toCharArray.map(_.toLowerCase\
    \ == _).forall(_.toLowerCase == 'a'))\n            val oddLetters = odd.map(_.toLowerCase).filter(_.toCharArray.map(_.toLowerCase\
    \ == _).forall(_.toLowerCase == 'a'))\n            val evenLettersCount = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum\n            val oddLettersCount = oddLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum\n            val evenLettersCountInt = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toInt\n            val oddLettersCountInt = oddLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toInt\n            val evenLettersCountLong = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toLong\n            val oddLettersCountLong = oddLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toLong\n            val evenLettersCountDouble = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toDouble\n            val oddLettersCountDouble = oddLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toDouble\n            val evenLettersCountFloat = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toFloat\n            val oddLettersCountFloat = oddLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toFloat\n            val evenLettersCountInt = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toInt\n            val oddLettersCountInt = oddLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toInt\n            val evenLettersCountLong = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toLong\n            val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpo1j8i_42.scala:36:15 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo1j8i_42.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo1j8i_42.scala:33:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountInt\e[0m = evenLetters.map(_.toCharArray.map(_.toLowerCase\
    \ == _).length).sum.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo1j8i_42.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e\
    [0m = oddLetters.map(_.toCharArray.map(_.toLowerCase == _).length).sum.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo1j8i_42.scala:35:16 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLong\e\
    [0m = evenLetters.map(_.toCharArray.map(_.toLowerCase == _).length).sum.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660029043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else splitWords(words.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaocaa6mr.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m splitWords(words.tail)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 1)\n            val\
    \ evenLetters = even.count(_ % 2 == 0)\n            val oddLetters = odd.count(_\
    \ % 2 == 1)\n            val evenLettersCount = evenLetters.toLong\n         \
    \   val oddLettersCount = oddLetters.toLong\n            val evenLettersCountString\
    \ = evenLetters.toString.toLong\n            val oddLettersCountString = oddLetters.toString.toLong\n\
    \            val evenLettersCountString2 = evenLetters.toString.toLong\n     \
    \       val oddLettersCountString2 = oddLetters.toString.toLong\n            val\
    \ evenLettersCountString3 = evenLetters.toString.toLong\n            val oddLettersCountString3\
    \ = oddLetters.toString.toLong\n            val evenLettersCountString4 = evenLetters.toString.toLong\n\
    \            val oddLettersCountString4 = oddLetters.toString.toLong\n       \
    \     val evenLettersCountString5 = evenLetters.toString.toLong\n            val\
    \ oddLettersCountString5 = oddLetters.toString.toLong\n            val evenLettersCountString6\
    \ = evenLetters.toString.toLong\n            val oddLettersCountString6 = oddLetters.toString.toLong\n\
    \            val evenLettersCountString7 = evenLetters.toString.toLong\n     \
    \       val oddLettersCountString7 = oddLetters.toString.toLong\n            val\
    \ evenLettersCountString8 = evenLetters.toString.toLong\n            val oddLettersCountString8\
    \ = oddLetters.toString.toLong\n            val evenLettersCountString9 = evenLetters.toString.toLong\n\
    \            val oddLettersCountString9 = oddLetters.toString.toLong\n       \
    \     val evenLettersCountString10 = evenLetters.toString.toLong\n           \
    \ val oddLettersCountString10 = oddLetters.toString.toLong\n            val evenLettersCountString11\
    \ = evenLetters.toString.toLong\n            val oddLettersCountString11 = oddLetters.toString.toLong\n\
    \            val evenLettersCountString12 = evenLetters.toString.toLong\n    \
    \        val oddLettersCountString12 = odd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbmyzfze_.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmyzfze_.scala:21:41\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenCount\e[0m = even.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmyzfze_.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmyzfze_.scala:23:43\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = even.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmyzfze_.scala:24:41\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1660029039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.forall(_.isLetter) && word.length\
    \ % 2 == 0)\n            val odd = words.filter(word => word.forall(_.isLetter)\
    \ && word.length % 2 != 0)\n            val evenSize = even.map(_.length).sum\n\
    \            val oddSize = odd.map(_.length).sum\n            val evenLetters\
    \ = even.map(_.toLowerCase -> 1).groupBy(_._1).mapValues(_.size)\n           \
    \ val oddLetters = odd.map(_.toLowerCase -> 1).groupBy(_._1).mapValues(_.size)\n\
    \            val evenLettersCount = evenLetters.toSeq.sortBy(_._2).reverse.head\n\
    \            val oddLettersCount = oddLetters.toSeq.sortBy(_._2).reverse.head\n\
    \            val evenLettersCount2 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount2 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount3 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount3 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount4 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount4 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount5 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount5 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount6 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount6 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount7 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount7 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount8 = evenLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val oddLettersCount8 = oddLetters.toSeq.sortBy(_._1).reverse.head\n\
    \            val evenLettersCount9 = evenLetters.toSeq.sortBy(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpslk_yf7q.scala:41:61 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount9\e\
    [0m = evenLetters.toSeq.sortBy(\n\e[31m\e[31m   |\e[0m                       \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                        expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpslk_yf7q.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpslk_yf7q.scala:42:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpslk_yf7q.scala:54:1 ---------------------\e[0m\e\
    [0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmpslk_yf7q.scala:43:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Left(words)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4zq_wuau.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = txt.split(\"\").map(_.toLower)\n            val even = letters.filter(letter\
    \ => letter % 2 == 0).length\n            val odd = letters.filter(letter => letter\
    \ % 2 != 0).length\n            Left(words.take(even))\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl45kg7hk.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = txt.split(\e\
    [31m\"\"\e[0m).map(_.toLower)\n\e[31m\e[31m   |\e[0m                         \
    \                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \       value toLower is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpl45kg7hk.scala:19:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mletters\e[0m = txt.split(\e[31m\"\"\e[0m).map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl45kg7hk.scala:22:27 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \            Left(words.take(even))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                 Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 == 0)\n           \
    \ val oddOrderWords = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.size\n            val\
    \ oddOrderWordsCount = oddOrderWords.size\n            if (evenOrderWordsCount\
    \ == 0) Right(evenOrderWordsCount)\n            else if (oddOrderWordsCount ==\
    \ 0) Right(oddOrderWordsCount)\n            else {\n                val evenOrderWordsCount\
    \ = evenOrderWords.map(_.size).sum\n                val oddOrderWordsCount = oddOrderWords.map(_.size).sum\n\
    \                if (evenOrderWordsCount == 0) Right(evenOrderWordsCount)\n  \
    \              else if (oddOrderWordsCount == 0) Right(oddOrderWordsCount)\n \
    \               else {\n                    val evenOrderWordsCount = evenOrderWords.map(_.count('a')).sum\n\
    \                    val oddOrderWordsCount = oddOrderWords.map(_.count('a')).sum\n\
    \                    if (evenOrderWordsCount == 0) Right(evenOrderWordsCount)\n\
    \                    else if (oddOrderWordsCount == 0) Right(oddOrderWordsCount)\n\
    \                    else {\n                        val evenOrderWordsCount =\
    \ evenOrderWords.map(_.count('b')).sum\n                        val oddOrderWordsCount\
    \ = oddOrderWords.map(_.count('b')).sum\n                        if (evenOrderWordsCount\
    \ == 0) Right(evenOrderWordsCount)\n                        else if (oddOrderWordsCount\
    \ == 0) Right(oddOrderWordsCount)\n                        else {\n          \
    \                  val evenOrderWordsCount = evenOrderWords.map(_.count('c')).sum\n\
    \                            val oddOrderWordsCount = oddOrderWords.map(_.count('c')).sum\n\
    \                            if (evenOrderWordsCount == 0) Right(evenOrderWordsCount)\n\
    \                            else if (oddOrderWordsCount == 0) Right(oddOrderWordsCount)\n\
    \                            else {\n                                val evenOrderWordsCount\
    \ = evenOrderWords.map(_.count('d')).sum\n                                val\
    \ oddOrderWordsCount = oddOrderWords.map(_.count('d')).sum\n                 \
    \               if (evenOrderWordsCount == 0) Right(evenOrderWordsCount)\n   \
    \                             else if (oddOrderWordsCoun\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkk47qsf1.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkk47qsf1.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpkk47qsf1.scala:32:73 --------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                    \e[33mval\e[0m \e[36mevenOrderWordsCount\e\
    [0m = evenOrderWords.map(_.count(\e[31m'a'\e[0m)).sum\n\e[31m\e[31m   |\e[0m \
    \                                                                        ^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    (\e\
    [31m'a'\e[0m : Char)\n\e[31m   |\e[0m                                        \
    \       Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkk47qsf1.scala:33:71 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                    \e[33mval\e[0m \e[36moddOrderWordsCount\e[0m = oddOrderWords.map(_.count(\e\
    [31m'a'\e[0m)).sum\n\e[31m\e[31m   |\e[0m                                    \
    \                                   ^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e\
    [0m                                               Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkk47qsf1.scala:37:77\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                        \e[33mval\e\
    [0m \e[36mevenOrderWordsCount\e[0m = evenOrderWords.map(_.count(\e[31m'b'\e[0m)).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                              \
    \                 Found:    (\e[31m'b'\e[0m : Char)\n\e[31m   |\e[0m         \
    \                                      Required: Char => Boolean\n\e["
  stdout: ''
  timestamp: 1660029041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else {\n  \
    \          val splitWords = words.map(_.toLowerCase)\n            val noWhiteSpaceWords\
    \ = splitWords.filter(_.nonEmpty)\n            val noCommaWords = noWhiteSpaceWords.filter(_.contains(\"\
    ,\"))\n            val noLettersWords = noCommaWords.filter(_.toString.length\
    \ == 1)\n            val noLettersWordsCount = noLettersWords.map(_.toString.length).sum\n\
    \            val noLettersWordsCountEven = noLettersWordsCount % 2 == 0\n    \
    \        val noLettersWordsCountOdd = noLettersWordsCount % 2 != 0\n         \
    \   val noLettersWordsCountEvenOrOdd = noLettersWordsCountEven || noLettersWordsCountOdd\n\
    \            val noLettersWordsCountEvenOrOddEven = noLettersWordsCountEvenOrOdd\
    \ && noLettersWordsCountEven\n            val noLettersWordsCountEvenOrOddOdd\
    \ = noLettersWordsCountEvenOrOdd && !noLettersWordsCountEven\n            val\
    \ noLettersWordsCountEvenOrOddEvenOrOdd = noLettersWordsCountEvenOrOddEven ||\
    \ noLettersWordsCountOddOdd\n            val noLettersWordsCountEvenOrOddEvenOrOddEven\
    \ = noLettersWordsCountEvenOrOddEvenOrOdd && noLettersWordsCountEvenOrOdd\n  \
    \          val noLettersWordsCountEvenOrOddEvenOrOddOdd = noLettersWordsCountEvenOrOddEvenOrOdd\
    \ && !noLettersWordsCountEvenOrOddEven\n            val noLettersWordsCountEvenOrOddEvenOrOddEvenOrOdd\
    \ = noLettersWordsCountEvenOrOddEvenOrOddEven || noLettersWordsCountOddOddEvenOrOddOdd\n\
    \            val noLettersWordsCountEvenOrOddEvenOrOddEvenOrOddEven = noLettersWordsCountEvenOrOddEvenOrOddEvenOrOdd\
    \ && noLettersWordsCountEvenOrOddEvenOrOdd\n            val noLettersWordsCountEvenOrOddEvenOrOddEvenOrOddOdd\
    \ = noLettersWord\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8mu21lw8.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mu21lw8.scala:27:92\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnoLettersWordsCountEvenOrOddEvenOrOdd\e[0m = noLettersWordsCountEvenOrOddEven\
    \ || noLettersWordsCountOddOdd\n\e[31m\e[31m   |\e[0m                        \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: noLettersWordsCountOddOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mu21lw8.scala:30:110\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnoLettersWordsCountEvenOrOddEvenOrOddEvenOrOdd\e[0m = noLettersWordsCountEvenOrOddEvenOrOddEven\
    \ || noLettersWordsCountOddOddEvenOrOddOdd\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: noLettersWordsCountOddOddEvenOrOddOdd\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mu21lw8.scala:32:68\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnoLettersWordsCountEvenOrOddEvenOrOddEvenOrOddOdd\e[0m = noLettersWord\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                   Not found: noLettersWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8mu21lw8.scala:45:1 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Eith"
  stdout: ''
  timestamp: 1660029038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordSet = words.toSet\n            if (wordSet.size == 0) Left(Nil)\n      \
    \      else if (wordSet.size == 1) Right(wordSet.size)\n            else {\n \
    \               val lowerCaseLetters = wordSet.filter(_.isLower).toSet\n     \
    \           if (lowerCaseLetters.size == 0) Left(Nil)\n                else if\
    \ (lowerCaseLetters.size == 1) Right(lowerCaseLetters.size)\n                else\
    \ {\n                    val oddOrderLetters = lowerCaseLetters.filter(c => c\
    \ % 2 == 1).map(c => c + ord('a')).toSet\n                    if (oddOrderLetters.size\
    \ == 0) Left(Nil)\n                    else if (oddOrderLetters.size == 1) Right(oddOrderLetters.size)\n\
    \                    else {\n                        val evenOrderLetters = lowerCaseLetters.filter(c\
    \ => c % 2 == 0).map(c => c + ord('a')).toSet\n                        if (evenOrderLetters.size\
    \ == 0) Left(Nil)\n                        else if (evenOrderLetters.size == 1)\
    \ Right(evenOrderLetters.size)\n                        else {\n             \
    \               val evenOrderLettersCount = evenOrderLetters.size\n          \
    \                  val oddOrderLettersCount = oddOrderLetters.size\n         \
    \                   if (evenOrderLettersCount > oddOrderLettersCount) Right(evenOrderLettersCount)\n\
    \                            else if (evenOrderLettersCount == oddOrderLettersCount)\
    \ Right(evenOrderLettersCount)\n                            else Left(oddOrderLettersCount)\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5067zljf.scala:23:56 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mlowerCaseLetters\e\
    [0m = wordSet.filter(_.isLower).toSet\n\e[31m\e[31m   |\e[0m                 \
    \                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         value isLower is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5067zljf.scala:27:73 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mval\e[0m \e[36moddOrderLetters\e\
    [0m = lowerCaseLetters.filter(\e[36mc\e[0m => c % \e[31m2\e[0m == \e[31m1\e[0m).map(\e\
    [36mc\e[0m => c + ord(\e[31m'a'\e[0m)).toSet\n\e[31m\e[31m   |\e[0m          \
    \                                                             ^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5067zljf.scala:27:96 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mval\e[0m \e[36moddOrderLetters\e\
    [0m = lowerCaseLetters.filter(\e[36mc\e[0m => c % \e[31m2\e[0m == \e[31m1\e[0m).map(\e\
    [36mc\e[0m => c + ord(\e[31m'a'\e[0m)).toSet\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \          ^^^\e[0m\n\e[31m   |\e[0m                                         \
    \                 Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5067zljf.scala:31:78 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                        \e[33mval\e[0m \e[36mevenOrderLetters\e[0m = lowerCaseLetters.filter(\e\
    [36mc\e[0m => c % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mc\e[0m => c + ord(\e\
    [31m'a'\e[0m)).toSet\n\e[31m\e[31m   |\e[0m                                  \
    \                                          ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not"
  stdout: ''
  timestamp: 1660029039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphq0yawcb.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphq0yawcb.scala:59:43\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (words.length == \e[31m43\e[0m) Right(word\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Not found: word\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else {\n\
    \            val wordList = words.toList\n            val wordListWithSpace =\
    \ wordList.map(word => if (word.contains(\" \")) {\n                word.split(\"\
    \ \").map(_.toLowerCase)\n            } else {\n                word.split(\"\
    ,\").map(_.toLowerCase)\n            })\n            val wordListWithComma = wordList.map(word\
    \ => if (word.contains(\" \")) {\n                word.split(\" \").map(_.toLowerCase)\n\
    \            } else {\n                word.split(\",\")\n            })\n   \
    \         val wordListWithLetters = wordList.map(word => if (word.contains(\"\
    \ \")) {\n                word.split(\" \").map(_.toLowerCase)\n            }\
    \ else {\n                word.map(_.toLowerCase)\n            })\n          \
    \  val wordListWithLettersOdd = wordList.map(word => if (word.contains(\" \"))\
    \ {\n                word.split(\" \").map(_.toLowerCase)\n            } else\
    \ {\n                word.map(_.toLowerCase).filter(x => x % 2 != 0)\n       \
    \     })\n            val wordListWithLettersEven = wordList.map(word => if (word.contains(\"\
    \ \")) {\n                word.split(\" \").map(_.toLowerCase)\n            }\
    \ else {\n                word.map(_.toLowerCase).filter(x => x % 2 == 0)\n  \
    \          })\n            val wordListWithLettersOddAndEven = wordList.map(word\
    \ => if (word.contains(\" \")) {\n                word.split(\" \").map(_.toLowerCase)\n\
    \            } else {\n                word.map(_.toLowerCase).filter(x => x %\
    \ 2 == 0 && x % 2 != 0)\n            })\n            val wordListWithLettersOddAndEvenAndOdd\
    \ = wordList.map(word => if (word.contains(\" \")) {\n                word.split(\"\
    \ \").map(_.toLowerCase)\n            } else {\n                word.map(_.toLowerCase).filter(x\
    \ => x % 2 == 0 && x % 2 != 0 && x % 3 != 0)\n            })\n            val\
    \ wordListWithLettersOddAndEvenAndOddAndEven = wordList.map(word => if (word.contains(\"\
    \ \")) {\n                word.split(\" \").map(_.toLowerCase)\n            }\
    \ else {\n                word.map(_.toLowerCase).filter(x => x % 2 == 0 && x\
    \ % 2 != 0 && x % 3 != 0 && x % 4 != 0)\n            })\n            val wordListWithLettersOddAndEvenAndOddAndEvenAndOdd\
    \ = wordList.map(word => if (word.contains(\" \")) {\n                word.split(\"\
    \ \").map(_.toLowerCase)\n            } else {\n                word.map(_.toLowerCase).filter(x\
    \ => x % 2 == 0 && x % 2 != 0 && x % 3 \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8xrxbo10.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8xrxbo10.scala:65:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp8xrxbo10.scala:77:0 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8xrxbo10.scala:33:27\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                word.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8xrxbo10.scala:38:27 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                word.map(_.toLowerCase).filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8xrxbo10.scala:43:27 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m                word.map(_.toLowerCase).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8xrxbo10.scala:48:27\
    \ ------------------------\e[0m\e[0m\n\e[31m48 |\e[0m                word.map(_.toLowerCase).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m && x % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8xrxb"
  stdout: ''
  timestamp: 1660029041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        if (words.isEmpty) Left(List())\n\
    \        else if (words.size == 1) Right(List(words(0)))\n        else if (words.size\
    \ == 2) Right(List(words(0), words(1)))\n        else if (words.size == 3) Right(List(words(0),\
    \ words(1), words(2)))\n        else if (words.size == 4) Right(List(words(0),\
    \ words(1), words(2), words(3)))\n        else if (words.size == 5) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4)))\n        else if (words.size == 6)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5)))\n  \
    \      else if (words.size == 7) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6)))\n        else if (words.size == 8) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7)))\n   \
    \     else if (words.size == 9) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8)))\n        else if (words.size\
    \ == 10) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9)))\n        else if (words.size == 11)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10)))\n        else if (words.size == 12)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10), words(11)))\n        else if (words.size\
    \ == 13) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9), words(10), words(11), words(12)))\n\
    \        else if (words.size == 14) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8), words(9), words(10), words(11),\
    \ words(12), words(13)))\n        else if (words.size == 15) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7), words(8),\
    \ words(9\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2k7d7nhw.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2k7d7nhw.scala:17:44 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.size == \e[31m1\e[0m) Right(List(words(\e\
    [31m0\e[0m)))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2k7d7nhw.scala:18:44 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m2\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2k7d7nhw.scala:19:44 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m3\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2k7d7nhw.scala:20:44 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m4\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [3"
  stdout: ''
  timestamp: 1660029043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnd87om0k.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnd87om0k.scala:18:72\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \  value isLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660029041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        val result = words.map(word => word.split(\"[,]\")).map(_.map(_.toLowerCase))\n\
    \        if (result.length == 0) Right(result.size)\n        val even = result.filter(_.length\
    \ == 2).map(_.map(_.toLowerCase))\n        if (even.length == 0) Right(even.size)\n\
    \        val odd = result.filter(_.length == 1).map(_.map(_.toLowerCase))\n  \
    \      if (odd.length == 0) Right(odd.size)\n        val evenOdd = even.zip(odd)\n\
    \        if (evenOdd.length == 0) Right(evenOdd.size)\n        val evenOddSum\
    \ = evenOdd.map(x => x._1 + x._2).sum\n        val evenOddSumOdd = evenOddSum.toLong\n\
    \        val evenOddSumEven = evenOddSumOdd % 2\n        val evenOddSumEvenOdd\
    \ = evenOddSumEven % 2\n        val evenOddSumEvenOddOdd = evenOddSumEvenOdd %\
    \ 2\n        val evenOddSumEvenOddEvenOdd = evenOddSumEvenOddEvenOdd % 2\n   \
    \     val evenOddSumEvenOddEvenOddOdd = evenOddSumEvenOddEvenOddOdd % 2\n    \
    \    val evenOddSumEvenOddEvenOddEvenOdd = evenOddSumEvenOddEvenOddEvenOdd % 2\n\
    \        val evenOddSumEvenOddEvenOddEvenOddOdd = evenOddSumEvenOddEvenOddEvenOddOdd\
    \ % 2\n        val evenOddSumEvenOddEvenOddEvenOddEvenOdd = evenOddSumEvenOddEvenOddEvenOddEvenOdd\
    \ % 2\n        val evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ % 2\n        val evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ % 2\n        val evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20axs06t.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20axs06t.scala:25:47\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOddSum\e[0m = evenOdd.map(\e[36mx\e[0m => x._1 + x._2).sum\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of Array[String], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp20axs06t.scala:25:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mevenOddSum\e[0m = evenOdd.map(\e\
    [36mx\e[0m => x._1 + x._2).sum\n\e[31m\e[31m   |\e[0m                        \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                          where:    B is a type variable\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp20axs06t.scala:30:39 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mevenOddSumEvenOddEvenOdd\e\
    [0m = evenOddSumEvenOddEvenOdd % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                              ^\e[0m\n\e[31m   |\e[0m                     Recursive\
    \ \e[33mvalue\e[0m \e[35mevenOddSumEvenOddEvenOdd\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp20axs06t.scala:31:42 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mevenOddSumEvenOddEvenOddOdd\e\
    [0m = evenOddSumEvenOddEvenOddOdd % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660029042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else if (words.length ==\
    \ 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp02f_ls3z.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Right(words.size)\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val wordList = words.toList\n            val wordSet =\
    \ wordList.groupBy(w => w.toLowerCase)\n            val wordCount = wordSet.map(_.length).sum\n\
    \            val oddWordCount = wordSet.filter(_.length == wordSet.length).map(_.length).sum\n\
    \            Right(wordCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_n4_o4jy.scala:23:42 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mwordCount\e[0m = wordSet.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value length is not a member of (String, List[String])\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_n4_o4jy.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddWordCount\e[0m =\
    \ wordSet.filter(_.length == wordSet.length).map(_.length).sum\n\e[31m\e[31m \
    \  |\e[0m                                              ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  value length is not a member of (String, List[String])\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_n4_o4jy.scala:24:80 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddWordCount\e[0m =\
    \ wordSet.filter(_.length == wordSet.length).map(_.length).sum\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value length is not\
    \ a member of (String, List[String])\n3 errors found\n"
  stdout: ''
  timestamp: 1660029042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numLetters = words.map(_.length).sum\n\
    \        val numWords = words.length\n        val numCommas = words.filter(_.contains(\"\
    ,\")).length\n        val numCommasEven = words.filter(_.contains(\",\")).filter(_.contains(\"\
    a\")).length\n        val numCommasOdd = words.filter(_.contains(\",\")).filter(_.contains(\"\
    b\")).length\n        val numCommasEvenOdd = words.filter(_.contains(\",\")).filter(_.contains(\"\
    c\")).length\n        val numCommasOddOdd = words.filter(_.contains(\",\")).filter(_.contains(\"\
    d\")).length\n        val numCommasEvenOddOdd = words.filter(_.contains(\",\"\
    )).filter(_.contains(\"e\")).length\n        val numCommasOddEvenOdd = words.filter(_.contains(\"\
    ,\")).filter(_.contains(\"f\")).length\n        val numCommasEvenOddEvenOdd =\
    \ words.filter(_.contains(\",\")).filter(_.contains(\"g\")).length\n        val\
    \ numCommasOddEvenEvenOdd = words.filter(_.contains(\",\")).filter(_.contains(\"\
    h\")).length\n        val numCommasEvenOddEvenEvenOdd = words.filter(_.contains(\"\
    ,\")).filter(_.contains(\"i\")).length\n        val numCommasOddEvenEvenEvenOdd\
    \ = words.filter(_.contains(\",\")).filter(_.contains(\"j\")).length\n       \
    \ val numCommasEvenOddEvenEvenEvenOdd = words.filter(_.contains(\",\")).filter(_.contains(\"\
    k\")).length\n        val numCommasOddEvenEvenEvenEvenEvenOdd = words.filter(_.contains(\"\
    ,\")).filter(_.contains(\"l\")).length\n        val numCommasEvenOddEvenEvenEvenEvenOdd\
    \ = words.filter(_.contains(\",\")).filter(_.contains(\"m\")).length\n       \
    \ val numCommasOddEvenEvenEvenEvenEvenEvenOdd = words.filter(_.contains(\",\"\
    )).filter(_.contains(\"n\")).length\n        val numCommasEvenOddEvenEvenEvenEvenEvenEvenOdd\
    \ = words.filter(_.contains(\",\")).filter(_.contains(\"o\")).length\n       \
    \ val numCommasOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = words.filter(_.contains(\"\
    ,\")).filter(_.contains(\"p\")).length\n        val numCommasEvenOddEvenEvenEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpinrmphlz.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpinrmphlz.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").toList\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n        val\
    \ noCommaWords = words.filter(!_.contains(\",\"))\n        val noCommaWordsCount\
    \ = noCommaWords.map(_.length).sum\n        val lowerCaseWords = words.filter(_.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\".toLowerCase && !_.contains(\",\"))\n     \
    \   val lowerCaseWordsCount = lowerCaseWords.map(_.length).sum\n        val oddOrderWords\
    \ = words.filter(_.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\".toLowerCase &&\
    \ _.contains(\",\") && _.toCharArray.map(_.toInt).filter(_.isEven).length == 0)\n\
    \        val oddOrderWordsCount = oddOrderWords.map(_.length).sum\n        val\
    \ result = if (commaWordsCount == 0 && noCommaWordsCount == 0 && lowerCaseWordsCount\
    \ == 0 && oddOrderWordsCount == 0) Right(0) else if (commaWordsCount == 0 && noCommaWordsCount\
    \ == 0 && lowerCaseWordsCount == 0 && oddOrderWordsCount == 0) Left(0) else if\
    \ (commaWordsCount == 0 && noCommaWordsCount == 0 && lowerCaseWordsCount == 0\
    \ && oddOrderWordsCount == 0) Right(0) else if (commaWordsCount == 0 && noCommaWordsCount\
    \ == 0 && lowerCaseWordsCount == 0 && oddOrderWordsCount == 0) Left(0) else if\
    \ (commaWordsCount == 0 && noCommaWordsCount == 0 && lowerCaseWordsCount == 0\
    \ && oddOrderWordsCount == 0) Right(0) else if (commaWordsCount == 0 && noCommaWordsCount\
    \ == 0 && lowerCaseWordsCount == 0 && oddOrderWordsCount == 0) Left(0) else if\
    \ (commaWordsCount == 0 && noCommaWordsCount == 0 && lowerCaseWordsCount == 0\
    \ && oddOrderWordsCount == 0) Right(0) else if (commaWordsCount == 0 && noCommaWordsCount\
    \ == 0 && lowerCaseWordsCount == 0 && oddOrderWordsCount == 0) Left(0) else if\
    \ (commaWordsCount == 0 && noCommaWordsCount == 0 && lowerCaseWordsCount == 0\
    \ && oddOrderWordsCount == 0) Right(0) else if (commaWordsCount == 0 && noCommaWordsCount\
    \ == 0 && lowerCaseWordsCount == 0 && odd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30c_tjgr.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp30c_tjgr.scala:20:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlowerCaseWords\e[0m = words.filter(_.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxyz\"\
    \e[0m.toLowerCase && !_.contains(\e[31m\",\"\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp30c_tjgr.scala:22:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddOrderWords\e[0m = words.filter(_.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxyz\"\
    \e[0m.toLowerCase && _.contains(\e[31m\",\"\e[0m) && _.toCharArray.map(_.toInt).filter(_.isEven).length\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30c_tjgr.scala:24:1188\
    \ ----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mif\e[0m (commaWordsCount == \e[31m0\e[0m && noCommaWordsCount == \e\
    [31m0\e[0m && lowerCaseWordsCount == \e[31m0\e[0m && oddOrderWordsCount == \e\
    [31m0\e[0m) Right(\e[31m0\e[0m) \e[33melse\e[0m \e[33mif\e[0m (commaWordsCount\
    \ == \e[31m0\e[0m && noCommaWordsCount == \e[31m0\e[0m && lowerCaseWordsCount\
    \ == \e[31m0\e[0m && oddOrderWordsCount == \e[31m0\e[0m) Left(\e[31m0\e[0m) \e\
    [33melse\e[0m \e[33mif\e[0m (commaWordsCount == \e[31m0\e[0m && noCommaWordsCount\
    \ == \e[31m0\e[0m && lowerCaseWordsCount == \e[31m0\e[0m && oddOrderWordsCount\
    \ == \e[31m0\e[0m) Right(\e[31m0\e[0m) \e[33melse\e[0m \e[33mif\e[0m (commaWordsCount\
    \ == \e[31m0"
  stdout: ''
  timestamp: 1660029043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmp8js2d.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029046
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = words.toList\n            val wordSet = wordList.map(_.toLowerCase).toSet\n\
    \            val oddOrder = wordList.map(_.toLowerCase).filter(x => wordSet.contains(x)).count(x\
    \ => x.toString.toLowerCase == \"a\")\n            Right(oddOrder)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbkmww_b0.scala:26)\n\tat Problem.main(tmpbkmww_b0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95veqkx3.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplof93kmt.scala:21)\n\tat Problem.main(tmplof93kmt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.length % 2 == 0)\n            val\
    \ odd = words.filter(word => word.length % 2 != 0)\n            val evenCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLetters\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLetters\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount\
    \ = even\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkuz3udnu.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkuz3udnu.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = even.map(\e[36mword\e[0m => word.count(_ >=\
    \ \e[31m'a'\e[0m && _ <=\e[31m'z'\e[0m)).sum\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkuz3udnu.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.map(\e[36mword\e[0m => word.count(_ >= \e[31m'a'\e[0m && _ <=\e[31m'z'\e\
    [0m)).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkuz3udnu.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = even.map(\e[36mword\e[0m => word.count(_ >= \e[31m'a'\e[0m && _ <=\e[31m'z'\e\
    [0m)).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkuz3udnu.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.map("
  stdout: ''
  timestamp: 1660029051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val oddOrderWords = words.filter(word => word.forall(c => c >= 'a' &&\
    \ c <= 'z'))\n            val evenOrderWords = words.filter(word => word.forall(c\
    \ => c >= 'a' && c <= 'z' && c % 2 == 0))\n            val evenOrderWordsCount\
    \ = evenOrderWords.map(_.length).sum\n            val oddOrderWordsCount = oddOrderWords.map(_.length).sum\n\
    \            Right(oddOrderWordsCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ucfds48.scala:27)\n\tat Problem.main(tmp8ucfds48.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5l7ah_61.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5l7ah_61.scala:18:71 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).count(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qrkrphl.scala:19)\n\tat Problem.main(tmp6qrkrphl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) Right(word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphq0yawcb.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphq0yawcb.scala:59:43\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (words.length == \e[31m43\e[0m) Right(word\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Not found: word\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp48b9jc4e.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Right(words.size)\n     \
    \   val commaWords = words.filter(_.contains(\",\"))\n        if (commaWords.length\
    \ == 0) Right(words.size)\n        val letterWords = words.filter(_.contains(\"\
    a\"))\n        if (letterWords.length == 0) Right(words.size)\n        val letterWordsOdd\
    \ = letterWords.filter(_.toString.toLowerCase % 2 != 0)\n        if (letterWordsOdd.length\
    \ == 0) Right(words.size)\n        val letterWordsEven = letterWords.filter(_.toString.toLowerCase\
    \ % 2 == 0)\n        if (letterWordsEven.length == 0) Right(words.size)\n    \
    \    val letterWordsOddOrder = letterWordsOdd.filter(_.toString.toLowerCase %\
    \ 2 == 1)\n        if (letterWordsOddOrder.length == 0) Right(words.size)\n  \
    \      val letterWordsEvenOrder = letterWordsEven.filter(_.toString.toLowerCase\
    \ % 2 == 0)\n        if (letterWordsEvenOrder.length == 0) Right(words.size)\n\
    \        val letterWordsOddOrderLetters = letterWordsOddOrder.filter(_.toString.toLowerCase\
    \ % 2 == 1)\n        if (letterWordsOddOrderLetters.length == 0) Right(words.size)\n\
    \        val letterWordsEvenOrderLetters = letterWordsEvenOrder.filter(_.toString.toLowerCase\
    \ % 2 == 0)\n        if (letterWordsEvenOrderLetters.length == 0) Right(words.size)\n\
    \        val letterWordsOddOrderLettersLetters = letterWordsOddOrderLetters.filter(_.toString.toLowerCase\
    \ % 2 == 1)\n        if (letterWordsOddOrderLettersLetters.length == 0) Right(words.size)\n\
    \        val letterWordsEvenOrderLettersLetters = letterWordsEvenOrderLetters.filter(_.toString.toLowerCase\
    \ % 2 == 0)\n        if (letterWordsEvenOrderLettersLetters.length == 0) Right(words.size)\n\
    \        val letterWordsOddOrderLettersLettersLetters = letterWordsOddOrderLettersLetters.filter(_.toString.toLowerCase\
    \ % 2 == 1)\n        if (letterWordsOddOrderLettersLettersLetters.length == 0)\
    \ Right(words.size)\n        val letterWordsEvenOrderLettersLettersLetters = letterWordsEvenOrderLettersLetters.filter(_.toString.toLowerCase\
    \ % 2 == 0)\n        if (letterWordsEvenOrderLettersLettersLetters.length == 0)\
    \ Right(words.size)\n        val letterWordsOddOrderLettersLetter\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjhscax13.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhscax13.scala:21:71\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsOdd\e[0m = letterWords.filter(_.toString.toLowerCase % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhscax13.scala:23:72\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsEven\e[0m = letterWords.filter(_.toString.toLowerCase % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhscax13.scala:25:79\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsOddOrder\e[0m = letterWordsOdd.filter(_.toString.toLowerCase %\
    \ \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e"
  stdout: ''
  timestamp: 1660029054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else if\
    \ (words.length == 2) Right(words.length)\n        else if (words.length == 3)\
    \ Right(words.length)\n        else if (words.length == 4) Right(words.length)\n\
    \        else if (words.length == 5) Right(words.length)\n        else if (words.length\
    \ == 6) Right(words.length)\n        else if (words.length == 7) Right(words.length)\n\
    \        else if (words.length == 8) Right(words.length)\n        else if (words.length\
    \ == 9) Right(words.length)\n        else if (words.length == 10) Right(words.length)\n\
    \        else if (words.length == 11) Right(words.length)\n        else if (words.length\
    \ == 12) Right(words.length)\n        else if (words.length == 13) Right(words.length)\n\
    \        else if (words.length == 14) Right(words.length)\n        else if (words.length\
    \ == 15) Right(words.length)\n        else if (words.length == 16) Right(words.length)\n\
    \        else if (words.length == 17) Right(words.length)\n        else if (words.length\
    \ == 18) Right(words.length)\n        else if (words.length == 19) Right(words.length)\n\
    \        else if (words.length == 20) Right(words.length)\n        else if (words.length\
    \ == 21) Right(words.length)\n        else if (words.length == 22) Right(words.length)\n\
    \        else if (words.length == 23) Right(words.length)\n        else if (words.length\
    \ == 24) Right(words.length)\n        else if (words.length == 25) Right(words.length)\n\
    \        else if (words.length == 26) Right(words.length)\n        else if (words.length\
    \ == 27) Right(words.length)\n        else if (words.length == 28) Right(words.length)\n\
    \        else if (words.length == 29) Right(words.length)\n        else if (words.length\
    \ == 30) Right(words.length)\n        else if (words.length == 31) Right(words.length)\n\
    \        else if (words.length == 32) Right(words.length)\n        else if (words.length\
    \ == 33) Right(words.length)\n        else if (words.length == 34) Right(words.length)\n\
    \        else if (words.length == 35) Right(words.length)\n        else if (words.length\
    \ == 36) Right(words.length)\n        else if (words.length == 37) Right(words.length)\n\
    \        else if (words.length == 38) Right(words.length)\n        else if (words.length\
    \ == 39) Right(words.length)\n        else if (words.length == 40) Right(words.length)\n\
    \        else if (words.length == 41) Right(words.length)\n        else if (words.length\
    \ == 42) Right(words.length)\n        else if (words.length == 43) Right\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1w6wu0__.scala:59:13\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m43\e[0m) Right\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029049
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) Left(Nil)\n        else if (words.size\
    \ == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp6mcusxh0.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp6mcusxh0.scala:18)\n\
    \tat Problem$.main(tmp6mcusxh0.scala:21)\n\tat Problem.main(tmp6mcusxh0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.forall(_.isLetter) && _.toLowerCase == \"\
    a\")\n            val odd = words.filter(_.forall(_.isLetter) && _.toLowerCase\
    \ == \"b\")\n            val evenOdd = even.zip(odd)\n            val evenOddCount\
    \ = evenOdd.count(_._1 == _._2)\n            Right(evenOddCount)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpch_3i1uj.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.forall(_.isLetter)\
    \ && _.toLowerCase == \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpch_3i1uj.scala:20:35 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.forall(_.isLetter)\
    \ && _.toLowerCase == \e[31m\"b\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpch_3i1uj.scala:22:47 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOddCount\e[0m =\
    \ evenOdd.count(_._1 == _._2)\n\e[31m\e[31m   |\e[0m                         \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \        value _1 is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660029051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else if (words.length\
    \ == 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (word\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqn_7zekj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqn_7zekj.scala:59:17\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (word\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e\
    [0m                 Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = txt.filter(_.isLetter).map(_.toLowerCase - 'a')\n            val odd\
    \ = letters.count(_ % 2 != 0)\n            Right(words.length + odd)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp03nn8m1x.scala:19:55 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = txt.filter(_.isLetter).map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660029052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n        val\
    \ wordCount = words.map(_.length).sum\n        val oddWordCount = words.filter(_.contains(\"\
    a\")).filter(_.contains(\"b\")).filter(_.contains(\"c\")).filter(_.contains(\"\
    d\")).filter(_.contains(\"e\")).filter(_.contains(\"f\")).filter(_.contains(\"\
    g\")).filter(_.contains(\"h\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    j\")).filter(_.contains(\"k\")).filter(_.contains(\"l\")).filter(_.contains(\"\
    m\")).filter(_.contains(\"n\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    p\")).filter(_.contains(\"q\")).filter(_.contains(\"r\")).filter(_.contains(\"\
    s\")).filter(_.contains(\"t\")).filter(_.contains(\"u\")).filter(_.contains(\"\
    v\")).filter(_.contains(\"w\")).filter(_.contains(\"x\")).filter(_.contains(\"\
    y\")).filter(_.contains(\"z\")).filter(_.contains(\"A\")).filter(_.contains(\"\
    B\")).filter(_.contains(\"C\")).filter(_.contains(\"D\")).filter(_.contains(\"\
    E\")).filter(_.contains(\"F\")).filter(_.contains(\"G\")).filter(_.contains(\"\
    H\")).filter(_.contains(\"I\")).filter(_.contains(\"J\")).filter(_.contains(\"\
    K\")).filter(_.contains(\"L\")).filter(_.contains(\"M\")).filter(_.contains(\"\
    N\")).filter(_.contains(\"O\")).filter(_.contains(\"P\")).filter(_.contains(\"\
    Q\")).filter(_.contains(\"R\")).filter(_.contains(\"S\")).filter(_.contains(\"\
    T\")).filter(_.contains(\"U\")).filter(_.contains(\"V\")).filter(_.contains(\"\
    W\")).filter(_.contains(\"X\")).filter(_.contains(\"Y\")).filter(_.contains(\"\
    Z\")).filter(_.contains(\"a\")).filter(_.contains(\"b\")).filter(_.contains(\"\
    c\")).filter(_.contains(\"d\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    f\")).filter(_.contains(\"g\")).filter(_.contains(\"h\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"j\")).filter(_.contains(\"k\")).filter(_.contains(\"\
    l\")).filter(_.contains(\"m\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkwagu15g.scala:19:1587 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36moddWordCount\e[0m = words.filter(_.contains(\e\
    [31m\"a\"\e[0m)).filter(_.contains(\e[31m\"b\"\e[0m)).filter(_.contains(\e[31m\"\
    c\"\e[0m)).filter(_.contains(\e[31m\"d\"\e[0m)).filter(_.contains(\e[31m\"e\"\e\
    [0m)).filter(_.contains(\e[31m\"f\"\e[0m)).filter(_.contains(\e[31m\"g\"\e[0m)).filter(_.contains(\e\
    [31m\"h\"\e[0m)).filter(_.contains(\e[31m\"i\"\e[0m)).filter(_.contains(\e[31m\"\
    j\"\e[0m)).filter(_.contains(\e[31m\"k\"\e[0m)).filter(_.contains(\e[31m\"l\"\e\
    [0m)).filter(_.contains(\e[31m\"m\"\e[0m)).filter(_.contains(\e[31m\"n\"\e[0m)).filter(_.contains(\e\
    [31m\"o\"\e[0m)).filter(_.contains(\e[31m\"p\"\e[0m)).filter(_.contains(\e[31m\"\
    q\"\e[0m)).filter(_.contains(\e[31m\"r\"\e[0m)).filter(_.contains(\e[31m\"s\"\e\
    [0m)).filter(_.contains(\e[31m\"t\"\e[0m)).filter(_.contains(\e[31m\"u\"\e[0m)).filter(_.contains(\e\
    [31m\"v\"\e[0m)).filter(_.contains(\e[31m\"w\"\e[0m)).filter(_.contains(\e[31m\"\
    x\"\e[0m)).filter(_.contains(\e[31m\"y\"\e[0m)).filter(_.contains(\e[31m\"z\"\e\
    [0m)).filter(_.contains(\e[31m\"A\"\e[0m)).filter(_.contains(\e[31m\"B\"\e[0m)).filter(_.contains(\e\
    [31m\"C\"\e[0m)).filter(_.contains(\e[31m\"D\"\e[0m)).filter(_.contains(\e[31m\"\
    E\"\e[0m)).filter(_.contains(\e[31m\"F\"\e[0m)).filter(_.contains(\e[31m\"G\"\e\
    [0m)).filter(_.contains(\e[31m\"H\"\e[0m)).filter(_.contains(\e[31m\"I\"\e[0m)).filter(_.contains(\e\
    [31m\"J\"\e[0m)).filter(_.contains(\e[31m\"K\"\e[0m)).filter(_.contains(\e[31m\"\
    L\"\e[0m)).filter(_.contains(\e[31m\"M\"\e[0m)).filter(_.contains(\e[31m\"N\"\e\
    [0m)).filter(_.contains(\e[31m\"O\"\e[0m)).filter(_.contains(\e[31m\"P\"\e[0m)).filter(_.contains(\e\
    [31m\"Q\"\e[0m)).filter(_.contains(\e[31m\"R\"\e[0m)).filter(_.contains(\e[31m\"\
    S\"\e[0m)).filter(_.contains(\e[31m\"T\"\e[0m)).filter(_.contains(\e[31m\"U\"\e\
    [0m)).filter(_.contains(\e[31m\"V\"\e[0m)).filter(_.contains(\e[31m\"W\"\e[0m)).filter(_.contains(\e\
    [31m\"X\"\e[0m)).filter(_.contains(\e[31m\"Y\"\e[0m)).filter(_.contains(\e[31m\"\
    Z\"\e[0m)).filter(_.contains(\e[31m\"a\"\e[0m)).filter(_.contains(\e[31m\"b\"\e\
    [0m)).filter(_.contains(\e[31m\"c\"\e[0m)).filter(_.contains(\e[31m\"d\"\e[0m)).filter(_.contains(\e\
    [31m\"e\"\e[0m)).filt"
  stdout: ''
  timestamp: 1660029054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36xvzlxx.scala:21)\n\tat Problem.main(tmp36xvzlxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List.empty)\n\
    \        else if (words.size == 1) Right(words.size)\n        else {\n       \
    \     val counts = words.map(_.toLowerCase).groupBy(identity).mapValues(_.size)\n\
    \            val odd = counts.filter(_._2 % 2 == 1).map(_._1).sum\n          \
    \  Left(List(words.take(odd), words.drop(odd)))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc1klabrb.scala:20:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = counts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                where:    B is a type variable with constraint >: String\n\
    \e[31m   |\e[0m                .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1klabrb.scala:21:32\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(List(words.take(odd),\
    \ words.drop(odd)))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    \e[1m\e[31mArray\e[0m\e[1m\e\
    [31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1klabrb.scala:21:49\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(List(words.take(odd),\
    \ words.drop(odd)))\n\e[31m\e[31m   |\e[0m                                   \
    \    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \    Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = words.map(_.toLowerCase)\n            val evenLetters\
    \ = letters.filter(letter => letters.count(_ == letter) % 2 == 0)\n          \
    \  val oddLetters = letters.filter(letter => letters.count(_ == letter) % 2 !=\
    \ 0)\n            val evenLettersCount = evenLetters.count(_ == letter)\n    \
    \        val oddLettersCount = oddLetters.count(_ == letter)\n            val\
    \ evenLettersCountString = evenLettersCount.toString\n            val oddLettersCountString\
    \ = oddLettersCount.toString\n            val evenLettersCountLong = Long.parseLong(evenLettersCountString)\n\
    \            val oddLettersCountLong = Long.parseLong(oddLettersCountString)\n\
    \            val evenLettersCountLongString = evenLettersCountLong.toString\n\
    \            val oddLettersCountLongString = oddLettersCountLong.toString\n  \
    \          val evenLettersCountLongLong = Long.parseLong(evenLettersCountLongString)\n\
    \            val oddLettersCountLongLong = Long.parseLong(oddLettersCountLongString)\n\
    \            val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \            val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \            val evenLettersCountLongLongLong = Long.parseLong(evenLettersCountLongLongString)\n\
    \            val oddLettersCountLongLongLong = Long.parseLong(oddLettersCountLongLongString)\n\
    \            val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongString)\n\
    \            val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongLongString = oddLettersCountLongLongLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLongLong = Long.parseLong(oddLettersCountLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhmjnxfk.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhmjnxfk.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpwhmjnxfk.scala:22:58 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.count(_\
    \ == letter)\n\e[31m\e[31m   |\e[0m                                          \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                       Not found: letter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwhmjnxfk.scala:23:56 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.count(_\
    \ == letter)\n\e[31m\e[31m   |\e[0m                                          \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                     Not found: letter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwhmjnxfk.scala:26:44 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLong\e[0m\
    \ = Long.parseLong(evenLettersCountString)\n\e[31m\e[31m   |\e[0m            \
    \                           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             value parseLong is not a member of object Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwhmjnxfk.scala:27:43 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountLong\e[0m\
    \ = Long.parseLong(oddLettersCountString)\n\e[31m\e[31m   |\e[0m             \
    \                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \           value parseLong is not a member of object Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Er"
  stdout: ''
  timestamp: 1660029054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val result = words.map(_.toLowerCase).filter(_.nonEmpty)\n         \
    \   val even = result.filter(_.toString.toLowerCase == \"even\")\n           \
    \ val odd = result.filter(_.toString.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.map(_.toString.toInt).sum\n            val oddCount = odd.map(_.toString.toInt).sum\n\
    \            Right(evenCount + oddCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ogduwsa.scala:28)\n\tat Problem.main(tmp_ogduwsa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val evenWords = wordList.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLower.toInt % 2 == 0)\n            val\
    \ oddWords = wordList.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt\
    \ % 2 != 0)\n            val evenLetters = evenWords.map(word => word.map(c =>\
    \ c.toLower).mkString(\"\")).mkString(\"\")\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toLower).mkString(\"\")).mkString(\"\")\n            val\
    \ evenLetterCount = evenLetters.toList.length\n            val oddLetterCount\
    \ = oddLetters.toList.length\n            val evenLetterCountString = evenLetterCount.toString\n\
    \            val oddLetterCountString = oddLetterCount.toString\n            if\
    \ (evenLetterCountString.length == 1) Right(evenLetterCountString)\n         \
    \   else if (oddLetterCountString.length == 1) Right(oddLetterCountString)\n \
    \           else Left(List[String]())\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlxcn604.scala:20:84 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = wordList.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                            Not found:\
    \ c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlxcn604.scala:21:83\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = wordList.filter(\e[36mword\e[0m => word.forall(\e[36mc\e\
    [0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \                          Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjlxcn604.scala:28:57 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (evenLetterCountString.length ==\
    \ \e[31m1\e[0m) Right(evenLetterCountString)\n\e[31m\e[31m   |\e[0m          \
    \                                               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              Found:    (evenLetterCountString :\
    \ String)\n\e[31m   |\e[0m                              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlxcn604.scala:29:61 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (oddLetterCountString.length\
    \ == \e[31m1\e[0m) Right(oddLetterCountString)\n\e[31m\e[31m   |\e[0m        \
    \                                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    (oddLetterC"
  stdout: ''
  timestamp: 1660029053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val letters = txt.filter(_.isLetter)\n            val odd\
    \ = letters.filter(letter => letter.toString.toInt % 2 == 1).length\n        \
    \    Right(odd)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpfe4c2klq.scala:22)\n\
    \tat Problem$.$anonfun$adapted$2(tmpfe4c2klq.scala:22)\n\tat scala.collection.StringOps$.filter$extension(StringOps.scala:1264)\n\
    \tat Problem$.splitWords(tmpfe4c2klq.scala:22)\n\tat Problem$.main(tmpfe4c2klq.scala:27)\n\
    \tat Problem.main(tmpfe4c2klq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq51k7eki.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else if (words.length ==\
    \ 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmth39_kg.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords = words.filterNot(_.isEmpty)\n\
    \        val noCommaWords = noWhiteSpaceWords.filterNot(_.contains(\",\"))\n \
    \       val noLettersOddOrder = noCommaWords.filterNot(_.contains(\"a\")).filterNot(_.contains(\"\
    b\")).filterNot(_.contains(\"c\")).filterNot(_.contains(\"d\")).filterNot(_.contains(\"\
    e\")).filterNot(_.contains(\"f\")).filterNot(_.contains(\"g\")).filterNot(_.contains(\"\
    h\")).filterNot(_.contains(\"i\")).filterNot(_.contains(\"j\")).filterNot(_.contains(\"\
    k\")).filterNot(_.contains(\"l\")).filterNot(_.contains(\"m\")).filterNot(_.contains(\"\
    n\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"p\")).filterNot(_.contains(\"\
    q\")).filterNot(_.contains(\"r\")).filterNot(_.contains(\"s\")).filterNot(_.contains(\"\
    t\")).filterNot(_.contains(\"u\")).filterNot(_.contains(\"v\")).filterNot(_.contains(\"\
    w\")).filterNot(_.contains(\"x\")).filterNot(_.contains(\"y\")).filterNot(_.contains(\"\
    z\")).filterNot(_.contains(\"A\")).filterNot(_.contains(\"B\")).filterNot(_.contains(\"\
    C\")).filterNot(_.contains(\"D\")).filterNot(_.contains(\"E\")).filterNot(_.contains(\"\
    F\")).filterNot(_.contains(\"G\")).filterNot(_.contains(\"H\")).filterNot(_.contains(\"\
    I\")).filterNot(_.contains(\"J\")).filterNot(_.contains(\"K\")).filterNot(_.contains(\"\
    L\")).filterNot(_.contains(\"M\")).filterNot(_.contains(\"N\")).filterNot(_.contains(\"\
    O\")).filterNot(_.contains(\"P\")).filterNot(_.contains(\"Q\")).filterNot(_.contains(\"\
    R\")).filterNot(_.contains(\"S\")).filterNot(_.contains(\"T\")).filterNot(_.contains(\"\
    U\")).filterNot(_.contains(\"V\")).filterNot(_.contains(\"W\")).filterNot(_.contains(\"\
    X\")).filterNot(\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg_p2zesz.scala:18:1405 -------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnoLettersOddOrder\e[0m =\
    \ noCommaWords.filterNot(_.contains(\e[31m\"a\"\e[0m)).filterNot(_.contains(\e\
    [31m\"b\"\e[0m)).filterNot(_.contains(\e[31m\"c\"\e[0m)).filterNot(_.contains(\e\
    [31m\"d\"\e[0m)).filterNot(_.contains(\e[31m\"e\"\e[0m)).filterNot(_.contains(\e\
    [31m\"f\"\e[0m)).filterNot(_.contains(\e[31m\"g\"\e[0m)).filterNot(_.contains(\e\
    [31m\"h\"\e[0m)).filterNot(_.contains(\e[31m\"i\"\e[0m)).filterNot(_.contains(\e\
    [31m\"j\"\e[0m)).filterNot(_.contains(\e[31m\"k\"\e[0m)).filterNot(_.contains(\e\
    [31m\"l\"\e[0m)).filterNot(_.contains(\e[31m\"m\"\e[0m)).filterNot(_.contains(\e\
    [31m\"n\"\e[0m)).filterNot(_.contains(\e[31m\"o\"\e[0m)).filterNot(_.contains(\e\
    [31m\"p\"\e[0m)).filterNot(_.contains(\e[31m\"q\"\e[0m)).filterNot(_.contains(\e\
    [31m\"r\"\e[0m)).filterNot(_.contains(\e[31m\"s\"\e[0m)).filterNot(_.contains(\e\
    [31m\"t\"\e[0m)).filterNot(_.contains(\e[31m\"u\"\e[0m)).filterNot(_.contains(\e\
    [31m\"v\"\e[0m)).filterNot(_.contains(\e[31m\"w\"\e[0m)).filterNot(_.contains(\e\
    [31m\"x\"\e[0m)).filterNot(_.contains(\e[31m\"y\"\e[0m)).filterNot(_.contains(\e\
    [31m\"z\"\e[0m)).filterNot(_.contains(\e[31m\"A\"\e[0m)).filterNot(_.contains(\e\
    [31m\"B\"\e[0m)).filterNot(_.contains(\e[31m\"C\"\e[0m)).filterNot(_.contains(\e\
    [31m\"D\"\e[0m)).filterNot(_.contains(\e[31m\"E\"\e[0m)).filterNot(_.contains(\e\
    [31m\"F\"\e[0m)).filterNot(_.contains(\e[31m\"G\"\e[0m)).filterNot(_.contains(\e\
    [31m\"H\"\e[0m)).filterNot(_.contains(\e[31m\"I\"\e[0m)).filterNot(_.contains(\e\
    [31m\"J\"\e[0m)).filterNot(_.contains(\e[31m\"K\"\e[0m)).filterNot(_.contains(\e\
    [31m\"L\"\e[0m)).filterNot(_.contains(\e[31m\"M\"\e[0m)).filterNot(_.contains(\e\
    [31m\"N\"\e[0m)).filterNot(_.contains(\e[31m\"O\"\e[0m)).filterNot(_.contains(\e\
    [31m\"P\"\e[0m)).filterNot(_.contains(\e[31m\"Q\"\e[0m)).filterNot(_.contains(\e\
    [31m\"R\"\e[0m)).filterNot(_.contains(\e[31m\"S\"\e[0m)).filterNot(_.contains(\e\
    [31m\"T\"\e[0m)).filterNot(_.contains(\e[31m\"U\"\e[0m)).filterNot(_.contains(\e\
    [31m\"V\"\e[0m)).filterNot(_.contains(\e[31m\"W\"\e[0m)).filterNot(_.contains(\e\
    [31m\"X\"\e[0m)).filterNot(\n\e[31m\e[31m   |\e[0m                           \
    \                 "
  stdout: ''
  timestamp: 1660029055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.forall(_.isLower))\n            val odd =\
    \ words.filter(_.forall(_.isLower) && _.toString.toInt % 2 != 0)\n           \
    \ val evenSize = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            Right(evenSize + oddSize)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpc8km6qhb.scala:20:35 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.forall(_.isLower)\
    \ && _.toString.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(Nil)\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val wordList = words.toList\n            val wordCounts\
    \ = wordList.map(_.toLowerCase).groupBy(_.toLowerCase).mapValues(_.length)\n \
    \           val oddCounts = wordCounts.filter(_._2 % 2 == 1).map(_._1)\n     \
    \       val evenCounts = wordCounts.filter(_._2 % 2 == 0).map(_._1)\n        \
    \    val evenCountSum = evenCounts.sum\n            val oddCountSum = oddCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val oddCountSum = oddCounts.sum\n\
    \            val evenCountSum = evenCounts.sum\n            val oddCountSum =\
    \ oddCounts.sum\n            val evenCountSum = evenCounts.sum\n            val\
    \ oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.sum\n\
    \            val oddCountSum = oddCounts.sum\n            val evenCountSum = evenCounts.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf1oxx3w_.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpf1oxx3w_.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf1oxx3w_.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddCountSum\e[0m = oddCounts.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf1oxx3w_.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mevenCountSum\e[0m = evenCounts.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenCountSum is already defined as \e[33mvalue\e[0m \e[35mevenCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf1oxx3w_.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36moddCountSum\e[0m = oddCounts.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf1oxx3w_.scala:30:16 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m            \e[33mval\e[0m \e[36moddCountSum\e[0m = oddCounts.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660029057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgaqjuazo.scala:62:13\
    \ --------------------\e[0m\e[0m\n\e[31m62 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m46\e[0m) Right(words.size)\n\e[31m\e[31m   |\e[0m \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \            Found:    Unit\n\e[31m   |\e[0m             Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m             Maybe you are missing an else part for the\
    \ conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else if (words.length ==\
    \ 2) Right(words.length)\n        else if (words.length == 3) Right(words.length)\n\
    \        else if (words.length == 4) Right(words.length)\n        else if (words.length\
    \ == 5) Right(words.length)\n        else if (words.length == 6) Right(words.length)\n\
    \        else if (words.length == 7) Right(words.length)\n        else if (words.length\
    \ == 8) Right(words.length)\n        else if (words.length == 9) Right(words.length)\n\
    \        else if (words.length == 10) Right(words.length)\n        else if (words.length\
    \ == 11) Right(words.length)\n        else if (words.length == 12) Right(words.length)\n\
    \        else if (words.length == 13) Right(words.length)\n        else if (words.length\
    \ == 14) Right(words.length)\n        else if (words.length == 15) Right(words.length)\n\
    \        else if (words.length == 16) Right(words.length)\n        else if (words.length\
    \ == 17) Right(words.length)\n        else if (words.length == 18) Right(words.length)\n\
    \        else if (words.length == 19) Right(words.length)\n        else if (words.length\
    \ == 20) Right(words.length)\n        else if (words.length == 21) Right(words.length)\n\
    \        else if (words.length == 22) Right(words.length)\n        else if (words.length\
    \ == 23) Right(words.length)\n        else if (words.length == 24) Right(words.length)\n\
    \        else if (words.length == 25) Right(words.length)\n        else if (words.length\
    \ == 26) Right(words.length)\n        else if (words.length == 27) Right(words.length)\n\
    \        else if (words.length == 28) Right(words.length)\n        else if (words.length\
    \ == 29) Right(words.length)\n        else if (words.length == 30) Right(words.length)\n\
    \        else if (words.length == 31) Right(words.length)\n        else if (words.length\
    \ == 32) Right(words.length)\n        else if (words.length == 33) Right(words.length)\n\
    \        else if (words.length == 34) Right(words.length)\n        else if (words.length\
    \ == 35) Right(words.length)\n        else if (words.length == 36) Right(words.length)\n\
    \        else if (words.length == 37) Right(words.length)\n        else if (words.length\
    \ == 38) Right(words.length)\n        else if (words.length == 39) Right(words.length)\n\
    \        else if (words.length == 40) Right(words.length)\n        else if (words.length\
    \ == 41) Right(words.length)\n        else if (words.length == 42) Right(words.length)\n\
    \        else if (words.length == 43) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmth39_kg.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.isEmpty) Left(List())\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrkvc_ed.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = words.map(_.toLowerCase)\n            val evenLetters\
    \ = letters.filter(letter => letters.count(_ == letter) % 2 == 0)\n          \
    \  val oddLetters = letters.filter(letter => letters.count(_ == letter) % 2 !=\
    \ 0)\n            val evenLettersCount = evenLetters.count(_ == 'a')\n       \
    \     val oddLettersCount = oddLetters.count(_ == 'a')\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            if (evenLettersCountInt == oddLettersCountInt) {\n              \
    \  Right(evenLettersCount)\n            } else if (evenLettersCountInt > oddLettersCountInt)\
    \ {\n                Right(evenLettersCount)\n            } else {\n         \
    \       Right(oddLettersCount)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi10fewgv.scala:22:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpi10fewgv.scala:23:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val evenWords = words.filter(_.length == words.length)\n            val\
    \ oddWords = words.filter(_.length != words.length)\n            val evenWordsCount\
    \ = evenWords.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase\
    \ == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase\
    \ == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase\
    \ == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\").length\n     \
    \       val oddWordsCount = oddWords.filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase\
    \ == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase\
    \ == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase\
    \ == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\").length\n            Right(evenWordsCount + oddWordsCount)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmporu3wham.scala:21:50 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCount\e[0m\
    \ = evenWords.filter(_.toLowerCase == \e[31m\"a\"\e[0m || _.toLowerCase == \e\
    [31m\"b\"\e[0m || _.toLowerCase == \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"\
    d\"\e[0m || _.toLowerCase == \e[31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e\
    [0m || _.toLowerCase == \e[31m\"g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m\
    \ || _.toLowerCase == \e[31m\"i\"\e[0m || _.toLowerCase == \e[31m\"j\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"k\"\e[0m || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase\
    \ == \e[31m\"m\"\e[0m || _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"o\"\e[0m || _.toLowerCase == \e[31m\"p\"\e[0m || _.toLowerCase == \e\
    [31m\"q\"\e[0m || _.toLowerCase == \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"\
    s\"\e[0m || _.toLowerCase == \e[31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e\
    [0m || _.toLowerCase == \e[31m\"v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m\
    \ || _.toLowerCase == \e[31m\"x\"\e[0m || _.toLowerCase == \e[31m\"y\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"z\"\e[0m).length\n\e[31m\e[31m   |\e[0m           \
e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmporu3wham.scala:22:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36moddWordsCount\e[0m = oddWords.filter(_.toLowerCase == \e[31m\"a\"\e\
    [0m || _.toLowerCase ="
  stdout: ''
  timestamp: 1660029059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = txt.filter(_.isLetter).map(_.toLowerCase - 'a')\n    \
    \        val odd = letters.filter(x => x % 2 == 1).length\n            Right(odd)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnvap694x.scala:19:55 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = txt.filter(_.isLetter).map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val wordList = words.toList\n            val wordCount = wordList.map(_.length).sum\n\
    \            val oddLetters = wordList.filter(_.toString.toLowerCase == \"a\"\
    \ || _.toString.toLowerCase == \"b\" || _.toString.toLowerCase == \"c\" || _.toString.toLowerCase\
    \ == \"d\" || _.toString.toLowerCase == \"e\" || _.toString.toLowerCase == \"\
    f\" || _.toString.toLowerCase == \"g\" || _.toString.toLowerCase == \"h\" || _.toString.toLowerCase\
    \ == \"i\" || _.toString.toLowerCase == \"j\" || _.toString.toLowerCase == \"\
    k\" || _.toString.toLowerCase == \"l\" || _.toString.toLowerCase == \"m\" || _.toString.toLowerCase\
    \ == \"n\" || _.toString.toLowerCase == \"o\" || _.toString.toLowerCase == \"\
    p\" || _.toString.toLowerCase == \"q\" || _.toString.toLowerCase == \"r\" || _.toString.toLowerCase\
    \ == \"s\" || _.toString.toLowerCase == \"t\" || _.toString.toLowerCase == \"\
    u\" || _.toString.toLowerCase == \"v\" || _.toString.toLowerCase == \"w\" || _.toString.toLowerCase\
    \ == \"x\" || _.toString.toLowerCase == \"y\" || _.toString.toLowerCase == \"\
    z\").map(_.length).sum\n            Right(wordCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpomu64l89.scala:21:45 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = wordList.filter(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toString.toLowerCase == \e[31m\"b\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"c\"\e[0m || _.toString.toLowerCase == \e[31m\"d\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"e\"\e[0m || _.toString.toLowerCase == \e[31m\"f\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m || _.toString.toLowerCase == \e[31m\"h\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"i\"\e[0m || _.toString.toLowerCase == \e[31m\"j\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"k\"\e[0m || _.toString.toLowerCase == \e[31m\"l\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"m\"\e[0m || _.toString.toLowerCase == \e[31m\"n\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"o\"\e[0m || _.toString.toLowerCase == \e[31m\"p\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"q\"\e[0m || _.toString.toLowerCase == \e[31m\"r\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"s\"\e[0m || _.toString.toLowerCase == \e[31m\"t\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"u\"\e[0m || _.toString.toLowerCase == \e[31m\"v\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"w\"\e[0m || _.toString.toLowerCase == \e[31m\"x\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"y\"\e[0m || _.toString.toLowerCase == \e[31m\"z\"\e[0m).map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m
  stdout: ''
  timestamp: 1660029059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else if\
    \ (words.length == 2) Right(words.length)\n        else if (words.length == 3)\
    \ Right(words.length)\n        else if (words.length == 4) Right(words.length)\n\
    \        else if (words.length == 5) Right(words.length)\n        else if (words.length\
    \ == 6) Right(words.length)\n        else if (words.length == 7) Right(words.length)\n\
    \        else if (words.length == 8) Right(words.length)\n        else if (words.length\
    \ == 9) Right(words.length)\n        else if (words.length == 10) Right(words.length)\n\
    \        else if (words.length == 11) Right(words.length)\n        else if (words.length\
    \ == 12) Right(words.length)\n        else if (words.length == 13) Right(words.length)\n\
    \        else if (words.length == 14) Right(words.length)\n        else if (words.length\
    \ == 15) Right(words.length)\n        else if (words.length == 16) Right(words.length)\n\
    \        else if (words.length == 17) Right(words.length)\n        else if (words.length\
    \ == 18) Right(words.length)\n        else if (words.length == 19) Right(words.length)\n\
    \        else if (words.length == 20) Right(words.length)\n        else if (words.length\
    \ == 21) Right(words.length)\n        else if (words.length == 22) Right(words.length)\n\
    \        else if (words.length == 23) Right(words.length)\n        else if (words.length\
    \ == 24) Right(words.length)\n        else if (words.length == 25) Right(words.length)\n\
    \        else if (words.length == 26) Right(words.length)\n        else if (words.length\
    \ == 27) Right(words.length)\n        else if (words.length == 28) Right(words.length)\n\
    \        else if (words.length == 29) Right(words.length)\n        else if (words.length\
    \ == 30) Right(words.length)\n        else if (words.length == 31) Right(words.length)\n\
    \        else if (words.length == 32) Right(words.length)\n        else if (words.length\
    \ == 33) Right(words.length)\n        else if (words.length == 34) Right(words.length)\n\
    \        else if (words.length == 35) Right(words.length)\n        else if (words.length\
    \ == 36) Right(words.length)\n        else if (words.length == 37) Right(words.length)\n\
    \        else if (words.length == 38) Right(words.length)\n        else if (words.length\
    \ == 39) Right(words.length)\n        else if (words.length == 40) Right(words.length)\n\
    \        else if (words.length == 41) Right(words.length)\n        else if (words.length\
    \ == 42) Right(words.length)\n        else if (words.length == 43) Right\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1w6wu0__.scala:59:13\
    \ --------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m43\e[0m) Right\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = txt.split(\"\
    \ \").filter(_.nonEmpty).filter(_.contains(\",\"))\n        val letters = txt.filter(_.isLetter).filter(_.isLower).filter(_.isDigit).length\n\
    \        val odd = letters % 2\n        val result = if (commaWords.isEmpty) words\
    \ else commaWords\n        Right(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwnl1dqx.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        Right(result)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:  \
    \  (result : Array[String])\n\e[31m   |\e[0m              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else\n            Right(words.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vc0u37q.scala:24)\n\tat Problem.main(tmp3vc0u37q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ evens = words.filter(_.length%2 == 0).map(_.toLowerCase + _.toUpperCase)\n \
    \           val odds = words.filter(_.length%2 == 1).map(_.toLowerCase + _.toUpperCase)\n\
    \            val evensCount = evens.count(_ == 'a')\n            val oddsCount\
    \ = odds.count(_ == 'a')\n            val evensOddsCount = evensCount + oddsCount\n\
    \            val evensOddsCountString = evensOddsCount.toString\n            val\
    \ evensOddsCountLong = Long.parseLong(evensOddsCountString)\n            if (evensOddsCountLong\
    \ % 2 == 0) Right(evensOddsCountLong)\n            else Left(evensOddsCountLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp5g0eb_8m.scala:19:58 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = words.filter(_.length%\e\
    [31m2\e[0m == \e[31m0\e[0m).map(_.toLowerCase + _.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmp5g0eb_8m.scala:19:88 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = words.filter(_.length%\e\
    [31m2\e[0m == \e[31m0\e[0m).map(_.toLowerCase + _.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp5g0eb_8m.scala:20:57 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modds\e[0m = words.filter(_.length%\e\
    [31m2\e[0m == \e[31m1\e[0m).map(_.toLowerCase + _.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmp5g0eb_8m.scala:20:87 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modds\e[0m = words.filter(_.length%\e\
    [31m2\e[0m == \e[31m1\e[0m).map(_.toLowerCase + _.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \        No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \                                   where:    B is a type variable\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5g0eb_8m.scala:25:42 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m          "
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").toList\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ letters = words.filter(_.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\".toLowerCase\
    \ && !words.contains(_))\n        val odd = letters.count(_ % 2 == 1)\n      \
    \  val even = letters.count(_ % 2 == 0)\n        val result = if (commaWords.isEmpty)\
    \ odd.toLong else odd.toLong + even.toLong\n        Right(result)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpb9hbjb3z.scala:18:35 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = words.filter(_.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxyz\"\e[0m.toLowerCase && !words.contains(_))\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9hbjb3z.scala:19:34\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = letters.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9hbjb3z.scala:20:35\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = letters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = words.map(_.toLowerCase + _)\n            val odd = letters.filter(letter\
    \ => letter % 2 != 0).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpr5kswlj3.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpr5kswlj3.scala:19:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ + _)\n\e[31m\e[31m   |\e[0m                                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseLetters = words.map(_.toLowerCase)\n            val evenOrderLetters\
    \ = lowerCaseLetters.filter(_.toString.length == 1)\n            val oddOrderLetters\
    \ = lowerCaseLetters.filter(_.toString.length == 2)\n            val evenOrderLettersCount\
    \ = evenOrderLetters.count(_ % 2 == 0)\n            val oddOrderLettersCount =\
    \ oddOrderLetters.count(_ % 2 == 0)\n            val evenOrderLettersCount = evenOrderLetters.count(_\
    \ % 2 == 0)\n            val oddOrderLettersCount = oddOrderLetters.count(_ %\
    \ 2 == 0)\n            val evenOrderLettersCount = evenOrderLetters.count(_ %\
    \ 2 == 0)\n            val oddOrderLettersCount = oddOrderLetters.count(_ % 2\
    \ == 0)\n            val evenOrderLettersCount = evenOrderLetters.count(_ % 2\
    \ == 0)\n            val oddOrderLettersCount = oddOrderLetters.count(_ % 2 ==\
    \ 0)\n            val evenOrderLettersCount = evenOrderLetters.count(_ % 2 ==\
    \ 0)\n            val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n\
    \            val evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n\
    \            val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n  \
    \          val evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n  \
    \          val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n    \
    \        val evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n    \
    \        val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n      \
    \      val evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n      \
    \      val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n        \
    \    val evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n        \
    \    val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n          \
    \  val evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n          \
    \  val oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n            val\
    \ evenOrderLettersCount = evenOrderLetters.count(_ % 2 == 0)\n            val\
    \ oddOrderLettersCount = oddOrderLetters.count(_ % 2 == 0)\n            val evenOrderLettersCount\
    \ = evenOrderLetters.count(_ % 2 == 0)\n            val oddOrderLettersCount =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph3pg89mp.scala:47:38 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            \e[33mval\e[0m \e[36moddOrderLettersCount\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph3pg89mp.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph3pg89mp.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mevenOrderLettersCount\e[0m = evenOrderLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderLettersCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph3pg89mp.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddOrderLettersCount\e\
    [0m = oddOrderLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderLettersCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddOrderLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph3pg89mp.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOrderLettersCount\e\
    [0m = evenOrderLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderLettersCount is already defined as \e[3"
  stdout: ''
  timestamp: 1660029067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordsWithCommas = words.map(_.split(\",\"))\n            val wordsWithCommasWithOddOrder\
    \ = wordsWithCommas.map(_.map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderLength\
    \ = wordsWithCommasWithOddOrder.map(_.length)\n            val wordsWithCommasWithOddOrderLength\
    \ = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt % 2 != 0)\n    \
    \        val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % 2 == 0)\n            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % 2 != 0)\n            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % 2 == 0)\n            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % 2 != 0)\n            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % 2 == 0)\n            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % 2 != 0)\n            val wordsWithCommasWithOddOrderLength = wordsWithCommasWithOddOrderLength.map(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_mtbx1k4.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_mtbx1k4.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_mtbx1k4.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mwordsWithCommasWithOddOrderLength\e\
    [0m = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt % \e[31m2\e[0m\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithCommasWithOddOrderLength is already defined as \e\
    [33mvalue\e[0m \e[35mwordsWithCommasWithOddOrderLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_mtbx1k4.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mwordsWithCommasWithOddOrderLength\e[0m = wordsWithCommasWithOddOrderLength.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithCommasWithOddOrderLength is already defined as \e\
    [33mvalue\e[0m \e[35mwordsWithCommasWithOddOrderLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_mtbx1k4.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mwordsWithCommasWithOddOrderLength\e[0m = wordsWithCommasWithOddOrderLength.filter(_.toString.toInt\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1660029066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val wordSet = mutable.Set[String]()\n            val wordList\
    \ = List[String]()\n            val wordCount = mutable.Map[String, Long]()\n\
    \            words.foreach(word => {\n                if (word.length == 0)\n\
    \                    return\n                val wordSet = wordSet.toSet\n   \
    \             if (wordSet.contains(word)) {\n                    wordCount +=\
    \ word -> 1\n                } else {\n                    wordSet += word\n \
    \                   wordList += word\n                }\n            })\n    \
    \        val wordCountList = wordCount.toList\n            val wordCountListSorted\
    \ = wordCountList.sortBy(_._1)\n            val wordCountListSortedReversed =\
    \ wordCountListSorted.reverse\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversed.length\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength - 1\n            val wordCountListSortedReversedLength\
    \ = wordCountListSortedReversedLength\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppcjfysfr.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcjfysfr.scala:39:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCountListSortedReversedLength\e[0m = wordCountListSortedReversedLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCountListSortedReversedLength is already defined as \e\
    [33mvalue\e[0m \e[35mwordCountListSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcjfysfr.scala:40:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCountListSortedReversedLength\e[0m = wordCountListSortedReversedLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCountListSortedReversedLength is already defined as \e\
    [33mvalue\e[0m \e[35mwordCountListSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcjfysfr.scala:41:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCountListSortedReversedLength\e[0m = wordCountListSortedReversedLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCountListSortedReversedLength is already defined as \e\
    [33mvalue\e[0m \e[35mwordCountListSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppcjfysfr.scala:42:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m"
  stdout: ''
  timestamp: 1660029067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \").map(_.toLowerCase).toList\n        val commas = txt.split(\"\
    ,\").map(_.toLowerCase).toList\n        val letters = txt.map(_.toLowerCase).toList\n\
    \        val evenLetters = letters.filter(x => x % 2 == 0)\n        val oddLetters\
    \ = letters.filter(x => x % 2 != 0)\n        val evenLettersCount = evenLetters.count(x\
    \ => x != \"\")\n        val oddLettersCount = oddLetters.count(x => x != \"\"\
    )\n        val evenLettersCountEq = evenLetters.count(x => x == \"\")\n      \
    \  val oddLettersCountEq = oddLetters.count(x => x == \"\")\n        val evenLettersCountEven\
    \ = evenLetters.count(x => x % 2 == 0)\n        val oddLettersCountEven = oddLetters.count(x\
    \ => x % 2 == 0)\n        val evenLettersCountOdd = evenLetters.count(x => x %\
    \ 2 != 0)\n        val oddLettersCountOdd = oddLetters.count(x => x % 2 != 0)\n\
    \        val evenLettersCountEvenOdd = evenLetters.count(x => x % 2 == 0 && x\
    \ % 2 != 0)\n        val oddLettersCountEvenOdd = oddLetters.count(x => x % 2\
    \ == 0 && x % 2 != 0)\n        val evenLettersCountOddEven = evenLetters.count(x\
    \ => x % 2 != 0 && x % 2 == 0)\n        val oddLettersCountOddEven = oddLetters.count(x\
    \ => x % 2 != 0 && x % 2 == 0)\n        val evenLettersCountOddOdd = evenLetters.count(x\
    \ => x % 2 != 0 && x % 2 != 0)\n        val oddLettersCountOddEvenOdd = oddLetters.count(x\
    \ => x % 2 != 0 && x % 2 == 0 && x % 2 != 0)\n        val evenLettersCountOddOddEvenOdd\
    \ = evenLetters.count(x => x % 2 != 0 && x % 2 != 0 && x % 2 == 0 && x % 2 !=\
    \ 0)\n        val oddLettersCountOddEvenOddEvenOdd = oddLetters.count(x => x %\
    \ 2 != 0 && x % 2 != 0 && x % 2 == 0 && x % 2 != 0 && x % 2 != 0)\n        val\
    \ evenLettersCountOddOddEvenOddEvenOdd = evenLetters.count(x => x % 2 != 0 &&\
    \ x % 2 != 0 && x % 2 == 0 && x % 2 != 0 && x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd9zze_k.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmd9zze_k.scala:17:32\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mletters\e[0m = txt.map(_.toLowerCase).toList\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmd9zze_k.scala:37:5 ---------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) Right(words.size)\n        else\
    \ {\n            val commaWords = words.filter(_.contains(\",\"))\n          \
    \  val commaWordsCount = commaWords.map(_.length).sum\n            val oddWordsCount\
    \ = words.filter(_.isLower).filter(_.toString.toInt%2==1).map(_.length).sum\n\
    \            Right(commaWordsCount + oddWordsCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfria14qd.scala:20:47 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWordsCount\e[0m =\
    \ words.filter(_.isLower).filter(_.toString.toInt%\e[31m2\e[0m==\e[31m1\e[0m).map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isLower is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.length)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val wordSet = wordList.groupBy(x\
    \ => x.toLowerCase)\n            val counts = wordSet.map(x => (x._1, x._2.length)).toMap\n\
    \            val oddCounts = counts.filter(_._2 % 2 == 1)\n            val evenCounts\
    \ = counts.filter(_._2 % 2 == 0)\n            val oddCountList = oddCounts.map(_._1).toList\n\
    \            val evenCountList = evenCounts.map(_._1).toList\n            val\
    \ oddCountString = oddCountList.mkString(\",\")\n            val evenCountString\
    \ = evenCountList.mkString(\",\")\n            val oddCountLong = Long(oddCountString)\n\
    \            val evenCountLong = Long(evenCountString)\n            val countLong\
    \ = Long(counts.size)\n            Right(List(wordList(0), wordList(1), oddCountLong,\
    \ evenCountLong, countLong))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpczkhf3lk.scala:28:31 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddCountLong\e[0m =\
    \ Long(oddCountString)\n\e[31m\e[31m   |\e[0m                               ^^^^\e\
    [0m\n\e[31m   |\e[0m                   \e[33mobject\e[0m \e[35mLong\e[0m in \e\
    [33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpczkhf3lk.scala:29:32 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenCountLong\e[0m =\
    \ Long(evenCountString)\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                   \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpczkhf3lk.scala:30:28 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mcountLong\e[0m = Long(counts.size)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mpackage\e[0m \e[35mscala\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpczkhf3lk.scala:31:22 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            Right(List(wordList(\e[31m0\e[0m), wordList(\e[31m1\e[0m),\
    \ oddCountLong, evenCountLong, countLong))\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[String]\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ letters = txt.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n      \
    \      val odd = letters.count(_ % 2 == 1)\n            Right(odd)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpnkn9ay5o.scala:19:34 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = txt.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(List())\n        else\
    \ if (words.size == 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp25snos04.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp25snos04.scala:18)\n\
    \tat Problem$.main(tmp25snos04.scala:21)\n\tat Problem.main(tmp25snos04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 == 0)\n           \
    \ val oddOrderWords = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.map(word => word.count(_\
    \ == 'a')).sum\n            val oddOrderWordsCount = oddOrderWords.map(word =>\
    \ word.count(_ == 'a')).sum\n            val evenOrderWordsCountStr = evenOrderWordsCount.toString\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString\n       \
    \     val evenOrderWordsCountLong = Long.parseLong(evenOrderWordsCountStr)\n \
    \           val oddOrderWordsCountLong = Long.parseLong(oddOrderWordsCountStr)\n\
    \            if (evenOrderWordsCountLong < oddOrderWordsCountLong) {\n       \
    \         Right(evenOrderWordsCount)\n            } else {\n                Right(oddOrderWordsCount)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuvcqf7ot.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLong\e\
    [0m = Long.parseLong(evenOrderWordsCountStr)\n\e[31m\e[31m   |\e[0m          \
    \                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                  value parseLong is not a member of object Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpuvcqf7ot.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountLong\e\
    [0m = Long.parseLong(oddOrderWordsCountStr)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                value parseLong is not a member of object Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            val wordCounts\
    \ = new mutable.ListBuffer[Long]()\n            for (word <- words) {\n      \
    \          val wordCount = word.split(\"[,]\").length\n                wordCount\
    \ match {\n                    case 0 => wordCount match {\n                 \
    \       case 0 => wordCount match {\n                            case 0 => wordCount\
    \ match {\n                                case 0 => wordCount match {\n     \
    \                               case 0 => wordCount match {\n                \
    \                        case 0 => wordCount match {\n                       \
    \                     case 0 => wordCount match {\n                          \
    \                      case 0 => wordCount match {\n                         \
    \                           case 0 => wordCount match {\n                    \
    \                                    case 0 => wordCount match {\n           \
    \                                                 case 0 => wordCount match {\n\
    \                                                                case 0 => wordCount\
    \ match {\n                                                                  \
    \  case 0 => wordCount match {\n                                             \
    \                           case 0 => wordCount match {\n                    \
    \                                                        case 0 => wordCount match\
    \ {\n                                                                        \
    \        case 0 => wordCount match {\n                                       \
    \                                             case 0 => wordCount match {\n  \
    \                                                                            \
    \          case 0 => wordCount match {\n                                     \
    \                                                       case 0 => wordCount match\
    \ {\n                                                                        \
    \                        case 0 => wordCount match {\n                       \
    \                                                                            \
    \ case 0 => wordCount match {\n                                              \
    \                                                          case 0 => wordCount\
    \ match {\n                                                                  \
    \                                          case 0 => wordCount match {\n     \
    \                                                                            \
    \                               case 0 => wordCount match {\n                \
    \                                                                            \
    \                        case 0 => wordCount match {\n                       \
    \                                                                            \
    \                     case 0 => wordCount match {\n                          \
    \                                                                            \
    \                      case 0 => wordCount match {\n                         \
    \                                                                            \
    \                           case 0 => wordCount match {\n                    \
    \                                                                            \
    \                                    case 0 => wordCount match {\n           \
    \                                                                            \
    \                                                 case 0 => wordCount match {\n\
    \                                                                            \
    \                                                                case 0 => wordCount\
    \ match {\n                                                                  \
    \                                                                            \
    \  case 0 => wordCount match {\n                                             \
    \                                                                            \
    \                           case 0 => wordCount match {\n                    \
    \                                                                            \
    \                                                        case 0 => wordCount match\
    \ {\n                                                                        \
    \                                                                            \
    \        case 0 => wordCount match {\n                                       \
    \                                                                            \
    \                                             case 0 => wordCount match {\n  \
    \                                                                            \
    \                                                                            \
    \          case 0 => wordCount match {\n                                     \
    \                                                                            \
    \                                                       case 0 => wordCount match\
    \ {\n                                                                        \
    \                                                                            \
    \                        case 0 => wordCount match {\n                       \
    \                                                                            \
    \                                                                            \
    \ case 0 => wordCount match {\n                                              \
    \                                                                            \
    \                                                          case 0 => wordCount\
    \ match {\n                                                                  \
    \                                                                            \
    \                                          case 0 => wordCount match {\n     \
    \                                                                            \
    \                                                                            \
    \                               case 0 => wordCount \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgwtftcqj.scala:80:0 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwtftcqj.scala:19:31\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgwtftcqj.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgwtftcqj.scala:21:12 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mfor\e[0m (word <- words) {\n\e[31m\e[31m   |\e[0m  \
    \          ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m\
    \            Required: Either[List[String], Long]\n\e[31m22 |\e[0m           \
    \     \e[33mval\e[0m \e[36mwordCount\e[0m = word.split(\e[31m\"[,]\"\e[0m).length\n\
    \e[31m23 |\e[0m                wordCount \e[33mmatch\e[0m {\n\e[31m24 |\e[0m \
    \                   \e[33mcase\e[0m \e[31m0\e[0m => wordCount \e[33mmatch\e[0m\
    \ {\n\e[31m25 |\e[0m                        \e[33mcase\e[0m \e[31m0\e[0m => wordCount\
    \ \e[33mmatch\e[0m {\n\e[31m26 |\e[0m                            \e[33mcase\e\
    [0m \e[31m0\e[0m => wordCount \e[33mmatch\e[0m {\n\e[31m27 |\e[0m            \
    \                    \e[33mcase\e[0m \e[31m0\e[0m => wordCount \e[33mmatch\e[0m\
    \ {\n\e[31m28 |\e[0m                                    \e[33mcase\e[0m \e[31m0\e\
    [0m => wordCount \e[33mmatch\e[0m {\n\e[31m29 |\e[0m                         \
    \               \e[33mcase\e[0m \e[31m0\e[0m => wordCount \e[33mmatc"
  stdout: ''
  timestamp: 1660029068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length == 0) Left(List[String]())\n  \
    \      else if (words.length == 1) Right(words.length)\n        else {\n     \
    \       val list = words.toList\n            val even = list.filter(x => x.toLowerCase\
    \ % 2 == 0)\n            val odd = list.filter(x => x.toLowerCase % 2 != 0)\n\
    \            val evenCount = even.count(x => x.toLowerCase <= 'z')\n         \
    \   val oddCount = odd.count(x => x.toLowerCase <= 'z')\n            val count\
    \ = evenCount + oddCount\n            Right(count)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpljvu6k1h.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = list.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpljvu6k1h.scala:21:53\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = list.filter(\e[36mx\e[0m => x.toLowerCase % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpljvu6k1h.scala:22:61 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(\e\
    [36mx\e[0m => x.toLowerCase <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                                     ^^^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (\e[31m'z'\e[0m :\
    \ Char)\n\e[31m   |\e[0m                                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljvu6k1h.scala:23:59\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36moddCount\e[0m = odd.count(\e[36mx\e[0m => x.toLowerCase <= \e[31m'z'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660029069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ wordList = new mutable.ListBuffer[String]()\n            words.foreach(word\
    \ => wordList += word.trim())\n            val wordCount = wordList.size\n   \
    \         val oddCount = wordList.count(x => x.toLowerCase == \"a\")\n       \
    \     val evenCount = wordList.count(x => x.toLowerCase == \"b\")\n          \
    \  val oddCountInt = if (oddCount == 0) 0 else oddCount\n            val evenCountInt\
    \ = if (evenCount == 0) 0 else evenCount\n            val oddCountLong = if (oddCountInt\
    \ == 0) 0 else oddCountInt.toLong\n            val evenCountLong = if (evenCountInt\
    \ == 0) 0 else evenCountInt.toLong\n            val oddCountLongInt = if (oddCountLong\
    \ == 0) 0 else oddCountLong\n            val evenCountLongInt = if (evenCountLong\
    \ == 0) 0 else evenCountLong\n            Left(wordList.mkString(\",\"))\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ottcbo7.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords =\
    \ lowerCaseWords.filter(word => word.count(_ == 'a') % 2 == 0)\n            val\
    \ oddOrderWords = lowerCaseWords.filter(word => word.count(_ == 'a') % 2 != 0)\n\
    \            val evenOrderWordsCount = evenOrderWords.count(_ == 'a')\n      \
    \      val oddOrderWordsCount = oddOrderWords.count(_ == 'a')\n            val\
    \ evenOrderWordsCountString = evenOrderWordsCount.toString\n            val oddOrderWordsCountString\
    \ = oddOrderWordsCount.toString\n            val evenOrderWordsCountLong = Long.parseLong(evenOrderWordsCountString)\n\
    \            val oddOrderWordsCountLong = Long.parseLong(oddOrderWordsCountString)\n\
    \            if (evenOrderWordsCountLong == oddOrderWordsCountLong) {\n      \
    \          Right(evenOrderWordsCountLong)\n            } else {\n            \
    \    Left(oddOrderWordsCountLong)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkrdjnzlb.scala:22:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCount\e\
    [0m = evenOrderWords.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                    ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpkrdjnzlb.scala:23:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCount\e\
    [0m = oddOrderWords.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                                 ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkrdjnzlb.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountLong\e\
    [0m = Long.parseLong(evenOrderWordsCountString)\n\e[31m\e[31m   |\e[0m       \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkrdjnzlb.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountLong\e\
    [0m = Long.parseLong(oddOrderWordsCountString)\n\e[31m\e[31m   |\e[0m        \
    \                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                   value parseLong is not a member of object Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(x => x.toLowerCase == \"a\" || x.toLowerCase\
    \ == \"b\" || x.toLowerCase == \"c\" || x.toLowerCase == \"d\" || x.toLowerCase\
    \ == \"e\" || x.toLowerCase == \"f\" || x.toLowerCase == \"g\" || x.toLowerCase\
    \ == \"h\" || x.toLowerCase == \"i\" || x.toLowerCase == \"j\" || x.toLowerCase\
    \ == \"k\" || x.toLowerCase == \"l\" || x.toLowerCase == \"m\" || x.toLowerCase\
    \ == \"n\" || x.toLowerCase == \"o\" || x.toLowerCase == \"p\" || x.toLowerCase\
    \ == \"q\" || x.toLowerCase == \"r\" || x.toLowerCase == \"s\" || x.toLowerCase\
    \ == \"t\" || x.toLowerCase == \"u\" || x.toLowerCase == \"v\" || x.toLowerCase\
    \ == \"w\" || x.toLowerCase == \"x\" || x.toLowerCase == \"y\" || x.toLowerCase\
    \ == \"z\").length\n            val odd = words.filter(x => x.toLowerCase == \"\
    a\" || x.toLowerCase == \"b\" || x.toLowerCase == \"c\" || x.toLowerCase == \"\
    d\" || x.toLowerCase == \"e\" || x.toLowerCase == \"f\" || x.toLowerCase == \"\
    g\" || x.toLowerCase == \"h\" || x.toLowerCase == \"i\" || x.toLowerCase == \"\
    j\" || x.toLowerCase == \"k\" || x.toLowerCase == \"l\" || x.toLowerCase == \"\
    m\" || x.toLowerCase == \"n\" || x.toLowerCase == \"o\" || x.toLowerCase == \"\
    p\" || x.toLowerCase == \"q\" || x.toLowerCase == \"r\" || x.toLowerCase == \"\
    s\" || x.toLowerCase == \"t\" || x.toLowerCase == \"u\" || x.toLowerCase == \"\
    v\" || x.toLowerCase == \"w\" || x.toLowerCase == \"x\" || x.toLowerCase == \"\
    y\" || x.toLowerCase == \"z\").filter(x => x.toLowerCase != \"a\" && x.toLowerCase\
    \ != \"b\" && x.toLowerCase != \"c\" && x.toLowerCase != \"d\" && x.toLowerCase\
    \ != \"e\" && x.toLowerCase != \"f\" && x.toLowerCase != \"g\" && x.toLowerCase\
    \ != \"h\" && x.toLowerCase != \"i\" && x.toLowerCase != \"j\" && x.toLowerCase\
    \ != \"k\" && x.toLowerCase != \"l\" && x.toLower\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpub1a6ee_.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpub1a6ee_.scala:34:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpub1a6ee_.scala:20:964 -----------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e[36mx\e\
    [0m => x.toLowerCase == \e[31m\"a\"\e[0m || x.toLowerCase == \e[31m\"b\"\e[0m\
    \ || x.toLowerCase == \e[31m\"c\"\e[0m || x.toLowerCase == \e[31m\"d\"\e[0m ||\
    \ x.toLowerCase == \e[31m\"e\"\e[0m || x.toLowerCase == \e[31m\"f\"\e[0m || x.toLowerCase\
    \ == \e[31m\"g\"\e[0m || x.toLowerCase == \e[31m\"h\"\e[0m || x.toLowerCase ==\
    \ \e[31m\"i\"\e[0m || x.toLowerCase == \e[31m\"j\"\e[0m || x.toLowerCase == \e\
    [31m\"k\"\e[0m || x.toLowerCase == \e[31m\"l\"\e[0m || x.toLowerCase == \e[31m\"\
    m\"\e[0m || x.toLowerCase == \e[31m\"n\"\e[0m || x.toLowerCase == \e[31m\"o\"\e\
    [0m || x.toLowerCase == \e[31m\"p\"\e[0m || x.toLowerCase == \e[31m\"q\"\e[0m\
    \ || x.toLowerCase == \e[31m\"r\"\e[0m || x.toLowerCase == \e[31m\"s\"\e[0m ||\
    \ x.toLowerCase == \e[31m\"t\"\e[0m || x.toLowerCase == \e[31m\"u\"\e[0m || x.toLowerCase\
    \ == \e[31m\"v\"\e[0m || x.toLowerCase == \e[31m\"w\"\e[0m || x.toLowerCase ==\
    \ \e[31m\"x\"\e[0m || x.toLowerCase == \e[31m\"y\"\e[0m || x.toLowerCase == \e\
    [31m\"z\"\e[0m).filter(\e[36mx\e[0m => x.toLowerCase != \e[31m\"a\"\e[0m && x.toLowerCase\
    \ != \e[31m\"b\"\e[0m && x.toLowerCase != \e[31m\"c\"\e[0m && x.toLowerCase !=\
    \ \e[31m\"d\"\e[0m && x.toLowerCase != \e[31m\"e\"\e[0m && x.toLowerCase != \e\
    [31m\"f\"\e[0m && x.toLowerCase != \e[31m\"g\"\e[0m && x.toLowerCase != \e[31m\"\
    h\"\e[0m && x.toLowerCase != \e[31m\"i\"\e[0m && x.toLowerCase != \e[31m\"j\"\e\
    [0m && x.toLowerCase != \e[31m\"k\"\e[0m && x.toLowerCase != \e[31m\"l\"\e[0m\
    \ && x.toLower\n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \       "
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(words.size)\n    \
    \    else if (words.size == 1) Right(words.head.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95veqkx3.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val numWords = words.length\n        val numLetters\
    \ = txt.length\n        val numLettersOddOrder = numLetters.toString.toList.filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrder = numLetters.toString.toList.filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderOdd = numLettersEvenOrder.toString.toList.filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEven = numLettersEvenOrder.toString.toList.filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.toString.toList.filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEven = numLettersEvenOrderEven.toString.toList.filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenOdd = numLettersEvenOrderEvenEven.toString.toList.filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEven = numLettersEvenOrderEvenEven.toString.toList.filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenEvenOdd = numLettersEvenOrderEvenEvenEven.toString.toList.filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEvenEven = numLettersEvenOrderEvenEvenEvenEven.toString.toList.filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenEvenEvenOdd =\
    \ numLettersEvenOrderEvenEvenEvenEven.toString.toList.filter(x => x % 2 == 1).length\n\
    \        val numLettersEvenOrderEvenEvenEvenEvenEven = numLettersEvenOrderEvenEvenEvenEvenEven.toString.toList.filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenEvenEvenEvenOdd\
    \ = numLettersEvenOrderEvenEvenEvenEvenEvenEven.toString.toList.filter(x => x\
    \ % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = numLettersEvenOrderEvenEvenEvenEvenEvenEvenEvenOdd.toString.toList.filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = numLettersEvenOrderEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd.toString.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3c16kek6.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3c16kek6.scala:27:50 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderEvenEvenEvenEven\e[0m\
    \ = numLettersEvenOrderEvenEvenEvenEven.toString.toList.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m            \
    \                                      ^\e[0m\n\e[31m   |\e[0m          Recursive\
    \ \e[33mvalue\e[0m \e[35mnumLettersEvenOrderEvenEvenEvenEven\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3c16kek6.scala:29:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersEvenOrderEvenEvenEvenEvenEven\e[0m = numLettersEvenOrderEvenEvenEvenEvenEven.toString.toList.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m\
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \      Recursive \e[33mvalue\e[0m \e[35mnumLettersEvenOrderEvenEvenEvenEvenEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c16kek6.scala:30:57\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOrderEvenEvenEvenEvenEvenOdd\e[0m = numLettersEvenOrderEvenEvenEvenEvenEvenEven.toString.toList.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m\
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: numLettersEvenOrderEvenEvenEvenEvenEvenEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3c16kek6.scala:31:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowmcpxy6.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else Left(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8t81muxk.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else if (words.length\
    \ == 2) Right(words.size)\n        else if (words.length == 3) Right(words.size)\n\
    \        else if (words.length == 4) Right(words.size)\n        else if (words.length\
    \ == 5) Right(words.size)\n        else if (words.length == 6) Right(words.size)\n\
    \        else if (words.length == 7) Right(words.size)\n        else if (words.length\
    \ == 8) Right(words.size)\n        else if (words.length == 9) Right(words.size)\n\
    \        else if (words.length == 10) Right(words.size)\n        else if (words.length\
    \ == 11) Right(words.size)\n        else if (words.length == 12) Right(words.size)\n\
    \        else if (words.length == 13) Right(words.size)\n        else if (words.length\
    \ == 14) Right(words.size)\n        else if (words.length == 15) Right(words.size)\n\
    \        else if (words.length == 16) Right(words.size)\n        else if (words.length\
    \ == 17) Right(words.size)\n        else if (words.length == 18) Right(words.size)\n\
    \        else if (words.length == 19) Right(words.size)\n        else if (words.length\
    \ == 20) Right(words.size)\n        else if (words.length == 21) Right(words.size)\n\
    \        else if (words.length == 22) Right(words.size)\n        else if (words.length\
    \ == 23) Right(words.size)\n        else if (words.length == 24) Right(words.size)\n\
    \        else if (words.length == 25) Right(words.size)\n        else if (words.length\
    \ == 26) Right(words.size)\n        else if (words.length == 27) Right(words.size)\n\
    \        else if (words.length == 28) Right(words.size)\n        else if (words.length\
    \ == 29) Right(words.size)\n        else if (words.length == 30) Right(words.size)\n\
    \        else if (words.length == 31) Right(words.size)\n        else if (words.length\
    \ == 32) Right(words.size)\n        else if (words.length == 33) Right(words.size)\n\
    \        else if (words.length == 34) Right(words.size)\n        else if (words.length\
    \ == 35) Right(words.size)\n        else if (words.length == 36) Right(words.size)\n\
    \        else if (words.length == 37) Right(words.size)\n        else if (words.length\
    \ == 38) Right(words.size)\n        else if (words.length == 39) Right(words.size)\n\
    \        else if (words.length == 40) Right(words.size)\n        else if (words.length\
    \ == 41) Right(words.size)\n        else if (words.length == 42) Right(words.size)\n\
    \        else if (words.length == 43) Right(words.size)\n        else if (words.length\
    \ == 44) Right(words.size)\n        else if (words.length == 45) Right(words.size)\n\
    \        else if (words.length == 46) Right(words.size)\n        else if (words.length\
    \ == 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnav5eu4l.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noWhitespaces = words.filter(_.isEmpty)\n\
    \        val noCommas = words.filter(_.contains(\",\"))\n        val noLettersOddOrder\
    \ = words.filter(_.toLowerCase == _.toUpperCase).map(_.toInt).filter(_.toInt %\
    \ 2 != 0)\n        val noLettersEvenOrder = words.filter(_.toLowerCase == _.toUpperCase).map(_.toInt).filter(_.toInt\
    \ % 2 == 0)\n        val noLettersEvenOrderCount = noLettersEvenOrder.length\n\
    \        val noLettersOddOrderCount = noLettersOddOrder.length\n        val noLettersCount\
    \ = noLettersEvenOrderCount + noLettersOddOrderCount\n        val noLettersCountInt\
    \ = noLettersCount.toInt\n        val noLettersCountLong = noLettersCountInt.toLong\n\
    \        val noLettersCountDouble = noLettersCountInt.toDouble\n        val noLettersCountFloat\
    \ = noLettersCountInt.toFloat\n        val noLettersCountInt = noLettersCountInt.toInt\n\
    \        val noLettersCountLong = noLettersCountInt.toLong\n        val noLettersCountDouble\
    \ = noLettersCountInt.toDouble\n        val noLettersCountFloat = noLettersCountInt.toFloat\n\
    \        val noLettersCountInt = noLettersCountInt.toInt\n        val noLettersCountLong\
    \ = noLettersCountInt.toLong\n        val noLettersCountDouble = noLettersCountInt.toDouble\n\
    \        val noLettersCountFloat = noLettersCountInt.toFloat\n        val noLettersCountInt\
    \ = noLettersCountInt.toInt\n        val noLettersCountLong = noLettersCountInt.toLong\n\
    \        val noLettersCountDouble = noLettersCountInt.toDouble\n        val noLettersCountFloat\
    \ = noLettersCountInt.toFloat\n        val noLettersCountInt = noLettersCountInt.toInt\n\
    \        val noLettersCountLong = noLettersCountInt.toLong\n        val noLettersCountDouble\
    \ = noLettersCountInt.toDouble\n        val noLettersCountFloat = noLettersCountInt.toFloat\n\
    \        val noLettersCountInt = noLettersCountInt.toInt\n        val no\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1afmuvr8.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1afmuvr8.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersCountInt\e[0m = noLettersCountInt.toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnoLettersCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mnoLettersCountInt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1afmuvr8.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoLettersCountLong\e[0m = noLettersCountInt.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersCountLong is already defined as \e[33mvalue\e[0m\
    \ \e[35mnoLettersCountLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1afmuvr8.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnoLettersCountDouble\e[0m\
    \ = noLettersCountInt.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersCountDouble is already defined as \e[33mvalue\e[0m\
    \ \e[35mnoLettersCountDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1afmuvr8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnoLettersCountFloat\e[0m\
    \ = noLettersCountInt.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersCountFloat is already defined as \e[33mvalue\e[0m\
    \ \e[35mnoLettersCountFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = new mutable.ListBuffer[String]()\n            val wordCount\
    \ = 0\n            for (word <- words) {\n                if (word.length == 0)\
    \ Left(wordList)\n                else if (word.length == 1) Right(wordCount)\n\
    \                else {\n                    val wordChars = word.split(\"\\\\\
    W+\")\n                    val wordCharsCount = wordChars.length\n           \
    \         if (wordCharsCount == 0) Left(wordList)\n                    else if\
    \ (wordCharsCount == 1) Right(wordCount)\n                    else {\n       \
    \                 val charsCount = wordChars.map(_.length).sum\n             \
    \           if (charsCount % 2 == 0) Right(wordCount)\n                      \
    \  else Left(wordList)\n                    }\n                }\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbklul7bu.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbklul7bu.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (word\
    \ <- words) {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m      \
    \      Found:    Unit\n\e[31m   |\e[0m            Required: Either[List[String],\
    \ Long]\n\e[31m22 |\e[0m                \e[33mif\e[0m (word.length == \e[31m0\e\
    [0m) Left(wordList)\n\e[31m23 |\e[0m                \e[33melse\e[0m \e[33mif\e\
    [0m (word.length == \e[31m1\e[0m) Right(wordCount)\n\e[31m24 |\e[0m          \
    \      \e[33melse\e[0m {\n\e[31m25 |\e[0m                    \e[33mval\e[0m \e\
    [36mwordChars\e[0m = word.split(\e[31m\"\\\\W+\"\e[0m)\n\e[31m26 |\e[0m      \
    \              \e[33mval\e[0m \e[36mwordCharsCount\e[0m = wordChars.length\n\e\
    [31m27 |\e[0m                    \e[33mif\e[0m (wordCharsCount == \e[31m0\e[0m)\
    \ Left(wordList)\n\e[31m28 |\e[0m                    \e[33melse\e[0m \e[33mif\e\
    [0m (wordCharsCount == \e[31m1\e[0m) Right(wordCount)\n\e[31m29 |\e[0m       \
    \             \e[33melse\e[0m {\n\e[31m30 |\e[0m                        \e[33mval\e\
    [0m \e[36mcharsCount\e[0m = wordChars.map(_.length).sum\n\e[31m31 |\e[0m     \
    \                   \e[33mif\e[0m (charsCount % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ Right(wordCount)\n\e[31m32 |\e[0m                        \e[33melse\e[0m Left(wordList)\n\
    \e[31m33 |\e[0m                    }\n\e[31m34 |\e[0m                }\n\e[31m35\
    \ |\e[0m            }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val lowerCaseWords = words.map(_.toLowerCase)\n            val evenOrderWords\
    \ = lowerCaseWords.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddOrderWords = lowerCaseWords.filter(word => word.forall(_.isLetter)\
    \ && word.forall(_.isUpper))\n            val evenOrderWordsCount = evenOrderWords.map(word\
    \ => word.length).sum\n            val oddOrderWordsCount = oddOrderWords.map(word\
    \ => word.length).sum\n            val evenOrderWordsCountStr = evenOrderWordsCount.toString\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString\n       \
    \     Right(List(evenOrderWordsCountStr, oddOrderWordsCountStr))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwgh_al6.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Right(List(evenOrderWordsCountStr,\
    \ oddOrderWordsCountStr))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[String]\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val wordList = words.toList\n        val wordCount\
    \ = wordList.size\n        val lowerCaseLetters = wordList.count(_.toLowerCase\
    \ == \"a\")\n        val oddLetters = wordList.count(_.toLowerCase == \"a\" &&\
    \ _ % 2 == 1)\n        val result = if (wordCount == 0) Right(0) else if (lowerCaseLetters\
    \ == 0) Right(lowerCaseLetters) else if (oddLetters == 0) Right(oddLetters) else\
    \ Left[List[String], Long](wordList)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpd9z437qc.scala:19:40 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36moddLetters\e[0m = wordList.count(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m && _ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9z437qc.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[List[String],\
    \ \e[1m\e[31mInt\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m|\e[0m\e[1m\e[31m \e[0mLong]\e\
    [1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val upperCaseLetters = words.filter(_.forall(_.isUpper)).length\n  \
    \          val lowerCaseLetters = words.filter(_.forall(_.isLower)).length\n \
    \           val oddLetters = words.filter(_.forall(_.isLetter) && _.toString.toInt.toChar\
    \ % 2 != 0).length\n            Right(List(words.length, upperCaseLetters, lowerCaseLetters,\
    \ oddLetters))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpls1t_rjf.scala:21:42 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = words.filter(_.forall(_.isLetter)\
    \ && _.toString.toInt.toChar % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpls1t_rjf.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Right(List(words.length,\
    \ upperCaseLetters, lowerCaseLetters, oddLetters))\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Int]\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Right(words.size)\n\
    \        else if (words.length == 1)\n            Right(words.head.length)\n \
    \       else {\n            val even = words.filter(_.length%2 == 0)\n       \
    \     val odd = words.filter(_.length%2 != 0)\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            val evenLetters\
    \ = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n            val oddLetters\
    \ = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetter\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm0924oou.scala:75:0 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0924oou.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = evenLetters.sum\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenLettersCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm0924oou.scala:30:16 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm0924oou.scala:31:16 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm0924oou.scala:32:16 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Na"
  stdout: ''
  timestamp: 1660029078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else {\n\
    \            val even = words.filter(word => word.length % 2 == 0)\n         \
    \   val odd = words.filter(word => word.length % 2 != 0)\n            val evenCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLetters\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLetters\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount2\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount2\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount3\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount3\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount4\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount4\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount5\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount5\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount6\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount6\
    \ = odd.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val evenLettersCount7\
    \ = even.map(word => word.count(_ >= 'a' && _ <= 'z')).sum\n            val oddLettersCount7\
    \ = odd.map(word => word.count(_ >= 'a' && _ \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprllt1map.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprllt1map.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmprllt1map.scala:21:56 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.map(\e[36mword\e\
    [0m => word.count(_ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m)).sum\n\e[31m\e[31m\
    \   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmprllt1map.scala:22:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36moddCount\e[0m = odd.map(\e[36mword\e[0m => word.count(_ >= \e[31m'a'\e\
    [0m && _ <= \e[31m'z'\e[0m)).sum\n\e[31m\e[31m   |\e[0m                      \
    \                                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmprllt1map.scala:23:58 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(\e\
    [36mword\e[0m => word.count(_ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m)).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmprllt1map.scala:24:56 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(\e[36mword\e\
    [0m => word.count(_ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m)).sum\n\e[31m\e[31m\
    \   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of par"
  stdout: ''
  timestamp: 1660029077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ even = words.filter(word => word.length % 2 == 0)\n            val odd = words.filter(word\
    \ => word.length % 2 != 0)\n            val evenCount = even.map(word => word.countLetters).sum\n\
    \            val oddCount = odd.map(word => word.countLetters).sum\n         \
    \   if (evenCount == 0) Right(evenCount)\n            else if (oddCount == 0)\
    \ Left(odd.length)\n            else Left(evenCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jq7szsc.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.map(\e\
    [36mword\e[0m => word.countLetters).sum\n\e[31m\e[31m   |\e[0m               \
    \                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     value countLetters is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmp7jq7szsc.scala:21:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.map(\e\
    [36mword\e[0m => word.countLetters).sum\n\e[31m\e[31m   |\e[0m               \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                     No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jq7szsc.scala:22:48\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.map(\e[36mword\e[0m => word.countLetters).sum\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value countLetters is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp7jq7szsc.scala:22:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.map(\e\
    [36mword\e[0m => word.countLetters).sum\n\e[31m\e[31m   |\e[0m               \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                   No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7jq7szsc.scala:24:45\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddCount == \e[31m0\e[0m) Left(odd.length)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Int\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660029078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(0) else Right(words.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qrkrphl.scala:19)\n\tat Problem.main(tmp6qrkrphl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.isEmpty) Left(Nil)\n        else if (words.size\
    \ == 1) Right(words.head)\n        else {\n            val splitWords = words.map(_.toLowerCase)\n\
    \            val even = splitWords.filter(x => x % 2 == 0)\n            val odd\
    \ = splitWords.filter(x => x % 2 != 0)\n            val evenCount = even.count(x\
    \ => x.toString.toLowerCase == \"a\")\n            val oddCount = odd.count(x\
    \ => x.toString.toLowerCase == \"a\")\n            val result = if (evenCount\
    \ == oddCount) evenCount else evenCount + 1\n            Right(result)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3170822p.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m    \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3170822p.scala:20:48 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = splitWords.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                       ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3170822p.scala:21:47\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = splitWords.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                             ^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(x => x.toLowerCase == \"even\")\n          \
    \  val odd = words.filter(x => x.toLowerCase == \"odd\")\n            val evenCount\
    \ = even.count(x => x.toLowerCase == \"a\")\n            val oddCount = odd.count(x\
    \ => x.toLowerCase == \"a\")\n            val evenOddCount = evenCount + oddCount\n\
    \            val evenOddCountString = evenOddCount.toString\n            val evenOddCountLong\
    \ = Long.parseLong(evenOddCountString)\n            if (evenOddCountLong % 2 ==\
    \ 0) Right(evenOddCountLong)\n            else Left(List[String](evenOddCountLong))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi5jomxez.scala:25:40 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountLong\e[0m\
    \ = Long.parseLong(evenOddCountString)\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     value parseLong is not a member of object Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val letters = txt.split(\"[,]\").map(_.toLowerCase)\n            val\
    \ evenLetters = letters.filter(letter => letters.count(_ == letter) % 2 == 0)\n\
    \            val oddLetters = letters.filter(letter => letters.count(_ == letter)\
    \ % 2 != 0)\n            val evenLettersCount = evenLetters.count(letter => letters.count(_\
    \ == letter) % 2 == 0)\n            val oddLettersCount = oddLetters.count(letter\
    \ => letters.count(_ == letter) % 2 != 0)\n            if (evenLettersCount ==\
    \ 0) Right(evenLetters.length)\n            else if (oddLettersCount == 0) Left(oddLetters.length)\n\
    \            else Right(evenLetters.length + oddLetters.length)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfuw_ixm3.scala:25:59\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddLettersCount == \e[31m0\e[0m) Left(oddLetters.length)\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Int\n\e[31m   |\e[0m                                                Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length == 0) Left(Nil)\n   \
    \         else if (words.length == 1) Right(words.length)\n            else {\n\
    \                val lowerCaseLetters = txt.filter(_.isLower)\n              \
    \  val oddLetters = lowerCaseLetters.filter(x => x.toInt % 2 == 1)\n         \
    \       Right(oddLetters.length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lwir6qk.scala:30)\n\tat Problem.main(tmp6lwir6qk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ counts = words.map(_.toLowerCase).map(c => c.count(_ == 'a'))\n            val\
    \ odd = counts.filter(c => c % 2 == 1).length\n            Right(odd)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxvora2c.scala:25)\n\tat Problem.main(tmpgxvora2c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.head.length)\n        else if\
    \ (words.length == 2) Right(words.length)\n        else if (words.length == 3)\
    \ Right(words.length)\n        else if (words.length == 4) Right(words.length)\n\
    \        else if (words.length == 5) Right(words.length)\n        else if (words.length\
    \ == 6) Right(words.length)\n        else if (words.length == 7) Right(words.length)\n\
    \        else if (words.length == 8) Right(words.length)\n        else if (words.length\
    \ == 9) Right(words.length)\n        else if (words.length == 10) Right(words.length)\n\
    \        else if (words.length == 11) Right(words.length)\n        else if (words.length\
    \ == 12) Right(words.length)\n        else if (words.length == 13) Right(words.length)\n\
    \        else if (words.length == 14) Right(words.length)\n        else if (words.length\
    \ == 15) Right(words.length)\n        else if (words.length == 16) Right(words.length)\n\
    \        else if (words.length == 17) Right(words.length)\n        else if (words.length\
    \ == 18) Right(words.length)\n        else if (words.length == 19) Right(words.length)\n\
    \        else if (words.length == 20) Right(words.length)\n        else if (words.length\
    \ == 21) Right(words.length)\n        else if (words.length == 22) Right(words.length)\n\
    \        else if (words.length == 23) Right(words.length)\n        else if (words.length\
    \ == 24) Right(words.length)\n        else if (words.length == 25) Right(words.length)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp850pmjje.scala:42:18\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else {\n            val lowerCaseWords = words.map(_.toLowerCase)\n       \
    \     val evenOrderWords = lowerCaseWords.filter(word => word.forall(_.isLetter)\
    \ && word.forall(_.isLower))\n            val oddOrderWords = lowerCaseWords.filter(word\
    \ => word.forall(_.isLetter) && word.forall(_.isUpper))\n            val evenOrderWordsCount\
    \ = evenOrderWords.map(_.length).sum\n            val oddOrderWordsCount = oddOrderWords.map(_.length).sum\n\
    \            if (evenOrderWordsCount == 0)\n                Right(evenOrderWordsCount)\n\
    \            else if (oddOrderWordsCount == 0)\n                Right(oddOrderWordsCount)\n\
    \            else\n                Left(evenOrderWordsCount, oddOrderWordsCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpstywbbo7.scala:31:21\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                Left(evenOrderWordsCount,\
    \ oddOrderWordsCount)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    (Int, Int)\n\e[31m   |\e[0m\
    \                     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0)\n            Left(List[String]())\n\
    \        else if (words.length == 1)\n            Right(words.length)\n      \
    \  else\n            Right(words.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vc0u37q.scala:24)\n\tat Problem.main(tmp3vc0u37q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenSize = even.map(_.length).sum\n\
    \            val oddSize = odd.map(_.length).sum\n            val evenOrder =\
    \ even.map(_.toLowerCase - 'a').sum\n            val oddOrder = odd.map(_.toLowerCase\
    \ - 'a').sum\n            val evenOrderOdd = evenOrder + oddOrder\n          \
    \  val evenOrderEven = evenOrder - evenOrderOdd\n            val oddOrderEven\
    \ = oddOrder - evenOrderOdd\n            val evenOrderOddSize = evenOrderOdd +\
    \ oddOrderEven\n            val evenOrderEvenSize = evenOrderEven - evenOrderOddSize\n\
    \            val oddOrderEvenSize = oddOrderEven - evenOrderOddSize\n        \
    \    val evenOrderOddSizeSize = evenOrderOddSize + oddOrderEvenSize\n        \
    \    val evenOrderEvenSizeSize = evenOrderEvenSize - evenOrderOddSizeSize\n  \
    \          val oddOrderEvenSizeSize = oddOrderEvenSize - evenOrderOddSizeSize\n\
    \            val evenOrderOddSizeSizeSize = evenOrderOddSizeSize + oddOrderEvenSizeSize\n\
    \            val evenOrderEvenSizeSizeSize = evenOrderEvenSizeSize - evenOrderOddSizeSizeSize\n\
    \            val oddOrderEvenSizeSizeSize = oddOrderEvenSizeSize - evenOrderOddSizeSizeSize\n\
    \            val evenOrderOddSizeSizeSizeSize = evenOrderOddSizeSizeSize + oddOrderEvenSizeSizeSize\n\
    \            val evenOrderEvenSizeSizeSizeSize = evenOrderEvenSizeSizeSize - evenOrderOddSizeSizeSizeSize\n\
    \            val oddOrderEvenSizeSizeSizeSize = oddOrderEvenSizeSizeSize - evenOrderOddSizeSizeSizeSize\n\
    \            val evenOrderOddSizeSizeSizeSize = evenOrderOddSizeSizeSize + oddOrderEvenSizeSizeSize\n\
    \            val evenOrderEvenSizeSizeSizeSize = evenOrderEvenSizeSizeSize - evenOrderOddSizeSizeSizeSize\n\
    \            val oddOrderEvenSizeSizeSizeSize = oddOrderEvenSizeSizeSize - evenOrderOddSizeSizeSizeSizeSize\n\
    \            val evenOrderOddSizeSizeSizeSizeSize = evenOrderOddSizeSizeSizeSize\
    \ + oddOrderEvenSizeSizeSizeSizeSize\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9tbpcnk.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj9tbpcnk.scala:40:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderOddSizeSizeSizeSize\e[0m = evenOrderOddSizeSizeSize + oddOrderEvenSizeSizeSize\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderOddSizeSizeSizeSize is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderOddSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj9tbpcnk.scala:41:16 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e[0m \e[36mevenOrderEvenSizeSizeSizeSize\e\
    [0m = evenOrderEvenSizeSizeSize - evenOrderOddSizeSizeSizeSize\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderEvenSizeSizeSizeSize is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderEvenSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj9tbpcnk.scala:42:16 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e[0m \e[36moddOrderEvenSizeSizeSizeSize\e\
    [0m = oddOrderEvenSizeSizeSize - evenOrderOddSizeSizeSizeSizeSize\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderEvenSizeSizeSizeSize is already defined as \e[33mvalue\e\
    [0m \e[35moddOrderEvenSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj9tbpcnk.scala:23:51 -------------------"
  stdout: ''
  timestamp: 1660029079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val oddOrderLetters = words.map(_.toLowerCase - 'a').filter(x => x % 2\
    \ == 1).size\n            Right(oddOrderLetters)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm0b70nl8.scala:19:58 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddOrderLetters\e[0m\
    \ = words.map(_.toLowerCase - \e[31m'a'\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpm0b70nl8.scala:19:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddOrderLetters\e[0m\
    \ = words.map(_.toLowerCase - \e[31m'a'\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m                             \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                        No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029079
