language: scala
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps81yux2i.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_limit\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_queue\
    \ = mutable.Queue[String]()\n        val paren_levels = mutable.Map[String, Long]()\n\
    \        paren_queue.enqueue(paren_string)\n        while(!paren_queue.isEmpty)\
    \ {\n            val paren_string = paren_queue.dequeue()\n            paren_stack.push(paren_string)\n\
    \            paren_string match {\n                case \"(\" => paren_queue.enqueue(paren_stack.pop())\n\
    \                case \")\" => paren_levels(paren_stack.pop()) = paren_levels(paren_stack.pop())\
    \ + 1\n                case _ => paren_queue.enqueue(paren_string)\n         \
    \   }\n        }\n        paren_levels\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8kxdc3x.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8kxdc3x.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8kxdc3x.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_max_depth = paren_groups.foldLeft(List[Long]())((acc,\
    \ x) => {\n            val max_depth = acc.foldRight(0)((max_depth, current_depth)\
    \ => {\n                if (max_depth < current_depth) max_depth else current_depth\n\
    \            })\n            if (max_depth > x.toLong) acc else x :: acc\n   \
    \     })\n        paren_groups_with_max_depth.map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpehlzhjv2.scala:13:47\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mif\e[0m\
    \ (max_depth < current_depth) max_depth \e[33melse\e[0m current_depth\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                            Found:    (max_depth\
    \ : Long)\n\e[31m   |\e[0m                                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_length\
    \ = paren_groups.length\n        val paren_groups_map = mutable.Map[String, List[Long]]()\n\
    \        var paren_groups_count = 0\n        var paren_groups_count_max = 0\n\
    \        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgmge_pjg.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmge_pjg.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_groups_count_max\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_groups_count_max\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_groups_count_max\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgmge_pjg.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mvar\e[0m \e[36mparen_groups_count_current\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_groups_count_current is already defined as \e[33mvariable\e\
    [0m \e[35mparen_groups_count_current\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmge_pjg.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mparen_groups_count_max\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_count_max is already defined as \e[33mvariable\e\
    [0m \e[35mparen_groups_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmge_pjg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mparen_groups_count_current\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_count_current is already defined as \e[33mvariable\e\
    [0m \e[35mparen_groups_count_current\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the "
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim\n        val paren_list_list\
    \ = paren_list_string.split(\" \")\n        val paren_list_list_length = paren_list_list.length\n\
    \        val paren_list_list_list_length = paren_list_list_length / 2\n      \
    \  val paren_list_list_list_list_length = paren_list_list_list_length / 2\n  \
    \      val paren_list_list_list_list_list_length = paren_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_length = paren_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_length / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_length / 2\n     \
    \   val paren_list_list_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_list_list_length / 2\n  \
    \      val paren_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_length /\
    \ 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpclt6g_51.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpclt6g_51.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_list_list_list_list_list_list_list_list_list_list_list_list_list_length\e\
    [0m = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpclt6g_51.scala:17:62 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_list_list_list_list_list_list_list_length\e\
    [0m = paren_list_list_list_list_list_list_list_length / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                              ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_list_list_list_list_list_list_list_length\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpclt6g_51.scala:18:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_list_list_list_list_list_list_list_list_length\e[0m = paren_list_list_list_list_list_list_list_list_length\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mparen_list_list_list_list_list_list_list_list_length\e[0"
  stdout: ''
  timestamp: 1659798417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, List[Long]]()\n        paren_string.split(\"\\\\s+\"\
    ).foreach(x => {\n            val paren_str = x.trim\n            if (paren_str.length\
    \ == 0) return\n            val paren_str = paren_str.substring(1)\n         \
    \   paren_stack.push(paren_str)\n            val paren_str = paren_str.substring(1)\n\
    \            if (paren_stack_map.contains(paren_str)) {\n                paren_stack_map.get(paren_str).foreach(y\
    \ => paren_stack.pop())\n            }\n            else {\n                paren_stack_map.put(paren_str,\
    \ paren_stack.map(x => x.toLong).toList)\n            }\n        })\n        val\
    \ max_level = paren_stack_map.values.max\n        val max_level_str = max_level.map(x\
    \ => x.toLong).mkString(\",\")\n        val max_level_str = max_level_str.substring(1)\n\
    \        paren_stack_map.values.map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo7ad_uoq.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7ad_uoq.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_str\e[0m = max_level_str.substring(\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmax_level_str is already defined as \e[33mvalue\e[0m \e[35mmax_level_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpo7ad_uoq.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7ad_uoq.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo7ad_uoq.scala:15:16 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mval\e[0m \e[36mparen_str\e[0m = paren_str.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_str is already defined as \e[33mvalue\e[0m \e[35mparen_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo7ad_uoq.scala:17:16 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps5w4iswy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps5w4iswy.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659798154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n\
    \        val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).max\n        val paren_chars_count_min = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).min\n        val paren_chars_count_range = paren_chars_count_max -\
    \ paren_chars_count_min\n        val paren_chars_count_range_max = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_min = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid = paren_chars_count_range / 2\n     \
    \   val paren_chars_count_range_mid2 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid3 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid4\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid5 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid6 = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid7 = paren_chars_count_range / 2\n    \
    \    val paren_chars_count_range_mid8 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid9 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid10\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid11 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid12 = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid13 = paren_chars_count_range / 2\n   \
    \     val paren_chars_count_range_mid14 = paren_chars_count_range / 2\n      \
    \  val paren_chars_count_range_mid15 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid16 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid17\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid18 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid19 = paren_chars_count_range / \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpna36cshs.scala:35:69 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_mid19\e\
    [0m = paren_chars_count_range / \n\e[31m\e[31m   |\e[0m                      \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpna36cshs.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpna36cshs.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna36cshs.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.ListBuffer[Long]()\n        paren_stack.push(paren_string)\n     \
    \   paren_levels.append(0)\n        while (paren_stack.nonEmpty) {\n         \
    \   val paren_string = paren_stack.pop()\n            val paren_level = paren_levels.pop()\n\
    \            val paren_level_string = paren_level.toString\n            val paren_level_length\
    \ = paren_level_string.length\n            val paren_level_chars = paren_level_string.chars\n\
    \            val paren_level_chars_length = paren_level_chars.length\n       \
    \     val paren_level_chars_count = paren_level_chars.length\n            val\
    \ paren_level_chars_count_minus_1 = paren_level_chars_count - 1\n            val\
    \ paren_level_chars_count_minus_2 = paren_level_chars_count_minus_1 - 1\n    \
    \        val paren_level_chars_count_minus_3 = paren_level_chars_count_minus_2\
    \ - 1\n            val paren_level_chars_count_minus_4 = paren_level_chars_count_minus_3\
    \ - 1\n            val paren_level_chars_count_minus_5 = paren_level_chars_count_minus_4\
    \ - 1\n            val paren_level_chars_count_minus_6 = paren_level_chars_count_minus_5\
    \ - 1\n            val paren_level_chars_count_minus_7 = paren_level_chars_count_minus_6\
    \ - 1\n            val paren_level_chars_count_minus_8 = paren_level_chars_count_minus_7\
    \ - 1\n            val paren_level_chars_count_minus_9 = paren_level_chars_count_minus_8\
    \ - 1\n            val paren_level_chars_count_minus_10 = paren_level_chars_count_minus_9\
    \ - 1\n            val paren_level_chars_count_minus_11 = paren_level_chars_count_minus_10\
    \ - 1\n            val paren_level_chars_count_minus_12 = paren_level_chars_count_minus_11\
    \ - 1\n            val paren_level_chars_count_minus_13 = paren_level_chars_count_minus_12\
    \ - 1\n            val paren_level_chars_count_minus_14 = paren_level_chars_count_minus_13\
    \ - 1\n            val paren_level_chars_count_minus_15 = paren_level_chars_count_minus_14\
    \ - 1\n            val paren_level_chars_count_minus_16 = paren_level_chars_count_minus_15\
    \ - 1\n            val paren_level_chars_count_minus_17 = paren_level_chars_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqpjom1gb.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqpjom1gb.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqpjom1gb.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqpjom1gb.scala:38:51 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36mparen_level_chars_count_minus_17\e\
    [0m = paren_level_chars_count_\n\e[31m\e[31m   |\e[0m                        \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: paren_level_chars_count_\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqpjom1gb.scala:46:1 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpqpjom1gb.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found"
  stdout: ''
  timestamp: 1659798417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzhwlcr9l.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzhwlcr9l.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_level_length\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzhwlcr9l.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_length\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzhwlcr9l.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_length\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzhwlcr9l.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_length\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.split(\" \")\n        val paren_list_long\
    \ = paren_list_string.map(x => x.toLong)\n        val paren_list_long_list = paren_list_long.distinct\n\
    \        val paren_list_long_list = paren_list_long_list.sortBy(x => x)\n    \
    \    val paren_list_long_list = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n\
    \        val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n\
    \        val paren_list_long_list = paren_list_long_list.distinct\n        val\
    \ paren_list_long_list = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list\
    \ = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n   \
    \     val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n   \
    \     val paren_list_long_list = paren_list_long_list.distinct\n        val paren_list_long_list\
    \ = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list = paren_list_long_list.takeWhile(x\
    \ => x < paren_list_long_list.length)\n        val paren_list_long_list = paren_list_long_list.map(x\
    \ => x.toLong)\n        val paren_list_long_list = paren_list_long_list.distinct\n\
    \        val paren_list_long_list = paren_list_long_list.sortBy(x => x)\n    \
    \    val paren_list_long_list = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n\
    \        val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n\
    \        val paren_list_long_list = paren_list_long_list.distinct\n        val\
    \ paren_list_long_list = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list\
    \ = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n   \
    \     val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n   \
    \     val paren_list_long_list = paren_list_long_list.distinct\n        val paren_list_long_list\
    \ = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list = paren_list_long_list.takeWhile(x\
    \ => x < paren_list_long_list.length)\n        val paren_list_long_list = paren_list_long_list.map(x\
    \ => x.toLong)\n        val paren_list_long_list = paren_list_long_list.distinct\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp38k_bwvy.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long_list\e[0m\
    \ = paren_list_long_list.sortBy(\e[36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_list_long_list is already defined as \e[33mvalue\e[0m \e[35mparen_list_long_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp38k_bwvy.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long_list\e[0m = paren_list_long_list.takeWhile(\e\
    [36mx\e[0m => x < paren_list_long_list.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_long_list is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_list_long_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp38k_bwvy.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long_list\e[0m\
    \ = paren_list_long_list.map(\e[36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_long_list is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_list_long_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp38k_bwvy.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long_list\e[0m\
    \ = paren_list_long_list.distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_long_list is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_list_long_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max = mutable.Stack[Long]()\n   \
    \     val paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n  \
    \      val paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n \
    \       val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppl7jqkcx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_stack_len_max_len_max_max_max_max\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppl7jqkcx.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_stack_len_max_len_max_max_max_max_max\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppl7jqkcx.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_len_max_len_max_max_max_max_max_max is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_len_max_len_max_max_max_max_max_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppl7jqkcx.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_max_len_max_max_max_max_max_max_max\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_levels = paren_groups.foldLeft(0L) { (max_level, group) => if (group\
    \ > max_level) group else max_level }\n        val max_level = max_levels + 1\n\
    \        val levels = paren_groups.map(_.toLong)\n        val levels_count = levels.count(_\
    \ > 0)\n        val max_level_with_one = levels.count(_ == 1)\n        val max_level_with_zero\
    \ = levels.count(_ == 0)\n        val max_level_with_one_or_zero = levels.count(_\
    \ == 1) || levels.count(_ == 0)\n        val max_level_with_zero_or_one = levels.count(_\
    \ == 0) || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\n   \
    \     val max_level_with_zero_or_one_or_zero_or_one = levels.count(_ == 0) ||\
    \ levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_ == 1)\n     \
    \   val max_level_with_zero_or_one_or_zero_or_one_or_zero = levels.count(_ ==\
    \ 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_ == 1) ||\
    \ levels.count(_ == 0)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\n\
    \        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\
    \ || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\
    \ || levels.count(\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk_2k92_f.scala:25:275 --------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\e\
    [0m = levels.count(_ == \e[31m0\e[0m) || levels.count(_ == \e[31m1\e[0m) || levels.count(_\
    \ == \e[31m0\e[0m) || levels.count(_ == \e[31m1\e[0m) || levels.count(_ == \e\
    [31m0\e[0m) || levels.count(_ == \e[31m1\e[0m) || levels.count(_ == \e[31m0\e\
    [0m) || levels.count(\n\e[31m\e[31m   |\e[0m                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpk_2k92_f.scala:17:62 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mmax_level_with_one_or_zero\e[0m = levels.count(_\
    \ == \e[31m1\e[0m) || levels.count(_ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         value || is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_2k92_f.scala:18:62 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax_level_with_zero_or_one\e\
    [0m = levels.count(_ == \e[31m0\e[0m) || levels.count(_ == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value || is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_2k92_f.scala:19:70\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_level_with_zero_or_one_or_zero\e[0m = levels.count(_ == \e[31m0\e[0m)\
    \ || levels.count(_ == \e[31m1\e[0m) || levels.count(_ == \e[31m0\e[0m)\n\e[31m\e\
    [3"
  stdout: ''
  timestamp: 1659798419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.reduce((x,y) => x + y)\n        val paren_groups_with_paren_max_level\
    \ = paren_groups_with_paren_sum / paren_groups_with_paren.size\n        val paren_groups_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level.map(x => if (x == 0) 1 else 0)\n       \
    \ val paren_groups_with_paren_max_level_with_paren_sum = paren_groups_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_sum / paren_groups_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level_with_paren_max_level.map(x => if (x == 0)\
    \ 1 else 0)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_sum / paren_groups_with_paren_max_level_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level.map(x\
    \ => if (x == 0) 1 else 0)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ / paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzno6xnhc.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzno6xnhc.scala:14:93\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_paren_max_level_with_paren\e[0m = paren_groups_with_paren_max_level.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                       value map is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzno6xnhc.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n        paren_string.split(\"\\\\s+\").foreach { s\
    \ =>\n            val paren_stack_size += s.length\n            paren_stack +=\
    \ s\n            paren_stack_top += s.length\n            paren_stack_top_size\
    \ += s.length\n        }\n\n        val paren_stack_top_size_max = paren_stack_top_size.max\n\
    \        val paren_stack_top_size_max_index = paren_stack_top_size.indexWhere(_\
    \ == paren_stack_top_size_max)\n\n        val paren_stack_top_size_max_index =\
    \ paren_stack_top_size_max_index + 1\n        val paren_stack_top_size_max_value\
    \ = paren_stack_top_size.toList.get(paren_stack_top_size_max_index)\n\n      \
    \  val paren_stack_top_size_max_value_length = paren_stack_top_size_max_value.length\n\
    \n        val paren_stack_top_size_max_value_length_max = paren_stack_top_size_max_value_length.toInt\n\
    \n        val paren_stack_top_size_max_value_length_max_index = paren_stack_top_size_max_value_length_max_index\
    \ + 1\n        val paren_stack_top_size_max_value_length_max_value = paren_stack_top_size_max_value.toList.get(paren_stack_top_size_max_value_length_max_index)\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length = paren_stack_top_size_max_value_length_max_value.length\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max = paren_stack_top_size_max_value_length_max_value.toInt\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max_index\
    \ = paren_stack_top_size_max_value_length_max_value.toList.get(paren_stack_top_size_max_value_length_max_value_length_max_index)\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max_value_length\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toInt\n\n\
    \        val paren_stack_top_size_max_value_length_max_value_length_max_value_length_max\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toInt\n\n\
    \        val paren_stack_top_size_max_value_length_max_value_length_max_value_length_max_index\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toList.get(paren_stack_top_size_max_value_length_max_value_length_max_value_length_max_index)\n\
    \n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplvmp294y.scala:18:0 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            paren_stack += s\n\e[31m\e[31m   |\e[0m^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e[31m--\
    \ [E032] Syntax Error: /tmp/tmplvmp294y.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmplvmp294y.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplvmp294y.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size_max_index\e\
    [0m = paren_stack_top_size_max_index + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size_max_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_top_size_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplvmp294y.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplvmp294y.scala:11:31 -------------------"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.size\n        val paren_array_max_size = paren_array_size - 1\n\
    \        val paren_array_max_index = paren_array_max_size.max\n        val paren_array_max_value\
    \ = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_length = paren_array_max_value_length.toLong\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqz6gzk2s.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqz6gzk2s.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_value_length\e[0m = paren_array_max_value_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqz6gzk2s.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqz6gzk2s.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqz6gzk2s.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length.toInt\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_2 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_3 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_4\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_5 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_6 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_7 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_8\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_9 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_11 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_12\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_13 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_14 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_15 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_16\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_17 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_18 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_19 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_20\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_21 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_22 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_23 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_24\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_25 = mutable.Stack[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuu31j90_.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuu31j90_.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuu31j90_.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_depth\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuu31j90_.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuu31j90_.scala:14:35 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n        val\
    \ paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_tbv5iis.scala:44:60 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\n\e[31m\e[31m   |\e[0m                         \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:16:12 ---------"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_list = new mutable.ListBuffer[Long]()\n\
    \        var paren_array_level = 0\n        var paren_array_index = 0\n      \
    \  var paren_array_level_count = 0\n        while(paren_array_index < paren_array_size)\
    \ {\n            val paren_array_element = paren_array(paren_array_index)\n  \
    \          val paren_array_element_size = paren_array_element.length\n       \
    \     val paren_array_element_level = paren_array_element.indexOf(\"(\")\n   \
    \         val paren_array_element_level_end = paren_array_element.indexOf(\")\"\
    )\n            val paren_array_element_level_start = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_start_end = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_start_end_size = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end_size = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end_level_end\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpibbqvkk9.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpibbqvkk9.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_list\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpibbqvkk9.scala:44:1 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpibbqvkk9.scala:38:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + paren_chars.map(_.toChar).map(_.toInt).sum\n        val\
    \ paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren + 1\n \
    \       val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren\
    \ + 2\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren\
    \ + 3\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren\
    \ + 4\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren\
    \ + 5\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren\
    \ + 6\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren\
    \ + 7\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren\
    \ + 8\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren\
    \ + 9\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren\
    \ + 10\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren\
    \ + 11\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren\
    \ + 12\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren\
    \ + 13\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren\
    \ + 14\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren\
    \ + 15\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren\
    \ + 16\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren\
    \ + 17\n        val paren_chars_count_with_paren_plus_eighteen = paren_chars_count_with_paren\
    \ + 18\n        val paren_chars_count_with_paren_plus_nineteen = paren_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7blke8cq.scala:10:56 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 value toChar is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7blke8cq.scala:10:63 -----------------------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7blke8cq.scala:31:57 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_with_paren_plus_nineteen\e\
    [0m = paren_\n\e[31m\e[31m   |\e[0m                                          \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                      Not found: paren_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7blke8cq.scala:32:5 ---------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798419
