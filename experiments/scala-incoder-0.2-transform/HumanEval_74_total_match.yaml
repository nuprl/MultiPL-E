name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n\
  \    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\"\
  )), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n   \
  \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
  hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    //\
  \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\"\
  , \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"\
  4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"\
  4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        val lst3 = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_\
    \ < lst1)\n        lst3.length match {\n            case 0 => lst4\n         \
    \   case _ => lst3.foldLeft(lst4) { (acc, elem) => acc + elem }\n        }", " \
    \       val lst3 = lst1.filter(_ < lst2).map(_ + lst2.count(_ == _))\n       \
    \ if (lst3.size == lst2.size) {\n            lst3\n        } else {\n        \
    \    lst1\n        }", "        val lst1Map = lst1.map(x => (x, 1)).toMap\n  \
    \      val lst2Map = lst2.map(x => (x, 1)).toMap\n        val lst3Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x, 1)).toMap\n      \
    \  val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n      \
    \  val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val ", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n \
    \       lst4.filter(_ < lst3.size)", "        val lst3 = lst1.filter(_ < lst2)\n\
    \        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n     \
    \       case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }", "        val lst3 = lst1.toSet ++ lst2.toSet\n        lst3.toList.sortWith(_\
    \ < _)", '        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct', "  \
    \      val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n        lst4.filter(_\
    \ < lst3.size)", "        lst1 match {\n            case Nil => lst2\n       \
    \     case _ => lst2 match {\n                case Nil => lst1\n             \
    \   case _ => lst1.zip(lst2).filter(_._1 < _._1).map(_._1)\n            }\n  \
    \      }", "        val lst3 = lst1.filter( x => lst2.contains(x))\n        if(lst3.size\
    \ == lst2.size) {\n            lst3\n        } else {\n            lst1\n    \
    \    }", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.toSet\n   \
    \     lst4.filter(_ < lst3.size)", "        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }", "        lst1 match {\n            case Nil => lst2\n\
    \            case _ => lst1 ++ lst2 match {\n                case Nil => lst2\n\
    \                case _ => lst1 ++ lst2 match {\n                    case Nil\
    \ => lst2\n                    case _ => lst1 ++ lst2 match {\n              \
    \          case Nil => lst2\n                        case _ => lst1 ++ lst2 match\
    \ {\n                            case Nil => lst2\n                          \
    \  case _ => lst1 ++ lst2 match {\n                                case Nil =>\
    \ lst2\n                                case _ => lst1 ++ lst2 match {\n     \
    \                               case Nil => lst2\n                           \
    \         case _ => lst1 ++ lst2 match {\n                                   \
    \     case Nil => lst2\n                                        case _ => lst1\
    \ ++ lst2 match {\n                                            case Nil => lst2\n\
    \                                            case _ => lst1 ++ lst2 match {\n\
    \                                                case Nil => lst2\n          \
    \                                      case _ => lst1 ++ lst2 match {\n      \
    \                                              case Nil => lst2\n            \
    \                                        case _ => lst1 ++ lst2 match {\n    \
    \                                                    case Nil => lst2\n      \
    \                                                  case _ => lst1 ++ lst2 match\
    \ {\n                                                            case Nil => lst2\n\
    \                                                            case _ => lst1 ++\
    \ lst2 match {\n                                                             \
    \   case Nil => lst2\n                                                       \
    \         case _ => lst1 ++ lst2 match {\n                                   \
    \                                 case Nil => lst2\n                         \
    \                                           case _ => lst1 ++ lst2 match {\n \
    \                                                                       case Nil\
    \ => lst2\n                                                                  \
    \      case _ => lst1 ++ lst2 match {\n                                      \
    \                                      case Nil => lst2\n                    \
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \              case Nil => lst2\n                                            \
    \                                    case _ => lst1 ++ lst2 match {\n        \
    \                                                                            case\
    \ Nil => lst2\n                                                              \
    \                      case _ => lst1 ++ lst2 match {\n                      \
    \                                                                  case Nil =>\
    \ lst2\n                                                                     \
    \                   case _ => lst1 ++ lst2 match {\n                         \
    \                                                                   case Nil =>\
    \ lst2\n                                                                     \
    \                       case _ => lst1 ++ lst2 match {\n                     \
    \                                                                           case\
    \ Nil => lst2\n                                                              \
    \                                  case _ => lst1 ++ lst2 match {\n          \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \                                      case Nil => lst2\n                    \
    \                                                                            \
    \        case _ => lst1 ++ lst2 match {\n                                    \
    \                                                                        case\
    \ Nil => lst2\n                                                              \
    \                                              case _ => lst1 ", "        val\
    \ lst3 = lst1.filter(_ < lst2)\n        val lst4 = lst2.filter(_ < lst1)\n   \
    \     if (lst3.size == lst4.size) {\n            lst3\n        } else {\n    \
    \        lst4\n        }", "        val lst3 = lst1.filter(_ < lst2)\n       \
    \ val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size) lst3 else\
    \ lst4", '        lst1.zip(lst2).filter{ case (elem1, elem2) => elem1.length <
    elem2.length }.map{ case (elem1, elem2) => elem1 }', "        val lst3 = lst1.toList\
    \ ++ lst2.toList\n        val lst4 = lst3.toList\n        val lst5 = lst4.filterNot(_\
    \ == \"\")\n        val lst6 = lst5.filterNot(_ == \"\")\n        val lst7 = lst6.filterNot(_\
    \ == \"\")\n        val lst8 = lst7.filterNot(_ == \"\")\n        val lst9 = lst8.filterNot(_\
    \ == \"\")\n        val lst10 = lst9.filterNot(_ == \"\")\n        val lst11 =\
    \ lst10.filterNot(_ == \"\")\n        val lst12 = lst11.filterNot(_ == \"\")\n\
    \        val lst13 = lst12.filterNot(_ == \"\")\n        val lst14 = lst13.filterNot(_\
    \ == \"\")\n        val lst15 = lst14.filterNot(_ == \"\")\n        val lst16\
    \ = lst15.filterNot(_ == \"\")\n        val lst17 = lst16.filterNot(_ == \"\"\
    )\n        val lst18 = lst17.filterNot(_ == \"\")\n        val lst19 = lst18.filterNot(_\
    \ == \"\")\n        val lst20 = lst19.filterNot(_ == \"\")\n        val lst21\
    \ = lst20.filterNot(_ == \"\")\n        val lst22 = lst21.filterNot(_ == \"\"\
    )\n        val lst23 = lst22.filterNot(_ == \"\")\n        val lst24 = lst23.filterNot(_\
    \ == \"\")\n        val lst25 = lst24.filterNot(_ == \"\")\n        val lst26\
    \ = lst25.filterNot(_ == \"\")\n        val lst27 = lst26.filterNot(_ == \"\"\
    )\n        val lst28 = lst27.filterNot(_ == \"\")\n        val lst29 = lst28.filterNot(_\
    \ == \"\")\n        val lst30 = lst29.filterNot(_ == \"\")\n        val lst31\
    \ = lst30.filterNot(_ == \"\")\n        val lst32 = lst31.filterNot(_ == \"\"\
    )\n        val lst33 = lst32.filterNot(_ == \"\")\n        val lst34 = lst33.filterNot(_\
    \ == \"\")\n        val lst35 = lst34.filterNot(_ == \"\")\n        val lst36\
    \ = lst35.filterNot(_ == \"\")\n        val lst37 = lst36.filterNot(_ == \"\"\
    )\n        val lst38 = lst37.filterNot(_ == \"\")\n        val lst39 = lst38.filterNot(_\
    \ == \"\")\n        val lst40 = lst", "        val lst3 = lst1.filter(_ < lst2)\n\
    \        val lst4 = lst2.filter(_ < lst1)\n        if(lst3.size == lst4.size)\
    \ lst3\n        else lst4", "        val lst3 = lst1 ++ lst2\n        val lst4\
    \ = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6 = lst1 ++ lst5\n\
    \        val lst7 = lst6.filter(_ < lst3)\n        val lst8 = lst7.filter(_ <\
    \ lst2)\n        val lst9 = lst8.filter(_ < lst1)\n        val lst10 = lst9.filter(_\
    \ < lst3)\n        val lst11 = lst10.filter(_ < lst2)\n        val lst12 = lst11.filter(_\
    \ < lst1)\n        val lst13 = lst12.filter(_ < lst3)\n        val lst14 = lst13.filter(_\
    \ < lst2)\n        val lst15 = lst14.filter(_ < lst1)\n        val lst16 = lst15.filter(_\
    \ < lst3)\n        val lst17 = lst16.filter(_ < lst2)\n        val lst18 = lst17.filter(_\
    \ < lst1)\n        val lst19 = lst18.filter(_ < lst3)\n        val lst20 = lst19.filter(_\
    \ < lst2)\n        val lst21 = lst20.filter(_ < lst1)\n        val lst22 = lst21.filter(_\
    \ < lst3)\n        val lst23 = lst22.filter(_ < lst2)\n        val lst24 = lst23.filter(_\
    \ < lst1)\n        val lst25 = lst24.filter(_ < lst3)\n        val lst26 = lst25.filter(_\
    \ < lst2)\n        val lst27 = lst26.filter(_ < lst1)\n        val lst28 = lst27.filter(_\
    \ < lst3)\n        val lst29 = lst28.filter(_ < lst2)\n        val lst30 = lst29.filter(_\
    \ < lst1)\n        val lst31 = lst30.filter(_ < lst3)\n        val lst32 = lst31.filter(_\
    \ < lst2)\n        val lst33 = lst32.filter(_ < lst1)\n        val lst34 = lst33.filter(_\
    \ < lst3)\n        val lst35 = lst34.filter(_ < lst2)\n        val lst36 = lst35.filter(_\
    \ < lst1)\n        val lst37 = lst36.filter(_ < lst3)\n        val lst38 = lst37.filter(_\
    \ < lst2)\n        val lst39 = lst38.filter(_ < lst1)\n        val lst40 = lst39.filter(_\
    \ < lst3)\n        val lst41 = lst40.filter(_ < lst2)\n        val lst42 = lst41.filter(_\
    \ < lst1)\n        val lst43 = lst42.filter(_", "        val lst3 = lst1 ++ lst2\n\
    \        val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)"]
stop_tokens:
- "\n    }\n"
