name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        val list = s.split(\" \")\n        val list = list.map(_.toUpperCase)\n\
    \        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        ", "       \
    \ val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase).toList\n\
    \        words.filter(_.contains(\"a\"))", "        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.", "        val words = s.split(\" \")\n        val wordList\
    \ = mutable.ListBuffer[String]()\n        words.foreach(word => {\n          \
    \  val letters = word.split(\"\")\n            letters.foreach(letter => {\n \
    \               if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\") {\n                    wordList += word\n     \
    \           }\n            })\n        })\n        wordList.takeWhile(word =>\
    \ word.length == n).reverse", "        val list = s.split(\" \").toList\n    \
    \    val list2 = list.filter(_ => _.length == n).sortBy(_.toLowerCase)\n     \
    \   list2.map(x => x.split(\"\").filter(_.toString.toChar == \"c\").mkString(\"\
    \")).filter(x => x.nonEmpty)", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val consonants = List(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        for (i <- 0\
    \ until list.size) {\n            val word = list(i)\n            if (word.length\
    \ == n) {\n                for (j <- 0 until word.length) {\n                \
    \    if (consonants.contains(word.charAt(j))) {\n                        result.add(word)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }", "        val words = mutable.ListBuffer.empty[String]\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCountInWord = vowelsCount / s.length\n        val consonantsCountInWord\
    \ = consonantsCount / s.length\n        val vowelsCountInWordInWord = vowelsCountInWord\
    \ * consonantsCountInWord\n        val vowelsCountInWordInWordInWord = vowelsCountInWordInWord\
    \ * vowelsCountInWord\n        val vowelsCountInWordInWordInWordInWord = vowelsCountInWordInWordInWord\
    \ * consonantsCountInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWord * vowelsCountInWordInWord\n        val\
    \ vowelsCountInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n  \
    \      val ", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        if\
    \ (words.length == 0) Nil\n        else words", "        val list = s.split(\"\
    \ \").toList\n        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(x => x.toString.toList.size == n).toList\n        if (result.isEmpty)\
    \ List()\n        else result", "        val list = s.split(\" \").toList\n  \
    \      val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 = list.filter(x\
    \ => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"i\"\
    ))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"n\"))\n\
    \        val list9 = list.filter(x => x.contains(\"d\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"h\"))\n        val list11 = list.filter(x => x.contains(\"\
    w\"))\n        val list12 = list.filter(x => x.contains(\"s\"))\n        val list13\
    \ = list.filter(x => x.contains(\"p\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"r\"))\n        val list15 = list.filter(x => x.contains(\"f\"))\n\
    \        val list16 = list.filter(x => x.contains(\"g\"))\n        val list17\
    \ = list.filter(x => x.contains(\"t\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"c\"))\n        val list19 = list.filter(x => x.contains(\"k\"))\n\
    \        val list20 = list.filter(x => x.contains(\"m\"))\n        val list21\
    \ = list.filter(x => x.contains(\"y\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"b\"))\n        val list23 = list.filter(x => x.contains(\"j\"))\n\
    \        val list24 = list.filter(x => x.contains(\"q\"))\n        val list25\
    \ = list.filter(x => x.contains(\"x\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"z\"))\n        val list27 = list.filter(x => x.contains(\"v\"))\n\
    \        val list28 = list.filter(x => x.contains(\"w\"))\n        val list29\
    \ = list.filter(x => x.contains(\"z\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list31 = list.filter(x => x.contains(\"x\"))\n\
    \        val list32 = list.filter(x => x.contains(\"z\"))\n        val list33\
    \ = list.filter(x => x.contains(\"v\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"w\"))\n        val list35 = list.filter(x => x.contains(\"z\"))\n\
    \        val list36 = ", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val wordList = word.split(\"\")\n            val count = wordList.count(_\
    \ == 'a')\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList", "        val list\
    \ = s.split(\" \").map(_.toUpperCase).toList\n        val list2 = list.filterNot(_.isEmpty)\n\
    \        val list3 = list2.filterNot(_.isEmpty)\n        val list4 = list3.filterNot(_.isEmpty)\n\
    \        val list5 = list4.filterNot(_.isEmpty)\n        val list6 = list5.filterNot(_.isEmpty)\n\
    \        val list7 = list6.filterNot(_.isEmpty)\n        val list8 = list7.filterNot(_.isEmpty)\n\
    \        val list9 = list8.filterNot(_.isEmpty)\n        val list10 = list9.filterNot(_.isEmpty)\n\
    \        val list11 = list10.filterNot(_.isEmpty)\n        val list12 = list11.filterNot(_.isEmpty)\n\
    \        val list13 = list12.filterNot(_.isEmpty)\n        val list14 = list13.filterNot(_.isEmpty)\n\
    \        val list15 = list14.filterNot(_.isEmpty)\n        val list16 = list15.filterNot(_.isEmpty)\n\
    \        val list17 = list16.filterNot(_.isEmpty)\n        val list18 = list17.filterNot(_.isEmpty)\n\
    \        val list19 = list18.filterNot(_.isEmpty)\n        val list20 = list19.filterNot(_.isEmpty)\n\
    \        val list21 = list20.filterNot(_.isEmpty)\n        val list22 = list21.filterNot(_.isEmpty)\n\
    \        val list23 = list22.filterNot(_.isEmpty)\n        val list24 = list23.filterNot(_.isEmpty)\n\
    \        val list25 = list24.filterNot(_.isEmpty)\n        val list26 = list25.filterNot(_.isEmpty)\n\
    \        val list27 = list26.filterNot(_.isEmpty)\n        val list28 = list27.filterNot(_.isEmpty)\n\
    \        val list29 = list28.filterNot(_.isEmpty)\n        val list30 = list29.filterNot(_.isEmpty)\n\
    \        val list31 = list30.filterNot(_.isEmpty)\n        val list32 = list31.filterNot(_.isEmpty)\n\
    \        val list33 = list32.filterNot(_.isEmpty)\n        val list34 = list33.filterNot(_.isEmpty)\n\
    \        val list35 = list34.filterNot(_.isEmpty)\n        val list36 = list35.filterNot(_.isEmpty)\n\
    \        val list37 = list36.filterNot(_.isEmpty)\n        val list38 = list",
  "        val list = s.split(\" \").toList\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = ", "        val words = s.split(\"\
    \ \").map(_.toUpperCase).toList\n        val wordSet = words.toSet\n        val\
    \ consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantSet = consonants.toSet\n\
    \        val consonantList = consonants.toList\n        val consonantSetList =\
    \ consonantSet.toList\n        val consonantSetSet = consonantSet.toSet\n    \
    \    val consonantSetSetList = consonantSetSet.toList\n        val consonantSetSetSet\
    \ = consonantSetSet.toSet\n        val consonantSetSetSetList = consonantSetSetSet.toList\n\
    \        val consonantSetSetSetSet = consonantSetSetSet.toSet\n        val consonantSetSetSetSetList\
    \ = consonantSetSetSetSet.toList\n        val consonantSetSetSetSetSet = consonantSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetList = consonantSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSet = consonantSetSetSetSetSet.toSet\n  \
    \      val consonantSetSetSetSetSetSetList = consonantSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSet = consonantSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSet = consonantSetSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSetSet = consonantSetSetSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSetSetSet = consonantSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet", "        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val list = words.toList.filter(_ => _.length == n)\n        list.sortBy(_.length).reverse.map(_.toLowerCase).filter(_.contains(\"\
    CONSONANTS\"))", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) result\
    \ += (word + \" \")\n        }\n        if (result.isEmpty) List()\n        else\
    \ result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        list.foreach { word =>\n            val\
    \ count = word.count(_ == 'a')\n            if (count == n) {\n              \
    \  result += (word + \" \")\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase)\n\
    \        words.toList", "        val list = s.split(\" \").toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (word <- list) {\n            val count = count.get(word)\n\
    \            if (count == null) {\n                count.update(word, 1l)\n  \
    \          } else {\n                count.update(word, count + 1l)\n        \
    \    }\n        }\n        for (word <- count.keys) {\n            if (count.getOrElse(word,\
    \ 0l) == n) {\n                result += List(word)\n            }\n        }\n\
    \        result.toList", '        val wordsWithNConsonants = s.split(" ").filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).']
stop_tokens:
- "\n    }\n"
