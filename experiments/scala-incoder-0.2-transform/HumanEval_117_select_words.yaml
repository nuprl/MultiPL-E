name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        val list = s.split(\" \")\n        val list = list.map(_.toUpperCase)\n\
    \        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        val list = list.filter(_.contains(\"\
    a\"))\n        val list = list.filter(_.contains(\"e\"))\n        val list = list.filter(_.contains(\"\
    i\"))\n        val list = list.filter(_.contains(\"o\"))\n        val list = list.filter(_.contains(\"\
    u\"))\n        val list = list.filter(_.contains(\"A\"))\n        val list = list.filter(_.contains(\"\
    E\"))\n        val list = list.filter(_.contains(\"I\"))\n        val list = list.filter(_.contains(\"\
    O\"))\n        val list = list.filter(_.contains(\"U\"))\n        ", "       \
    \ val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase).toList\n\
    \        words.filter(_.contains(\"a\"))", "        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length ==\
    \ n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.length == n).flatMap(_.split(\"\")).filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(_ => _.", "        val words = s.split(\" \")\n        val wordList\
    \ = mutable.ListBuffer[String]()\n        words.foreach(word => {\n          \
    \  val letters = word.split(\"\")\n            letters.foreach(letter => {\n \
    \               if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\") {\n                    wordList += word\n     \
    \           }\n            })\n        })\n        wordList.takeWhile(word =>\
    \ word.length == n).reverse", "        val list = s.split(\" \").toList\n    \
    \    val list2 = list.filter(_ => _.length == n).sortBy(_.toLowerCase)\n     \
    \   list2.map(x => x.split(\"\").filter(_.toString.toChar == \"c\").mkString(\"\
    \")).filter(x => x.nonEmpty)", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val consonants = List(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        for (i <- 0\
    \ until list.size) {\n            val word = list(i)\n            if (word.length\
    \ == n) {\n                for (j <- 0 until word.length) {\n                \
    \    if (consonants.contains(word.charAt(j))) {\n                        result.add(word)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }", "        val words = mutable.ListBuffer.empty[String]\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCountInWord = vowelsCount / s.length\n        val consonantsCountInWord\
    \ = consonantsCount / s.length\n        val vowelsCountInWordInWord = vowelsCountInWord\
    \ * consonantsCountInWord\n        val vowelsCountInWordInWordInWord = vowelsCountInWordInWord\
    \ * vowelsCountInWord\n        val vowelsCountInWordInWordInWordInWord = vowelsCountInWordInWordInWord\
    \ * consonantsCountInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWord * vowelsCountInWordInWord\n        val\
    \ vowelsCountInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWord\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n  \
    \      val ", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        if\
    \ (words.length == 0) Nil\n        else words", "        val list = s.split(\"\
    \ \").toList\n        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\
    \")).filter(x => x.toString.toList.size == n).toList\n        if (result.isEmpty)\
    \ List()\n        else result", "        val list = s.split(\" \").toList\n  \
    \      val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 = list.filter(x\
    \ => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"i\"\
    ))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"n\"))\n\
    \        val list9 = list.filter(x => x.contains(\"d\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"h\"))\n        val list11 = list.filter(x => x.contains(\"\
    w\"))\n        val list12 = list.filter(x => x.contains(\"s\"))\n        val list13\
    \ = list.filter(x => x.contains(\"p\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"r\"))\n        val list15 = list.filter(x => x.contains(\"f\"))\n\
    \        val list16 = list.filter(x => x.contains(\"g\"))\n        val list17\
    \ = list.filter(x => x.contains(\"t\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"c\"))\n        val list19 = list.filter(x => x.contains(\"k\"))\n\
    \        val list20 = list.filter(x => x.contains(\"m\"))\n        val list21\
    \ = list.filter(x => x.contains(\"y\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"b\"))\n        val list23 = list.filter(x => x.contains(\"j\"))\n\
    \        val list24 = list.filter(x => x.contains(\"q\"))\n        val list25\
    \ = list.filter(x => x.contains(\"x\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"z\"))\n        val list27 = list.filter(x => x.contains(\"v\"))\n\
    \        val list28 = list.filter(x => x.contains(\"w\"))\n        val list29\
    \ = list.filter(x => x.contains(\"z\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list31 = list.filter(x => x.contains(\"x\"))\n\
    \        val list32 = list.filter(x => x.contains(\"z\"))\n        val list33\
    \ = list.filter(x => x.contains(\"v\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"w\"))\n        val list35 = list.filter(x => x.contains(\"z\"))\n\
    \        val list36 = ", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val wordList = word.split(\"\")\n            val count = wordList.count(_\
    \ == 'a')\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList", "        val list\
    \ = s.split(\" \").map(_.toUpperCase).toList\n        val list2 = list.filterNot(_.isEmpty)\n\
    \        val list3 = list2.filterNot(_.isEmpty)\n        val list4 = list3.filterNot(_.isEmpty)\n\
    \        val list5 = list4.filterNot(_.isEmpty)\n        val list6 = list5.filterNot(_.isEmpty)\n\
    \        val list7 = list6.filterNot(_.isEmpty)\n        val list8 = list7.filterNot(_.isEmpty)\n\
    \        val list9 = list8.filterNot(_.isEmpty)\n        val list10 = list9.filterNot(_.isEmpty)\n\
    \        val list11 = list10.filterNot(_.isEmpty)\n        val list12 = list11.filterNot(_.isEmpty)\n\
    \        val list13 = list12.filterNot(_.isEmpty)\n        val list14 = list13.filterNot(_.isEmpty)\n\
    \        val list15 = list14.filterNot(_.isEmpty)\n        val list16 = list15.filterNot(_.isEmpty)\n\
    \        val list17 = list16.filterNot(_.isEmpty)\n        val list18 = list17.filterNot(_.isEmpty)\n\
    \        val list19 = list18.filterNot(_.isEmpty)\n        val list20 = list19.filterNot(_.isEmpty)\n\
    \        val list21 = list20.filterNot(_.isEmpty)\n        val list22 = list21.filterNot(_.isEmpty)\n\
    \        val list23 = list22.filterNot(_.isEmpty)\n        val list24 = list23.filterNot(_.isEmpty)\n\
    \        val list25 = list24.filterNot(_.isEmpty)\n        val list26 = list25.filterNot(_.isEmpty)\n\
    \        val list27 = list26.filterNot(_.isEmpty)\n        val list28 = list27.filterNot(_.isEmpty)\n\
    \        val list29 = list28.filterNot(_.isEmpty)\n        val list30 = list29.filterNot(_.isEmpty)\n\
    \        val list31 = list30.filterNot(_.isEmpty)\n        val list32 = list31.filterNot(_.isEmpty)\n\
    \        val list33 = list32.filterNot(_.isEmpty)\n        val list34 = list33.filterNot(_.isEmpty)\n\
    \        val list35 = list34.filterNot(_.isEmpty)\n        val list36 = list35.filterNot(_.isEmpty)\n\
    \        val list37 = list36.filterNot(_.isEmpty)\n        val list38 = list",
  "        val list = s.split(\" \").toList\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = ", "        val words = s.split(\"\
    \ \").map(_.toUpperCase).toList\n        val wordSet = words.toSet\n        val\
    \ consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantSet = consonants.toSet\n\
    \        val consonantList = consonants.toList\n        val consonantSetList =\
    \ consonantSet.toList\n        val consonantSetSet = consonantSet.toSet\n    \
    \    val consonantSetSetList = consonantSetSet.toList\n        val consonantSetSetSet\
    \ = consonantSetSet.toSet\n        val consonantSetSetSetList = consonantSetSetSet.toList\n\
    \        val consonantSetSetSetSet = consonantSetSetSet.toSet\n        val consonantSetSetSetSetList\
    \ = consonantSetSetSetSet.toList\n        val consonantSetSetSetSetSet = consonantSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetList = consonantSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSet = consonantSetSetSetSetSet.toSet\n  \
    \      val consonantSetSetSetSetSetSetList = consonantSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSet = consonantSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSet = consonantSetSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSetSet = consonantSetSetSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSetSetSetSetSet = consonantSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val consonantSetSetSetSetSetSetSetSetSetList = consonantSetSetSetSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet", "        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val list = words.toList.filter(_ => _.length == n)\n        list.sortBy(_.length).reverse.map(_.toLowerCase).filter(_.contains(\"\
    CONSONANTS\"))", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) result\
    \ += (word + \" \")\n        }\n        if (result.isEmpty) List()\n        else\
    \ result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        list.foreach { word =>\n            val\
    \ count = word.count(_ == 'a')\n            if (count == n) {\n              \
    \  result += (word + \" \")\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase)\n\
    \        words.toList", "        val list = s.split(\" \").toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (word <- list) {\n            val count = count.get(word)\n\
    \            if (count == null) {\n                count.update(word, 1l)\n  \
    \          } else {\n                count.update(word, count + 1l)\n        \
    \    }\n        }\n        for (word <- count.keys) {\n            if (count.getOrElse(word,\
    \ 0l) == n) {\n                result += List(word)\n            }\n        }\n\
    \        result.toList", '        val wordsWithNConsonants = s.split(" ").filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).filter(_.length == n).map(_.toLowerCase).filter(_.length
    == n).map(_.split("").filter(_.isLetter).mkString("")).', "        val words =\
    \ s.split(\" \")\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        for (word <- words) {\n            val wordLength = word.length\n  \
    \          val consonantCount = word.count(consonants)\n            if (wordLength\
    \ == n) {\n                if (consonantCount == n) {\n                    result\
    \ += word\n                }\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val list = s.split(\" \").filter(_.isLetter).toList\n        val\
    \ result = list.filter(x => x.count(_ == 'a') <= n).distinct\n        result.map(x\
    \ => x.split(\"\").filter(_.isLetter).mkString(\" \"))", "        val list = s.split(\"\
    \ \")\n        val result: List[String] = new ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word :: \"\")\n        })\n        if (result.isEmpty) List()\n\
    \        else result.toList", "        val list = s.split(\" \").toList\n    \
    \    val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) result += (word + \" \")\n        }\n        return result.toList",
  "        val list = s.split(\" \").toList\n        val list2 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list3 = list.filter(x => x.contains(\"e\"))\n\
    \        val list4 = list.filter(x => x.contains(\"i\"))\n        val list5 =\
    \ list.filter(x => x.contains(\"o\"))\n        val list6 = list.filter(x => x.contains(\"\
    u\"))\n        val list7 = list.filter(x => x.contains(\"y\"))\n        val list8\
    \ = list.filter(x => x.contains(\"h\"))\n        val list9 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list10 = list.filter(x => x.contains(\"l\"))\n\
    \        val list11 = list.filter(x => x.contains(\"a\"))\n        val list12\
    \ = list.filter(x => x.contains(\"e\"))\n        val list13 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list14 = list.filter(x => x.contains(\"o\"))\n\
    \        val list15 = list.filter(x => x.contains(\"u\"))\n        val list16\
    \ = list.filter(x => x.contains(\"y\"))\n        val list17 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list18 = list.filter(x => x.contains(\"l\"))\n\
    \        val list19 = list.filter(x => x.contains(\"l\"))\n        val list20\
    \ = list.filter(x => x.contains(\"a\"))\n        val list21 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list22 = list.filter(x => x.contains(\"i\"))\n\
    \        val list23 = list.filter(x => x.contains(\"o\"))\n        val list24\
    \ = list.filter(x => x.contains(\"u\"))\n        val list25 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list26 = list.filter(x => x.contains(\"h\"))\n\
    \        val list27 = list.filter(x => x.contains(\"l\"))\n        val list28\
    \ = list.filter(x => x.contains(\"l\"))\n        val list29 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list30 = list.filter(x => x.contains(\"e\"))\n\
    \        val list31 = list.filter(x => x.contains(\"i\"))\n        val list32\
    \ = list.filter(x => x.contains(\"o\"))\n        val list33 = list.filter(x =>\
    \ x.contains(\"u\"))\n        val list34 = list.filter(x => x.contains(\"y\"))\n\
    \        val list35 = list.filter(x => x.contains(\"h\"))\n        val list36\
    \ = ", "        val list = s.split(\" \")\n        val list2 = list.filter( x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\") )\n        val list3 = list2.filter( x => x.contains(\"\
    b\") || x.contains(\"c\") || x.contains(\"d\") || x.contains(\"f\") || x.contains(\"\
    g\") || x.contains(\"h\") || x.contains(\"j\") || x.contains(\"k\") || x.contains(\"\
    l\") || x.contains(\"m\") || x.contains(\"n\") || x.contains(\"p\") || x.contains(\"\
    q\") || x.contains(\"r\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    v\") || x.contains(\"w\") || x.contains(\"x\") || x.contains(\"y\") || x.contains(\"\
    z\") )\n        val list4 = list3.filter( x => x.contains(\"0\") || x.contains(\"\
    1\") || x.contains(\"2\") || x.contains(\"3\") || x.contains(\"4\") || x.contains(\"\
    5\") || x.contains(\"6\") || x.contains(\"7\") || x.contains(\"8\") || x.contains(\"\
    9\") )\n        val list5 = list4.filter( x => x.contains(\"A\") || x.contains(\"\
    B\") || x.contains(\"C\") || x.contains(\"D\") || x.contains(\"E\") || x.contains(\"\
    F\") || x.contains(\"G\") || x.contains(\"H\") || x.contains(\"I\") || x.contains(\"\
    J\") || x.contains(\"K\") || x.contains(\"L\") || x.contains(\"M\") || x.contains(\"\
    N\") || x.contains(\"P\") || x.contains(\"Q\") || x.contains(\"R\") || x.contains(\"\
    S\") || x.contains(\"T\") || x.contains(\"V\") || x.contains(\"W\") || x.contains(\"\
    X\") || x.contains(\"Y\") || x.contains(\"Z\") )\n        val list6 = list5.filter(\
    \ x => x.contains(\"0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"\
    3\") || x.contains(\"4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"\
    7\") || x.contains(\"8\") || x.contains(\"9\") )\n        val list7 = list6.filter(\
    \ x => x.contains(\"A\") || x.contains(\"B\") || x.contains(\"C\") || x.contains(\"\
    D\") || ", "        val words = s.split(\" \")\n        val list = new mutable.ListBuffer[String]()\n\
    \        for(word <- words){\n            val count = word.count(_ == 'a')\n \
    \           if(count == n){\n                list += word\n            }\n   \
    \     }\n        list.filter(_ != \"\").sort", "        val list = s.split(\"\
    \ \")\n        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3\
    \ = list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n\
    \        val list6 = list.filter(x => x.contains(\"u\"))\n        val list7 =\
    \ list.filter(x => x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"\
    h\"))\n        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10\
    \ = list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n\
    \        val list13 = list.filter(x => x.contains(\"i\"))\n        val list14\
    \ = list.filter(x => x.contains(\"o\"))\n        val list15 = list.filter(x =>\
    \ x.contains(\"u\"))\n        val list16 = list.filter(x => x.contains(\"y\"))\n\
    \        val list17 = list.filter(x => x.contains(\"h\"))\n        val list18\
    \ = list.filter(x => x.contains(\"l\"))\n        val list19 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list20 = list.filter(x => x.contains(\"a\"))\n\
    \        val list21 = list.filter(x => x.contains(\"e\"))\n        val list22\
    \ = list.filter(x => x.contains(\"i\"))\n        val list23 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list24 = list.filter(x => x.contains(\"u\"))\n\
    \        val list25 = list.filter(x => x.contains(\"y\"))\n        val list26\
    \ = list.filter(x => x.contains(\"h\"))\n        val list27 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list28 = list.filter(x => x.contains(\"l\"))\n\
    \        val list29 = list.filter(x => x.contains(\"a\"))\n        val list30\
    \ = list.filter(x => x.contains(\"e\"))\n        val list31 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list32 = list.filter(x => x.contains(\"o\"))\n\
    \        val list33 = list.filter(x => x.contains(\"u\"))\n        val list34\
    \ = list.filter(x => x.contains(\"y\"))\n        val list35 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list36 = list.filter(", "        val words =\
    \ s.split(\" \")\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if(count == n) {\n                result ::= word\n            }\n\
    \        }\n        if(result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }", "        val wordList = s.split(\" \"\
    )\n        val wordList2 = wordList.filter(x => x.contains(\"a\"))\n        val\
    \ wordList3 = wordList2.filter(x => x.contains(\"e\"))\n        val wordList4\
    \ = wordList3.filter(x => x.contains(\"i\"))\n        val wordList5 = wordList4.filter(x\
    \ => x.contains(\"o\"))\n        val wordList6 = wordList5.filter(x => x.contains(\"\
    u\"))\n        val wordList7 = wordList6.filter(x => x.contains(\"l\"))\n    \
    \    val wordList8 = wordList7.filter(x => x.contains(\"n\"))\n        val wordList9\
    \ = wordList8.filter(x => x.contains(\"d\"))\n        val wordList10 = wordList9.filter(x\
    \ => x.contains(\"g\"))\n        val wordList11 = wordList10.filter(x => x.contains(\"\
    e\"))\n        val wordList12 = wordList11.filter(x => x.contains(\"s\"))\n  \
    \      val wordList13 = wordList12.filter(x => x.contains(\"t\"))\n        val\
    \ wordList14 = wordList13.filter(x => x.contains(\"a\"))\n        val wordList15\
    \ = wordList14.filter(x => x.contains(\"m\"))\n        val wordList16 = wordList15.filter(x\
    \ => x.contains(\"p\"))\n        val wordList17 = wordList16.filter(x => x.contains(\"\
    h\"))\n        val wordList18 = wordList17.filter(x => x.contains(\"r\"))\n  \
    \      val wordList19 = wordList18.filter(x => x.contains(\"y\"))\n        val\
    \ wordList20 = wordList19.filter(x => x.contains(\"k\"))\n        val wordList21\
    \ = wordList20.filter(x => x.contains(\"b\"))\n        val wordList22 = wordList21.filter(x\
    \ => x.contains(\"p\"))\n        val wordList23 = wordList22.filter(x => x.contains(\"\
    s\"))\n        val wordList24 = wordList23.filter(x => x.contains(\"e\"))\n  \
    \      val wordList25 = wordList24.filter(x => x.contains(\"c\"))\n        val\
    \ wordList26 = wordList25.filter(x => x.contains(\"h\"))\n        val wordList27\
    \ = wordList26.filter(x => x.contains(\"r\"))\n        val wordList28 = wordList27.filter(x\
    \ => x.contains(\"y\"))\n        val wordList29 = wordList28.filter(x => x.contains(\"\
    k\"))\n        val wordList30 = wordList29.filter(x => x.", "        val list\
    \ = s.split(\" \").toList\n        val result = list.filter(_ => _.length == n).map(_.split(\"\
    \")).filter(x => x.forall(_.isLetter)).toList\n        result.filter(x => x.size\
    \ == n).map(x => x.mkString(\"\")).filter(x => x.forall(_.isLetter)).toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val words = x.split(\"[^aeiou]\").length\n\
    \            if (words == n) result += (x :: \"\")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val list = s.split(\" \").map(_.toUpperCase)\n\
    \        val result = list.filter(_ contains n).sortBy(_.length)\n        result.takeWhile(_\
    \ contains n).reverse", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     if (word.count(_ == 'a') >= n) result += word\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).toList\n        val list3\
    \ = list2.filter(_ => _.contains(\"a\")).toList\n        val list4 = list3.filter(_\
    \ => _.contains(\"e\")).toList\n        val list5 = list4.filter(_ => _.contains(\"\
    i\")).toList\n        val list6 = list5.filter(_ => _.contains(\"o\")).toList\n\
    \        val list7 = list6.filter(_ => _.contains(\"u\")).toList\n        list7",
  "        val result = new mutable.ListBuffer[String]()\n        val consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val consonantCount\
    \ = s.count(c => consonants.contains(c))\n        val vowelCount = s.count(c =>\
    \ vowels.contains(c))\n        val consonantCountInWord = consonantCount / n\n\
    \        val vowelCountInWord = vowelCount / n\n        val consonantCountInWordInWord\
    \ = consonantCountInWord * n\n        val vowelCountInWordInWord = vowelCountInWord\
    \ * n\n        val consonantCountInWordInWordInWord = consonantCountInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWord = vowelCountInWordInWord * n\n\
    \        val consonantCountInWordInWordInWordInWord = consonantCountInWordInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWordInWord = vowelCountInWordInWordInWord\
    \ * n\n        val consonantCountInWordInWordInWordInWordInWord = consonantCountInWordInWordInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWordInWordInWord = vowelCountInWordInWordInWordInWord\
    \ * n\n        val consonantCountInWordInWordInWordInWordInWordInWord = consonantCountInWordInWordInWordInWordInWord\
    \ * n\n        val vowelCountInWordInWordInWordInWordInWordInWord = vowelCountInWordInWordInWordInWordInWord\
    \ * n\n        val consonantCountInWordInWordInWordInWordInWordInWordInWord =\
    \ consonantCountInWordInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWordInWordInWord * n\n     \
    \   val vowelCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = vowelCountInWordInWord",
  "        val words = s.split(\" \")\n        val list = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val letters = word.split(\"\")\n  \
    \          for(letter <- letters) {\n                if(letter.length == n) {\n\
    \                    list += word\n                }\n            }\n        }\n\
    \        list.filter(_ != \"\")", "        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val wordSet = words.toSet\n        val consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\"\
    )\n        val consonantSet = consonants.toSet\n        val consonantCount = consonantSet.count\n\
    \        val consonantCountSet = consonantCount.toSet\n        val consonantCountSetSize\
    \ = consonantCountSet.size\n        val consonantCountSetSize2 = consonantCountSetSize\
    \ * consonantCountSetSize\n        val consonantCountSetSize3 = consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize\n        val consonantCountSetSize4\
    \ = consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\n\
    \        val consonantCountSetSize5 = consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\n\
    \        val consonantCountSetSize6 = consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize\n        val consonantCountSetSize7\
    \ = consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize\n        val consonantCountSetSize8\
    \ = consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCountSetSize\n  \
    \      val consonantCountSetSize9 = consonantCountSetSize * consonantCountSetSize\
    \ * consonantCountSetSize * consonantCountSetSize * consonantCount", "       \
    \ val words = s.split(\" \").toList\n        val list = words.filter(_ => _.length\
    \ == n).map(_.toLowerCase).toList\n        list.filter(x => x.contains(\"a\")\
    \ || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"\
    u\"))", "        val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if(count == n) {\n                result += (word + \" \")\n    \
    \        }\n        }\n        if(result.isEmpty) {\n            List()\n    \
    \    } else {\n            result.mkString(\" \")\n        }", "        val list\
    \ = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        })\n        result.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"l\"))\n\
    \        val list9 = list.filter(x => x.contains(\"a\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list11 = list.filter(x => x.contains(\"\
    i\"))\n        val list12 = list.filter(x => x.contains(\"o\"))\n        val list13\
    \ = list.filter(x => x.contains(\"u\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list15 = list.filter(x => x.contains(\"l\"))\n\
    \        val list16 = list.filter(x => x.contains(\"a\"))\n        val list17\
    \ = list.filter(x => x.contains(\"e\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list19 = list.filter(x => x.contains(\"o\"))\n\
    \        val list20 = list.filter(x => x.contains(\"u\"))\n        val list21\
    \ = list.filter(x => x.contains(\"l\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list23 = list.filter(x => x.contains(\"a\"))\n\
    \        val list24 = list.filter(x => x.contains(\"e\"))\n        val list25\
    \ = list.filter(x => x.contains(\"i\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list27 = list.filter(x => x.contains(\"u\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"l\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list31 = list.filter(x => x.contains(\"e\"))\n\
    \        val list32 = list.filter(x => x.contains(\"i\"))\n        val list33\
    \ = list.filter(x => x.contains(\"o\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"u\"))\n        val list35 = list.filter(x => x.contains(\"l\"))\n\
    \        val list36 = ", "        val list = s.split(\" \").toList\n        val\
    \ list2 = list.filter(_ => _.length == n)\n        val list3 = list2.filter(_\
    \ => _.contains(\"a\"))\n        val list4 = list3.filter(_ => _.contains(\"e\"\
    ))\n        val list5 = list4.filter(_ => _.contains(\"i\"))\n        val list6\
    \ = list5.filter(_ => _.contains(\"o\"))\n        val list7 = list6.filter(_ =>\
    \ _.contains(\"u\"))\n        list7", "        val list = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val result = list.filterNot(_.isEmpty).filterNot(_.contains(\"a\")).filterNot(_.contains(\"\
    e\")).filterNot(_.contains(\"i\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"\
    u\")).filterNot(_.contains(\"y\")).filterNot(_.contains(\"h\")).filterNot(_.contains(\"\
    l\")).filterNot(_.contains(\"s\")).filterNot(_.contains(\"d\")).filterNot(_.contains(\"\
    c\")).filterNot(_.contains(\"m\")).filterNot(_.contains(\"p\")).filterNot(_.contains(\"\
    f\")).filterNot(_.contains(\"g\")).filterNot(_.contains(\"b\")).filterNot(_.contains(\"\
    n\")).filterNot(_.contains(\"k\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"\
    x\")).filterNot(_.contains(\"z\")).filterNot(_.contains(\"t\")).filterNot(_.contains(\"\
    r\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"s\")).filterNot(_.contains(\"\
    w\")).filterNot(_.contains(\"v\")).filterNot(_.contains(\"z\")).filterNot(_.contains(\"\
    y\")).filterNot(_.contains(\"a\")).filterNot(_.contains(\"e\")).filterNot(_.contains(\"\
    i\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"u\")).filterNot(_.contains(\"\
    y\")).filterNot(_.contains(\"h\")).filterNot(_.contains(\"l\")).filterNot(_.contains(\"\
    s\")).filterNot(_.contains(\"d\")).filterNot(_.contains(\"c\")).filterNot(_.contains(\"\
    m\")).filterNot(_.contains(\"p\")).filterNot(_.contains(\"f\")).filterNot(_.contains(\"\
    g\")).filterNot(_.contains(\"b\")).filterNot(_.contains(\"n\")).filterNot(_.contains(\"\
    k\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"x\")).filterNot(_.contains(\"\
    z\")).filterNot(_.contains(\"t\")).filterNot(_.contains(\"r\")).filterNot(_.contains(\"\
    q\")).filterNot(_.contains(\"s\")).filterNot(", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) result += word\n        }\n        return result.toList", " \
    \       val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList", "        val list = s.split(\" \"\
    )\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelCountInString = vowelCount / n\n        val consonantCountInString\
    \ = consonantCount / n\n        val consonantCountInString2 = consonantCountInString\
    \ * 2\n        val consonantCountInString3 = consonantCountInString2 * 2\n   \
    \     val consonantCountInString4 = consonantCountInString3 * 2\n        val consonantCountInString5\
    \ = consonantCountInString4 * 2\n        val consonantCountInString6 = consonantCountInString5\
    \ * 2\n        val consonantCountInString7 = consonantCountInString6 * 2\n   \
    \     val consonantCountInString8 = consonantCountInString7 * 2\n        val consonantCountInString9\
    \ = consonantCountInString8 * 2\n        val consonantCountInString10 = consonantCountInString9\
    \ * 2\n        val consonantCountInString11 = consonantCountInString10 * 2\n \
    \       val consonantCountInString12 = consonantCountInString11 * 2\n        val\
    \ consonantCountInString13 = consonantCountInString12 * 2\n        val consonantCountInString14\
    \ = consonantCountInString13 * 2\n        val consonantCountInString15 = consonantCountInString14\
    \ * 2\n        val consonantCountInString16 = consonantCountInString15 * 2\n \
    \       val consonantCountInString17 = consonantCountInString16 * 2\n        val\
    \ consonantCountInString18 = consonantCountInString17 * 2\n        val consonantCountInString19\
    \ = consonantCountInString18 * 2\n        val consonantCountInString20 = consonantCountInString19\
    \ * 2\n        val consonantCountInString21 = consonantCountInString20 * 2\n \
    \       val consonantCountInString22 = consonantCountInString21 * 2\n        val\
    \ consonantCountInString23 = consonantCountInString22 * 2\n        val conson",
  "        val wordList = s.split(\" \").toList\n        val consonantList = List(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ consonantSet = consonantList.map(c => c -> true)\n        val consonantSetMap\
    \ = consonantSet.mapValues(_ == true)\n        val consonantSetMapList = consonantSetMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMap = consonantSetMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapList = consonantSetMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMap = consonantSetMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapList = consonantSetMapListMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMap = consonantSetMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapList = consonantSetMapListMapListMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMapListMap = consonantSetMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapListMapList = consonantSetMapListMapListMapListMapListMap.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMap = consonantSetMapListMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMapList = consonantSetMapListMapListMapListMapListMapListMapList.mapValues(_.toList)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMapListMap = consonantSetMapListMapListMapListMapListMapListMapListMap.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMapListMapListMapListMapListMapListMap\
    \ = consonantSetMapListMapListMapListMapListMapListMapListMapList.mapValues(_.toMap)\n\
    \        val consonantSetMapListMapListMap", "        val list = s.split(\" \"\
    ).toList\n        val list2 = list.filter(x => x.toString.length == n)\n     \
    \   list2.map(x => x.split(\" \").toList)", "        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val consonants = List(\"B\", \"C\", \"D\", \"F\"\
    , \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\",\
    \ \"E\", \"I\", \"O\", \"U\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWords = words.filter(word => consonants.contains(word.toUpperCase)\
    \ && consonantCount <= n)\n        val vowelWords = words.filter(word => vowels.contains(word.toUpperCase)\
    \ && vowelCount <= n)\n        consonantWords ++ vowelWords", "        val list\
    \ = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n  \
    \      for(i <- 0 until list.size) {\n            val word = list(i)\n       \
    \     val count = word.count(c => c.isLetter)\n            if(count == n) {\n\
    \                result += word\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.mkString(\" \")\n        }", "        val\
    \ list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(\"a\")\n \
    \           if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val wordsWithNConsonants = \n\
    \            s.split(\" \").filter(_.length == n).map(_.split(\"\").filter(_ =>\
    \ !_ == \"c\").mkString(\"\"))\n        val wordsWithNConsonantsSortedByLength\
    \ = wordsWithNConsonants.sortWith(_.length < _.length)\n        wordsWithNConsonantsSortedByLength.takeWhile(_.length\
    \ == n).map(_.mkString(\" \"))", "        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty)\n        val counts = words.map(word => word.split(\"\
    \").map(_.toInt).sum)\n        val maxCount = counts.max\n        val result:\
    \ List[String] = words.filter(word => counts(word) == maxCount).sortBy(word =>\
    \ counts(word))\n        result match {\n            case Nil => List()\n    \
    \        case head :: tail => head\n        }", "        val list = s.split(\"\
    \ \").toList\n        val list2 = list.filter(_ => _.length == n).map(_.toLowerCase)\n\
    \        list2.toList", "        val wordList = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val consonants = List(\n            \"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"\n        )\n        val vowels = List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val consonantCount = wordList.filter(_.contains(consonants).length\
    \ == n).map(_.split(\" \").map(_.toLowerCase))\n        val vowelCount = wordList.filter(_.contains(vowels).length\
    \ == n).map(_.split(\" \").map(_.toLowerCase))\n        val consonantWords = consonantCount.flatMap(_.filter(_.contains(\"\
    consonant\"))).distinct\n        val vowelWords = vowelCount.flatMap(_.filter(_.contains(\"\
    vowel\"))).distinct\n        val consonantWordsSet = consonantWords.toSet\n  \
    \      val vowelWordsSet = vowelWords.toSet\n        val wordList = wordList.filter(_.contains(consonantWordsSet)\
    \ || _.contains(vowelWordsSet))\n        wordList.map(_.split(\" \").map(_.toLowerCase))",
  "        val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase())\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = list33.", "        val words: List[String]\
    \ = s.split(\" \").filter(_.isLetter).toList\n        val consonants: List[String]\
    \ = words.filter(_.contains(\"a\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"o\")).filter(_.contains(\"u\")).toList\n        val\
    \ vowels: List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).filter(_.contains(\"y\")).toList\n        val consonantsAndVowels: List[String]\
    \ = consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowels ++ consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonants ++ vowels\
    \ ++ consonants\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ ++ consonants ++ vowels ++ consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\n\
    \        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\n\
    \        val consonants", "        val list = s.split(\" \").toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (i <- 0 until list.size)\
    \ {\n            val word = list(i)\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                result.add(word)\n            }\n        }\n        if (result.size\
    \ == 0) {\n            List()\n        }\n        else {\n            val result\
    \ = result.sortWith((x, y) => x.toString.compareTo(y.toString))\n            val\
    \ list = result.take(n)\n            list.toList\n        }", "        val list\
    \ = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word :: \"\")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list3\
    \ = list.filter(x => x.contains(\"b\") || x.contains(\"c\") || x.contains(\"d\"\
    ) || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"h\") || x.contains(\"\
    j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"m\") || x.contains(\"\
    n\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"r\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"v\") || x.contains(\"w\") || x.contains(\"\
    x\") || x.contains(\"y\") || x.contains(\"z\"))\n        val list4 = list.filter(x\
    \ => x.contains(\"0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"\
    3\") || x.contains(\"4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"\
    7\") || x.contains(\"8\") || x.contains(\"9\"))\n        val list5 = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"B\") || x.contains(\"C\") || x.contains(\"\
    D\") || x.contains(\"E\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"\
    H\") || x.contains(\"I\") || x.contains(\"J\") || x.contains(\"K\") || x.contains(\"\
    L\") || x.contains(\"M\") || x.contains(\"N\") || x.contains(\"O\") || x.contains(\"\
    P\") || x.contains(\"Q\") || x.contains(\"R\") || x.contains(\"S\") || x.contains(\"\
    T\") || x.contains(\"V\") || x.contains(\"W\") || x.contains(\"X\") || x.contains(\"\
    Y\") || x.contains(\"Z\"))\n        val list6 = list.filter(x => x.contains(\"\
    0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"3\") || x.contains(\"\
    4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"7\") || x.contains(\"\
    8\") || x.contains(\"9\"))\n        val list7 = list.filter(x => x.contains(\"\
    A\") || x.contains(\"B\") || x.contains(\"C\") || x.contains(\"D\") || x.contains(\"\
    E\") || ", "        val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val wordsWithNConsonants = mutable.ListBuffer[String]()\n\
    \        val wordsWithNConsonantsCount = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount2 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount3\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount4 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount5 = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount6 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount7\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount8 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount9 = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount10 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount11\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount12 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount13 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount14 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount15\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount16 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount17 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount18 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount19\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount20 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount21 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount22 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount23\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount24 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount25 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConson", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val wordList = word.split(\"\")\n            wordList.foreach { letter =>\n\
    \                if (letter == \"a\" || letter == \"e\" || letter == \"i\" ||\
    \ letter == \"o\" || letter == \"u\") {\n                    result.add(word)\n\
    \                }\n            }\n        }\n        if (result.size == 0) {\n\
    \            result.add(\"empty\")\n        }\n        if (result.size == n) {\n\
    \            result.add(\"full\")\n        }\n        result.toList", "      \
    \  val words: List[String] = s.split(\" \").filter(_.forall(c => c.isLetter) &&\
    \ c.forall(c => c.isLetter))\n        val wordCounts = words.map(w => w.length).distinct\n\
    \        val wordCount: Long = wordCounts.max\n        val wordCountPerLetter:\
    \ Map[Char, Long] = wordCounts.map(w => w.toChar, w).groupBy(_._1).mapValues(_.length)\n\
    \        val letterCounts = wordCountPerLetter.filter(_._2 > n).map(_._1)\n  \
    \      letterCounts.toList.sortBy(_.length).reverse.map(w => w.take(n)).filter(_.nonEmpty).toList",
  "        val words = s.split(\" \").map(_.toLowerCase).toList\n        val consonants\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount\
    \ = words.filter(_.contains(consonants.mkString)).size\n        val vowelCount\
    \ = words.filter(_.contains(vowels.mkString)).size\n        if (consonantCount\
    \ == n && vowelCount == n) {\n            words.filter(_.contains(consonants.mkString)).sortBy(_.length).map(_.toLowerCase)\n\
    \        } else {\n            words.filter(_.contains(consonants.mkString)).sortBy(_.length).filter(_.length\
    \ == n).map(_.toLowerCase)\n        }", "        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.matches(\"[b-df-hj-np-tv-z]\"\
    ).toList\n        val consonantCount: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantCounts: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length).filter(_._2\
    \ > n).mapValues(_.toLong)\n        val consonantCountList: List[(String, Long)]\
    \ = consonantCounts.toList.sortBy(_._2).reverse.take(n).map(_._1)\n        val\
    \ consonantCountLists: List[List[(String, Long)]] = consonantCountList.map(x =>\
    \ x.toList)\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountLists.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountListss.map(x => x.map(y =>\
    \ y.toList))\n        val consonantCountListss: List[List[List[(String, Long)]]]\
    \ = consonantCountListss.map(x => x.map(y => y.toList))\n        val consonantCountListss:\
    \ List[List[List[(String, Long)]]] = consonantCountList", "        val result\
    \ = new mutable.ListBuffer[String]()\n        val vowels = \"aeiouAEIOU\"\n  \
    \      val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n     \
    \   val consonantCount = consonants.count(_ == \" \")\n        val vowelCount\
    \ = vowels.count(_ == \" \")\n        val wordCount = s.count(_ == \" \")\n  \
    \      val consonantWords = s.split(\" \").filter(_.count(_ == consonants) ==\
    \ consonantCount)\n        val vowelWords = s.split(\" \").filter(_.count(_ ==\
    \ vowels) == vowelCount)\n        val wordList = consonantWords ++ vowelWords\n\
    \        wordList.foreach(word => {\n            if (word.length == n) {\n   \
    \             result.add(word)\n            }\n        })\n        if (wordCount\
    \ == 0) {\n            result.clear()\n        }\n        result.toList", "  \
    \      val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val result: List[String] = Nil\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty)\n        val wordSet = words.toSet\n        val wordCount\
    \ = wordSet.size\n        val consonantCount = wordSet.filter(consonantSet.contains)\n\
    \        val vowelCount = wordSet.filter(vowelSet.contains)\n        val consonantWordCount\
    \ = consonantCount.size\n        val vowelWordCount = vowelCount.size\n      \
    \  if (wordCount == 0) {\n            result\n        } else if (wordCount ==\
    \ 1) {\n            if (consonantWordCount == n) {\n                result\n \
    \           } else if (vowelWordCount == n) {\n                result\n      \
    \      } else {\n                result\n            }\n        } else if (wordCount\
    \ == 2) {\n            if (consonantWordCount == n && vowelWordCount == n) {\n\
    \                result\n            } else if (consonantWordCount == n && vowelWordCount\
    \ == 0) {\n                result\n            } else if (consonantWordCount ==\
    \ 0 && vowelWordCount == n) {\n                result\n            } else {\n\
    \                result\n            }\n        } else if (wordCount == 3) {\n\
    \            if (consonantWordCount == n && vowelWordCount == n && consonantCount\
    \ == vowelCount) {\n                result\n            } else if (consonantWordCount\
    \ == n && vowelWordCount == n && consonantCount == 0) {\n                result\n\
    \            } else if (consonantWordCount == 0 && vowelWordCount == n && consonantCount\
    \ == vowelCount) {\n                result\n            } else if (consonantWordCount\
    \ == n && vowelWordCount == 0 && consonantCount == vowelCount) {\n           \
    \     result\n            } else if (consonantWordCount == n && vowelWordCount\
    \ == n && consonantCount == 0) {\n                result\n            } else if\
    \ (consonantWordCount == 0 && vowelWordCount == n && consonantCount == 0) {\n\
    \                result\n            } else if (consonantWordCount == n && vowelWordCount\
    \ == 0 && consonantCount == 0) {\n                result\n            } else {\n\
    \                result\n            }\n        } else if (wordCount == 4) {\n\
    \            if (consonantWordCount == n && vowelWordCount == n && consonantCount\
    \ == vowelCount && vowelCount == consonantCount) {\n                result\n \
    \           } else if (consonantWordCount == n && vowelWordCount == n && consonantCount\
    \ == 0 && vowelCount == consonantCount) {\n                result\n          \
    \  } else if (consonantWordCount == n && vowelWord", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { x =>\n            val words = x.split(\"[^a-zA-Z ]\")\n            val count\
    \ = words.count(_.length == n)\n            if (count == n) {\n              \
    \  result ++= words\n            }\n        }\n        result.toList", "     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"B\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"C\"))\n        val list6 = list5.filter(x => x.contains(\"D\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"E\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"F\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"G\"))\n        val list10 = list9.filter(x => x.contains(\"H\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"I\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"J\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"K\"))\n        val list14 = list13.filter(x => x.contains(\"\
    L\"))\n        val list15 = list14.filter(x => x.contains(\"M\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"N\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"O\"))\n        val list18 = list17.filter(x => x.contains(\"\
    P\"))\n        val list19 = list18.filter(x => x.contains(\"Q\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"R\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"S\"))\n        val list22 = list21.filter(x => x.contains(\"\
    T\"))\n        val list23 = list22.filter(x => x.contains(\"U\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"V\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"W\"))\n        val list26 = list25.filter(x => x.contains(\"\
    X\"))\n        val list27 = list26.filter(x => x.contains(\"Y\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"Z\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"a\"))\n        val list30 = list29.filter(x => x.contains(\"\
    b\"))\n        val list31 = list30.filter(x => x.contains(\"c\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"d\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"e\"))\n        val list34 = list33.", "        val wordList\
    \ = s.split(\" \").toList\n        val wordSet = wordList.map(x => x.toUpperCase)\n\
    \        val consonantSet = Set.empty[Char]\n        val consonantSet2 = Set.empty[Char]\n\
    \        val consonantSet3 = Set.empty[Char]\n        val consonantSet4 = Set.empty[Char]\n\
    \        val consonantSet5 = Set.empty[Char]\n        val consonantSet6 = Set.empty[Char]\n\
    \        val consonantSet7 = Set.empty[Char]\n        val consonantSet8 = Set.empty[Char]\n\
    \        val consonantSet9 = Set.empty[Char]\n        val consonantSet10 = Set.empty[Char]\n\
    \        val consonantSet11 = Set.empty[Char]\n        val consonantSet12 = Set.empty[Char]\n\
    \        val consonantSet13 = Set.empty[Char]\n        val consonantSet14 = Set.empty[Char]\n\
    \        val consonantSet15 = Set.empty[Char]\n        val consonantSet16 = Set.empty[Char]\n\
    \        val consonantSet17 = Set.empty[Char]\n        val consonantSet18 = Set.empty[Char]\n\
    \        val consonantSet19 = Set.empty[Char]\n        val consonantSet20 = Set.empty[Char]\n\
    \        val consonantSet21 = Set.empty[Char]\n        val consonantSet22 = Set.empty[Char]\n\
    \        val consonantSet23 = Set.empty[Char]\n        val consonantSet24 = Set.empty[Char]\n\
    \        val consonantSet25 = Set.empty[Char]\n        val consonantSet26 = Set.empty[Char]\n\
    \        val consonantSet27 = Set.empty[Char]\n        val consonantSet28 = Set.empty[Char]\n\
    \        val consonantSet29 = Set.empty[Char]\n        val consonantSet30 = Set.empty[Char]\n\
    \        val consonantSet31 = Set.empty[Char]\n        val consonantSet32 = Set.empty[Char]\n\
    \        val consonantSet33 = Set.empty[Char]\n        val consonantSet34 = Set.empty[Char]\n\
    \        val consonantSet35 = Set.empty[Char]\n        val consonantSet36 = Set.empty",
  "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val consonants: List[String] = List(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels: List[String] = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonantCount: Map[String,\
    \ Long] = words.map(word => word -> consonants.count(_ == word)).toMap\n     \
    \   val vowelCount: Map[String, Long] = words.map(word => word -> vowels.count(_\
    \ == word)).toMap\n        val consonantWords = words.filter(word => consonantCount(word)\
    \ == n)\n        val vowelWords = words.filter(word => vowelCount(word) == n)\n\
    \        consonantWords.flatMap(word => vowelWords.filter(word == _))", "    \
    \    val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonants2 = consonants.toList\n        val vowels2 = vowels.toList\n\
    \        val vowels3 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels4\
    \ = vowels2.filter(_ => vowels2.contains(_))\n        val vowels5 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels6 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels7 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels8\
    \ = vowels2.filter(_ => vowels2.contains(_))\n        val vowels9 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels10 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels11 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels12 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels13 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels14 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels15 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels16 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels17 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels18 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels19 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels20 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels21 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels22 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels23 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels24 = vowels2.filter(_\
    \ => vowels2.contains(_))\n        val vowels25 = vowels2.filter(_ => vowels2.contains(_))\n\
    \        val vowels26 = vowels2.filter(_ => vowels2.contains(_))\n        val\
    \ vowels27 = vowels2.filter(_ => vowels2.contains(_))\n        val vowels28 =\
    \ vowels2.filter(_ => vowels2.contains(_))\n        val vowels29 = vowel", " \
    \       val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        })\n        if (result.isEmpty)\
    \ result else result.mkString(\" \")", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\".toList\n  \
    \      val vowelCount = list.count(_.toString.contains(vowels))\n        val consonantCount\
    \ = list.count(_.toString.contains(consonants))\n        val consonantCountInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")))\n        val consonantCountInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\"))\n\
    \        val consonantCountInWordInWordInWord = list.count(_.toString.contains(consonants.mkString(\"\
    \")).mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\"))\n        val\
    \ consonantCountInWordInWordInWordInWordInWordInWordInWordInWord = list.count(_.toString.contains(consonants.mkString(\"\
    \")).mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\"\
    ).mkString(\"\").mkString(\"\"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(_.toString.contains(consonants.mkString(\"\")).mkString(\"\").mkString(\"\
    \").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\").mkString(\"\"\
    ).mkString(\"\"))\n        val consonantCountIn", "        val vowels = \"aeiouAEIOU\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  \
    \      val vowelsCount = vowels.count(_ == s)\n        val consonantsCount = consonants.count(_\
    \ == s)\n        val wordCount = vowelsCount + consonantsCount\n        if (wordCount\
    \ == 0) Nil\n        else if (wordCount == 1) List(s)\n        else s.split(\"\
    \ \").filter(word => word.count(_ == n) == wordCount).map(word => word)", "  \
    \      val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val consonants: List[String] = words.filter(_.contains(\"a\")).map(_.toLowerCase)\n\
    \        val vowels: List[String] = words.filter(_.contains(\"e\")).map(_.toLowerCase)\n\
    \        val consonantsCount: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val vowelsCount: Map[String, Long] = vowels.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantsCountSorted: Map[String, Long] = consonantsCount.sortBy(_._2).reverse\n\
    \        val vowelsCountSorted: Map[String, Long] = vowelsCount.sortBy(_._2).reverse\n\
    \        val consonantsCountSortedByValue: Map[String, Long] = consonantsCountSorted.filter(_._2\
    \ > n).map(_._1)\n        val vowelsCountSortedByValue: Map[String, Long] = vowelsCountSorted.filter(_._2\
    \ > n).map(_._1)\n        val consonantsCountSortedByKey: Map[String, Long] =\
    \ consonantsCountSorted.filter(_._2 > n).map(_._0)\n        val vowelsCountSortedByKey:\
    \ Map[String, Long] = vowelsCountSorted.filter(_._2 > n).map(_._0)\n        val\
    \ consonantsCountSortedByValueAndKey: Map[String, Long] = consonantsCountSortedByValue.filter(_._2\
    \ > n).map(_._1 -> _._0)\n        val vowelsCountSortedByValueAndKey: Map[String,\
    \ Long] = vowelsCountSortedByValue.filter(_._2 > n).map(_._1 -> _._0)\n      \
    \  val consonantsCountSortedByKeyAndValue: Map[String, Long] = consonantsCountSortedByKey.filter(_._2\
    \ > n).map(_._1 -> _._0)\n        val vowelsCountSortedByKeyAndValue: Map[String,\
    \ Long] = vowelsCountSortedByKey.filter(_._2 > n).map(_._1 -> _._0)\n        val\
    \ consonantsCountSortedByValueAndKeyAndValue: Map[String, Long] = consonantsCountSortedByValueAndKey.filter(_._2\
    \ > n).map(_._1 -> _._0)\n        val vowelsCountSortedByValueAndKeyAndValue:\
    \ Map[String, Long] = vowelsCountSortedByValueAndKey.filter(_._2 > n).map(_._1\
    \ -> _._0)", "        val list = s.split(\" \").toList\n        val list = list.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    b\") || x.contains(\"c\") || x.contains(\"d\") || x.contains(\"f\") || x.contains(\"\
    g\") || x.contains(\"h\") || x.contains(\"j\") || x.contains(\"k\") || x.contains(\"\
    l\") || x.contains(\"m\") || x.contains(\"n\") || x.contains(\"p\") || x.contains(\"\
    q\") || x.contains(\"r\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    v\") || x.contains(\"w\") || x.contains(\"x\") || x.contains(\"y\") || x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"B\") || x.contains(\"C\") || x.contains(\"\
    D\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"H\") || x.contains(\"\
    J\") || x.contains(\"K\") || x.contains(\"L\") || x.contains(\"M\") || x.contains(\"\
    N\") || x.contains(\"P\") || x.contains(\"Q\") || x.contains(\"R\") || x.contains(\"\
    S\") || x.contains(\"T\") || x.contains(\"V\") || x.contains(\"W\") || x.contains(\"\
    X\") || x.contains(\"Y\") || x.contains(\"Z\"))\n        val list = list.filter(x\
    \ => x.contains(\"0\") || x.contains(\"1\") || x.contains(\"2\") || x.contains(\"\
    3\") || x.contains(\"4\") || x.contains(\"5\") || x.contains(\"6\") || x.contains(\"\
    7\") || x.contains(\"8\") || x.contains(\"9\"))\n        val list = list.filter(x\
    \ => x.contains(\"!\") || x.contains(\"@\") || x.contains(\"#\") || x.contains(\"\
    $\") || x.contains(\"%\") || x.contains(\"^\") || x.contains(\"&\") || x.contains(\"\
    *\") || x.contains(\"(\") || x.contains(\")\") || x.contains(\"_\") || x.contains(\"\
    +\") || x.contains(\"=\") || x.contains(\"[\") || x.contains(\"]\") || x.contains(\"",
  "        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase).toList\n\
    \        words.filter(_.contains(\"a\")).map(_.split(\"\").filter(_.contains(\"\
    a\")).map(_.toLowerCase).toList)", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") && word.contains(\"e\") && word.contains(\"i\") && word.contains(\"o\") &&\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        if (result.size == 0) {\n            result.add(\"empty\")\n\
    \        }\n        if (result.size == n) {\n            result.add(\"full\")\n\
    \        }\n        result.toList", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) result else\
    \ result.mkString(\" \")", "        val list = s.split(\" \").toList\n       \
    \ val list2 = list.map(x => x.split(\"\").toList).flatten\n        val list3 =\
    \ list2.filter(x => x.count(_ == 'a') == n).filter(x => x.count(_ == 'e') == n).filter(x\
    \ => x.count(_ == 'i') == n).filter(x => x.count(_ == 'o') == n).filter(x => x.count(_\
    \ == 'u') == n).filter(x => x.count(_ == 'y') == n).filter(x => x.count(_ == 'h')\
    \ == n).filter(x => x.count(_ == 'l') == n).filter(x => x.count(_ == 's') == n).filter(x\
    \ => x.count(_ == 'w') == n).filter(x => x.count(_ == 'd') == n).filter(x => x.count(_\
    \ == 'c') == n).filter(x => x.count(_ == 'm') == n).filter(x => x.count(_ == 'b')\
    \ == n).filter(x => x.count(_ == 'f') == n).filter(x => x.count(_ == 'p') == n).filter(x\
    \ => x.count(_ == 'v') == n).filter(x => x.count(_ == 'g') == n).filter(x => x.count(_\
    \ == 'o') == n).filter(x => x.count(_ == 'n') == n).filter(x => x.count(_ == 'x')\
    \ == n).filter(x => x.count(_ == 'z') == n).filter(x => x.count(_ == 'j') == n).filter(x\
    \ => x.count(_ == 'q') == n).filter(x => x.count(_ == 'z') == n).filter(x => x.count(_\
    \ == 'k') == n).filter(x => x.count(_ == 'r') == n).filter(x => x.count(_ == 't')\
    \ == n).filter(x => x.count(_ == 's') == n).filter(x => x.count(_ == 'w') == n).filter(x\
    \ => x.count(_ == 'x') == n).filter(x => x.count(_ == 'z') == n).filter(x => x.count(_\
    \ == 'j') == n).filter(x => x.count(_ == 'q') == n).filter(x => x.count(_ == 'z')\
    \ == n).filter(x => x.count(_ == 'k') == n).filter(x => x.count(_ == 'r') == n).filter(x\
    \ => x.count(_ == 't') == n).filter(x => x.count(_ == 's') == n).filter(x => x.count(_\
    \ == 'w') == n).filter(x => x.count(_ == 'x') == n).filter(x => x.count(_ == 'z')\
    \ == n).filter(x => x.count(_ == 'j') == n).filter(x => x.count(_ == 'q') == ",
  "        val list = s.split(\" \").toList\n        val result = list.filter(x =>\
    \ x.count(_ == 'a') >= n).map(x => x.split(\"\").filter(y => y == 'a').mkString(\"\
    \"))\n        if (result.isEmpty) List()\n        else result", "        val words:\
    \ List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = words.filter(_.contains(\"a\") || _.contains(\"\
    e\") || _.contains(\"i\") || _.contains(\"o\") || _.contains(\"u\"))\n       \
    \ consonants.sortBy(_.length)", "        val list = s.split(\" \").toList\n  \
    \      val result = list.filter(_ => _.length == n)\n        result.map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.split(\"\
    \ \"))", "        val list = s.split(\" \").toList\n        val result: List[String]\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val consonantsCount: Map[String, Long] = consonants.groupBy(c\
    \ => c).mapValues(_.size).toMap\n        val consonantsCountMap: Map[String, Long]\
    \ = consonantsCount.filter(_._2 > n).map(_._1).toMap\n        val consonantsCountMapKeys:\
    \ Set[String] = consonantsCountMap.keys\n        val consonantsCountMapValues:\
    \ Set[Long] = consonantsCountMap.values.toSet\n        val consonantsCountMapKeysSorted:\
    \ Set[String] = consonantsCountMapKeys.toSet\n        val consonantsCountMapValuesSorted:\
    \ Set[Long] = consonantsCountMapValues.toSet\n        val consonantsCountMapKeysSortedWithDuplicates:\
    \ Set[String] = consonantsCountMapKeys.toSet.filter(_ != consonantsCountMapKeys.last)\n\
    \        val consonantsCountMapValuesSortedWithDuplicates: Set[Long] = consonantsCountMapValues.toSet.filter(_\
    \ != consonantsCountMapValues.last)\n        val consonantsCountMapKeysSortedWithDuplicatesAndValues:\
    \ Set[String] = consonantsCountMapKeys.toSet.filter(_ != consonantsCountMapKeys.last).filter(_\
    \ != consonantsCountMapValues.last)\n        val consonantsCountMapValuesSortedWithDuplicatesAndValues:\
    \ Set[Long] = consonantsCountMapValues.toSet.filter(_ != consonantsCountMapValues.last).filter(_\
    \ != consonantsCountMapValues.last)\n        val consonantsCountMapKeysSortedWithDuplicatesAndValuesAndValues:\
    \ Set[String] = consonantsCountMapKeys.toSet.filter(_ != consonantsCountMapKeys.last).filter(_\
    \ != consonantsCountMapValues.last).filter(_ != consonantsCountMapValues.last)\n\
    \        val consonantsCountMapValuesSortedWithDuplicatesAndValuesAndValues: Set[Long]\
    \ = consonantsCountMapValues.toSet.filter(_ != consonantsCountMapValues.last).filter(_\
    \ != consonantsCountMapValues.last).filter(_ != consonantsCountMapValues.last)\n\
    \        val ", "        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val words: List[String] = if (s.isEmpty) Nil else s.split(\" \").map(word\
    \ => word.split(\"\").filter(c => vowelSet.contains(c) || consonantSet.contains(c))).filter(word\
    \ => word.length == n).map(word => word.mkString(\"\")).filter(word => word.length\
    \ > 0).map(word => word.split(\"\")).filter(word => word.length == n).map(word\
    \ => word.mkString(\"\")).filter(word => word.length > 0).map(word => word.split(\"\
    \")).filter(word => word.length == n).map(word => word.mkString(\"\")).filter(word\
    \ => word.length > 0).map(word => word.split(\"\")).filter(word => word.length\
    \ == n).map(word => word.mkString(\"\")).filter(word => word.length > 0).map(word\
    \ => word.split(\"\")).filter(word => word.length == n).map(word => word.mkString(\"\
    \")).filter(word => word.length > 0).map(word => word.split(\"\")).filter(word\
    \ => word.length == n).map(word => word.mkString(\"\")).filter(word => word.length\
    \ > 0).map(word => word.split(\"\")).filter(word => word.length == n).map(word\
    \ => word.mkString(\"\")).filter(word => word.length > 0).map(word => word.split(\"\
    \")).filter(word => word.length == n).map(word => word.mkString(\"\")).filter(word\
    \ => word.length > 0).map(word => word.split(\"\")).filter(word => word.length\
    \ == n).map(word => word.mkString(\"\")).filter(word => word.length > 0).map(word\
    \ => word.split(\"\")).filter(word => word.length == n).map(word => word.mkString(\"\
    \")).filter(word => word.length > 0).map(word => word.split(\"\")).filter(word\
    \ => word.length == n).map(word => word.mkString(\"\")).filter(word => word.length\
    \ > 0).map(word => word.split(\"\")).filter(word => word.length == n).map(word\
    \ => word.mkString(\"\")).filter(word => word.length > 0).map(word => word.split(\"\
    \")).filter(word => word.length == n).map(word => word.mkString(\"\")).filter(word\
    \ => word.length > 0).map(word => word.split(\"\")).filter(word => word.length\
    \ == n).map(word => word.mkString(\"\")).filter(word => word.length > 0).map(word\
    \ => word.split(\"\")).filter(word => word.length == n).map(word => word.mkString(\"\
    \")).", "        val words = s.split(\" \").toList\n        val wordList = words.toSet\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val consonantList = consonants.toList\n        val vowelList = vowels.toList\n\
    \        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size\n        val vowelSetSize = vowels.size\n\
    \        val consonantSetSize = consonants.size", "        val list = s.split(\"\
    \ \").toList\n        val list2 = list.filter(_ != \" \")\n        val list3 =\
    \ list2.filter(_ != \" \")\n        val list4 = list3.filter(_ != \" \")\n   \
    \     val list5 = list4.filter(_ != \" \")\n        val list6 = list5.filter(_\
    \ != \" \")\n        val list7 = list6.filter(_ != \" \")\n        val list8 =\
    \ list7.filter(_ != \" \")\n        val list9 = list8.filter(_ != \" \")\n   \
    \     val list10 = list9.filter(_ != \" \")\n        val list11 = list10.filter(_\
    \ != \" \")\n        val list12 = list11.filter(_ != \" \")\n        val list13\
    \ = list12.filter(_ != \" \")\n        val list14 = list13.filter(_ != \" \")\n\
    \        val list15 = list14.filter(_ != \" \")\n        val list16 = list15.filter(_\
    \ != \" \")\n        val list17 = list16.filter(_ != \" \")\n        val list18\
    \ = list17.filter(_ != \" \")\n        val list19 = list18.filter(_ != \" \")\n\
    \        val list20 = list19.filter(_ != \" \")\n        val list21 = list20.filter(_\
    \ != \" \")\n        val list22 = list21.filter(_ != \" \")\n        val list23\
    \ = list22.filter(_ != \" \")\n        val list24 = list23.filter(_ != \" \")\n\
    \        val list25 = list24.filter(_ != \" \")\n        val list26 = list25.filter(_\
    \ != \" \")\n        val list27 = list26.filter(_ != \" \")\n        val list28\
    \ = list27.filter(_ != \" \")\n        val list29 = list28.filter(_ != \" \")\n\
    \        val list30 = list29.filter(_ != \" \")\n        val list31 = list30.filter(_\
    \ != \" \")\n        val list32 = list31.filter(_ != \" \")\n        val list33\
    \ = list32.filter(_ != \" \")\n        val list34 = list33.filter(_ != \" \")\n\
    \        val list35 = list34.filter(_ != \" \")\n        val list36 = list35.filter(_\
    \ != \" \")\n        val list37 = list36.filter(_ != \" \")\n        val list38\
    \ = list37.filter(_ != \" \")\n        val list39 = list38.filter(_ != \" \")\n\
    \        val list40 = list39.filter(_ != \" \")\n        val list41 = list40.filter(_\
    \ != \" \")\n        val list42 = list41.filter(_ != \" \")\n        val list43\
    \ = list42.filter(_ != \" \")\n        val list44 = list43.filter", "        val\
    \ result = new mutable.ListBuffer[String]()\n        val chars = s.toCharArray\n\
    \        val count = chars.length\n        val index = chars.indexOf(0)\n    \
    \    val lastIndex = chars.lastIndexOf(0)\n        val consonants = chars.filter(_\
    \ => _ != 'a' && _ != 'e' && _ != 'i' && _ != 'o' && _ != 'u')\n        val vowels\
    \ = chars.filter(_ => _ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' || _ == 'u')\n\
    \        val consonantCount = consonants.length\n        val vowelCount = vowels.length\n\
    \        val consonantIndex = index\n        val vowelIndex = lastIndex\n    \
    \    val consonantLastIndex = consonantIndex + consonantCount - 1\n        val\
    \ vowelLastIndex = vowelIndex + vowelCount - 1\n        val consonantChars = consonants.toList\n\
    \        val vowelChars = vowels.toList\n        val consonantCharsLength = consonantChars.length\n\
    \        val vowelCharsLength = vowelChars.length\n        val consonantCharsLastIndex\
    \ = consonantCharsLength - 1\n        val vowelCharsLastIndex = vowelCharsLength\
    \ - 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantCharsIndex = consonantIndex\n        val vowelCharsIndex\
    \ = vowelIndex\n        val consonantCharsLastIndex = consonantCharsIndex + consonantCharsLength\
    \ - 1\n        val vowelCharsLastIndex = vowelCharsIndex + vowelCharsLength -\
    \ 1\n        val consonantChars", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        for (c <- s) {\n            if (vowelSet.contains(c))\
    \ {\n                vowelCounts(c) = vowelCounts.getOrElse(c, 0)+1\n        \
    \    }\n            else {\n                consonantCounts(c) = consonantCounts.getOrElse(c,\
    \ 0)+1\n            }\n        }\n        for (c <- consonantSet) {\n        \
    \    if (consonantCounts.getOrElse(c, 0)==n) {\n                words += c\n \
    \           }\n        }\n        words.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        if (result.isEmpty) List()\n\
    \        else result.toList", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) result += (word + \" \")\n        })\n        if (result.isEmpty) List()\n\
    \        else result.toList", "        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]", "        val list\
    \ = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n       \
    \ val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 = list3.filter(x\
    \ => x.contains(\"E\"))\n        val list5 = list4.filter(x => x.contains(\"I\"\
    ))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n        val list7\
    \ = list6.filter(x => x.contains(\"U\"))\n        val list8 = list7.filter(x =>\
    \ x.contains(\"a\"))\n        val list9 = list8.filter(x => x.contains(\"e\"))\n\
    \        val list10 = list9.filter(x => x.contains(\"i\"))\n        val list11\
    \ = list10.filter(x => x.contains(\"o\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"u\"))\n        val list13 = list12.filter(x => x.contains(\"\
    A\"))\n        val list14 = list13.filter(x => x.contains(\"E\"))\n        val\
    \ list15 = list14.filter(x => x.contains(\"I\"))\n        val list16 = list15.filter(x\
    \ => x.contains(\"O\"))\n        val list17 = list16.filter(x => x.contains(\"\
    U\"))\n        val list18 = list17.filter(x => x.contains(\"a\"))\n        val\
    \ list19 = list18.filter(x => x.contains(\"e\"))\n        val list20 = list19.filter(x\
    \ => x.contains(\"i\"))\n        val list21 = list20.filter(x => x.contains(\"\
    o\"))\n        val list22 = list21.filter(x => x.contains(\"u\"))\n        val\
    \ list23 = list22.filter(x => x.contains(\"A\"))\n        val list24 = list23.filter(x\
    \ => x.contains(\"E\"))\n        val list25 = list24.filter(x => x.contains(\"\
    I\"))\n        val list26 = list25.filter(x => x.contains(\"O\"))\n        val\
    \ list27 = list26.filter(x => x.contains(\"U\"))\n        val list28 = list27.filter(x\
    \ => x.contains(\"a\"))\n        val list29 = list28.filter(x => x.contains(\"\
    e\"))\n        val list30 = list29.filter(x => x.contains(\"i\"))\n        val\
    \ list31 = list30.filter(x => x.contains(\"o\"))\n        val list32 = list31.filter(x\
    \ => x.contains(\"u\"))\n        val list33 = list32.filter(x => x.contains(\"\
    A\"))\n        val list34 = list33.", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = new mutable.HashMap[String, Int]()\n      \
    \      word.split(\"\").foreach { c =>\n                if (count.contains(c))\
    \ {\n                    count(c) += 1\n                } else {\n           \
    \         count(c) = 1\n                }\n            }\n            val count\
    \ = count.filter(_._2 > n).map(_._1)\n            if (count.size == 0) {\n   \
    \             result += \"(\" + word + \")\"\n            } else {\n         \
    \       result += \"(\" + count.mkString(\"\") + \")\" + \" \" + word\n      \
    \      }\n        }\n        result.toList", "        val words = s.split(\" \"\
    ).toList\n        val list = words.filter(_.length == n).toList\n        list.sortBy(_.toLowerCase)",
  "        val words = s.split(\" \").map(_.toUpperCase)\n        val nConsonants\
    \ = n\n        val nConsonantsList = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"\
    H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"\
    V\", \"W\", \"X\", \"Y\", \"Z\")\n        val nConsonantsSet = Set(nConsonantsList)\n\
    \        val nConsonantsSetList = nConsonantsSet.map(_.toString)\n        val\
    \ nConsonantsSetListString = nConsonantsSetList.mkString(\"\")\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListStringLength\
    \ = nConsonantsSetListString.length\n        val nConsonantsSetListString", " \
    \       val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = list33.", "        val wordList\
    \ = s.split(\" \")\n        val wordSet = wordList.map(_.toUpperCase)\n      \
    \  val wordSetSet = wordSet.map(x => x.toSet)\n        val wordSetSetSet = wordSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSet = wordSetSetSet.map(x => x.toSet)\n\
    \        val wordSetSetSetSetSet = wordSetSetSetSet.map(x => x.toSet)\n      \
    \  val wordSetSetSetSetSetSet = wordSetSetSetSetSet.map(x => x.toSet)\n      \
    \  val wordSetSetSetSetSetSetSet = wordSetSetSetSetSetSet.map(x => x.toSet)\n\
    \        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x =>\
    \ x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val wordSetSetSetSetSetSetSetSet = wordSetSetSetSetSetSetSet.map(x\
    \ => x.toSet)\n        val ", "        val list = s.split(\" \").toList\n    \
    \    val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val wordList = s.split(\" \")\n\
    \        val wordSet = wordList.map(_.toUpperCase)\n        val consonantSet =\
    \ Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantList = consonantSet.toList\n\
    \        val consonantSet = consonantList.map(_.toUpperCase)\n        val consonantSet\
    \ = consonantSet.filter(_ != \" \")\n        val consonantSet = consonantSet.filter(_\
    \ != \".\")\n        val consonantSet = consonantSet.filter(_ != \",\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"'\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \":\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"-\")\n        val consonantSet = consonantSet.filter(_ != \"_\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"~\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"#\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"&\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val consonantSet = consonantSet.filter(_ != \"?\")\n        val consonantSet\
    \ = consonantSet.filter(_ != \"!\")\n        val consonantSet = consonantSet.filter(_\
    \ != \"?\")\n        val consonantSet = consonantSet.filter(_ != \"!\")\n    \
    \    val ", "        val list = s.split(\" \").toList\n        val list2 = list.filter(_\
    \ => _.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.length == n).map(_.split(\"\")).filter(_.", "        val list =\
    \ s.split(\" \").toList\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ result else result.mkString(\" \")", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList", "        val list = s.split(\" \").toList\n    \
    \    val result = list.filter(_ => _.length == n)\n        result.map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.split(\"\
    \ \")).toList", "        val list = s.split(\" \").toList\n        val result\
    \ = list.filter(_ => _.length == n).map(_.split(\"\")).filter(_.forall(_.isLetter)).toList\n\
    \        if (result.isEmpty) List.empty\n        else result", "        val list\
    \ = s.split(\" \").toList\n        val list2 = list.filter(_ => _.length == n)\n\
    \        val list3 = list2.filter(_ => _.contains(\"a\"))\n        val list4 =\
    \ list3.filter(_ => _.contains(\"e\"))\n        val list5 = list4.filter(_ =>\
    \ _.contains(\"i\"))\n        val list6 = list5.filter(_ => _.contains(\"o\"))\n\
    \        val list7 = list6.filter(_ => _.contains(\"u\"))\n        list7", " \
    \       val wordsWithNConsonants = \n            s.split(\" \").filter(_.length\
    \ == n).map(_.split(\"\").filter(_.toString.toChar == 'c').mkString(\"\")).distinct\n\
    \        wordsWithNConsonants.toList", "        val words = s.split(\" \")\n \
    \       val result: List[String] = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result :+= word\n        })\n        if (result.isEmpty) result :+= \"\
    \"\n        result.toList", "        val wordList = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val consonantCount = wordList.count(_.toUpperCase in consonants)\n\
    \        val vowelCount = wordList.count(_.toUpperCase in vowels)\n        if\
    \ (consonantCount == n && vowelCount == n) {\n            wordList.filter(_.toUpperCase\
    \ in consonants).filter(_.toUpperCase in vowels)\n        } else {\n         \
    \   wordList.filter(_.toUpperCase in consonants).filter(_.toUpperCase in vowels).filter(_.toUpperCase\
    \ in consonants).filter(_.toUpperCase in vowels)\n        }", "        val list\
    \ = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n  \
    \      list.foreach { word =>\n            if (word.count(_ == 'a') >= n) result\
    \ += word\n        }\n        return result.toList", "        val wordsWithNConsonants\
    \ = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n        val\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount = consonants.count(_\
    \ == \" \")\n        val vowelCount = vowels.count(_ == \" \")\n        val consonantCountInWord\
    \ = s.count(_ == \" \")\n        val vowelCountInWord = s.count(_ == \" \")\n\
    \        val consonantCountInWordWithVowels = consonantCountInWord - vowelCountInWord\n\
    \        val vowelCountInWordWithVowels = vowelCountInWord - consonantCountInWord\n\
    \        val consonantCountInWordWithVowelsAndConsonants = consonantCountInWordWithVowels\
    \ + consonantCount\n        val vowelCountInWordWithVowelsAndConsonants = vowelCountInWordWithVowels\
    \ + vowelCount\n        val consonantCountInWordWithVowelsAndConsonantsAndConsonants\
    \ = consonantCountInWordWithVowelsAndConsonants + consonantCount\n        val\
    \ vowelCountInWordWithVowelsAndConsonantsAndConsonants = vowelCountInWordWithVowelsAndConsonants\
    \ + vowelCount\n        val consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants\
    \ = consonantCountInWordWithVowelsAndConsonantsAndConsonants + consonantCount\n\
    \        val vowelCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants\
    \ = vowelCountInWordWithVowelsAndConsonantsAndConsonants + vowelCount\n      \
    \  val consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonantsAndConsonants\
    \ = consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants + consonantCount\n\
    \        val vowelCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonantsAndConsonants\
    \ = vowelCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonants + vowelCount\n\
    \        val consonantCountInWordWithVowelsAndConsonantsAndConsonantsAndConsonantsAndConsonantsAndCon",
  "        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(vowelSet))\n\
    \        val wordSet = words.toSet\n        val result: List[String] = if (wordSet.size==n)\
    \ words else List()\n        result", "        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).flatMap(_.split(\"\")).filter(_\
    \ => _.toString.toList.size == n).toList\n        if (result.isEmpty) List()\n\
    \        else result", "        val words = s.split(\" \").toList\n        val\
    \ list = new mutable.ListBuffer[String]()\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (word <- words) {\n            val count = word.length\n\
    \            if (count.toLong == n) {\n                list += word\n        \
    \        count.put(word, count + 1)\n            }\n        }\n        list.filter(_\
    \ != \"\").sortWith(_.compareTo(_) < 0).map(_.toLowerCase)", "        val list\
    \ = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n  \
    \      list.foreach { word =>\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ result else result.mkString(\" \")", "        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase)\n        val consonantSet =\
    \ Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantList = consonantSet.toList\n\
    \        val consonantSet2 = consonantList.map(_.toUpperCase)\n        val consonantSet3\
    \ = consonantSet2.map(_.toUpperCase)\n        val consonantSet4 = consonantSet3.map(_.toUpperCase)\n\
    \        val consonantSet5 = consonantSet4.map(_.toUpperCase)\n        val consonantSet6\
    \ = consonantSet5.map(_.toUpperCase)\n        val consonantSet7 = consonantSet6.map(_.toUpperCase)\n\
    \        val consonantSet8 = consonantSet7.map(_.toUpperCase)\n        val consonantSet9\
    \ = consonantSet8.map(_.toUpperCase)\n        val consonantSet10 = consonantSet9.map(_.toUpperCase)\n\
    \        val consonantSet11 = consonantSet10.map(_.toUpperCase)\n        val consonantSet12\
    \ = consonantSet11.map(_.toUpperCase)\n        val consonantSet13 = consonantSet12.map(_.toUpperCase)\n\
    \        val consonantSet14 = consonantSet13.map(_.toUpperCase)\n        val consonantSet15\
    \ = consonantSet14.map(_.toUpperCase)\n        val consonantSet16 = consonantSet15.map(_.toUpperCase)\n\
    \        val consonantSet17 = consonantSet16.map(_.toUpperCase)\n        val consonantSet18\
    \ = consonantSet17.map(_.toUpperCase)\n        val consonantSet19 = consonantSet18.map(_.toUpperCase)\n\
    \        val consonantSet20 = consonantSet19.map(_.toUpperCase)\n        val consonantSet21\
    \ = consonantSet20.map(_.toUpperCase)\n        val consonantSet22 = consonantSet21.map(_.toUpperCase)\n\
    \        val consonantSet23 = consonantSet22.map(_.toUpperCase)\n        val consonantSet24\
    \ = consonantSet23.map(_.toUpperCase)\n        val consonantSet25 = consonantSet24.map(_.toUpperCase)\n\
    \        val consonantSet26 = consonant", "        val list = s.split(\" \").toList\n\
    \        val result = list.filterNot(_.isEmpty).filterNot(_.isDigit).filterNot(_.isLetter).filterNot(_.isSpace).filterNot(_.equals(\"\
    .\")).filterNot(_.equals(\"?\")).filterNot(_.equals(\"!\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equals(\";\")).filterNot(_.equals(\":\")).filterNot(_.equals(\"\
    ;\")).filterNot(_.equals(\":\")).filterNot(_.equals(\";\")).filterNot(_.equals(\"\
    :\")).filterNot(_.equal", "        val list = s.split(\" \").toList\n        val\
    \ list2 = list.filter(_.replaceAll(\"[^a-zA-Z ]\", \"\").length == n)\n      \
    \  list2.toList", "        val words = s.split(\" \").toList\n        val list\
    \ = new mutable.ListBuffer[String]()\n        words.foreach(word => {\n      \
    \      val letters = word.split(\"\").toList\n            val count = letters.count(letter\
    \ => letter == \"a\")\n            if (count == n) {\n                list +=\
    \ word\n            }\n        })\n        list.toList", "        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val wordList\
    \ = mutable.ListBuffer[String]()\n        val vowelCount = mutable.Map[String,\
    \ Int]()\n        val consonantCount = mutable.Map[String, Int]()\n        val\
    \ wordCount = mutable.Map[String, Int]()\n        val wordList = s.split(\" \"\
    ).toList\n        wordList.foreach(word => {\n            val vowelCounts = word.count(vowels).toInt\n\
    \            val consonantCounts = word.count(consonants).toInt\n            val\
    \ wordCounts = word.count(\" \").toInt\n            val wordCount = wordCount\
    \ + 1\n            wordCount += wordCounts\n            vowelCount += (\"vowelCount\"\
    \ -> vowelCounts)\n            consonantCount += (\"consonantCount\" -> consonantCounts)\n\
    \            wordList += word\n        })\n        val vowelCounts = vowelCount.filter(_._2\
    \ >= n).toMap\n        val consonantCounts = consonantCount.filter(_._2 >= n).toMap\n\
    \        val wordCounts = wordCount.filter(_._2 >= n).toMap\n        val wordList\
    \ = wordList.filter(_._2 >= n).toList\n        wordList.foreach(word => {\n  \
    \          val vowelCounts = vowelCount.filter(_._1 == word).toMap\n         \
    \   val consonantCounts = consonantCount.filter(_._1 == word).toMap\n        \
    \    val wordCounts = wordCount.filter(_._1 == word).toMap\n            val wordCount\
    \ = wordCount + 1\n            wordCount += wordCounts\n            vowelCount\
    \ += (\"vowelCount\" -> vowelCounts)\n            consonantCount += (\"consonantCount\"\
    \ -> consonantCounts)\n            wordList += word\n        })\n        wordList.filter(_._2\
    \ >= n).toList", "        val list = s.split(\" \")\n        val list2 = list.filter(_\
    \ => _.length == n)\n        list2.map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.nonEmpty).map(_.split(\" \"\
    ))", "        val words: List[String] = s.split(\" \").filter(_.forall(c => c\
    \ >= 'a' && c <= 'z'))\n        val consonants: List[String] = words.filter(_.forall(c\
    \ => c >= 'a' && c <= 'z'))\n        val vowels: List[String] = words.filter(_.forall(c\
    \ => c >= 'A' && c <= 'Z'))\n        val consonantCount = consonants.map(_.length).sum\n\
    \        val vowelCount = vowels.map(_.length).sum\n        val consonantWords\
    \ = consonants.filter(w => w.length == n)\n        val vowelWords = vowels.filter(w\
    \ => w.length == n)\n        val consonantWordCount = consonantWords.map(_.length).sum\n\
    \        val vowelWordCount = vowelWords.map(_.length).sum\n        if (consonantWordCount\
    \ == consonantCount && vowelWordCount == vowelCount && consonantWordCount == vowelWordCount)\
    \ {\n            consonantWords.toList\n        } else {\n            List()\n\
    \        }", "        val wordsWithNConsonants = mutable.ListBuffer[String]()\n\
    \        val wordsWithNConsonantsCounts = mutable.ListBuffer[Long]()\n       \
    \ val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConsonantsCount:\
    \ Long = 0\n        val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] =\
    \ mutable.ListBuffer()\n        val wordsWithNConsonantsCount: Long = 0\n    \
    \    val wordsWithNConsonantsCounts: mutable.ListBuffer[Long] = mutable.ListBuffer()\n\
    \        val wordsWithNConsonantsCount: Long = 0\n        val wordsWithNConsonantsCounts:\
    \ mutable.ListBuffer[Long] = mutable.ListBuffer()\n        val wordsWithNConson",
  "        val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = list33.", "        val list = s.split(\"\
    \ \").toList\n        val result = list.filter( x => x.toString.count(_ == 'a')\
    \ <= n )\n        result.map(x => x.split(\" \"))", "        val result = new\
    \ mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount = consonants.toSet.size\
    \ // number of consonants\n        val vowelCount = vowels.toSet.size // number\
    \ of vowels\n        val consonantIndex = consonants.indexOf(n) // index of consonant\n\
    \        val vowelIndex = vowels.indexOf(n) // index of vowel\n        val currentWord\
    \ = s.substring(0,s.length - 1) // current word is everything before the last\
    \ letter\n        val currentWordLength = currentWord.length // length of current\
    \ word\n        val currentWordChars = currentWord.toCharArray // current word\
    \ chars\n        val currentWordCharCount = currentWordChars.length // length\
    \ of current word chars\n        val currentWordCharsCount = currentWordChars.size\
    \ // number of current word chars\n        val currentWordCharsIndex = currentWordChars.indexOf(n)\
    \ // index of current word chars\n        val currentWordCharsIndex2 = currentWordCharsIndex\
    \ + 1 // index of current word chars\n        val currentWordCharsIndex3 = currentWordCharsIndex\
    \ + 2 // index of current word chars\n        val currentWordCharsIndex4 = currentWordCharsIndex\
    \ + 3 // index of current word chars\n        val currentWordCharsIndex5 = currentWordCharsIndex\
    \ + 4 // index of current word chars\n        val currentWordCharsIndex6 = currentWordCharsIndex\
    \ + 5 // index of current word chars\n        val currentWordCharsIndex7 = currentWordCharsIndex\
    \ + 6 // index of current word chars\n        val currentWordCharsIndex8 = currentWordCharsIndex\
    \ + 7 // index of current word chars\n        val currentWordCharsIndex9 = currentWordCharsIndex\
    \ + 8 // index of current word chars\n        val currentWordCharsIndex10 = currentWordCharsIndex\
    \ + 9 // index of current word chars\n        val currentWordCharsIndex11 = currentWordCharsIndex\
    \ + 10 // index of current word chars\n        val currentWordCharsIndex12 = currentWordCharsIndex\
    \ + 11 // index of current word chars\n        val currentWordCharsIndex13 = currentWordCharsIndex\
    \ + 12 // index of current word chars\n        val currentWordCharsIndex14 = currentWordCharsIndex\
    \ + 13 // index of current word chars\n        val currentWordCharsIndex15 = currentWordCharsIndex\
    \ + 14", "        val wordList = s.split(\" \")\n        val wordList2 = wordList.map(x\
    \ => x.toLowerCase)\n        val wordList3 = wordList2.filter(x => x.contains(\"\
    a\"))\n        val wordList4 = wordList3.filter(x => x.contains(\"e\"))\n    \
    \    val wordList5 = wordList4.filter(x => x.contains(\"i\"))\n        val wordList6\
    \ = wordList5.filter(x => x.contains(\"o\"))\n        val wordList7 = wordList6.filter(x\
    \ => x.contains(\"u\"))\n        val wordList8 = wordList7.filter(x => x.contains(\"\
    l\"))\n        val wordList9 = wordList8.filter(x => x.contains(\"n\"))\n    \
    \    val wordList10 = wordList9.filter(x => x.contains(\"d\"))\n        val wordList11\
    \ = wordList10.filter(x => x.contains(\"h\"))\n        val wordList12 = wordList11.filter(x\
    \ => x.contains(\"w\"))\n        val wordList13 = wordList12.filter(x => x.contains(\"\
    s\"))\n        val wordList14 = wordList13.filter(x => x.contains(\"p\"))\n  \
    \      val wordList15 = wordList14.filter(x => x.contains(\"b\"))\n        val\
    \ wordList16 = wordList15.filter(x => x.contains(\"f\"))\n        val wordList17\
    \ = wordList16.filter(x => x.contains(\"v\"))\n        val wordList18 = wordList17.filter(x\
    \ => x.contains(\"k\"))\n        val wordList19 = wordList18.filter(x => x.contains(\"\
    j\"))\n        val wordList20 = wordList19.filter(x => x.contains(\"q\"))\n  \
    \      val wordList21 = wordList20.filter(x => x.contains(\"x\"))\n        val\
    \ wordList22 = wordList21.filter(x => x.contains(\"z\"))\n        val wordList23\
    \ = wordList22.filter(x => x.contains(\"c\"))\n        val wordList24 = wordList23.filter(x\
    \ => x.contains(\"m\"))\n        val wordList25 = wordList24.filter(x => x.contains(\"\
    y\"))\n        val wordList26 = wordList25.filter(x => x.contains(\"r\"))\n  \
    \      val wordList27 = wordList26.filter(x => x.contains(\"g\"))\n        val\
    \ wordList28 = wordList27.filter(x => x.contains(\"o\"))\n        val wordList29\
    \ = wordList28.filter(x => x.contains(\"t\"))\n        val wordList30 = wordList29.filter(x\
    \ => x.contains(\"", "        val list = s.split(\" \")\n        val result =\
    \ new mutable.ListBuffer[String]()\n        list.foreach(word => {\n         \
    \   val wordList = word.split(\"\")\n            wordList.foreach(letter => {\n\
    \                if (letter == \"a\" || letter == \"e\" || letter == \"i\" ||\
    \ letter == \"o\" || letter == \"u\" || letter == \"y\") {\n                 \
    \   result.add(word)\n                }\n            })\n        })\n        if\
    \ (result.size == 0) {\n            result.add(\"empty\")\n        }\n       \
    \ if (result.size == n) {\n            result.add(\"full\")\n        }\n     \
    \   result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        list.foreach { word =>\n            val\
    \ count = word.count(_ == 'a')\n            if (count == n) {\n              \
    \  result += (word + \" \")\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.mkString(\" \")\n\
    \        }", "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"n\")) {\n                result.add(word)\n     \
    \       }\n        }\n        return result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelsCount = s.count(vowels.toCharArray)\n        val consonantsCount\
    \ = s.count(consonants.toCharArray)\n        val vowelsCount2 = s.count(vowels.toList)\n\
    \        val consonantsCount2 = s.count(consonants.toList)\n        val vowelsCount3\
    \ = s.count(vowels.toSeq)\n        val consonantsCount3 = s.count(consonants.toSeq)\n\
    \        val vowelsCount4 = s.count(vowels.toSet)\n        val consonantsCount4\
    \ = s.count(consonants.toSet)\n        val vowelsCount5 = s.count(vowels.toMap)\n\
    \        val consonantsCount5 = s.count(consonants.toMap)\n        val vowelsCount6\
    \ = s.count(vowels.toSeq.toList)\n        val consonantsCount6 = s.count(consonants.toSeq.toList)\n\
    \        val vowelsCount7 = s.count(vowels.toSeq.toSet)\n        val consonantsCount7\
    \ = s.count(consonants.toSeq.toSet)\n        val vowelsCount8 = s.count(vowels.toSeq.toMap)\n\
    \        val consonantsCount8 = s.count(consonants.toSeq.toMap)\n        val vowelsCount9\
    \ = s.count(vowels.toSeq.toSet.toList)\n        val consonantsCount9 = s.count(consonants.toSeq.toSet.toList)\n\
    \        val vowelsCount10 = s.count(vowels.toSeq.toMap.toList)\n        val consonantsCount10\
    \ = s.count(consonants.toSeq.toMap.toList)\n        val vowelsCount11 = s.count(vowels.toSeq.toMap.toSet)\n\
    \        val consonantsCount11 = s.count(consonants.toSeq.toMap.toSet)\n     \
    \   val vowelsCount12 = s.count(vowels.toSeq.toMap.toSet.toList)\n        val\
    \ consonantsCount12 = s.count(consonants.toSeq.toMap.toSet.toList)\n        val\
    \ vowelsCount13 = s.count(vowels.toSeq.toMap.toSet.toSet)\n        val consonantsCount13\
    \ = s.", "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val letters = word.split(\"\")\n\
    \            val count = letters.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    return result.toList", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for(i <- 0 until list.size) {\n\
    \            val word = list(i)\n            val count = word.count(_ == 'a')\n\
    \            if(count == n) {\n                result += (word :: \"\")\n    \
    \        }\n        }\n        if(result.isEmpty) {\n            List()\n    \
    \    } else {\n            result.toList\n        }", "        val result = new\
    \ mutable.ListBuffer[String]()\n        val chars = s.toCharArray\n        val\
    \ len = chars.length\n        val charsCount = chars.map(_.toString.length).sum\n\
    \        val consonants = chars.filter(c => c.toString.toChar == 'b')\n      \
    \  val vowels = chars.filter(c => c.toString.toChar == 'a')\n        val consonantsCount\
    \ = consonants.map(_.toString.length).sum\n        val vowelsCount = vowels.map(_.toString.length).sum\n\
    \        val maxConsonants = math.min(consonantsCount, n)\n        val maxVowels\
    \ = math.min(vowelsCount, n)\n        val maxCount = math.min(maxConsonants, maxVowels)\n\
    \        val maxChars = math.min(len, maxCount)\n        val maxCharsCount = maxChars.map(_.toString.length).sum\n\
    \        val maxCharsCountWithConsonants = maxCharsCount + consonantsCount\n \
    \       val maxCharsCountWithVowels = maxCharsCount + vowelsCount\n        val\
    \ maxCharsCountWithConsonantsAndVowels = maxCharsCountWithConsonants + maxCharsCountWithVowels\n\
    \        val maxCharsCountWithConsonantsAndVowelsAndSpaces = maxCharsCountWithConsonantsAndVowels\
    \ + chars.filter(c => c.toString.toChar == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpaces\
    \ = maxCharsCountWithConsonantsAndVowelsAndSpaces + chars.filter(c => c.toString.toChar\
    \ == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpaces\
    \ = maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpaces + chars.filter(c =>\
    \ c.toString.toChar == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpaces + chars.filter(c\
    \ => c.toString.toChar == 's').length\n        val maxCharsCountWithConsonantsAndVowelsAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = maxCharsCountWithConson", "        val list = s.split(\" \")\n        val\
    \ list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x =>\
    \ x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"))\n\
    \        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6 =\
    \ list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.", "        val words = s.split(\" \").filter(_.isLetter)\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- words) {\n           \
    \ val count = count.getOrElse(word, 0) + 1\n            count.put(word, count)\n\
    \            if (count.get(word) == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result toList\n        }", "        val words =\
    \ s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if(count == n) {\n                result += (word + \" \")\n    \
    \        }\n        }\n        if(result.isEmpty) {\n            List()\n    \
    \    } else {\n            result.mkString(\" \")\n        }", "        val list\
    \ = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n       \
    \ val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 = list3.filter(x\
    \ => x.contains(\"E\"))\n        val list5 = list4.filter(x => x.contains(\"I\"\
    ))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n        val list7\
    \ = list6.filter(x => x.contains(\"U\"))\n        val list8 = list7.filter(x =>\
    \ x.contains(\"a\"))\n        val list9 = list8.filter(x => x.contains(\"e\"))\n\
    \        val list10 = list9.filter(x => x.contains(\"i\"))\n        val list11\
    \ = list10.filter(x => x.contains(\"o\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"u\"))\n        val list13 = list12.filter(x => x.contains(\"\
    A\"))\n        val list14 = list13.filter(x => x.contains(\"E\"))\n        val\
    \ list15 = list14.filter(x => x.contains(\"I\"))\n        val list16 = list15.filter(x\
    \ => x.contains(\"O\"))\n        val list17 = list16.filter(x => x.contains(\"\
    U\"))\n        val list18 = list17.filter(x => x.contains(\"a\"))\n        val\
    \ list19 = list18.filter(x => x.contains(\"e\"))\n        val list20 = list19.filter(x\
    \ => x.contains(\"i\"))\n        val list21 = list20.filter(x => x.contains(\"\
    o\"))\n        val list22 = list21.filter(x => x.contains(\"u\"))\n        val\
    \ list23 = list22.filter(x => x.contains(\"A\"))\n        val list24 = list23.filter(x\
    \ => x.contains(\"E\"))\n        val list25 = list24.filter(x => x.contains(\"\
    I\"))\n        val list26 = list25.filter(x => x.contains(\"O\"))\n        val\
    \ list27 = list26.filter(x => x.contains(\"U\"))\n        val list28 = list27.filter(x\
    \ => x.contains(\"a\"))\n        val list29 = list28.filter(x => x.contains(\"\
    e\"))\n        val list30 = list29.filter(x => x.contains(\"i\"))\n        val\
    \ list31 = list30.filter(x => x.contains(\"o\"))\n        val list32 = list31.filter(x\
    \ => x.contains(\"u\"))\n        val list33 = list32.filter(x => x.contains(\"\
    A\"))\n        val list34 = list33.", "        val list = s.split(\" \")\n   \
    \     val result: List[String] = new ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(_ == 'a')\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList", "        val list = s.split(\" \")\n        val\
    \ list2 = list.map(x => x.split(\"\").filter(y => y == \"z\" || y == \"Z\" ||\
    \ y == \"y\" || y == \"Y\" || y == \"x\" || y == \"X\").map(y => y.toLowerCase))\n\
    \        val list3 = list2.map(x => x.filter(y => y == \"a\" || y == \"e\" ||\
    \ y == \"i\" || y == \"o\" || y == \"u\").map(y => y.toLowerCase))\n        val\
    \ list4 = list3.map(x => x.filter(y => y == \"b\" || y == \"c\" || y == \"d\"\
    \ || y == \"f\" || y == \"g\" || y == \"h\" || y == \"j\" || y == \"k\" || y ==\
    \ \"l\" || y == \"m\" || y == \"n\" || y == \"p\" || y == \"q\" || y == \"r\"\
    \ || y == \"s\" || y == \"t\" || y == \"v\" || y == \"w\" || y == \"x\" || y ==\
    \ \"y\" || y == \"z\").map(y => y.toLowerCase))\n        val list5 = list4.map(x\
    \ => x.filter(y => y == \"c\" || y == \"d\" || y == \"f\" || y == \"g\" || y ==\
    \ \"h\" || y == \"j\" || y == \"k\" || y == \"l\" || y == \"m\" || y == \"n\"\
    \ || y == \"p\" || y == \"q\" || y == \"r\" || y == \"s\" || y == \"t\" || y ==\
    \ \"v\" || y == \"w\" || y == \"x\" || y == \"y\" || y == \"z\").map(y => y.toLowerCase))\n\
    \        val list6 = list5.map(x => x.filter(y => y == \"c\" || y == \"d\" ||\
    \ y == \"f\" || y == \"g\" || y == \"h\" || y == \"j\" || y == \"k\" || y == \"\
    l\" || y == \"m\" || y == \"n\" || y == \"p\" || y == \"q\" || y == \"r\" || y\
    \ == \"s\" || y == \"t\" || y == \"v\" || y == \"w\" || y == \"x\" || y == \"\
    y\" || y == \"z\").map(y => y.toLowerCase))\n        val list7 = list6.map(x =>\
    \ x.filter(y => y == \"c\" || y == \"d\" || y == \"f\" || y == \"g\" || y == \"\
    h\" || y == \"j\" || y == \"k\" || y == \"l\" || y == \"m\" || y == \"n\" || y\
    \ == \"p\" || y == \"q\" || y == \"r\" || y == \"s\" || y == \"t\" || y == \"\
    v\" || y == \"w\" || y == \"x\" || y == \"y\" || y == \"z\").map(y => y.toLowerCase))\n\
    \        val list8 = list7.map(x => x.filter(y => y == \"c", "        val words\
    \ = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n  \
    \      words.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }", "        val words = s.split(\" \"\
    )\n        val list = mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            val count = word.count(c => c.isLetter)\n            if(count\
    \ == n) {\n                list += word\n            }\n        }\n        if(list.isEmpty)\
    \ {\n            List()\n        } else {\n            list.toList\n        }",
  "        val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n    \
    \    val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"\
    K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\", \"U\"\
    )\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.toUpperCase).map(_.to",
  "        val list = s.split(\" \").map(_.toUpperCase).toList\n        val result\
    \ = list.filter(_.length == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \").toLowerCase).toList\n        if (result.isEmpty) List(\"\") else result",
  "        val wordsWithNConsonants = s.split(\" \").filter(_.length == n).map(_.toLowerCase)\n\
    \        val wordsWithNConsonantsCount = wordsWithNConsonants.map(_.length).sum\n\
    \        val wordsWithNConsonantsCountAndWords = wordsWithNConsonants.map(w =>\
    \ (w, w.length))\n        val wordsWithNConsonantsCountAndWordsCount = wordsWithNConsonantsCountAndWords.map(w\
    \ => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWords\
    \ = wordsWithNConsonantsCountAndWords.map(w => (w, w.length)).map(w => (w, w.length)).sum\n\
    \        val wordsWithNConsonantsCountAndWordsCountAndWordsCount = wordsWithNConsonantsCountAndWordsCountAndWords.map(w\
    \ => (w, w.length)).map(w => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWords\
    \ = wordsWithNConsonantsCountAndWordsCountAndWords.map(w => (w, w.length)).map(w\
    \ => (w, w.length)).map(w => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCount\
    \ = wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWords.map(w => (w, w.length)).map(w\
    \ => (w, w.length)).map(w => (w, w.length)).map(w => (w, w.length)).sum\n    \
    \    val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWordsCount\
    \ = wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWords.map(w\
    \ => (w, w.length)).map(w => (w, w.length)).map(w => (w, w.length)).map(w => (w,\
    \ w.length)).map(w => (w, w.length)).sum\n        val wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWordsCountAndWords\
    \ = wordsWithNConsonantsCountAndWordsCountAndWordsCountAndWordsCountAndWordsCountAndWords.map(w\
    \ => (w, w.length)).map(w => (w, w.length)).map(w => (w, w.length)).map(w => (w,\
    \ w.length)).map(w => (w, w.length)).map(w => (w, w.length)).sum\n        val\
    \ wordsWithNConsonantsCountAndWord", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(_ == 'a')\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList", "        val wordsWithNConsonants = s.split(\"\\\\s\"\
    ).filter(_.length == n).map(_.toLowerCase)\n        val wordsWithNConsonantsSorted\
    \ = wordsWithNConsonants.sortWith(_.length < _.length)\n        val wordsWithNConsonantsSortedUnique\
    \ = wordsWithNConsonantsSorted.distinct\n        val wordsWithNConsonantsSortedUniqueSorted\
    \ = wordsWithNConsonantsSortedUnique.sortWith(_.length < _.length)\n        val\
    \ wordsWithNConsonantsSortedUniqueSortedReversed = wordsWithNConsonantsSortedUniqueSorted.reverse\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSorted = wordsWithNConsonantsSortedUniqueSortedReversed.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUnique\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSorted.distinct\n        val\
    \ wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSorted = wordsWithNConsonantsSortedUniqueSortedReversedSortedUnique.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversed.reverse\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSorted.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUnique\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUnique.distinct\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSorted\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSorted.sortWith(_.length\
    \ < _.length)\n        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversed\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversed.reverse\n\
    \        val wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversedSorted\
    \ = wordsWithNConsonantsSortedUniqueSortedReversedSortedUniqueSortedReversedSortedUniqueSortedReversedSorted.sortWith(_.length\
    \ < _.length)\n        val ", "        val list = s.split(\" \").toList\n    \
    \    val list = list.filterNot(x => x.isEmpty)\n        val list = list.filterNot(x\
    \ => x.contains(\"a\"))\n        val list = list.filterNot(x => x.contains(\"\
    e\"))\n        val list = list.filterNot(x => x.contains(\"i\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"o\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"u\"))\n        val list = list.filterNot(x => x.contains(\"\
    A\"))\n        val list = list.filterNot(x => x.contains(\"E\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"I\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"O\"))\n        val list = list.filterNot(x => x.contains(\"\
    U\"))\n        val list = list.filterNot(x => x.contains(\"a\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"e\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"i\"))\n        val list = list.filterNot(x => x.contains(\"\
    o\"))\n        val list = list.filterNot(x => x.contains(\"u\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"A\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"E\"))\n        val list = list.filterNot(x => x.contains(\"\
    I\"))\n        val list = list.filterNot(x => x.contains(\"O\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"U\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"a\"))\n        val list = list.filterNot(x => x.contains(\"\
    e\"))\n        val list = list.filterNot(x => x.contains(\"i\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"o\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"u\"))\n        val list = list.filterNot(x => x.contains(\"\
    A\"))\n        val list = list.filterNot(x => x.contains(\"E\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"I\"))\n        val list = list.filterNot(x\
    \ => x.contains(\"O\"))\n        val list = list.filterNot(x => x.contains(\"\
    U\"))\n        val list = list.filterNot(x => x.contains(\"a\"))\n        val\
    \ list = list.filterNot(x => x.contains(\"e\"))\n        val list = list.filterNot(x\
    \ => x.contain", "        val wordList = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = wordList.count(_.toString.toLowerCase in\
    \ consonants)\n        val vowelCount = wordList.count(_.toString.toLowerCase\
    \ in vowels)\n        if (consonantCount == n && vowelCount == n) {\n        \
    \    wordList.filter(_.toString.toLowerCase in consonants)\n        } else {\n\
    \            wordList.filter(_.toString.toLowerCase in consonants).filter(_.toString.toLowerCase\
    \ in vowels)\n        }", "        val list = s.split(\" \").toList\n        val\
    \ result = list.filter(_ contains n).sortBy(_.length)\n        result.map(_.toLowerCase)",
  "        val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        })\n        return result.toList",
  "        val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val wordList = word.split(\"\")\n \
    \           val consonantCount = wordList.count(x => x.toString.toLowerCase ==\
    \ \"a\" || x.toString.toLowerCase == \"e\" || x.toString.toLowerCase == \"i\"\
    \ || x.toString.toLowerCase == \"o\" || x.toString.toLowerCase == \"u\")\n   \
    \         if(consonantCount == n) {\n                result += word\n        \
    \    }\n        }\n        if(result.isEmpty) {\n            List()\n        }\
    \ else {\n            result.toList\n        }", "        val words = s.split(\"\
    \ \").map(_.toUpperCase)\n        val consonants = List(\"B\", \"C\", \"D\", \"\
    F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"\
    S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWords = words.filter(word => consonants.contains(word))\n\
    \        val vowelWords = words.filter(word => vowels.contains(word))\n      \
    \  val consonantWordCount = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordCount = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount2 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount2 = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount3 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount3 = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount4 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount4 = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsCount5 = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount5 = vowelWords.map(_.toUpperCase).map(",
  "        val wordList = s.split(\" \").toList\n        val resultList = mutable.ListBuffer[String]()\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val vowelsSet = vowels.toSet\n        val consonantsSet = consonants.toSet\n\
    \        val vowelsCount = vowelsSet.count\n        val consonantsCount = consonantsSet.count\n\
    \        val consonantsCountInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val vowelsCountInWord = vowelsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWordInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val vowelsCountInWordInWord = vowelsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWordInWordInWord = consonantsSet.count(x => wordList.contains(x))\n\
    \        val consonantsCountInWordInWordInWordInWord = consonantsSet.count(x =>\
    \ wordList.contains(x))\n        val vowelsCountInWordInWordInWordInWord = vowelsSet.count(x\
    \ => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val vowelsCountInWordInWordInWordInWordInWordInWord\
    \ = vowelsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = consonantsSet.count(x => wordList.contains(x))\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsSet.count(x => wordList.contains(x))\n        val consonantsCountInWordInWordInWordInWordInWordInWord",
  "        val list = s.split(\" \").toList\n        val list2 = list.filter(_ =>\
    \ _.length == n).flatMap(_.split(\"\")).distinct\n        list2.toList", "   \
    \     val wordList = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until wordList.length){\n            val word = wordList(i)\n\
    \            val consonants = word.filter(x => x.toString.toChar == 'a')\n   \
    \         if(consonants.length == n){\n                result += (word :: Nil)\n\
    \            }\n        }\n        return result.toList", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.to",
  "        val wordsWithConsonants = \n            s.split(\" \").filter(_.forall(c\
    \ => c != \" \")).map(word => \n                word.split(\"\").filter(_.forall(c\
    \ => c != \"c\" && c != \"C\")).map(word => \n                    word.split(\"\
    \").filter(_.forall(c => c != \"h\" && c != \"H\")).map(word => \n           \
    \             word.split(\"\").filter(_.forall(c => c != \"a\" && c != \"A\")).map(word\
    \ => \n                            word.split(\"\").filter(_.forall(c => c !=\
    \ \"l\" && c != \"L\")).map(word => \n                                word.split(\"\
    \").filter(_.forall(c => c != \"e\" && c != \"E\")).map(word => \n           \
    \                         word.split(\"\").filter(_.forall(c => c != \"o\" &&\
    \ c != \"O\")).map(word => \n                                        word.split(\"\
    \").filter(_.forall(c => c != \"n\" && c != \"N\")).map(word => \n           \
    \                                 word.split(\"\").filter(_.forall(c => c != \"\
    s\" && c != \"S\")).map(word => \n                                           \
    \     word.split(\"\").filter(_.forall(c => c != \"m\" && c != \"M\")).map(word\
    \ => \n                                                    word.split(\"\").filter(_.forall(c\
    \ => c != \"a\" && c != \"A\")).map(word => \n                               \
    \                         word.split(\"\").filter(_.forall(c => c != \"l\" &&\
    \ c != \"L\")).map(word => \n                                                \
    \            word.split(\"\").filter(_.forall(c => c != \"e\" && c != \"E\")).map(word\
    \ => \n                                                                word.split(\"\
    \").filter(_.forall(c => c != \"o\" && c != \"O\")).map(word => \n           \
    \                                                         word.split(\"\").filter(_.forall(c\
    \ => c != \"n\" && c != \"N\")).map(word => \n                               \
    \                                         word.split(\"\").filter(_.forall(c =>\
    \ c != \"s\" && c != \"S\")).map(word => \n                                  \
    \                                          word.split(\"\").filter(_.forall(c\
    \ => c != \"m\" && c != \"M\")).map(word => \n                               \
    \                                                 word.split(\"\").filter(_.forall(c\
    \ => c != \"a\" && c != \"A\")).map(word => \n                               \
    \                                                     word.split(\"\").filter(_.forall(c\
    \ => c != \"l\" && c != \"L\")).map(word => \n                               \
    \                                                         word.split(\"\").filter(_.forall(c\
    \ => c != \"e\" && c != \"E\")).map(word => \n                               \
    \                                                             word.split(\"\"\
    ).filter(_.forall(c => c != \"o\" && c != \"O\")).", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(\"a\").toLong + word.count(\"\
    e\").toLong + word.count(\"i\").toLong + word.count(\"o\").toLong + word.count(\"\
    u\").toLong\n            if (count == n) result += word\n        }\n        return\
    \ result.toList", "        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val result = list.filter(_ => consonants.contains(_))\n    \
    \    val result2 = list.filter(_ => vowels.contains(_))\n        if (result2.length\
    \ == n) result2 else result", "        val list = s.split(\" \").toList\n    \
    \    val result = new mutable.ListBuffer[String]()\n        val list = list.filter(x\
    \ => x.contains(\"a\"))\n        val list = list.filter(x => x.contains(\"e\"\
    ))\n        val list = list.filter(x => x.contains(\"i\"))\n        val list =\
    \ list.filter(x => x.contains(\"o\"))\n        val list = list.filter(x => x.contains(\"\
    u\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"n\"))\n        val list = list.filter(x => x.contains(\"\
    d\"))\n        val list = list.filter(x => x.contains(\"g\"))\n        val list\
    \ = list.filter(x => x.contains(\"s\"))\n        val list = list.filter(x => x.contains(\"\
    h\"))\n        val list = list.filter(x => x.contains(\"w\"))\n        val list\
    \ = list.filter(x => x.contains(\"c\"))\n        val list = list.filter(x => x.contains(\"\
    m\"))\n        val list = list.filter(x => x.contains(\"p\"))\n        val list\
    \ = list.filter(x => x.contains(\"b\"))\n        val list = list.filter(x => x.contains(\"\
    f\"))\n        val list = list.filter(x => x.contains(\"v\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"t\"))\n        val list\
    \ = list.filter(x => x.contains(\"q\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"s\"))\n        val list\
    \ = list.filter(x => x.contains(\"r\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"t\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"s\"))\n        val list = list.filter(x => x.contains(\"\
    r\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"z\"))\n        val list = list.filter(x => x.contains(\"",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        if (result.size == 0) {\n            List()\n\
    \        } else {\n            result.take(n).toList\n        }", "        val\
    \ words = s.split(\" \").filter(_.nonEmpty)\n        val consonants = List(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount\
    \ = words.map(_.toUpperCase).map(_.toChar).filter(c => consonants.contains(c)).count\n\
    \        val vowelCount = words.map(_.toUpperCase).map(_.toChar).filter(c => vowels.contains(c)).count\n\
    \        if (consonantCount == n && vowelCount == n) {\n            words.filter(_.toUpperCase).map(_.toChar).filter(c\
    \ => consonants.contains(c)).sortBy(c => c)\n        } else {\n            List()\n\
    \        }", "        val list = s.split(\" \").toList\n        val list = list.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    n\") || x.contains(\"h\") || x.contains(\"l\") || x.contains(\"d\") || x.contains(\"\
    r\") || x.contains(\"m\") || x.contains(\"p\") || x.contains(\"s\") || x.contains(\"\
    t\") || x.contains(\"y\"))\n        val list = list.filter(x => x.contains(\"\
    c\") || x.contains(\"k\") || x.contains(\"m\") || x.contains(\"p\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"y\"))\n        val list = list.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    n\") || x.contains(\"h\") || x.contains(\"l\") || x.contains(\"d\") || x.contains(\"\
    r\") || x.contains(\"m\") || x.contains(\"p\") || x.contains(\"s\") || x.contains(\"\
    t\") || x.contains(\"y\"))\n        val list = list.filter(x => x.contains(\"\
    c\") || x.contains(\"k\") || x.contains(\"m\") || x.contains(\"p\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"y\"))\n        val list = list.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    n\") || x.contains(\"h\") || x.contains(\"l\") || x.contains(\"d\") || x.contains(\"\
    r\") || x.contains(\"m\") || x.contains(\"p\") || x.contains(\"s\") || x.contains(\"\
    t\") || x.contains(\"y\"))\n        val list = list.filter(x => x.contains(\"\
    c\") || x.contains(\"k\") || x.contains(\"m\") || x.contains(\"p\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"y\"))\n        val list = list.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list = list.filter(x => x.", "       \
    \ val list = s.split(\" \").toList\n        val list2 = list.filterNot(_.isEmpty)\n\
    \        val list3 = list2.filter(_ => list2.count(_ == n) == n)\n        list3.toList",
  "        val list = s.split(\" \").toList\n        val result: List[String] = new\
    \ mutable.ListBuffer[String]()\n        list.foreach(x => {\n            val count\
    \ = x.count(_ == 'a')\n            val count = x.count(_ == 'e')\n           \
    \ val count = x.count(_ == 'i')\n            val count = x.count(_ == 'o')\n \
    \           val count = x.count(_ == 'u')\n            if (count == n) result\
    \ += x\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { x =>\n            val count = x.count(_ == 'a')\n            if (count ==\
    \ n) {\n                result += x\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = list.filter(_ contains n).map(_.split(\"\").takeWhile(_ != n).mkString(\"\"\
    ))\n        if (result.isEmpty) Nil\n        else result", "        val list =\
    \ s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n    \
    \    list.foreach { x =>\n            val count = x.count(_ == 'a')\n        \
    \    if (count == n) result += x\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList", "        val words = s.split(\" \").toList\n   \
    \     val list = words.filter(word => word.count(_ == 'a') >= n).toList\n    \
    \    list.sortWith(_.length < _.length)", "        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list3\
    \ = list2.filter(x => x.contains(\"n\"))\n        val list4 = list3.filter(x =>\
    \ x.contains(\"h\"))\n        val list5 = list4.filter(x => x.contains(\"l\"))\n\
    \        val list6 = list5.filter(x => x.contains(\"a\"))\n        val list7 =\
    \ list6.filter(x => x.contains(\"e\"))\n        val list8 = list7.filter(x =>\
    \ x.contains(\"i\"))\n        val list9 = list8.filter(x => x.contains(\"o\"))\n\
    \        val list10 = list9.filter(x => x.contains(\"u\"))\n        val list11\
    \ = list10.filter(x => x.contains(\"n\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"h\"))\n        val list13 = list12.filter(x => x.contains(\"\
    l\"))\n        val list14 = list13.filter(x => x.contains(\"a\"))\n        val\
    \ list15 = list14.filter(x => x.contains(\"e\"))\n        val list16 = list15.filter(x\
    \ => x.contains(\"i\"))\n        val list17 = list16.filter(x => x.contains(\"\
    o\"))\n        val list18 = list17.filter(x => x.contains(\"u\"))\n        val\
    \ list19 = list18.filter(x => x.contains(\"n\"))\n        val list20 = list19.filter(x\
    \ => x.contains(\"h\"))\n        val list21 = list20.filter(x => x.contains(\"\
    l\"))\n        val list22 = list21.filter(x => x.contains(\"a\"))\n        val\
    \ list23 = list22.filter(x => x.contains(\"e\"))\n        val list24 = list23.filter(x\
    \ => x.contains(\"i\"))\n        val list25 = list24.filter(x => x.contains(\"\
    o\"))\n        val list26 = list25.filter(x => x.contains(\"u\"))\n        val\
    \ list27 = list26.filter(x => x.contains(\"n\"))\n        val list28 = list27.filter(x\
    \ => x.contains(\"h\"))\n        val list29 = list28.filter(x => x.contains(\"\
    l\"))\n        val list30 = list29.filter(x => x.contains(\"a\"))\n        val\
    \ list31 = list30.filter(x => x.contains(\"e\"))\n        val list32 = list31.filter(x\
    \ => x.contain", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.split(\"[^aeiou]\").length\n            if (count == n)\
    \ {\n                result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val words = s.split(\" \")\n        val list = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if(count == n) {\n                list += word\n            }\n \
    \       }\n        if(list.isEmpty) {\n            List()\n        } else {\n\
    \            list.toList\n        }", "        val list = s.split(\" \")\n   \
    \     val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) {\n                result += (word + \" \")\n            }\n  \
    \      }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.mkString(\" \")\n        }", "        val list = s.split(\"\
    \ \").toList\n        val list2 = list.map(x => x.toUpperCase)\n        val list3\
    \ = list2.filter(x => x.contains(\"A\"))\n        val list4 = list3.filter(x =>\
    \ x.contains(\"E\"))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n\
    \        val list6 = list5.filter(x => x.contains(\"O\"))\n        val list7 =\
    \ list6.filter(x => x.contains(\"U\"))\n        val list8 = list7.filter(x =>\
    \ x.contains(\"a\"))\n        val list9 = list8.filter(x => x.contains(\"e\"))\n\
    \        val list10 = list9.filter(x => x.contains(\"i\"))\n        val list11\
    \ = list10.filter(x => x.contains(\"o\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"u\"))\n        val list13 = list12.filter(x => x.contains(\"\
    A\"))\n        val list14 = list13.filter(x => x.contains(\"E\"))\n        val\
    \ list15 = list14.filter(x => x.contains(\"I\"))\n        val list16 = list15.filter(x\
    \ => x.contains(\"O\"))\n        val list17 = list16.filter(x => x.contains(\"\
    U\"))\n        val list18 = list17.filter(x => x.contains(\"a\"))\n        val\
    \ list19 = list18.filter(x => x.contains(\"e\"))\n        val list20 = list19.filter(x\
    \ => x.contains(\"i\"))\n        val list21 = list20.filter(x => x.contains(\"\
    o\"))\n        val list22 = list21.filter(x => x.contains(\"u\"))\n        val\
    \ list23 = list22.filter(x => x.contains(\"A\"))\n        val list24 = list23.filter(x\
    \ => x.contains(\"E\"))\n        val list25 = list24.filter(x => x.contains(\"\
    I\"))\n        val list26 = list25.filter(x => x.contains(\"O\"))\n        val\
    \ list27 = list26.filter(x => x.contains(\"U\"))\n        val list28 = list27.filter(x\
    \ => x.contains(\"a\"))\n        val list29 = list28.filter(x => x.contains(\"\
    e\"))\n        val list30 = list29.filter(x => x.contains(\"i\"))\n        val\
    \ list31 = list30.filter(x => x.contains(\"o\"))\n        val list32 = list31.filter(x\
    \ => x.contains(\"u\"))\n        val list33 = list32.filter(x => x.contains(\"\
    A\"))\n        val list34 = ", "        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val list = words.filter(x => x.contains(n)).map(x => x.split(\"\").filter(y\
    \ => y.contains(n)).mkString(\"\").toLowerCase).toList\n        list.filter(x\
    \ => x.length == n).map(x => x.split(\"\").filter(y => y.contains(n)).mkString(\"\
    \").toLowerCase).toList", "        val vowels = \"aeiouAEIOU\"\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        val vowelCount = s.count(vowels)\n\
    \        val consonantCount = s.count(consonants)\n        val wordCount = vowelCount\
    \ + consonantCount\n        val wordList = s.split(\" \").filter(_.length == wordCount)\n\
    \        val consonantList = wordList.map(word => word.count(consonants))\n  \
    \      val vowelList = wordList.map(word => word.count(vowels))\n        val consonantCount\
    \ = consonantList.sum\n        val vowelCount = vowelList.sum\n        val wordList\
    \ = wordList.filter(word => word.count(consonants) == n)\n        wordList.map(word\
    \ => word.split(consonants))", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) result += word\n        })\n        if (result.isEmpty) List()\n        else\
    \ result.toList", "        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list2 = list.filter(x => x.contains(\"A\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"E\"))\n        val list4 = list.filter(x => x.contains(\"\
    I\"))\n        val list5 = list.filter(x => x.contains(\"O\"))\n        val list6\
    \ = list.filter(x => x.contains(\"U\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list8 = list.filter(x => x.contains(\"e\"))\n\
    \        val list9 = list.filter(x => x.contains(\"i\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"o\"))\n        val list11 = list.filter(x => x.contains(\"\
    u\"))\n        val list12 = list.filter(x => x.contains(\"A\"))\n        val list13\
    \ = list.filter(x => x.contains(\"E\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"I\"))\n        val list15 = list.filter(x => x.contains(\"O\"))\n\
    \        val list16 = list.filter(x => x.contains(\"U\"))\n        val list17\
    \ = list.filter(x => x.contains(\"a\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list19 = list.filter(x => x.contains(\"i\"))\n\
    \        val list20 = list.filter(x => x.contains(\"o\"))\n        val list21\
    \ = list.filter(x => x.contains(\"u\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"A\"))\n        val list23 = list.filter(x => x.contains(\"E\"))\n\
    \        val list24 = list.filter(x => x.contains(\"I\"))\n        val list25\
    \ = list.filter(x => x.contains(\"O\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"U\"))\n        val list27 = list.filter(x => x.contains(\"a\"))\n\
    \        val list28 = list.filter(x => x.contains(\"e\"))\n        val list29\
    \ = list.filter(x => x.contains(\"i\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list31 = list.filter(x => x.contains(\"u\"))\n\
    \        val list32 = list.filter(x => x.contains(\"A\"))\n        val list33\
    \ = list.filter(x => x.contains(\"E\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"I\"))\n        val list35 = list.filter(x => x.contains(\"O\"))",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val count = new mutable.HashMap[String, Long]()\n        for (word <-\
    \ list) {\n            val count = count.get(word)\n            if (count == null)\
    \ {\n                count.put(n, 1l)\n            } else {\n                count.put(n,\
    \ count.get + l)\n            }\n        }\n        val keys = count.keys.toList\n\
    \        val values = count.values.toList\n        for (key <- keys) {\n     \
    \       if (values == key.filter(_ == n)) {\n                result += key\n \
    \           }\n        }\n        result.toList", "        val wordList = s.split(\"\
    \ \").map(_.toUpperCase)\n        val consonants = List(\"B\", \"C\", \"D\", \"\
    F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"\
    S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n        val consonantCount = consonants.count(_\
    \ == s.charAt(0))\n        val vowelCount = vowels.count(_ == s.charAt(0))\n \
    \       val consonantWords = wordList.filter(word => consonants.count(_ == word.charAt(0))\
    \ == n)\n        val vowelWords = wordList.filter(word => vowels.count(_ == word.charAt(0))\
    \ == n)\n        val consonantWordsCount = consonantWords.size\n        val vowelWordsCount\
    \ = vowelWords.size\n        if (consonantWordsCount == 0 && vowelWordsCount ==\
    \ 0) {\n            List()\n        } else if (consonantWordsCount == 0 && vowelWordsCount\
    \ > 0) {\n            vowelWords\n        } else if (consonantWordsCount > 0 &&\
    \ vowelWordsCount == 0) {\n            consonantWords\n        } else {\n    \
    \        consonantWords ++ vowelWords\n        }", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c >= 'a' && c <= 'z' || c >= 'A' && c\
    \ <= 'Z')\n            if (count == n) {\n                result += word\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        val\
    \ vowels = \"aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    .toList\n        val vowelCount = list.count(x => vowels.contains(x))\n      \
    \  val consonantCount = list.count(x => consonants.contains(x))\n        val totalCount\
    \ = vowelCount + consonantCount\n        if (totalCount > n) {\n            list.filter(x\
    \ => vowels.contains(x)).take(n).foreach(x => result += x)\n        } else {\n\
    \            list.filter(x => consonants.contains(x)).take(n).foreach(x => result\
    \ += x)\n        }\n        result.toList", "        val words: List[String] =\
    \ s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n        val result: List[String]\
    \ = words.filter(word => word.count(_ == 'a') <= n).distinct\n        result.filter(word\
    \ => word.count(_ == 'a') > n)", "        val list = s.split(\" \").toList\n \
    \       val wordList = list.filter(x => x.toString.toList.size == n)\n       \
    \ wordList.map(x => x.split(\"\").filter(x => x.toString.toList.size == n).mkString(\"\
    \ \"))", "        val words = s.split(\" \").filter(_.nonEmpty)\n        val consonants\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount\
    \ = words.map(_.filter(c => consonants.contains(c))).map(_.length).sum\n     \
    \   val vowelCount = words.map(_.filter(c => vowels.contains(c))).map(_.length).sum\n\
    \        val consonantWords = words.map(_.filter(c => consonants.contains(c))).filter(_.length\
    \ == n).map(_.toLowerCase)\n        val vowelWords = words.map(_.filter(c => vowels.contains(c))).filter(_.length\
    \ == n).map(_.toLowerCase)\n        val consonantWordsCount = consonantWords.map(_.length).sum\n\
    \        val vowelWordsCount = vowelWords.map(_.length).sum\n        val consonantWordsCountWithVowels\
    \ = consonantWordsCount + vowelWordsCount\n        val vowelWordsCountWithConsonants\
    \ = vowelWordsCount + consonantWordsCount\n        val consonantWordsCountWithVowelsAndConsonants\
    \ = consonantWordsCountWithVowels + vowelWordsCountWithConsonants\n        val\
    \ vowelWordsCountWithConsonantsAndVowels = vowelWordsCountWithConsonants + consonantWordsCountWithVowels\n\
    \        val consonantWordsCountWithVowelsAndConsonantsAndVowels = consonantWordsCountWithVowelsAndConsonants\
    \ + vowelWordsCountWithConsonantsAndVowels\n        val vowelWordsCountWithConsonantsAndVowelsAndConsonants\
    \ = vowelWordsCountWithConsonantsAndVowels + consonantWordsCountWithVowelsAndConsonantsAndVowels\n\
    \        val consonantWordsCountWithVowelsAndConsonantsAndVowelsAndConsonants\
    \ = consonantWordsCountWithVowelsAndConsonantsAndVowels + vowelWordsCountWithConsonantsAndVowelsAndConsonants\n\
    \        val vowelWordsCountWithConsonantsAndVowel", "        val wordsWithNConsonants\
    \ = s.split(\" \").filter(_.length == n).map(_.toLowerCase)\n        wordsWithNConsonants.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        })\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val words = s.split(\" \").toList\n\
    \        val list = mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >= 'A'\
    \ && c <= 'Z')\n            if (count == n) {\n                list += word\n\
    \            }\n        }\n        if (list.size == 0) {\n            List()\n\
    \        } else {\n            list.toList\n        }", "        val result =\
    \ new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n        val\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCount = s.count(vowels)\n\
    \        val consonantCount = s.count(consonants)\n        val vowelCountInString\
    \ = vowelCount / n\n        val consonantCountInString = consonantCount / n\n\
    \        val consonantCountInString2 = consonantCount % n\n        val vowelCountInString2\
    \ = vowelCount % n\n        val consonantCountInString3 = consonantCount % n\n\
    \        val vowelCountInString3 = vowelCount % n\n        val consonantCountInString4\
    \ = consonantCount % n\n        val vowelCountInString4 = vowelCount % n\n   \
    \     val consonantCountInString5 = consonantCount % n\n        val vowelCountInString5\
    \ = vowelCount % n\n        val consonantCountInString6 = consonantCount % n\n\
    \        val vowelCountInString6 = vowelCount % n\n        val consonantCountInString7\
    \ = consonantCount % n\n        val vowelCountInString7 = vowelCount % n\n   \
    \     val consonantCountInString8 = consonantCount % n\n        val vowelCountInString8\
    \ = vowelCount % n\n        val consonantCountInString9 = consonantCount % n\n\
    \        val vowelCountInString9 = vowelCount % n\n        val consonantCountInString10\
    \ = consonantCount % n\n        val vowelCountInString10 = vowelCount % n\n  \
    \      val consonantCountInString11 = consonantCount % n\n        val vowelCountInString11\
    \ = vowelCount % n\n        val consonantCountInString12 = consonantCount % n\n\
    \        val vowelCountInString12 = vowelCount % n\n        val consonantCountInString13\
    \ = consonantCount % n\n        val vowelCountInString13 = vowelCount % n\n  \
    \      val consonantCountInString14 = consonantCount % n\n        val vowelCountInString14\
    \ = vowelCount % n\n        val consonantCountInString15 = consonantCount % n\n\
    \        val vowelCountInString15 = vowelCount % n\n        val consonantCountInString16\
    \ = consonantCount % n\n        val vowelCountInString16 = vowelCount ", "   \
    \     val words = s.split(\" \").toList\n        val wordsWithConsonants = words.filter(word\
    \ => word.forall(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'))\n\
    \        val wordsWithConsonantsCount = wordsWithConsonants.map(word => word.count(c\
    \ => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'))\n        val wordsWithConsonantsCountAndSum\
    \ = wordsWithConsonantsCount.zip(wordsWithConsonantsCount.map(_.sum))\n      \
    \  val wordsWithConsonantsCountAndSumCount = wordsWithConsonantsCountAndSum.filter(x\
    \ => x._2 == x._1)\n        val wordsWithConsonantsCountAndSumCountSorted = wordsWithConsonantsCountAndSumCount\n\
    \            .sortWith((x, y) => x._1 < y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversed\
    \ = wordsWithConsonantsCountAndSumCount\n            .sortWith((x, y) => x._1\
    \ > y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCount\
    \ = wordsWithConsonantsCountAndSumCountSortedReversed\n            .filter(x =>\
    \ x._2 == x._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSorted\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCount\n            .sortWith((x,\
    \ y) => x._1 < y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n   \
    \         .sortWith((x, y) => x._1 > y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedCount\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n   \
    \         .filter(x => x._2 == x._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedSortedReversed\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversed\n   \
    \         .sortWith((x, y) => x._1 < y._1)\n        val wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedSortedReversedCount\
    \ = wordsWithConsonantsCountAndSumCountSortedReversedCountSortedReversedSortedReversed\n\
    \            .sortWith((x, y) => x._1 > y._1)\n        val wordsWithConson", " \
    \       val wordList = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        wordList.foreach(word => {\n            val wordList = word.split(\"\
    [^aeiou]\").map(_.toLowerCase).toList\n            wordList.foreach(c => {\n \
    \               if (c.length == n) {\n                    result += word\n   \
    \             }\n            })\n        })\n        return result.toList"]
stop_tokens:
- "\n    }\n"
