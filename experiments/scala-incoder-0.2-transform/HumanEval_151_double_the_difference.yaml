name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n\
  \    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong,\
  \ 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
  \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
  \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x)\n        result.sum",
  "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0).toList\n  \
    \      val odd = lst.filter(x => x % 2 != 0).toList\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val diff\
    \ = evenSum - oddSum\n        sum + diff", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n        sum",
  "        val sum = 0\n        val oddSum = 0\n        lst.foreach(x => {\n     \
    \       if (x % 2 == 1) {\n                sum += x\n                oddSum +=\
    \ x\n            }\n        })\n        if (sum > 0) {\n            oddSum\n \
    \       } else {\n            0\n        }", "        val sum = 0\n        val\
    \ nums = lst.filter(_ % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x\
    \ => sum += x)\n        sum", "        val result = lst.foldLeft(0l) { (sum, elem)\
    \ =>\n            if (elem % 2 == 1) sum + elem\n            else sum\n      \
    \  }\n        result", "        if (lst.nonEmpty) {\n            val sum = 0\n\
    \            val even = lst.filter(x => x % 2 == 0)\n            val odd = lst.filter(x\
    \ => x % 2 != 0)\n            val evenSum = even.map(x => x * x).sum\n       \
    \     val oddSum = odd.map(x => x * x).sum\n            val sum = evenSum + oddSum\n\
    \            sum\n        } else {\n            0\n        }", "        val sum\
    \ = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.foldLeft(0l) { (sum, elem) => sum + elem\
    \ * elem }\n        val oddSum = odd.foldLeft(0l) { (sum, elem) => sum + elem\
    \ * elem }\n        val result = evenSum - oddSum\n        result", "        val\
    \ sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n   \
    \     sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       if(lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = lst(i + (lst.size % 2 ==\
    \ 0 ? 1 : 0))\n            if(x % 2 == 0 && y % 2 == 0) {\n                sum\
    \ += x * x\n            }\n        }\n        sum", "        val sum = 0\n   \
    \     val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n\
    \        val sum = evenSumSquare + oddSumSquare\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        if(x % 2 == 1) {\n                sum += x\n            }\n        }\n\
    \        sum.toLong", "        val sum = 0\n        lst.foreach(x => if (x % 2\
    \ == 1) sum += x * x else 0)\n        sum", "        val result = lst.foldLeft(0l)\
    \ { (sum, item) => if (item % 2 == 1) sum + item * item else sum }\n        result",
  "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n\
    \            val x = lst(i)\n            if(x % 2 == 1) {\n                sum\
    \ += x\n            }\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
