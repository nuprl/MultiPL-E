name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n\
  \    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong,\
  \ 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
  \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
  \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x)\n        result.sum",
  "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0).toList\n  \
    \      val odd = lst.filter(x => x % 2 != 0).toList\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val diff\
    \ = evenSum - oddSum\n        sum + diff", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n        sum",
  "        val sum = 0\n        val oddSum = 0\n        lst.foreach(x => {\n     \
    \       if (x % 2 == 1) {\n                sum += x\n                oddSum +=\
    \ x\n            }\n        })\n        if (sum > 0) {\n            oddSum\n \
    \       } else {\n            0\n        }", "        val sum = 0\n        val\
    \ nums = lst.filter(_ % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x\
    \ => sum += x)\n        sum", "        val result = lst.foldLeft(0l) { (sum, elem)\
    \ =>\n            if (elem % 2 == 1) sum + elem\n            else sum\n      \
    \  }\n        result", "        if (lst.nonEmpty) {\n            val sum = 0\n\
    \            val even = lst.filter(x => x % 2 == 0)\n            val odd = lst.filter(x\
    \ => x % 2 != 0)\n            val evenSum = even.map(x => x * x).sum\n       \
    \     val oddSum = odd.map(x => x * x).sum\n            val sum = evenSum + oddSum\n\
    \            sum\n        } else {\n            0\n        }", "        val sum\
    \ = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.foldLeft(0l) { (sum, elem) => sum + elem\
    \ * elem }\n        val oddSum = odd.foldLeft(0l) { (sum, elem) => sum + elem\
    \ * elem }\n        val result = evenSum - oddSum\n        result", "        val\
    \ sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n   \
    \     sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       if(lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = lst(i + (lst.size % 2 ==\
    \ 0 ? 1 : 0))\n            if(x % 2 == 0 && y % 2 == 0) {\n                sum\
    \ += x * x\n            }\n        }\n        sum", "        val sum = 0\n   \
    \     val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n\
    \        val sum = evenSumSquare + oddSumSquare\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        if(x % 2 == 1) {\n                sum += x\n            }\n        }\n\
    \        sum.toLong", "        val sum = 0\n        lst.foreach(x => if (x % 2\
    \ == 1) sum += x * x else 0)\n        sum", "        val result = lst.foldLeft(0l)\
    \ { (sum, item) => if (item % 2 == 1) sum + item * item else sum }\n        result",
  "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n\
    \            val x = lst(i)\n            if(x % 2 == 1) {\n                sum\
    \ += x\n            }\n        }\n        sum", "        val sum = 0\n       \
    \ val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val result = evenSum - oddSum\n        result", "   \
    \     val result = lst.foldLeft(0l) { (sum, num) =>\n            if (num % 2 ==\
    \ 1) sum + num\n            else sum\n        }\n        result", "        val\
    \ nums = lst.filter(_ % 2 == 1)\n        val sum = nums.sum\n        val squares\
    \ = nums.map(x => x * x)\n        val result = squares.filter(_ % 2 == 1).sum\n\
    \        result + (sum - result)", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val even = lst.filter(_ % 2 == 0).toList\n\
    \        val odd = lst.filter(_ % 2 != 0).toList\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val sum = 0\n\
    \        val nums = lst.filter(_ % 2 == 1)\n        val numsSum = nums.sum\n \
    \       val numsSumSquare = numsSum * numsSum\n        nums.foreach(x => sum +=\
    \ Math.pow(x, 2))\n        sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        sum", "        val sum = 0\n     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        sum", "        val sum = 0\n        for(i <- lst)\
    \ {\n            if(i % 2 == 1) {\n                sum += i\n            }\n \
    \       }\n        sum", "        val sum = 0\n        val oddList = lst.filter(x\
    \ => x % 2 != 0).toList\n        val evenList = lst.filter(x => x % 2 == 0).toList\n\
    \        val evenSum = evenList.map(x => x * x).sum\n        val oddSum = oddList.map(x\
    \ => x * x).sum\n        val result = evenSum + oddSum\n        result", "   \
    \     val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n \
    \       val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum + oddSum\n\
    \        sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0\n        val oddSum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val f = lst(i)\n    \
    \        if(f < 0f || f % 1f != 0f) {\n                sum += f\n            \
    \    oddSum += f\n            }\n        }\n        if(lst.size == 0) {\n    \
    \        return 0\n        }\n        sum * sum", "        val sum = 0\n     \
    \   lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", "   \
    \     val result = mutable.ListBuffer.empty[Float]\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  result += x\n            }\n        }\n        if(result.isEmpty) {\n     \
    \       return 0\n        }\n        val sum = result.sum\n        val squareSum\
    \ = result.map(x => x * x).sum\n        return sum - squareSum", "        val\
    \ sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n   \
    \     sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       val f = lst(i)\n            if(f != 0l) {\n                val x = math.abs(f)\n\
    \                if(x % 2 == 1) {\n                    sum += x\n            \
    \    }\n            }\n        }\n        sum", "        val sum = 0\n       \
    \ val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val result = evenSum - oddSum\n        result", "   \
    \     val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n   \
    \             sum += i\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n       \
    \ sum", "        val sum = 0\n        for(i <- lst) {\n            if(i % 2 ==\
    \ 1) {\n                sum += i\n            }\n        }\n        sum", "  \
    \      val sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        lst.foreach(x => if (x % 2 != 1) sum\
    \ += x)\n        if (odds.isEmpty) 0\n        else sum * sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val n = lst(i)\n    \
    \        if(n % 2 == 1) {\n                sum += n\n            }\n        }\n\
    \        sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n  \
    \      val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n \
    \       val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result", "        val sum = 0l\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x*x else sum)\n        sum", "        val sum = 0\n\
    \        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val result = evenSum + oddSum\n  \
    \      result", "        val sum = 0\n        for(i <- 0 until lst.size) {\n \
    \           if(lst(i) % 2 == 1) {\n                sum += lst(i)\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        val oddSum = 0\n \
    \       for(i <- 0 until lst.size) {\n            val x = lst(i)\n           \
    \ if(x % 2 == 1) {\n                sum += x\n                oddSum += x\n  \
    \          }\n        }\n        if(sum > 0) {\n            return sum * sum\n\
    \        }\n        if(oddSum > 0) {\n            return oddSum * oddSum\n   \
    \     }\n        return 0", "        val sum = 0\n        for(i <- lst) {\n  \
    \          sum += i * i\n        }\n        sum", "        val nums = lst.filter(_\
    \ % 2 == 1).toList\n        if (nums.isEmpty) 0\n        else nums.sum * nums.sum",
  "        val sum = 0\n        val oddSum = 0\n        for(i <- lst) {\n        \
    \    if (i % 2 == 1) {\n                sum += i\n                oddSum += i\n\
    \            }\n        }\n        if (sum > 0) {\n            return sum * sum\n\
    \        } else {\n            return oddSum * oddSum\n        }", "        if\
    \ (lst.nonEmpty) {\n            val sum = 0\n            lst.foreach(x => if (x\
    \ % 2 == 1) sum += x * x else 0)\n            sum\n        } else {\n        \
    \    0\n        }", "        val sum = 0\n        val odds = mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        val result = odds.foldLeft(0l)\
    \ { (sum, v) => sum + v * v }\n        result", "        val sum = 0\n       \
    \ val evenSum = 0\n        val oddSum = 0\n        for(i <- lst) {\n         \
    \   if (i % 2 == 0) {\n                evenSum += i\n            } else {\n  \
    \              oddSum += i\n            }\n        }\n        val result = evenSum\
    \ + oddSum\n        if (result == 0) {\n            result\n        } else {\n\
    \            result.toLong\n        }", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x*x else 0)\n        sum", "        val sum = 0\n\
    \        val oddSum = 0\n        for(i <- 0 until lst.size) {\n            val\
    \ f = lst(i)\n            if(f < 0f || f % 1f != 0f) {\n                sum +=\
    \ f\n            } else {\n                oddSum += f\n            }\n      \
    \  }\n        if(lst.size == 0) {\n            return 0\n        }\n        sum\
    \ + oddSum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n  \
    \      val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n \
    \       val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd = evenSumSquare\
    \ + oddSumSquare\n        val evenSumSquareOddSum = evenSumSquareOdd * evenSumSquareOdd\n\
    \        val evenSumSquareOddSumSquare = evenSumSquareOddSum * evenSumSquareOddSum\n\
    \        val evenSumSquareOddSumSquareOdd = evenSumSquareOddSumSquare * evenSumSquareOddSumSquare\n\
    \        val evenSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOdd *\
    \ evenSumSquareOddSumSquareOdd\n        val evenSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSum\n      \
    \  val evenSumSquareOddSumSquareOddSumSquareOdd = evenSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSumSquareOdd\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquare = evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquare * evenSumSquareOddSumSquareOddSumSquareOddSum\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquare", "        val sum = 0\n\
    \        val nums = lst.filter(_ % 2 == 1)\n        val numsSum = nums.sum\n \
    \       val numsSumSquare = numsSum * numsSum\n        nums.foreach(x => sum +=\
    \ x * x)\n        numsSumSquare", "        val sum = 0\n        val odd = new\
    \ mutable.HashSet[Float]()\n        lst.foreach(x => if (x % 2 != 0) odd.add(x)\
    \ else sum += x)\n        if (odd.isEmpty) 0 else sum * sum", "        val sum\
    \ = 0\n        val odd = mutable.Set[Float]()\n        lst.foreach(x => if (x\
    \ % 2 == 1) odd += x)\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n  \
    \      if (odd.isEmpty) 0 else sum * sum", "        val sum = 0\n        val nums\
    \ = lst.filter(_ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare\
    \ = numsSum * numsSum\n        val numsSumSquareOdd = numsSumSquare - numsSum\n\
    \        val numsSumSquareOddSum = numsSumSquareOdd + numsSum\n        val numsSumSquareOddSumSquare\
    \ = numsSumSquareOddSum * numsSumSquareOdd\n        val numsSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquare - numsSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOdd + numsSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSum * numsSumSquareOddSumSquareOdd\n        val\
    \ numsSumSquareOddSumSquareOddSumSquareOdd = numsSumSquareOddSumSquareOddSumSquare\
    \ - numsSumSquareOddSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOdd + numsSumSquareOddSumSquareOddSumSquare\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquare = numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSumSquareOddSumSquareOdd\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquare - numsSumSquareOddSumSquareOddSumSquareOddSum\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSumSquareOddSumSquareOddSumSquare\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum * numsSumSquareOddSum",
  "        val sum = 0\n        for(i <- lst) {\n            val x = i.toLong\n  \
    \          val y = if (x < 0) -x else x\n            val z = y % 2\n         \
    \   sum += z * z\n        }\n        sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n     \
    \           sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n   \
    \     sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       val x = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n\
    \            }\n        }\n        sum", "        val sum = 0\n        val odds\
    \ = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 == 1) odds += x)\n\
    \        lst.foreach(x => if (x % 2 != 1) sum += x)\n        odds match {\n  \
    \          case Nil => 0\n            case x :: xs => sum * sum\n        }", " \
    \       val sum = 0\n        for(i <- lst) {\n            val x = if (i.toLong\
    \ % 2 == 1) i else 0\n            sum += x\n        }\n        sum", "       \
    \ val sum = 0\n        val odd = 0\n        val even = 0\n        lst.foreach(x\
    \ => {\n            if (x % 2 == 1) {\n                even += x\n           \
    \ } else {\n                odd += x\n            }\n        })\n        val result\
    \ = even + odd\n        if (result > 0) result else 0", "        val sum = 0\n\
    \        for(i <- lst) {\n            val x = if (i % 2 == 0) i else 0\n     \
    \       sum += x\n        }\n        sum", "        val sum = 0l\n        for(i\
    \ <- lst) {\n            if(i % 2 == 1) {\n                sum += i\n        \
    \    }\n        }\n        sum", "        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum\
    \ += x\n                odd.add(x)\n            }\n        })\n        if (odd.isEmpty)\
    \ 0\n        else sum * sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum", "        val sum = 0\n        val odd = 0\n    \
    \    for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n       \
    \         sum += lst(i)\n                odd += 1\n            }\n        }\n\
    \        if(lst.size == 0) 0\n        else sum * sum / odd", "        val sum\
    \ = 0\n        for(i <- lst) {\n            val x = i.toLong\n            val\
    \ y = if (x < 0) -x else x\n            val z = if (y < 0) -y else y\n       \
    \     sum += z\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n     \
    \   sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val even = lst.filter(_ % 2 == 0).toList\n\
    \        val odd = lst.filter(_ % 2 != 0).toList\n        val sum = even.sum +\
    \ odd.sum\n        val result = if (sum > 0) sum * sum else 0\n        result",
  "        val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n  \
    \              sum += i\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        val nums = lst.filter(_ % 2 == 1)\n        val numsSet = nums.toSet\n\
    \        nums.foreach(x => sum += x * x)\n        numsSet.foreach(x => sum +=\
    \ x)\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n\
    \            if(lst(i).isInstanceOf[Float]) {\n                sum += lst(i).asInstanceOf[Float]\n\
    \            }\n            else if(lst(i).isInstanceOf[Long]) {\n           \
    \     sum += lst(i).asInstanceOf[Long]\n            }\n            else {\n  \
    \              sum += lst(i).asInstanceOf[Int]\n            }\n        }\n   \
    \     sum", "        if (lst.isEmpty) 0\n        else lst.foldLeft(0l) { (sum,\
    \ num) =>\n            if (num % 2 == 1) sum + num * num\n            else sum\n\
    \        }", "        val sum = 0\n        for(i <- lst) {\n            sum +=\
    \ i * i\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val oddSum = odd.foldLeft(0l) {\
    \ (sum, element) => sum + element }\n        val result = evenSum - oddSum\n \
    \       result", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x*x else 0)\n        sum", "        val nums = lst.filter(_ % 2 == 1)\n\
    \        if (nums.isEmpty) 0\n        else nums.sum * nums.sum", "        val\
    \ sum = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odd.add(x) else sum += x)\n        odd.foreach(x => sum +=\
    \ x)\n        sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 ==\
    \ 1) sum += x * x else 0)\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val result =\
    \ lst.foldLeft(0l) { (sum, element) =>\n            if (element % 2 == 1) sum\
    \ + element * element\n            else sum\n        }\n        result", "   \
    \     val sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        odds.foreach(x => sum += x * x)\n   \
    \     sum", "        val nums = lst.filter(_ % 2 == 1)\n        val sumOfSquares\
    \ = nums.map(x => x * x).sum\n        sumOfSquares", "        val sum = 0\n  \
    \      for(i <- lst) {\n            val square = i * i\n            if(i % 2 ==\
    \ 1) {\n                sum += square\n            }\n        }\n        sum",
  "        val sum = 0\n        for(i <- lst) {\n            sum += i * i\n      \
    \  }\n        sum", "        val sum = 0\n        for(i <- lst) if (i % 2 == 1)\
    \ sum += i\n        sum", "        val sum = 0\n        val odd = lst.filter(x\
    \ => x % 2 == 1).map(x => x * x).sum\n        val even = lst.filter(x => x % 2\
    \ == 0).map(x => x * x).sum\n        odd + even", "        if (lst.isEmpty) 0\n\
    \        else {\n            val sum = 0\n            val nums = lst.filter(_\
    \ % 2 == 1)\n            val numsSum = nums.sum\n            val numsSumSquare\
    \ = numsSum * numsSum\n            val numsSumSquareOdd = numsSumSquare - numsSum\n\
    \            val numsSumSquareOddSum = numsSumSquareOdd + numsSum\n          \
    \  val numsSumSquareOddSumSquare = numsSumSquareOddSum * numsSumSquareOdd\n  \
    \          val numsSumSquareOddSumSquareOdd = numsSumSquareOddSumSquare * numsSumSquareOdd\n\
    \            val numsSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSum\n            val numsSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSum * numsSumSquareOddSumSquareOdd\n         \
    \   val numsSumSquareOddSumSquareOddSumSquareOdd = numsSumSquareOddSumSquareOddSumSquare\
    \ * numsSumSquareOddSumSquareOdd\n            val numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOdd + numsSumSquareOddSumSquareOddSum\n\
    \            val numsSumSquareOddSumSquareOddSumSquareOddSumSquare = numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSumSquareOddSumSquareOdd\n            val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquare * numsSumSquareOddSumSquareOddSumSquareOdd\n\
    \            val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSumSquareOddSumSquareOddSum\n            val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum * numsSumSquareOddSum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = evenSum * evenSum\n  \
    \      val oddSquare = oddSum * oddSum\n        val sum = evenSquare + oddSquare\n\
    \        sum", "        val sum = 0\n        val even = lst.filter(x => x % 2\
    \ == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum =\
    \ even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n   \
    \     val sum = evenSum + oddSum\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x else ())\n        if\
    \ (result.isEmpty) 0l else result.sum", "        val nums = lst.filter(_ % 2 ==\
    \ 1).toList\n        if (nums.isEmpty) 0\n        else nums.sum * nums.sum", " \
    \       val sum = 0l\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        if (lst.nonEmpty) {\n            lst.foldLeft(0l) { (sum, item)\
    \ => if (item % 2 == 1) sum + item else sum }\n        } else {\n            0l\n\
    \        }", "        val sum = 0l\n        for(i <- lst) {\n            sum +=\
    \ i.toLong\n        }\n        sum", "        val sum = 0\n        val even =\
    \ lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ result = evenSumSquare + oddSumSquare\n        result", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n   \
    \             sum += lst(i)\n            }\n        }\n        sum", "       \
    \ val nums = lst.filter(_ % 2 == 1)\n        val sumOfSquares = nums.map(x =>\
    \ x * x).sum\n        sumOfSquares", "        val sum = 0\n        val odds =\
    \ mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 == 1) odds += x)\n\
    \        odds.foreach(x => sum += x)\n        sum", "        val sum = 0\n   \
    \     lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", " \
    \       val sum = 0\n        val odd = lst.filter(x => x % 2 == 1).map(x => x\
    \ * x).sum\n        val even = lst.filter(x => x % 2 == 0).map(x => x * x).sum\n\
    \        odd + even", "        val sum = 0\n        val even = lst.filter(_ %\
    \ 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        return sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum",
  "        val sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        lst.foreach(x => sum += x * x)\n    \
    \    sum - odds.sum", "        val sum = 0\n        lst.foreach(x => if (x % 2\
    \ == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val result = evenSum - oddSum\n        result", "   \
    \     val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n   \
    \             sum += i\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val result = evenSum + oddSum\n  \
    \      result", "        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 != 0) odds += x)\n        val result = odds.foldLeft(0l)((x,\
    \ y) => x + y)\n        result", "        val result = mutable.ListBuffer[Float]()\n\
    \        for(i <- lst) {\n            if(i % 2 == 1) {\n                result\
    \ += i\n            }\n        }\n        if(result.isEmpty) {\n            return\
    \ 0\n        }\n        result.sum", "        val sum = 0\n        val nums =\
    \ lst.filter(x => x % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x\
    \ => sum += x * x)\n        numsSet.foreach(x => sum += x * x)\n        sum",
  "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        val oddSum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n                oddSum += lst(i)\n            }\n        }\n    \
    \    oddSum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n   \
    \         val x = lst(i)\n            if(x < 0) continue\n            if(x % 2\
    \ == 1) sum += x\n        }\n        sum", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSquare\
    \ = even.map(x => x * x).sum\n        val oddSquare = odd.map(x => x * x).sum\n\
    \        val sum = evenSum + oddSum\n        val square = evenSquare + oddSquare\n\
    \        val result = sum * sum - square + square\n        result", "        if\
    \ (lst.nonEmpty) {\n            lst.foldLeft(0l) { (sum, num) =>\n           \
    \     if (num % 2 == 1) sum + num\n                else sum\n            }\n \
    \       } else {\n            0l\n        }", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        val odd = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 ==\
    \ 1) odd += x)\n        val even = lst.filterNot(x => x % 2 == 1)\n        val\
    \ sum = even.sum\n        val result = sum + odd.sum\n        result", "     \
    \   val sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i).toLong\
    \ % 2 == 1) {\n                sum += lst(i).toLong\n            }\n        }\n\
    \        sum", "        val sum = 0\n        for(i <- lst) {\n            sum\
    \ += i * i\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        val oddSum = 0\n        lst.foreach(x => {\n            if (x % 2 ==\
    \ 1) {\n                sum += x\n            } else {\n                oddSum\
    \ += x\n            }\n        })\n        if (sum > 0) {\n            return\
    \ sum * sum\n        } else if (sum < 0) {\n            return -sum * sum\n  \
    \      } else {\n            return oddSum * oddSum\n        }", "        val\
    \ sum = 0\n        val odd = lst.filter(x => x % 2 != 0).toList\n        val even\
    \ = lst.filter(x => x % 2 == 0).toList\n        val evenSum = even.map(x => x\
    \ * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result =\
    \ evenSum + oddSum\n        result", "        if (lst.isEmpty) 0\n        else\
    \ {\n            val sum = 0\n            val nums = lst.filter(_ % 2 == 1)\n\
    \            val numsSum = nums.sum\n            val numsSumSquare = numsSum *\
    \ numsSum\n            val numsSumSquareDiff = numsSumSquare - nums.sum\n    \
    \        val numsSumSquareDiffSquare = numsSumSquareDiff * numsSumSquareDiff\n\
    \            val numsSumSquareDiffSquareDiff = numsSumSquareDiffSquare * numsSumSquareDiffSquare\n\
    \            val numsSumSquareDiffSquareDiffSquare = numsSumSquareDiffSquareDiff\
    \ * numsSumSquareDiffSquareDiff\n            val numsSumSquareDiffSquareDiffSquareDiff\
    \ = numsSumSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquare\n  \
    \          val numsSumSquareDiffSquareDiffSquareDiffSquare = numsSumSquareDiffSquareDiffSquareDiff\
    \ * numsSumSquareDiffSquareDiffSquareDiff\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquareDiff\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiff = numsSumSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquare\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquareDiff * numsSumSquareDiffSquareDiffSquareDiffSquareDiff\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquareDiff\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = numsSumSquareDiffSquare", "        val sum = 0\n        for(i <- lst) if(i\
    \ % 2 == 1) sum += i\n        sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x =>\
    \ {\n            if (x % 2 == 1) {\n                sum += x\n               \
    \ odd.add(x)\n            }\n        })\n        if (odd.isEmpty) 0\n        else\
    \ sum * sum", "        val sum = 0\n        val odds = mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 0) sum += x)\n        lst.foreach(x =>\
    \ if (x % 2 != 0) odds.add(x))\n        if (odds.isEmpty) 0 else sum * sum", " \
    \       val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val result = evenSum + oddSum\n        sum", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n\
    \            if(x % 2 == 1) {\n                sum += x\n            }\n     \
    \   }\n        sum", "        val sum = 0\n        for(i <- lst) sum += i * i\n\
    \        sum", "        val sum = 0\n        val evenSum = 0\n        val oddSum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i).isEven) {\n\
    \                evenSum += lst(i)\n            }\n            else {\n      \
    \          oddSum += lst(i)\n            }\n        }\n        val result = evenSum\
    \ + oddSum\n        if(lst.size == 0) {\n            result\n        }\n     \
    \   else {\n            result\n        }", "        val even = lst.filter(_ %\
    \ 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val sumOdd = even.sum\n\
    \        val sumEven = odd.sum\n        val sumOddAndEven = sumOdd + sumEven\n\
    \        val sumOddAndEvenSquare = sumOddAndEven * sumOddAndEven\n        val\
    \ sumOddAndEvenSquareRoot = math.sqrt(sumOddAndEvenSquare)\n        sumOddAndEvenSquareRoot",
  "        val result = lst.foldLeft(0l) { (sum, element) => if (element % 2 == 1)\
    \ sum + element else sum }\n        result", "        val sum = 0l\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1l && lst(i) != 0l) {\n\
    \                sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n  \
    \              sum += i\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x => if\
    \ (x % 2 == 1) odds += x)\n        val oddsSum = odds.sum\n        val oddsSumSquare\
    \ = oddsSum * oddsSum\n        lst.foreach(x => if (x % 2 == 0) sum += x * x)\n\
    \        sum + oddsSumSquare", "        val sum = 0\n        for(i <- lst) sum\
    \ += i * i\n        sum", "        val sum = 0\n        lst.foreach(x => if (x\
    \ % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n       \
    \ for(i <- lst) {\n            if(i % 2 == 1) {\n                sum += i\n  \
    \          }\n        }\n        sum", "        val sum = 0\n        for(i <-\
    \ lst) {\n            val x = i.toLong\n            val y = x % 2\n          \
    \  val z = x + y\n            sum += z.toLong\n        }\n        sum", "    \
    \    val sum = 0\n        for(i <- lst) {\n            if (i % 2 == 1) {\n   \
    \             sum += i\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n       \
    \ sum", "        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odd.add(x) else sum += x)\n        odd.toList.sum",
  "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n\
    \        val oddSum = odd.map(x => x * x).sum\n        val result = evenSum -\
    \ oddSum\n        result", "        val sum = 0\n        lst.foreach(x => if (x\
    \ % 2 == 1) sum += x)\n        sum", "        val sum = 0\n        val oddSum\
    \ = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n               \
    \ sum += i\n                oddSum += i\n            }\n        }\n        if(sum\
    \ > 0) {\n            oddSum\n        } else {\n            0\n        }", " \
    \       val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0l\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        odds.foreach(x =>\
    \ sum += x * x)\n        sum", "        val sum = 0\n        for(i <- lst) {\n\
    \            val isOdd = i % 2 != 0\n            val isNegative = i < 0\n    \
    \        if(isOdd && !isNegative) {\n                sum += i\n            }\n\
    \        }\n        sum", "        val sum = 0\n        val oddSum = 0\n     \
    \   lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum +=\
    \ x\n                oddSum += x\n            }\n        })\n        if (sum >\
    \ 0) {\n            oddSum\n        } else {\n            0\n        }", "   \
    \     val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n \
    \       val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum + oddSum\n\
    \        sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n  \
    \      val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum +\
    \ oddSum\n        val square = evenSquare + oddSquare\n        val result = sum\
    \ * sum\n        square", "        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        for(i <- nums) {\n            sum += i\n        }\n     \
    \   sum", "        val sum = 0l\n        for(i <- lst) {\n            val x =\
    \ i.toLong\n            val y = if (x < 0) -x else x\n            sum += y * y\n\
    \        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum +\
    \ oddSum\n        val square = evenSquare + oddSquare\n        val result = sum\
    \ * sum\n        square", "        val sum = 0l\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = if (x < 0) -x else x\n  \
    \          sum += y * y\n        }\n        sum", "        val sum = 0\n     \
    \   val odds = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 == 1)\
    \ odds += x)\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n        if (odds.isEmpty)\
    \ 0\n        else sum * sum - odds.toSet.sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        for(i <- lst) sum += i * i\n        sum", "        val sum = 0\n    \
    \    val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ result = evenSum + oddSum\n        if (evenSum == 0) 0 else result", "     \
    \   val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum =\
    \ odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val result = evenSumSquare + oddSumSquare\n     \
    \   result", "        val sum = 0\n        for(i <- lst) {\n            if (i\
    \ % 2 == 1) {\n                sum += i\n            }\n        }\n        sum",
  "        val sum = 0l\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val result = lst.foldLeft(0l) { (sum, element) =>\n\
    \            if (element % 2 == 1) sum + element\n            else sum\n     \
    \   }\n        result", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst.filter(x => x % 2 != 0).toList\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val sum = evenSum + oddSum\n        sum", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 ==\
    \ 1) {\n                sum += lst(i)\n            }\n        }\n        sum.toLong",
  "        val sum = 0l\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n \
    \       val oddSum = odd.foldLeft(0l)(_ + _)\n        sum = evenSum + oddSum\n\
    \        sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0\n        for(i <- lst)\
    \ {\n            if(i % 2 == 1) {\n                sum += i\n            }\n \
    \       }\n        sum", "        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        nums.foreach(x => sum += x * x)\n        numsSumSquare",
  "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum.toLong", "        val sum =\
    \ 0\n        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val result = evenSum - oddSum\n  \
    \      result", "        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 != 0) odds += x\n        })\n\
    \        odds.foreach(x => sum += x * x)\n        sum.toLong", "        val sum\
    \ = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n       \
    \ sum", "        val sum = 0\n        for(i <- lst) {\n            if(i % 2 ==\
    \ 1) {\n                sum += i\n            }\n        }\n        sum", "  \
    \      val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val result = evenSumSquare + oddSumSquare\n     \
    \   result", "        val sum = 0\n        val nums = lst.filter(_ > 0).toList\n\
    \        val numsOdd = nums.filter(_ % 2 != 0).toList\n        val numsEven =\
    \ nums.filter(_ % 2 == 0).toList\n        val numsSum = numsOdd.size + numsEven.size\n\
    \        val numsSumOdd = numsOdd.map(x => x * x).sum\n        val numsSumEven\
    \ = numsEven.map(x => x * x).sum\n        val numsSumOddEven = numsSumOdd + numsSumEven\n\
    \        val numsSumOddEvenLong = numsSumOddEven.toLong\n        val numsSumOddEvenLongLong\
    \ = numsSumOddEvenLong.toLong\n        val numsSumOddEvenLongLongLong = numsSumOddEvenLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLong = numsSumOddEvenLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLong = numsSumOddEvenLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong",
  "        if (lst.isEmpty) 0\n        else lst.foldLeft(0l) { (sum, elem) =>\n  \
    \          if (elem % 2 == 1) sum + elem\n            else sum\n        }", " \
    \       val sum = 0\n        val odd = lst.filter(_ % 2 != 0).toList\n       \
    \ val even = lst.filter(_ % 2 == 0).toList\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val result = evenSum\
    \ - oddSum\n        result", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val difference = evenSquare\
    \ - oddSquare\n        val sumOfSquares = evenSum * evenSum + oddSum * oddSum\n\
    \        sumOfSquares + difference", "        val sum = 0\n        val nums =\
    \ lst.filter(_ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare\
    \ = numsSum * numsSum\n        nums.foreach(x => sum += x * x)\n        sum +\
    \ numsSumSquare", "        val sum = 0\n        for(i <- lst) {\n            sum\
    \ += i * i\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
