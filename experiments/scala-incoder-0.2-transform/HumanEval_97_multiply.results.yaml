language: scala
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits31 = unitDigits3 * 10\n        val unitDigits311 = unitDigits31\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n        val unitDigits311 = unitDigits311 * 10\n        val unitDigits311\
    \ = unitDigits311 * 10\n        val unitDigits311 = unitDigits311 * 10\n     \
    \   val unitDigits311 = unitDigits311 * 10\n        val unitDigits311 = unitDigits311\
    \ * 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrebxfi7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits311\e[0m = unitDigits311\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits311 is already defined as \e[33mvalue\e[0m \e[35munitDigits311\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrebxfi7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits311\e[0m = unitDigits311 *\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits311 is already defined as \e[33mvalue\e[0m \e[35munitDigits311\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrebxfi7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36munitDigits311\e[0m = unitDigits311 *\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits311 is already defined as \e[33mvalue\e[0m \e[35munitDigits311\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrebxfi7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36munitDigits311\e[0m = unitDigits311 *\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits311 is already defined as \e[33mvalue\e[0m \e[35munitDigits311\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrebxfi7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36munitDigits311\e[0m = unitDigits311 *\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659799495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcoll70ex.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   "
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        val unitDigits_6 = unitDigits_5 * unitDigits_2\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_3\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_4\n        val unitDigits_9 = unitDigits_8 * unitDigits_5\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_6\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_7\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_8\n        val unitDigits_13 = unitDigits_12 * unitDigits_9\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_10\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_11\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_12\n        val unitDigits_17 = unitDigits_16 * unitDigits_13\n \
    \       val unitDigits_18 = unitDigits_17 * unitDigits_14\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_15\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_16\n        val unitDigits_21 = unitDigits_20 * unitDigits_17\n \
    \       val unitDigits_22 = unitDigits_21 * unitDigits_18\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_19\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_20\n        val unitDigits_25 = unitDigits_24 * unitDigits_21\n \
    \       val unitDigits_26 = unitDigits_25 * unitDigits_22\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_23\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_24\n        val unitDigits_29 = unitDigits_28 * unitDigits_25\n \
    \       val unitDigits_30 = unitDigits_29 * unitDigits_26\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigits_27\n        val unitDigits_32 = unitDigits_31\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_axqja7y.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpplfc71pq.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e["
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits2 = unitDigits2\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7h5cysud.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7h5cysud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 * \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7h5cysud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7h5cysud.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7h5cysud.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map { case (digit1, digit2) => digit1 * digit2\
    \ }\n        val unitDigits = unitDigits.toList.sortBy(_).reverse\n        val\
    \ unitDigits = unitDigits.take(unitDigits.length)\n        val unitDigits = unitDigits.map(_.toLong)\n\
    \        val unitDigits = unitDigits.sum\n        unitDigits.toLong\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpybayy1fd.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map\
    \ { \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2 }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpybayy1fd.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.sortBy(_).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpybayy1fd.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.take(unitDigits.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpybayy1fd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpybayy1fd.scala:23:12 --------------------------"
  stdout: ''
  timestamp: 1659799495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val product = b % 10\n        val unitDigits2 = product /\
    \ 10\n        val remainder2 = product % 10\n        val product2 = remainder\
    \ * remainder2\n        val unitDigits3 = product2 / 10\n        val remainder3\
    \ = product2 % 10\n        val product3 = remainder3 * remainder\n        val\
    \ unitDigits4 = product3 / 10\n        val remainder4 = product3 % 10\n      \
    \  val product4 = remainder4 * remainder\n        val unitDigits5 = product4 /\
    \ 10\n        val remainder5 = product4 % 10\n        val product5 = remainder5\
    \ * remainder\n        val unitDigits6 = product5 / 10\n        val remainder6\
    \ = product5 % 10\n        val product6 = remainder6 * remainder\n        val\
    \ unitDigits7 = product6 / 10\n        val remainder7 = product6 % 10\n      \
    \  val product7 = remainder7 * remainder\n        val unitDigits8 = product7 /\
    \ 10\n        val remainder8 = product7 % 10\n        val product8 = remainder8\
    \ * remainder\n        val unitDigits9 = product8 / 10\n        val remainder9\
    \ = product8 % 10\n        val product9 = remainder9 * remainder\n        val\
    \ unitDigits10 = product9 / 10\n        val remainder10 = product9 % 10\n    \
    \    val product10 = remainder10 * remainder\n        val unitDigits11 = product10\
    \ / 10\n        val remainder11 = product10 % 10\n        val product11 = remainder11\
    \ * remainder\n        val unitDigits12 = product11 / 10\n        val remainder12\
    \ = product11 % 10\n        val product12 = remainder12 * remainder\n        val\
    \ unitDigits13 = product12 / 10\n        val remainder13 = product12 % 10\n  \
    \      val product13 = remainder13 * remainder\n        val unitDigits14 = product13\
    \ / 10\n        val remainder14 = product13 % 10\n        val product14 = remainder14\
    \ * remainder\n        val unitDigits15 = product14 / 10\n        val remainder15\
    \ = product14 % 10\n        val product15 = remainder15 * remainder\n        val\
    \ unitDigits16 = product15 / 10\n        val remainder16 = product15 % 10\n  \
    \      val product16 = remainder16 * remainder\n        val unitDig\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm8_zmyy9.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpm8_zmyy9.scala:66:5 ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        unitDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxqt9ixs.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits4) / 10\n        val unitDigits6 = (unitDigits * unitDigits5)\
    \ / 10\n        val unitDigits7 = (unitDigits * unitDigits6) / 10\n        val\
    \ unitDigits8 = (unitDigits * unitDigits7) / 10\n        val unitDigits9 = (unitDigits\
    \ * unitDigits8) / 10\n        val unitDigits10 = (unitDigits * unitDigits9) /\
    \ 10\n        val unitDigits11 = (unitDigits * unitDigits10) / 10\n        val\
    \ unitDigits12 = (unitDigits * unitDigits11) / 10\n        val unitDigits13 =\
    \ (unitDigits * unitDigits12) / 10\n        val unitDigits14 = (unitDigits * unitDigits13)\
    \ / 10\n        val unitDigits15 = (unitDigits * unitDigits14) / 10\n        val\
    \ unitDigits16 = (unitDigits * unitDigits15) / 10\n        val unitDigits17 =\
    \ (unitDigits * unitDigits16) / 10\n        val unitDigits18 = (unitDigits * unitDigits17)\
    \ / 10\n        val unitDigits19 = (unitDigits * unitDigits18) / 10\n        val\
    \ unitDigits20 = (unitDigits * unitDigits19) / 10\n        val unitDigits21 =\
    \ (unitDigits * unitDigits20) / 10\n        val unitDigits22 = (unitDigits * unitDigits21)\
    \ / 10\n        val unitDigits23 = (unitDigits * unitDigits22) / 10\n        val\
    \ unitDigits24 = (unitDigits * unitDigits23) / 10\n        val unitDigits25 =\
    \ (unitDigits * unitDigits24) / 10\n        val unitDigits26 = (unitDigits * unitDigits25)\
    \ / 10\n        val unitDigits27 = (unitDigits * unitDigits26) / 10\n        val\
    \ unitDigits28 = (unitDigits * unitDigits27) / 10\n        val unitDigits29 =\
    \ (unitDigits * unitDigits28) / 10\n        val unitDigits30 = (unitDigits * \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe2t58yw9.scala:46:40 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36munitDigits30\e[0m = (unitDigits\
    \ * \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2t58yw9.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits4) / 10\n        val unitDigits6 = (unitDigits * unitDigits5)\
    \ / 10\n        val unitDigits7 = (unitDigits * unitDigits6) / 10\n        val\
    \ unitDigits8 = (unitDigits * unitDigits7) / 10\n        val unitDigits9 = (unitDigits\
    \ * unitDigits8) / 10\n        val unitDigits10 = (unitDigits * unitDigits9) /\
    \ 10\n        val unitDigits11 = (unitDigits * unitDigits10) / 10\n        val\
    \ unitDigits12 = (unitDigits * unitDigits11) / 10\n        val unitDigits13 =\
    \ (unitDigits * unitDigits12) / 10\n        val unitDigits14 = (unitDigits * unitDigits13)\
    \ / 10\n        val unitDigits15 = (unitDigits * unitDigits14) / 10\n        val\
    \ unitDigits16 = (unitDigits * unitDigits15) / 10\n        val unitDigits17 =\
    \ (unitDigits * unitDigits16) / 10\n        val unitDigits18 = (unitDigits * unitDigits17)\
    \ / 10\n        val unitDigits19 = (unitDigits * unitDigits18) / 10\n        val\
    \ unitDigits20 = (unitDigits * unitDigits19) / 10\n        val unitDigits21 =\
    \ (unitDigits * unitDigits20) / 10\n        val unitDigits22 = (unitDigits * unitDigits21)\
    \ / 10\n        val unitDigits23 = (unitDigits * unitDigits22) / 10\n        val\
    \ unitDigits24 = (unitDigits * unitDigits23) / 10\n        val unitDigits25 =\
    \ (unitDigits * unitDigits24) / 10\n        val unitDigits26 = (unitDigits * unitDigits25)\
    \ / 10\n        val unitDigits27 = (unitDigits * unitDigits26) / 10\n        val\
    \ unitDigits28 = (unitDigits * unitDigits27) / 10\n        val unitDigits29 =\
    \ (unitDigits * unitDigits28) / 10\n        val unitDigits30 = (unitDigits * \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe2t58yw9.scala:46:40 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36munitDigits30\e[0m = (unitDigits\
    \ * \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2t58yw9.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcd8lm1p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjcd8lm1p.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map { case (a, b) => a * b }\n        val unitDigits_3\
    \ = unitDigits_2.zip(unitDigits_3).map { case (a, b) => a * b }\n        val unitDigits_4\
    \ = unitDigits_3.zip(unitDigits_4).map { case (a, b) => a * b }\n        unitDigits_4.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvwwounkt.scala:19:44 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (a, b) => a * b }\n\e[31m\e[31m   |\e[0m                 \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \       Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E051] Reference Error: /tmp/tmpvwwounkt.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (a, b) => a * b }\n\e[31m\e[31m   |\e[0m                 \
    \                                                              ^^^\e[0m\n\e[31m\
    \   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \ (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\
    \e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e\
    [0mall match arguments ((b : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpvwwounkt.scala:20:44 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ { \e[33mcase\e[0m (a, b) => a * b }\n\e[31m\e[31m   |\e[0m                 \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \       Recursive \e[33mvalue\e[0m \e[35munitDigits_3\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvwwounkt.scala:20:81 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ { \e[33mcase\e[0m (a, b) => a * b }\n\e[31m\e[31m   |\e[0m                 \
    \  "
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map {\n            case (digit1, digit2) => digit1\
    \ * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_12 = unitDigits_11.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_13 =\
    \ unitDigits_12.zip(unitDigits_1).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_15 = unitDigits_14.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_16 =\
    \ unitDigits_15.zip(unitDigits_1).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_0hqf34u.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0hqf34u.scala:62:46\
    \ ------------------------\e[0m\e[0m\n\e[31m62 |\e[0m            \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                           Not found: digit\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_0hqf34u.scala:75:1 ---------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp_0hqf34u.scala:64:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk34od_s.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk34od_s.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigits = unitDigits + unitDigit\n        val unitDigit\
    \ = unitDigit + unitDigit\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_yzdch2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_yzdch2.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_yzdch2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_yzdch2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_yzdch2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35mun"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_7d07lp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3_7d07lp.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_7d07lp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3_7d07lp.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_7d07lp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jedr1gz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3jedr1gz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jedr1gz.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        while(product > 9) {\n            product /= 10\n     \
    \   }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1so9b_fd.scala:26)\n\tat Problem.main(tmp1so9b_fd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoq0gcbrr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoq0gcbrr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val productString = product.toString\n        val unitDigitString\
    \ = unitDigits.toString\n        val unitDigitString2 = unitDigits2.toString\n\
    \        val unitDigitString3 = unitDigits.toString.toInt\n        val unitDigitString4\
    \ = unitDigits2.toString.toInt\n        val unitDigitString5 = unitDigits.toString.toInt\n\
    \        val unitDigitString6 = unitDigits2.toString.toInt\n        val unitDigitString7\
    \ = unitDigits.toString.toInt\n        val unitDigitString8 = unitDigits2.toString.toInt\n\
    \        val unitDigitString9 = unitDigits.toString.toInt\n        val unitDigitString10\
    \ = unitDigits2.toString.toInt\n        val unitDigitString11 = unitDigits.toString.toInt\n\
    \        val unitDigitString12 = unitDigits2.toString.toInt\n        val unitDigitString13\
    \ = unitDigits.toString.toInt\n        val unitDigitString14 = unitDigits2.toString.toInt\n\
    \        val unitDigitString15 = unitDigits.toString.toInt\n        val unitDigitString16\
    \ = unitDigits2.toString.toInt\n        val unitDigitString17 = unitDigits.toString.toInt\n\
    \        val unitDigitString18 = unitDigits2.toString.toInt\n        val unitDigitString19\
    \ = unitDigits.toString.toInt\n        val unitDigitString20 = unitDigits2.toString.toInt\n\
    \        val unitDigitString21 = unitDigits.toString.toInt\n        val unitDigitString22\
    \ = unitDigits2.toString.toInt\n        val unitDigitString23 = unitDigits.toString.toInt\n\
    \        val unitDigitString24 = unitDigits2.toString.toInt\n        val unitDigitString25\
    \ = unitDigits.toString.toInt\n        val unitDigitString26 = unitDigits2.toString.toInt\n\
    \        val unitDigitString27 = unitDigits.toString.toInt\n        val unitDigitString28\
    \ = unitDigits2.toString.toInt\n        val unitDigitString29 = unitDigits.toString.toInt\n\
    \        val unitDigitString30 = unitDigits2.toString.toInt\n        val unitDigitString31\
    \ = unitDigits.toString.toInt\n        val unitDigitString32 = unitDigits2.toString.toInt\n\
    \        val unitDigitString33 = unitDigits.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpszalmwus.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpszalmwus.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_7d07lp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3_7d07lp.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_7d07lp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3_7d07lp.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_7d07lp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        unitDigits_5\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpohg92j6p.scala:26)\n\tat Problem.main(tmpohg92j6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpplfc71pq.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e["
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ahzqwt1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ahzqwt1.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpp_qty4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpp_qty4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpp_qty4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val productString = product.toString\n        val productString2\
    \ = productString.substring(0, productString.length - 1)\n        val productString3\
    \ = productString2.substring(0, productString2.length - 1)\n        val productString4\
    \ = productString3.substring(0, productString3.length - 1)\n        val productString5\
    \ = productString4.substring(0, productString4.length - 1)\n        val productString6\
    \ = productString5.substring(0, productString5.length - 1)\n        val productString7\
    \ = productString6.substring(0, productString6.length - 1)\n        val productString8\
    \ = productString7.substring(0, productString7.length - 1)\n        val productString9\
    \ = productString8.substring(0, productString8.length - 1)\n        val productString10\
    \ = productString9.substring(0, productString9.length - 1)\n        val productString11\
    \ = productString10.substring(0, productString10.length - 1)\n        val productString12\
    \ = productString11.substring(0, productString11.length - 1)\n        val productString13\
    \ = productString12.substring(0, productString12.length - 1)\n        val productString14\
    \ = productString13.substring(0, productString13.length - 1)\n        val productString15\
    \ = productString14.substring(0, productString14.length - 1)\n        val productString16\
    \ = productString15.substring(0, productString15.length - 1)\n        val productString17\
    \ = productString16.substring(0, productString16.length - 1)\n        val productString18\
    \ = productString17.substring(0, productString17.length - 1)\n        val productString19\
    \ = productString18.substring(0, productString18.length - 1)\n        val productString20\
    \ = productString19.substring(0, productString19.length - 1)\n        val productString21\
    \ = productString20.substring(0, productString20.length - 1)\n        val productString22\
    \ = productString21.substring(0, productString21.length - 1)\n        val productString23\
    \ = productString22.substring(0, productString22.length - 1)\n        val productString24\
    \ = productString23.substring(0, productString23.length - 1)\n        val productString25\
    \ = productString24.substring(0, productString24.length - 1)\n        val productString26\
    \ = productString25.substring(0, productString25.length - 1)\n        val productString27\
    \ = productString26.substring(0, productString26.length - 1)\n        val productString28\
    \ = productString27.substring(0, productString27.length - 1)\n        val productString29\
    \ = productString28.substring(0, productString28.length - 1)\n        val productString30\
    \ = productString29.substring(0, productString29.length - 1)\n        val productString31\
    \ = productString30.substring(0, productString30.length - 1)\n        val productString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp58nz7m0q.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp58nz7m0q.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcd8lm1p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjcd8lm1p.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphcdni7wp.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcdni7wp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcdni7wp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = unitDigits2 % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2 is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcdni7wp.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcdni7wp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mva"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        unitDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxqt9ixs.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk34od_s.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk34od_s.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map { case (digit1, digit2) => digit1 * digit2\
    \ }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map { case (digit1,\
    \ digit2) => digit1 * digit2 }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_11).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_14).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_16).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_17 = unitDigits_16.zip(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzr2xcz1a.scala:34:46 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36munitDigits_17\e[0m = unitDigits_16.zip(\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzr2xcz1a.scala:19:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map { \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit2 }\n\e[31m\e[31m   |\e[0m             \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \           Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpzr2xcz1a.scala:19:96\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map { \e[33mcase\e[0m (digit1,\
    \ digit2) => digit1 * digit2 }\n\e[31m\e[31m   |\e[0m                        \
    \                                                                 ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \ (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\
    \e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e\
    [0mall match arguments ((digit2 : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzr2xcz1a.scala:20:44 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ { \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2 }\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigits = b % 10\n\
    \        val unitDigit = unitDigits * unitDigit\n        unitDigit\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbirs1dy7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbirs1dy7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbirs1dy7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits4) / 10\n        val unitDigits6 = (unitDigits * unitDigits5)\
    \ / 10\n        val unitDigits7 = (unitDigits * unitDigits6) / 10\n        val\
    \ unitDigits8 = (unitDigits * unitDigits7) / 10\n        val unitDigits9 = (unitDigits\
    \ * unitDigits8) / 10\n        val unitDigits10 = (unitDigits * unitDigits9) /\
    \ 10\n        val unitDigits11 = (unitDigits * unitDigits10) / 10\n        val\
    \ unitDigits12 = (unitDigits * unitDigits11) / 10\n        val unitDigits13 =\
    \ (unitDigits * unitDigits12) / 10\n        val unitDigits14 = (unitDigits * unitDigits13)\
    \ / 10\n        val unitDigits15 = (unitDigits * unitDigits14) / 10\n        val\
    \ unitDigits16 = (unitDigits * unitDigits15) / 10\n        val unitDigits17 =\
    \ (unitDigits * unitDigits16) / 10\n        val unitDigits18 = (unitDigits * unitDigits17)\
    \ / 10\n        val unitDigits19 = (unitDigits * unitDigits18) / 10\n        val\
    \ unitDigits20 = (unitDigits * unitDigits19) / 10\n        val unitDigits21 =\
    \ (unitDigits * unitDigits20) / 10\n        val unitDigits22 = (unitDigits * unitDigits21)\
    \ / 10\n        val unitDigits23 = (unitDigits * unitDigits22) / 10\n        val\
    \ unitDigits24 = (unitDigits * unitDigits23) / 10\n        val unitDigits25 =\
    \ (unitDigits * unitDigits24) / 10\n        val unitDigits26 = (unitDigits * unitDigits25)\
    \ / 10\n        val unitDigits27 = (unitDigits * unitDigits26) / 10\n        val\
    \ unitDigits28 = (unitDigits * unitDigits27) / 10\n        val unitDigits29 =\
    \ (unitDigits * unitDigits28) / 10\n        val unitDigits30 = (unitDigits * \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe2t58yw9.scala:46:40 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36munitDigits30\e[0m = (unitDigits\
    \ * \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2t58yw9.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map {\n            case (digit1, digit2) => digit1\
    \ * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_12 = unitDigits_11.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_13 =\
    \ unitDigits_12.zip(unitDigits_1).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_15 = unitDigits_14.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_16 =\
    \ unitDigits_15.zip(unitDigits_1).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_0hqf34u.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0hqf34u.scala:62:46\
    \ ------------------------\e[0m\e[0m\n\e[31m62 |\e[0m            \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                           Not found: digit\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_0hqf34u.scala:75:1 ---------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp_0hqf34u.scala:64:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = 0\n        while(unitDigits\
    \ > 0 || unitDigits2 > 0) {\n            val digit = if (unitDigits > 0) unitDigits\
    \ % 10 else 0\n            val digit2 = if (unitDigits2 > 0) unitDigits2 % 10\
    \ else 0\n            product *= 10\n            product += digit\n          \
    \  product *= digit2\n            unitDigits /= 10\n            unitDigits2 /=\
    \ 10\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoa2n41l8.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            unitDigits /= \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value /= is\
    \ not a member of Int - did you mean unitDigits.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpoa2n41l8.scala:27:24 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m            unitDigits2 /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value /= is not a member\
    \ of Int - did you mean unitDigits2.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val remainder3\
    \ = (unitDigits * unitDigits2) % 10\n        val unitDigits4 = (unitDigits * unitDigits3)\
    \ / 10\n        val remainder4 = (unitDigits * unitDigits3) % 10\n        val\
    \ unitDigits5 = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val remainder5\
    \ = (unitDigits * unitDigits3 * unitDigits4) % 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val remainder6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) % 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val remainder7\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) % 10\n\
    \        val unitDigits8 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7) / 10\n        val remainder8 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7) % 10\n        val unitDigits9\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8) / 10\n        val remainder9 = (unitDigits * unitDigits3 * unitDigits4\
    \ * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8) % 10\n        val unitDigits10\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        val remainder10 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8 * unitDigits9)\
    \ % 10\n        val unitDigits11 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi04ucd_4.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi04ucd_4.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val unitDigits8\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7)\
    \ / 10\n        val unitDigits9 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7 * unitDigits8) / 10\n        val unitDigits10 =\
    \ (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        val unitDigits11 = (unitDigits *\
    \ unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10) / 10\n        val unitDigits12 = (unitDigits *\
    \ unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10 * unitDigits11) / 10\n        val unitDigits13\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9 * unitDigits10 * unitDigits11 * unitDigits12) /\
    \ 10\n        val unitDigits14 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7 * unitDigits8 * unitDigits9 * unitDigits10 * unitDigits11\
    \ * unitDigits12 * unitDigits13) / 10\n        val unitDigits15 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10 * \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk4x94kxn.scala:31:153 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36munitDigits15\e[0m = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10 * \n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk4x94kxn.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jedr1gz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3jedr1gz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jedr1gz.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val unitDigits8\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7)\
    \ / 10\n        val unitDigits9 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7 * unitDigits8) / 10\n        val unitDigits10 =\
    \ (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        val unitDigits11 = (unitDigits *\
    \ unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10) / 10\n        val unitDigits12 = (unitDigits *\
    \ unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10 * unitDigits11) / 10\n        val unitDigits13\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9 * unitDigits10 * unitDigits11 * unitDigits12) /\
    \ 10\n        val unitDigits14 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7 * unitDigits8 * unitDigits9 * unitDigits10 * unitDigits11\
    \ * unitDigits12 * unitDigits13) / 10\n        val unitDigits15 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10 * \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk4x94kxn.scala:31:153 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36munitDigits15\e[0m = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8\
    \ * unitDigits9 * unitDigits10 * \n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk4x94kxn.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcd8lm1p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjcd8lm1p.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcd8lm1p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjcd8lm1p.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits_1\
    \ * 10\n        val unitDigits_3 = unitDigits_2 * 10\n        val unitDigits_4\
    \ = unitDigits_3 * 10\n        val unitDigits_5 = unitDigits_4 * 10\n        val\
    \ unitDigits_6 = unitDigits_5 * 10\n        val unitDigits_7 = unitDigits_6 *\
    \ 10\n        val unitDigits_8 = unitDigits_7 * 10\n        val unitDigits_9 =\
    \ unitDigits_8 * 10\n        val unitDigits_10 = unitDigits_9 * 10\n        val\
    \ unitDigits_11 = unitDigits_10 * 10\n        val unitDigits_12 = unitDigits_11\
    \ * 10\n        val unitDigits_13 = unitDigits_12 * 10\n        val unitDigits_14\
    \ = unitDigits_13 * 10\n        val unitDigits_15 = unitDigits_14 * 10\n     \
    \   val unitDigits_16 = unitDigits_15 * 10\n        val unitDigits_17 = unitDigits_16\
    \ * 10\n        val unitDigits_18 = unitDigits_17 * 10\n        val unitDigits_19\
    \ = unitDigits_18 * 10\n        val unitDigits_20 = unitDigits_19 * 10\n     \
    \   val unitDigits_21 = unitDigits_20 * 10\n        val unitDigits_22 = unitDigits_21\
    \ * 10\n        val unitDigits_23 = unitDigits_22 * 10\n        val unitDigits_24\
    \ = unitDigits_23 * 10\n        val unitDigits_25 = unitDigits_24 * 10\n     \
    \   val unitDigits_26 = unitDigits_25 * 10\n        val unitDigits_27 = unitDigits_26\
    \ * 10\n        val unitDigits_28 = unitDigits_27 * 10\n        val unitDigits_29\
    \ = unitDigits_28 * 10\n        val unitDigits_30 = unitDigits_29 * 10\n     \
    \   val unitDigits_31 = unitDigits_30 * 10\n        val unitDigits_32 = unitDigits_31\
    \ * 10\n        val unitDigits_33 = unitDigits_32 * 10\n        val unitDigits_34\
    \ = unitDigits_33 * 10\n        val unitDigits_35 = unitDigits_34 * 10\n     \
    \   val unitDigits_36 = unitDigits_35 * 10\n        val unitDigits_37 = unitDigits_36\
    \ * 10\n        val unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqb76ge1n.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqb76ge1n.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpplfc71pq.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e["
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp7j5zxyn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7j5zxyn.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7j5zxyn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7j5zxyn.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7j5zxyn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1660009451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = 0\n        while(unitDigits\
    \ > 0 || unitDigits2 > 0) {\n            val unitDigit = unitDigits % 10\n   \
    \         val unitDigit2 = unitDigits2 % 10\n            product *= unitDigit\n\
    \            product *= unitDigit2\n            unitDigits /= 10\n           \
    \ unitDigits2 /= 10\n        }\n        product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps4rje91s.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            unitDigits /= \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value /= is\
    \ not a member of Int - did you mean unitDigits.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmps4rje91s.scala:26:24 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m            unitDigits2 /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value /= is not a member\
    \ of Int - did you mean unitDigits2.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = 0\n        while(unitDigits\
    \ > 0 || unitDigits2 > 0) {\n            val remainder = unitDigits % 10\n   \
    \         val remainder2 = unitDigits2 % 10\n            product = product + (remainder\
    \ * remainder2)\n            unitDigits = unitDigits / 10\n            unitDigits2\
    \ = unitDigits2 / 10\n        }\n        product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp36iv8v1z.scala:24:23 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            unitDigits = unitDigits / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val unitDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp36iv8v1z.scala:25:24 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            unitDigits2 = unitDigits2 / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Reassignment to val unitDigits2\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toLong\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n     \
    \   val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toLong\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n     \
    \   val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toLong\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n     \
    \   val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm2xbd88n.scala:58:37 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm2xbd88n.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm2xbd88n.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm2xbd88n.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm2xbd88n.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined a"
  stdout: ''
  timestamp: 1660009452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map { case (a,b) => a*b }\n        val unitDigits_3\
    \ = unitDigits_2.zip(unitDigits_3).map { case (a,b) => a*b }\n        val unitDigits_4\
    \ = unitDigits_3.zip(unitDigits_4).map { case (a,b) => a*b }\n        unitDigits_4.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5f34d4_e.scala:19:44 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (a,b) => a*b }\n\e[31m\e[31m   |\e[0m                    \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \    Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E051] Reference Error: /tmp/tmp5f34d4_e.scala:19:79 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (a,b) => a*b }\n\e[31m\e[31m   |\e[0m                    \
    \                                                          ^^\e[0m\n\e[31m   |\e\
    [0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m   |\e[0m\
    \ (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mall match arguments\
    \ ((b : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5f34d4_e.scala:20:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map { \e[33mcase\e\
    [0m (a,b) => a*b }\n\e[31m\e[31m   |\e[0m                                    \
    \        ^\e[0m\n\e[31m   |\e[0m                                 Recursive \e\
    [33mvalue\e[0m \e[35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5f34d4_e.scala:20:79 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ { \e[33mcase\e[0m (a,b) => a*b }\n\e[31m\e[31m   |\e[0m                    \
    \             "
  stdout: ''
  timestamp: 1660009454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n      \
    \  val unitDigits = unitDigits.map(x => x * 100)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 1000)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10000)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n   \
    \     val unitDigits = unitDigits.map(x => x * 100000)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 1000000)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       val unitDigits = unitDigits.map(x => x * 10000000)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 100000000)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 1000000000)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10000000000)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 100000000000)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 1000000000000)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.map(x => x * 10000000000000)\n        val\
    \ unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => x * 100000000000000)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpydayayrh.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpydayayrh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpydayayrh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpydayayrh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => x * \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpydayayrh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already def"
  stdout: ''
  timestamp: 1660009453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits2\
    \ = unitDigits2 * 10\n        val unitDigits = unitDigits + unitDigits2\n    \
    \    unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmcxlh8a.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmcxlh8a.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 * \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmcxlh8a.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toLong)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toLong)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toLong)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toLong)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toLong)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.to\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4hlbpcxg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hlbpcxg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hlbpcxg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hlbpcxg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hlbpcxg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDig"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).filter(_._1 == _._1).map(_._2)\n        val unitDigits\
    \ = unitDigits.toList\n        val unitDigits = unitDigits.sortBy(_ * -1)\n  \
    \      val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.reverse\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.sortBy(_ * -1)\n        val unitDigits =\
    \ unitDigits.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdz6djvqx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).filter(_._1\
    \ == _._1).map(_._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdz6djvqx.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdz6djvqx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.sortBy(_\
    \ * -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdz6djvqx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdz6djvqx.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.take(unitDigits.length)\n\
    \e"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        val product2 = product\
    \ + remainder * remainder2\n        product2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkimrn8i.scala:26)\n\tat Problem.main(tmppkimrn8i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map { case (digit1, digit2) => digit1 * digit2\
    \ }\n        val unitDigits = unitDigits.toList.map(_.toLong)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits\
    \ = unitDigits.map(_.toList.map(_.toInt))\n        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n\
    \        val unitDigits = unitDigits.map(_.toList.map(_.toInt))\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpi_8nqve6.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpi_8nqve6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map\
    \ { \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2 }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_8nqve6.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_8nqve6.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(_.toString.toList.map(_.toInt))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_8nqve6.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(_.toList.map(_.toInt))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoq0gcbrr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoq0gcbrr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val remainder3\
    \ = (unitDigits * unitDigits2) % 10\n        val unitDigits4 = (unitDigits * unitDigits3)\
    \ / 10\n        val remainder4 = (unitDigits * unitDigits3) % 10\n        val\
    \ unitDigits5 = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val remainder5\
    \ = (unitDigits * unitDigits3 * unitDigits4) % 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val remainder6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) % 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val remainder7\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) % 10\n\
    \        val unitDigits8 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7) / 10\n        val remainder8 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7) % 10\n        val unitDigits9\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8) / 10\n        val remainder9 = (unitDigits * unitDigits3 * unitDigits4\
    \ * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8) % 10\n        val unitDigits10\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        val remainder10 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8 * unitDigits9)\
    \ % 10\n        val unitDigits11 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi04ucd_4.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi04ucd_4.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigits = unitDigits + unitDigit\n        val unitDigit\
    \ = unitDigit + unitDigit\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_yzdch2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_yzdch2.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_yzdch2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_yzdch2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7_yzdch2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35mun"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        val unitDigits_6 = unitDigits_5 * unitDigits_2\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_3\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_4\n        val unitDigits_9 = unitDigits_8 * unitDigits_5\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_6\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_7\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_8\n        val unitDigits_13 = unitDigits_12 * unitDigits_9\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_10\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_11\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_12\n        val unitDigits_17 = unitDigits_16 * unitDigits_13\n \
    \       val unitDigits_18 = unitDigits_17 * unitDigits_14\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_15\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_16\n        val unitDigits_21 = unitDigits_20 * unitDigits_17\n \
    \       val unitDigits_22 = unitDigits_21 * unitDigits_18\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_19\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_20\n        val unitDigits_25 = unitDigits_24 * unitDigits_21\n \
    \       val unitDigits_26 = unitDigits_25 * unitDigits_22\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_23\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_24\n        val unitDigits_29 = unitDigits_28 * unitDigits_25\n \
    \       val unitDigits_30 = unitDigits_29 * unitDigits_26\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigits_27\n        val unitDigits_32 = unitDigits_31\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_axqja7y.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcoll70ex.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   "
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        unitDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxqt9ixs.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxqt9ixs.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660009439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk34od_s.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk34od_s.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigits = b % 10\n\
    \        val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n        val unitDigit = b % 10\n        val unitDigit = b % 10\n \
    \       val unitDigit = b % 10\n        val unitDigit = b % 10\n        val unitDigit\
    \ = b % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2oz9hes.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr2oz9hes.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2oz9hes.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr2oz9hes.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2oz9hes.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods mu"
  stdout: ''
  timestamp: 1660009454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_4f3ay4t.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4f3ay4t.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4f3ay4t.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4f3ay4t.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4f3ay4t.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fc09q_g.scala:23)\n\tat Problem.main(tmp7fc09q_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map {\n            case (digit1, digit2) => digit1\
    \ * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_3).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_4).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_5).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_6).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_7).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_8).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_9).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_10).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_12 = unitDigits_11.zip(unitDigits_11).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_13 =\
    \ unitDigits_12.zip(unitDigits_12).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_13).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_15 = unitDigits_14.zip(unitDigits_14).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_16 =\
    \ unitDigits_15.zip(unitDigits_15).map \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppwkg24ug.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi9v5giug.scala:26)\n\tat Problem.main(tmpi9v5giug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits2 * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits3 * unitDigits4) / 10\n        val unitDigits6 = (unitDigits4 *\
    \ unitDigits5) / 10\n        val unitDigits7 = (unitDigits5 * unitDigits6) / 10\n\
    \        val unitDigits8 = (unitDigits6 * unitDigits7) / 10\n        val unitDigits9\
    \ = (unitDigits7 * unitDigits8) / 10\n        val unitDigits10 = (unitDigits8\
    \ * unitDigits9) / 10\n        unitDigits10\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyov_k4dm.scala:30)\n\tat Problem.main(tmpyov_k4dm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcd8lm1p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjcd8lm1p.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigit\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpknw738o4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknw738o4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknw738o4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknw738o4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknw738o4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoq0gcbrr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoq0gcbrr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = b % 10\n        val product = unitDigits * unitDigits\n        product\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_tsw2hfx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map { case (digit1, digit2) => digit1 * digit2\
    \ }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_1).map { case (digit1,\
    \ digit2) => digit1 * digit2 }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_11 = unitDigits_10.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_17 = unitDigits_16.zip(unitDigits_1).map\
    \ { case (digit1, digit2) => digit\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ri6298y.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ri6298y.scala:34:91\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36munitDigits_17\e[0m = unitDigits_16.zip(unitDigits_1).map { \e[33mcase\e[0m\
    \ (digit1, digit2) => digit\n\e[31m\e[31m   |\e[0m                           \
    \                                                                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                        Not found:\
    \ digit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ri6298y.scala:47:1\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp0ri6298y.scala:36:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.map(x\
    \ => x / 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n     \
    \   val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n     \
    \   val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n     \
    \   val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n     \
    \   val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toLong)\n        val unitDigits = unitDigits.map(x\
    \ => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n     \
    \   val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits = unitDigits.toList.map(_.toLong)\n\
    \        val unitDigits = unitDigits.map(x => x * 10)\n        val unitDigits\
    \ = unitDigit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ou72kge.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e\
    [36mx\e[0m => x._1 * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ou72kge.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ou72kge.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => x / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ou72kge.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ou72kge.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m "
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk34od_s.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk34od_s.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpp_qty4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpp_qty4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpp_qty4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoq0gcbrr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoq0gcbrr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqziw08om.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqziw08om.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqziw08om.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqziw08om.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqziw08om.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk34od_s.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk34od_s.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkfnoflxz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnoflxz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnoflxz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnoflxz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnoflxz.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1660009458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fc09q_g.scala:23)\n\tat Problem.main(tmp7fc09q_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits31 = (unitDigits * unitDigits2 * unitDigits3) / 10\n        val\
    \ unitDigits311 = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3) / 10\n\
    \        val unitDigits3111 = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3\
    \ * unitDigits3) / 10\n        val unitDigits31111 = (unitDigits * unitDigits2\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3) / 10\n        val unitDigits311111\
    \ = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3) / 10\n        val unitDigits3111111 = (unitDigits * unitDigits2\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3)\
    \ / 10\n        val unitDigits31111111 = (unitDigits * unitDigits2 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3)\
    \ / 10\n        val unitDigits31111111 = (unitDigits * unitDigits2 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3) / 10\n        val unitDigits31111111 = (unitDigits * unitDigits2\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3) / 10\n        val unitDigits31111111\
    \ = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3)\
    \ / 10\n        val unitDigits31111111 = (unitDigits * unitDigits2 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3) / 10\n        val unitDigits31111111\
    \ = (unitDigits * unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7svvofa8.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7svvofa8.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits31111111\e[0m = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3)\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits31111111 is already defined as \e[33mvalue\e[0m\
    \ \e[35munitDigits31111111\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7svvofa8.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36munitDigits31111111\e[0m\
    \ = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3) / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits31111111 is already defined as \e[33mvalue\e[0m\
    \ \e[35munitDigits31111111\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7svvofa8.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36munitDigits31111111\e[0m\
    \ = (unitDigits * unitDigits2 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3\
    \ * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3 * unitDigits3)\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map { case (unit1, unit2) => unit1 * unit2 }\n\
    \        val unitDigits = unitDigits.toList.sortBy(x => x)\n        val product\
    \ = unitDigits.head\n        unitDigits.tail.foreach(x => product *= x)\n    \
    \    product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpihrexmm4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map\
    \ { \e[33mcase\e[0m (unit1, unit2) => unit1 * unit2 }\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpihrexmm4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpihrexmm4.scala:22:45 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        unitDigits.tail.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value *= is not a member of Int - did you mean product.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4eci8385.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4eci8385.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4eci8385.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.filter(_\
    \ < \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4eci8385.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.filter(_\
    \ < \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4eci8385.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.filter(_\
    \ > \e[31m0\e[0m)\n\e[3"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_2 * unitDigits_3\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_4 * unitDigits_3\n\
    \        val unitDigits_7 = unitDigits_4 * unitDigits_5\n        val unitDigits_8\
    \ = unitDigits_6 * unitDigits_1\n        val unitDigits_9 = unitDigits_6 * unitDigits_3\n\
    \        val unitDigits_10 = unitDigits_6 * unitDigits_5\n        val unitDigits_11\
    \ = unitDigits_8 * unitDigits_1\n        val unitDigits_12 = unitDigits_8 * unitDigits_3\n\
    \        val unitDigits_13 = unitDigits_8 * unitDigits_5\n        val unitDigits_14\
    \ = unitDigits_9 * unitDigits_1\n        val unitDigits_15 = unitDigits_9 * unitDigits_3\n\
    \        val unitDigits_16 = unitDigits_9 * unitDigits_5\n        val unitDigits_17\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_18 = unitDigits_10 *\
    \ unitDigits_3\n        val unitDigits_19 = unitDigits_10 * unitDigits_5\n   \
    \     val unitDigits_20 = unitDigits_11 * unitDigits_1\n        val unitDigits_21\
    \ = unitDigits_11 * unitDigits_3\n        val unitDigits_22 = unitDigits_11 *\
    \ unitDigits_5\n        val unitDigits_23 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_24 = unitDigits_12 * unitDigits_3\n        val unitDigits_25\
    \ = unitDigits_12 * unitDigits_5\n        val unitDigits_26 = unitDigits_13 *\
    \ unitDigits_1\n        val unitDigits_27 = unitDigits_13 * unitDigits_3\n   \
    \     val unitDigits_28 = unitDigits_13 * unitDigits_5\n        val unitDigits_29\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_30 = unitDigits_14 *\
    \ unitDigits_3\n        val unitDigits_31 = unitDigits_14 * unitDigits_5\n   \
    \     val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp455secux.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp455secux.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcd8lm1p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjcd8lm1p.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcd8lm1p.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcd8lm1p.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val unitDigits8\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7)\
    \ / 10\n        val unitDigits9 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7 * unitDigits8) / 10\n        val unitDigits10 =\
    \ (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        unitDigits10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsjcf03ow.scala:30)\n\tat Problem.main(tmpsjcf03ow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toSet\n        val unitDigits2 = unitDigits2.toSet\n        val\
    \ unitDigits = unitDigits.union(unitDigits2).toList\n        val unitDigits =\
    \ unitDigits.toSet\n        val unitDigits = unitDigits.toList\n        val unitDigits\
    \ = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n        val\
    \ unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unitDigits = unitDigits.toSet\n        val unitDigits = unitDigits.toList\n\
    \        val unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpykfwej52.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpykfwej52.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpykfwej52.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpykfwej52.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.union(unitDigits2).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpykfwej52.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpykfwej52.scala:23:12 --------"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map { case (a,b) => a*b }\n        val unitDigits\
    \ = unitDigits.toList.sortBy(_)\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits = unitDigits.mkString(\"\")\n        unitDigits.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr3y6zblj.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map\
    \ { \e[33mcase\e[0m (a,b) => a*b }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr3y6zblj.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr3y6zblj.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.take(unitDigits.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr3y6zblj.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660009459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits4) / 10\n        val unitDigits6 = (unitDigits * unitDigits5)\
    \ / 10\n        val unitDigits7 = (unitDigits * unitDigits6) / 10\n        val\
    \ unitDigits8 = (unitDigits * unitDigits7) / 10\n        val unitDigits9 = (unitDigits\
    \ * unitDigits8) / 10\n        val unitDigits10 = (unitDigits * unitDigits9) /\
    \ 10\n        unitDigits10\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9s17wfq9.scala:30)\n\tat Problem.main(tmp9s17wfq9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits % 10\n        val unit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpszirzn9p.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpszirzn9p.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpszirzn9p.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = unitDigits2 % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2 is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpszirzn9p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpszirzn9p.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpszirzn9p.scala:23:12\
    \ -----------"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jedr1gz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3jedr1gz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jedr1gz.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdefrebfg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdefrebfg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdefrebfg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdefrebfg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdefrebfg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits2\
    \ = unitDigits2 * 10\n        val unitDigits = unitDigits + unitDigits2\n    \
    \    unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmcxlh8a.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmcxlh8a.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 * \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmcxlh8a.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1660009451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
