language: scala
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"a\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"b\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps80ike28.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet.map(x => x + \"m\")\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = newAlphabet.map(x => x + \"k\")\n        val newAlphabet17 = newAlphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet18 = newAlphabet.map(x => x + \"i\")\n\
    \        val newAlphabet19 = newAlphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = newAlphabet.map(x => x + \"g\")\n        val newAlphabet21 = newAlphabet.map(x\
    \ => x + \"f\")\n        val newAlphabet22 = newAlphabet.map(x => x + \"e\")\n\
    \        val newAlphabet23 = newAlphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = newAlphabet.map(x => x + \"c\")\n        val newAlphabet25 = newAlphabet.map(x\
    \ => x + \"b\")\n        val newAlphabet26 = newAlphabet.map(x => x + \"a\")\n\
    \        val newAlphabet27 = newAlphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = newAlphabet.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgxotd68x.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgxotd68x.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x\
    \ => x + \"d\").map(x => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x\
    \ => x + \"h\").map(x => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x\
    \ => x + \"l\").map(x => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x\
    \ => x + \"p\").map(x => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x\
    \ => x + \"t\").map(x => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x\
    \ => x + \"x\").map(x => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n\
    \        val newAlphabet3 = alphabet.map(x => x + \"a\").map(x => x + \"b\").map(x\
    \ => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x => x + \"f\").map(x\
    \ => x + \"g\").map(x => x + \"h\").map(x => x + \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj9q_xt1m.scala:21:193 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \"\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \   unclosed string literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9q_xt1m.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"b\")\n\
    \        val newAlphabet3 = newAlphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = newAlphabet.map(x => x + \"d\")\n        val newAlphabet5 = newAlphabet.map(x\
    \ => x + \"e\")\n        val newAlphabet6 = newAlphabet.map(x => x + \"f\")\n\
    \        val newAlphabet7 = newAlphabet.map(x => x + \"g\")\n        val newAlphabet8\
    \ = newAlphabet.map(x => x + \"h\")\n        val newAlphabet9 = newAlphabet.map(x\
    \ => x + \"i\")\n        val newAlphabet10 = newAlphabet.map(x => x + \"j\")\n\
    \        val newAlphabet11 = newAlphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = newAlphabet.map(x => x + \"l\")\n        val newAlphabet13 = newAlphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet14 = newAlphabet.map(x => x + \"n\")\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = newAlphabet.map(x => x + \"p\")\n        val newAlphabet17 = newAlphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet18 = newAlphabet.map(x => x + \"r\")\n\
    \        val newAlphabet19 = newAlphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet.map(x => x + \"v\")\n\
    \        val newAlphabet23 = newAlphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = newAlphabet.map(x => x + \"x\")\n        val newAlphabet25 = newAlphabet.map(x\
    \ => x + \"y\")\n        val newAlphabet26 = newAlphabet.map(x => x + \"z\")\n\
    \        val newAlphabet27 = newAlphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = newAlphabet.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4e_ltvx4.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e_ltvx4.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength - 1\n        val alphabetLength =\
    \ alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n      \
    \  val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6z72a08.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet2 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet3 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet4 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet5 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet6 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet8 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet9 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet10 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet12 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet13 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet14 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet16 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet17 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet18 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 1))\n        val newAlphabet20 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 1))\n        val newAlphabet21 = alphabet.map(x\
    \ => x -> alphabet\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwc4211xp.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwc4211xp.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet2 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet3 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 4))\n        val newAlphabet4 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 6))\n        val newAlphabet5 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 8))\n        val newAlphabet6 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 10))\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 12))\n        val newAlphabet8 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 14))\n        val newAlphabet9 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 16))\n        val newAlphabet10 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 18))\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 20))\n        val newAlphabet12 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 22))\n        val newAlphabet13 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 24))\n        val newAlphabet14 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 26))\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 28))\n        val newAlphabet16 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 30))\n        val newAlphabet17 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 32))\n        val newAlphabet18 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 34))\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 36))\n        val newAlphabet20 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 38))\n        val new\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnr1ri7zv.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnr1ri7zv.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.toCharArray.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        new String(newString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8nty0r2c.scala:21:12 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mnew\e[0m \e[35mString\e[0m(newString)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m\
    \ \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\
    \e[31m   |\e[0m (x$0: StringBuffer): String\n\e[31m   |\e[0m (x$0: Array[Byte]):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\e[31m\
    \   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\e[31m \
    \  |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1:\
    \ Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1: Int,\
    \ x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\
    \e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String): String\n\
    \e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((newString : Array[(String,\
    \ String)]))\n1 error found\n"
  stdout: ''
  timestamp: 1659797954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x) + 2))\n\
    \        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n      \
    \  newString.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpyw5ag6yf.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmpyw5ag6yf.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpyw5ag6yf.scala:19)\n\
    \tat Problem$.main(tmpyw5ag6yf.scala:24)\n\tat Problem.main(tmpyw5ag6yf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for (i <- 0 until s.length)\n            result.append(alphabet(s.charAt(i)\
    \ - alphabet.indexOf(\"a\") + alphabet.indexOf(\"z\") - alphabet.indexOf(\"a\"\
    )).toString)\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 129\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmp3gffmdgu.scala:21)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmp3gffmdgu.scala:21)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmp3gffmdgu.scala:21)\n\
    \tat Problem$.main(tmp3gffmdgu.scala:25)\n\tat Problem.main(tmp3gffmdgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = alphabet.map(x => x + \"b\")\n\
    \        val rotatedAlphabet3 = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val rotatedAlphabet5 = alphabet.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet6 = alphabet.map(x => x + \"f\")\n\
    \        val rotatedAlphabet7 = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet8\
    \ = alphabet.map(x => x + \"h\")\n        val rotatedAlphabet9 = alphabet.map(x\
    \ => x + \"i\")\n        val rotatedAlphabet10 = alphabet.map(x => x + \"j\")\n\
    \        val rotatedAlphabet11 = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = alphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = alphabet.map(x => x + \"n\")\n\
    \        val rotatedAlphabet15 = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val rotatedAlphabet17 = alphabet.map(x\
    \ => x + \"q\")\n        val rotatedAlphabet18 = alphabet.map(x => x + \"r\")\n\
    \        val rotatedAlphabet19 = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val rotatedAlphabet21 = alphabet.map(x\
    \ => x + \"u\")\n        val rotatedAlphabet22 = alphabet.map(x => x + \"v\")\n\
    \        val rotatedAlphabet23 = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val rotatedAlphabet25 = alphabet.map(x\
    \ => x + \"y\")\n        val rotatedAlphabet26 = alphabet.map(x => x + \"z\")\n\
    \        val rotatedAlphabet27 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3gfec2h3.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3gfec2h3.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength * 2\n        val alphabetLength =\
    \ alphabetLength / 2\n        val alphabetLength = alphabetLength * 2\n      \
    \  val alphabetLength = alphabetLength / 2\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength / 2\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength / 2\n    \
    \    val alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ / 2\n        val alphabetLength = alphabetLength * 2\n        val alphabetLength\
    \ = alphabetLength / 2\n        val alphabetLength = alphabetLength * 2\n    \
    \    val alphabetLength = alphabetLength / 2\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength / 2\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength / 2\n    \
    \    val alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ / 2\n        val alphabetLength = alphabetLength * 2\n        val alphabetLength\
    \ = alphabetLength / 2\n        val alphabetLength = alphabetLength * 2\n    \
    \    val alphabetLength = alphabetLength / 2\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength / 2\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength / 2\n    \
    \    val alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ / 2\n        val alphabetLength = alphabetLength * 2\n        val alphabetLength\
    \ = alphabetLength / 2\n        val alphabetLength = alphabetLength * 2\n    \
    \    val alphabetLength = alphabetLength / 2\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength / 2\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength / 2\n    \
    \    val alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ / 2\n        val alphabetLength = alphabetLength * 2\n        val alphabetLength\
    \ = alphabetLength / 2\n        val alphabetLength = alphabetLength * 2\n    \
    \    val alphabetLength = alphabetLength / 2\n        val alphabetLength = alphabetLength\
    \ * 2\n        val alphabetLength = alphabetLength / 2\n        val alphabetLength\
    \ = alphabetLength * 2\n        val alphabetLength = alphabetLength / 2\n    \
    \    val alphabetLength = alphabetLength * 2\n        val alphabetLength = alphabetLength\
    \ / 2\n        val alphabetLength = alphabetLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu_ydi9pu.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu_ydi9pu.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu_ydi9pu.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu_ydi9pu.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu_ydi9pu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ * \e[31m2\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = alphabet.map(x => x + \"b\")\n\
    \        val rotatedAlphabet3 = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val rotatedAlphabet5 = alphabet.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet6 = alphabet.map(x => x + \"f\")\n\
    \        val rotatedAlphabet7 = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet8\
    \ = alphabet.map(x => x + \"h\")\n        val rotatedAlphabet9 = alphabet.map(x\
    \ => x + \"i\")\n        val rotatedAlphabet10 = alphabet.map(x => x + \"j\")\n\
    \        val rotatedAlphabet11 = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = alphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = alphabet.map(x => x + \"n\")\n\
    \        val rotatedAlphabet15 = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val rotatedAlphabet17 = alphabet.map(x\
    \ => x + \"q\")\n        val rotatedAlphabet18 = alphabet.map(x => x + \"r\")\n\
    \        val rotatedAlphabet19 = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val rotatedAlphabet21 = alphabet.map(x\
    \ => x + \"u\")\n        val rotatedAlphabet22 = alphabet.map(x => x + \"v\")\n\
    \        val rotatedAlphabet23 = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val rotatedAlphabet25 = alphabet.map(x\
    \ => x + \"y\")\n        val rotatedAlphabet26 = alphabet.map(x => x + \"z\")\n\
    \        val rotatedAlphabet27 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3gfec2h3.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3gfec2h3.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprefrckod.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"aa\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"ab\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp41u3erze.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp828kpw2q.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp828kpw2q.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedAlphabet3 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxwuplsdv.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxwuplsdv.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\").map(x => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x\
    \ => x + \"d\").map(x => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x\
    \ => x + \"h\").map(x => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x\
    \ => x + \"l\").map(x => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x\
    \ => x + \"p\").map(x => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x\
    \ => x + \"t\").map(x => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x\
    \ => x + \"x\").map(x => x + \"y\").map(x => x + \"z\")\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x)))\n        val newString2 = newString.map(x\
    \ => x.toUpperCase)\n        val newString3 = newString2.map(x => x.toUpperCase)\n\
    \        val newString4 = newString3.map(x => x.toUpperCase)\n        val newString5\
    \ = newString4.map(x => x.toUpperCase)\n        val newString6 = newString5.map(x\
    \ => x.toUpperCase)\n        val newString7 = newString6.map(x => x.toUpperCase)\n\
    \        val newString8 = newString7.map(x => x.toUpperCase)\n        val newString9\
    \ = newString8.map(x => x.toUpperCase)\n        val newString10 = newString9.map(x\
    \ => x.toUpperCase)\n        val newString11 = newString10.map(x => x.toUpperCase)\n\
    \        val newString12 = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp40dl5qsy.scala:31:25 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnewString12\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40dl5qsy.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbkswyrit.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpbkswyrit.scala:19)\n\tat Problem$.main(tmpbkswyrit.scala:24)\n\
    \tat Problem.main(tmpbkswyrit.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(rotatedAlphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpseksh4op.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmpseksh4op.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpseksh4op.scala:19)\n\
    \tat Problem$.main(tmpseksh4op.scala:24)\n\tat Problem.main(tmpseksh4op.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedAlphabet3 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxwuplsdv.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxwuplsdv.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val rotatedString\
    \ = s.map(x => rotatedAlphabet(alphabet.indexOf(x) + 1))\n        rotatedString.map(x\
    \ => alphabet(alphabet.indexOf(x) - 1)).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmp9hteui0y.scala:21)\n\tat scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)\n\
    \tat scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)\n\tat Problem$.encrypt(tmp9hteui0y.scala:21)\n\
    \tat Problem$.main(tmp9hteui0y.scala:24)\n\tat Problem.main(tmp9hteui0y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = alphabet.map(x => x + \"y\")\n\
    \        val rotatedAlphabet3 = alphabet.map(x => x + \"x\")\n        val rotatedAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet5 = alphabet.map(x\
    \ => x + \"v\")\n        val rotatedAlphabet6 = alphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet7 = alphabet.map(x => x + \"t\")\n        val rotatedAlphabet8\
    \ = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet9 = alphabet.map(x\
    \ => x + \"r\")\n        val rotatedAlphabet10 = alphabet.map(x => x + \"q\")\n\
    \        val rotatedAlphabet11 = alphabet.map(x => x + \"p\")\n        val rotatedAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet13 = alphabet.map(x\
    \ => x + \"n\")\n        val rotatedAlphabet14 = alphabet.map(x => x + \"m\")\n\
    \        val rotatedAlphabet15 = alphabet.map(x => x + \"l\")\n        val rotatedAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet17 = alphabet.map(x\
    \ => x + \"j\")\n        val rotatedAlphabet18 = alphabet.map(x => x + \"i\")\n\
    \        val rotatedAlphabet19 = alphabet.map(x => x + \"h\")\n        val rotatedAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet21 = alphabet.map(x\
    \ => x + \"f\")\n        val rotatedAlphabet22 = alphabet.map(x => x + \"e\")\n\
    \        val rotatedAlphabet23 = alphabet.map(x => x + \"d\")\n        val rotatedAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet25 = alphabet.map(x\
    \ => x + \"b\")\n        val rotatedAlphabet26 = alphabet.map(x => x + \"a\")\n\
    \        val rotatedAlphabet27 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp8odtd67.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8odtd67.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val result = new StringBuilder\n        val length = s.length\n     \
    \   val shiftMultiplier = alphabetLength / 2\n        val shiftMultiplier2 = alphabetLength\
    \ / 4\n        val shiftMultiplier3 = alphabetLength / 8\n        val shiftMultiplier4\
    \ = alphabetLength / 16\n        val shiftMultiplier5 = alphabetLength / 32\n\
    \        val shiftMultiplier6 = alphabetLength / 64\n        val shiftMultiplier7\
    \ = alphabetLength / 128\n        val shiftMultiplier8 = alphabetLength / 256\n\
    \        val shiftMultiplier9 = alphabetLength / 512\n        val shiftMultiplier10\
    \ = alphabetLength / 1024\n        val shiftMultiplier11 = alphabetLength / 2048\n\
    \        val shiftMultiplier12 = alphabetLength / 4096\n        val shiftMultiplier13\
    \ = alphabetLength / 8192\n        val shiftMultiplier14 = alphabetLength / 16384\n\
    \        val shiftMultiplier15 = alphabetLength / 32768\n        val shiftMultiplier16\
    \ = alphabetLength / 65536\n        val shiftMultiplier17 = alphabetLength / 131072\n\
    \        val shiftMultiplier18 = alphabetLength / 262144\n        val shiftMultiplier19\
    \ = alphabetLength / 524288\n        val shiftMultiplier20 = alphabetLength /\
    \ 1048576\n        val shiftMultiplier21 = alphabetLength / 2097152\n        val\
    \ shiftMultiplier22 = alphabetLength / 4194304\n        val shiftMultiplier23\
    \ = alphabetLength / 8388608\n        val shiftMultiplier24 = alphabetLength /\
    \ 16777216\n        val shiftMultiplier25 = alphabetLength / 33554432\n      \
    \  val shiftMultiplier26 = alphabetLength / 67108864\n        val shiftMultiplier27\
    \ = alphabetLength / 134217728\n        val shiftMultiplier28 = alphabetLength\
    \ / 268435456\n        val shiftMultiplier29 = alphabetLength / 536870912\n  \
    \      val shiftMultiplier30 = alphabetLength / 1073741824\n        val shiftMultiplier31\
    \ = alphabetLength / 2147483648\n        val shiftMultiplier32 = alphabetLength\
    \ / 4294967296\n        val shiftMultiplier33 = alphabetLength / 8589934592\n\
    \        val shiftMultiplier34 = alphabetLength / 17179869\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2qtzs554.scala:52:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mshiftMultiplier31\e[0m =\
    \ alphabetLength / \e[31m2147483648\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                        number too large\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp2qtzs554.scala:53:49 -----------------------------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mshiftMultiplier32\e[0m = alphabetLength\
    \ / \e[31m4294967296\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                         number too large\n\e[31m\e[31m-- Error: /tmp/tmp2qtzs554.scala:54:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m54 |\e[0m       \
    \ \e[33mval\e[0m \e[36mshiftMultiplier33\e[0m = alphabetLength / \e[31m8589934592\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 number too\
    \ large\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qtzs554.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength - 1\n        val alphabetLength =\
    \ alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n      \
    \  val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6z72a08.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet.map(x => x + \"c\")\n   \
    \     val rotatedAlphabet4 = rotatedAlphabet.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet.map(x => x + \"\
    h\")\n        val rotatedAlphabet9 = rotatedAlphabet.map(x => x + \"i\")\n   \
    \     val rotatedAlphabet10 = rotatedAlphabet.map(x => x + \"j\")\n        val\
    \ rotatedAlphabet11 = rotatedAlphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = rotatedAlphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = rotatedAlphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet.map(x => x +\
    \ \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet.map(x => x + \"o\")\n\
    \        val rotatedAlphabet16 = rotatedAlphabet.map(x => x + \"p\")\n       \
    \ val rotatedAlphabet17 = rotatedAlphabet.map(x => x + \"q\")\n        val rotatedAlphabet18\
    \ = rotatedAlphabet.map(x => x + \"r\")\n        val rotatedAlphabet19 = rotatedAlphabet.map(x\
    \ => x + \"s\")\n        val rotatedAlphabet20 = rotatedAlphabet.map(x => x +\
    \ \"t\")\n        val rotatedAlphabet21 = rotatedAlphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet.map(x => x + \"v\")\n       \
    \ val rotatedAlphabet23 = rotatedAlphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = rotatedAlphabet.map(x => x + \"x\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppb3tkttn.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb3tkttn.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x - 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqkhl7_g0.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqkhl7_g0.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x - 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqkhl7_g0.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqkhl7_g0.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val newAlphabet = alphabet.map(x => (x - alphabetLength) % alphabetLength\
    \ + alphabetLength)\n        val newAlphabetLength = newAlphabet.length\n    \
    \    val newAlphabetReverse = newAlphabet.reverse\n        val newAlphabetReverseLength\
    \ = newAlphabetReverse.length\n        val newAlphabetReverseNewLength = newAlphabetReverse.map(x\
    \ => x - newAlphabetLength)\n        val newAlphabetReverseNewLengthLength = newAlphabetReverseNewLength.length\n\
    \        val newAlphabetReverseNewLengthNewLength = newAlphabetReverseNewLength.map(x\
    \ => x - newAlphabetLength)\n        val newAlphabetReverseNewLengthNewLengthLength\
    \ = newAlphabetReverseNewLengthNewLength.map(x => x - newAlphabetLength)\n   \
    \     val newAlphabetReverseNewLengthNewLengthNewLengthLength = newAlphabetReverseNewLengthNewLength.map(x\
    \ => x - newAlphabetLength)\n        val newAlphabetReverseNewLengthNewLengthNewLengthLength\
    \ = newAlphabetReverseNewLengthNewLength.map(x => x - newAlphabetLength)\n   \
    \     val newAlphabetReverseNewLengthNewLengthNewLengthNewLength = newAlphabetReverseNewLengthNewLength.map(x\
    \ => x - newAlphabetLength)\n        val newAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\
    \ = newAlphabetReverseNewLengthNewLength.map(x => x - newAlphabetLength)\n   \
    \     val newAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength = newAlphabetReverseNewLengthNewLength.map(x\
    \ => x - newAlphabetLength)\n        val newAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\
    \ = newAlphabetReverseNewLengthNewLength.map(x => x - newAlphabetLength)\n   \
    \     val newAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength = newAlphabetReverseNewLengthNewLength.map(x\
    \ => x - newAlphabetLength)\n        val newAlphabetReverseNewLengthNewLengthNewLengthNewLengthNewLength\
    \ = newAlphabetReverseNewLengthNewLength.map(x => x - newAlphabetLength)\n   \
    \     val newAlphabetReverseNewLengthNewLengthNewLengthNewLengthNewLength = newAlphabetReverseNewLengthNewLength.map(x\
    \ => x - newAlphabetLength)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdttzowuf.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetReverseNewLengthNewLengthNewLengthLength\e\
    [0m = newAlphabetReverseNewLengthNewLength.map(\e[36mx\e[0m => x - newAlphabetLength)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewAlphabetReverseNewLengthNewLengthNewLengthLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mnewAlphabetReverseNewLengthNewLengthNewLengthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdttzowuf.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\e\
    [0m = newAlphabetReverseNewLengthNewLength.map(\e[36mx\e[0m => x - newAlphabetLength)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdttzowuf.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\e\
    [0m = newAlphabetReverseNewLengthNewLength.map(\e[36mx\e[0m => x - newAlphabetLength)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewAlphabetReverseNewLengthNewLengthNewLengthNewLengthLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewAlphabetReverseNewLe"
  stdout: ''
  timestamp: 1660009242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp828kpw2q.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp828kpw2q.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbkqxzldm.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet2 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet3 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet4 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet5 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet6 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet7 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet8 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet9 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp99juy80r.scala:26:113 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36malphabet9\e[0m = List(\e\
    [31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e[0m,\e[31m'e'\e[0m,\e[31m'f'\e\
    [0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e[31m'j'\e[0m,\e[31m'k'\e[0m,\e\
    [31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e[0m,\e[31m'p'\e[0m,\e[31m'q'\e\
    [0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e[31m'u'\e[0m,\e[31m'v\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 'v is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"v\" or an application Symbol(\"v\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{v} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp99juy80r.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp99juy80r.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"p\")\n        val newAlphabet12 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"n\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"l\")\n        val newAlphabet16 = alphabet.map(x => x + \"k\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"j\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"i\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"h\")\n        val newAlphabet20 = alphabet.map(x => x + \"g\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"f\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"e\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"d\")\n        val newAlphabet24 = alphabet.map(x => x + \"c\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"b\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"a\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl33wabnb.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl33wabnb.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009238
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            }\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ybe88l4.scala:30)\n\tat Problem.main(tmp_ybe88l4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        val len = len / 2\n        val half = len\
    \ / 2\n        val half2 = len / 4\n        val half3 = len / 8\n        val half4\
    \ = len / 16\n        val half5 = len / 32\n        val half6 = len / 64\n   \
    \     val half7 = len / 128\n        val half8 = len / 256\n        val half9\
    \ = len / 512\n        val half10 = len / 1024\n        val half11 = len / 2048\n\
    \        val half12 = len / 4096\n        val half13 = len / 8192\n        val\
    \ half14 = len / 16384\n        val half15 = len / 32768\n        val half16 =\
    \ len / 65536\n        val half17 = len / 131072\n        val half18 = len / 262144\n\
    \        val half19 = len / 524288\n        val half20 = len / 1048576\n     \
    \   val half21 = len / 2097152\n        val half22 = len / 4194304\n        val\
    \ half23 = len / 8388608\n        val half24 = len / 16777216\n        val half25\
    \ = len / 33554432\n        val half26 = len / 67108864\n        val half27 =\
    \ len / 134217728\n        val half28 = len / 268435456\n        val half29 =\
    \ len / 536870912\n        val half30 = len / 1073741824\n        val half31 =\
    \ len / 2147483648\n        val half32 = len / 4294967296\n        val half33\
    \ = len / 8589934592\n        val half34 = len / 17179869184\n        val half35\
    \ = len / 34359738368\n        val half36 = len / 68719476736\n        val half37\
    \ = len / 137438953472\n        val half38 = len / 274877906944\n        val half39\
    \ = len / 536870912\n        val half40 = len / 1073741824\n        val half41\
    \ = len / 2147483648\n        val half42 = len / 42949\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb7eo7fy4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = len / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlen is\
    \ already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpb7eo7fy4.scala:52:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mhalf31\e[0m = len / \e[31m2147483648\e\
    [0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           number too large\n\e[31m\e[31m-- Error: /tmp/tmpb7eo7fy4.scala:53:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m53 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhalf32\e[0m = len / \e[31m4294967296\e[0m\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   number too large\n\e[31m\e[31m-- Error: /tmp/tmpb7eo7fy4.scala:54:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m54 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhalf33\e[0m = len / \e[31m8589934592\e[0m\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   number too large\n\e[31m\e[31m-- Error: /tmp/tmpb7eo7fy4.scala:55:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m55 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhalf34\e[0m = len / \e[31m17179869184\e[0m\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                    number too large\n\e[31m\e[31m-- Error: /tmp/tmpb7eo7fy4.scala:56:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m56 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhalf35\e[0m = len / \e[31m34359738368\e[0m\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                    number too large\n\e[31m\e[31m-- Error: /tmp/tmpb7eo7fy4.scala:57:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m57 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhalf36\e[0m = len / \e[31m68719476736\e[0"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\").map(x => x + \"p\").map(x => x + \"q\").map(x => x + \"r\").map(x\
    \ => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x => x + \"v\").map(x\
    \ => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x => x + \"z\").map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val newString = s.toUpperCase\n \
    \       val newStringList = newString.toList\n        val newStringList2 = newStringList.map(x\
    \ => newAlphabet(x.toInt))\n        val newStringList3 = newStringList2.toList\n\
    \        val newStringList4 = newStringList3.map(x => x.mkString)\n        val\
    \ newStringList5 = newStringList4.map(x => x.reverse)\n        val newStringList6\
    \ = newStringList5.map(x => x.reverse)\n        val newStringList7 = newStringList6.map(x\
    \ => x.reverse)\n        val newStringList8 = newStringList7.map(x => x.reverse)\n\
    \        val newStringList9 = newStringList8.map(x => x.reverse)\n        val\
    \ newStringList10 = newStringList9.map(x => x.reverse)\n        val newStringList11\
    \ = newStringList10.map(x => x.reverse)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppi533xww.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        for(i <- 0 until len) {\n            val\
    \ index = alphabet.indexOf(s.charAt(i))\n            val newIndex = index + 2\n\
    \            if(newIndex < alphabet.length) {\n                result.append(alphabet(newIndex))\n\
    \            } else {\n                result.append(alphabet(0))\n          \
    \  }\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_16eeul.scala:33)\n\tat Problem.main(tmp6_16eeul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpi6vbkw_0.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpi6vbkw_0.scala:19)\n\tat Problem$.main(tmpi6vbkw_0.scala:24)\n\
    \tat Problem.main(tmpi6vbkw_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi5s1hfvc.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x - \e[31m2\e[0m).toChar)\n\e[31m\e[31m   |\e[0m              \
    \                               ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder()\n\
    \        val len = s.length\n        val alphabetLength = alphabet.length\n  \
    \      var i = 0\n        while (i < len) {\n            val c = s.charAt(i)\n\
    \            val index = alphabet.indexOf(c)\n            val newIndex = index\
    \ + 2\n            if (newIndex < alphabetLength) {\n                result.append(alphabet(newIndex))\n\
    \            } else {\n                result.append(alphabet(alphabetLength -\
    \ 1))\n            }\n            i += 1\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwmuwzf2_.scala:37)\n\tat Problem.main(tmpwmuwzf2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength - 1\n        val alphabetLength =\
    \ alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n      \
    \  val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6z72a08.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$27(tmpmm8xn08t.scala:20)\n\tat Problem$.$anonfun$adapted$1(tmpmm8xn08t.scala:20)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpmm8xn08t.scala:20)\n\
    \tat Problem$.main(tmpmm8xn08t.scala:24)\n\tat Problem.main(tmpmm8xn08t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex >= alphabet.length)\
    \ newIndex -= alphabet.length\n            result.append(alphabet(newIndex))\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4656mccm.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(newIndex >= alphabet.length)\
    \ newIndex -= alphabet.length\n\e[31m\e[31m   |\e[0m                         \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value -= is\
    \ not a member of Int - did you mean newIndex.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x - 2).toChar).map(x => alphabet(alphabet.indexOf(x)))\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxnmpnir.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x - \e[31m2\e[0m).toChar).map(\e[36mx\e[0m => alphabet(alphabet.indexOf(x)))\n\
    \e[31m\e[31m   |\e[0m                                             ^^^\e[0m\n\e\
    [31m   |\e[0mvalue - is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x\
    \ => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x\
    \ => x + \"k\").map(x => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppnhlov5k.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppnhlov5k.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength.toInt\n\
    \        val alphabetLength = alphabetLength.toInt\n        val alphabetLength\
    \ = alphabetLength.toInt\n        val alphabetLength = alphabetLength\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo8ousu42.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo8ousu42.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo8ousu42.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo8ousu42.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo8ousu42.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1660009249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.map(x => x._1\
    \ + x._2).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp7wrhy3qa.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmp7wrhy3qa.scala:19)\n\tat Problem$.main(tmp7wrhy3qa.scala:24)\n\
    \tat Problem.main(tmp7wrhy3qa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        val len = len / 2\n        val half = len\
    \ / 2\n        val half2 = len / 2\n        val half3 = len / 2\n        val half4\
    \ = len / 2\n        val half5 = len / 2\n        val half6 = len / 2\n      \
    \  val half7 = len / 2\n        val half8 = len / 2\n        val half9 = len /\
    \ 2\n        val half10 = len / 2\n        val half11 = len / 2\n        val half12\
    \ = len / 2\n        val half13 = len / 2\n        val half14 = len / 2\n    \
    \    val half15 = len / 2\n        val half16 = len / 2\n        val half17 =\
    \ len / 2\n        val half18 = len / 2\n        val half19 = len / 2\n      \
    \  val half20 = len / 2\n        val half21 = len / 2\n        val half22 = len\
    \ / 2\n        val half23 = len / 2\n        val half24 = len / 2\n        val\
    \ half25 = len / 2\n        val half26 = len / 2\n        val half27 = len / 2\n\
    \        val half28 = len / 2\n        val half29 = len / 2\n        val half30\
    \ = len / 2\n        val half31 = len / 2\n        val half32 = len / 2\n    \
    \    val half33 = len / 2\n        val half34 = len / 2\n        val half35 =\
    \ len / 2\n        val half36 = len / 2\n        val half37 = len / 2\n      \
    \  val half38 = len / 2\n        val half39 = len / 2\n        val half40 = len\
    \ / 2\n        val half41 = len / 2\n        val half42 = len / 2\n        val\
    \ half43 = len / 2\n        val half44 = len / 2\n        val half45 = len / 2\n\
    \        val half46 = len / 2\n        val half47 = len / 2\n        val half48\
    \ = len / 2\n        val half49 = len / 2\n        val half50 = len / 2\n    \
    \    val half51 = len\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8uud5jpy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = len / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlen is\
    \ already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8uud5jpy.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val newAlphabet = alphabet.map(x => alphabet(alphabetLength - alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabetLength = newAlphabet.length\n        val newAlphabetReverse\
    \ = newAlphabet.reverse\n        val newAlphabetReverseLength = newAlphabetReverse.length\n\
    \        val newAlphabetReverseReverse = newAlphabetReverse.reverse.reverse\n\
    \        val newAlphabetReverseReverseLength = newAlphabetReverseReverse.length\n\
    \        val newAlphabetReverseReverseReverse = newAlphabetReverseReverse.reverse.reverse.reverse\n\
    \        val newAlphabetReverseReverseReverseLength = newAlphabetReverseReverseReverse.length\n\
    \        val newAlphabetReverseReverseReverseReverse = newAlphabetReverseReverseReverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6kp4ee6v.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"a\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"b\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps80ike28.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x - 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqkhl7_g0.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqkhl7_g0.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet12 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet16 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet20 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet24 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"aa\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp875a2d8e.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp875a2d8e.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        val newString2 = newString.map(x\
    \ => x._1 -> x._2)\n        val newString3 = newString2.map(x => x._1 -> x._2)\n\
    \        val newString4 = newString3.map(x => x._1 -> x._2)\n        val newString5\
    \ = newString4.map(x => x._1 -> x._2)\n        val newString6 = newString5.map(x\
    \ => x._1 -> x._2)\n        val newString7 = newString6.map(x => x._1 -> x._2)\n\
    \        val newString8 = newString7.map(x => x._1 -> x._2)\n        val newString9\
    \ = newString8.map(x => x._1 -> x._2)\n        val newString10 = newString9.map(x\
    \ => x._1 -> x._2)\n        val newString11 = newString10.map(x => x._1 -> x._2)\n\
    \        val newString12 = newString11.map(x => x._1 -> x._2)\n        val newString13\
    \ = newString12.map(x => x._1 -> x._2)\n        val newString14 = newString13.map(x\
    \ => x._1 -> x._2)\n        val newString15 = newString14.map(x => x._1 -> x._2)\n\
    \        val newString16 = newString15.map(x => x._1 -> x._2)\n        val newString17\
    \ = newString16.map(x => x._1 -> x._2)\n        val newString18 = newString17.map(x\
    \ => x._1 -> x._2)\n        val newString19 = newString18.map(x => x._1 -> x._2)\n\
    \        val newString20 = newString19.map(x => x._1 -> x._2)\n        val newString21\
    \ = newString20.map(x => x._1 -> x._2)\n        val newString22 = newString21.map(x\
    \ => x._1 -> x._2)\n        val newString23 = newString22.map(x => x._1 -> x._2)\n\
    \        val newString24 = new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4por_7fa.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4por_7fa.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x\
    \ => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x\
    \ => x + \"k\").map(x => x + \"j\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppnhlov5k.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppnhlov5k.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        val len = len / 2\n        val half = len\
    \ / 2\n        val half2 = len / 2\n        val half3 = len / 2\n        val half4\
    \ = len / 2\n        val half5 = len / 2\n        val half6 = len / 2\n      \
    \  val half7 = len / 2\n        val half8 = len / 2\n        val half9 = len /\
    \ 2\n        val half10 = len / 2\n        val half11 = len / 2\n        val half12\
    \ = len / 2\n        val half13 = len / 2\n        val half14 = len / 2\n    \
    \    val half15 = len / 2\n        val half16 = len / 2\n        val half17 =\
    \ len / 2\n        val half18 = len / 2\n        val half19 = len / 2\n      \
    \  val half20 = len / 2\n        val half21 = len / 2\n        val half22 = len\
    \ / 2\n        val half23 = len / 2\n        val half24 = len / 2\n        val\
    \ half25 = len / 2\n        val half26 = len / 2\n        val half27 = len / 2\n\
    \        val half28 = len / 2\n        val half29 = len / 2\n        val half30\
    \ = len / 2\n        val half31 = len / 2\n        val half32 = len / 2\n    \
    \    val half33 = len / 2\n        val half34 = len / 2\n        val half35 =\
    \ len / 2\n        val half36 = len / 2\n        val half37 = len / 2\n      \
    \  val half38 = len / 2\n        val half39 = len / 2\n        val half40 = len\
    \ / 2\n        val half41 = len / 2\n        val half42 = len / 2\n        val\
    \ half43 = len / 2\n        val half44 = len / 2\n        val half45 = len / 2\n\
    \        val half46 = len / 2\n        val half47 = len / 2\n        val half48\
    \ = len / 2\n        val half49 = len / 2\n        val half50 = len / 2\n    \
    \    val half51 = len\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8uud5jpy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = len / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlen is\
    \ already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8uud5jpy.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex >= alphabet.length)\
    \ newIndex -= alphabet.length\n            result.append(alphabet(newIndex))\n\
    \        }\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1a4p47tw.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(newIndex >= alphabet.length)\
    \ newIndex -= alphabet.length\n\e[31m\e[31m   |\e[0m                         \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value -= is\
    \ not a member of Int - did you mean newIndex.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val result = new StringBuilder\n        val length = s.length\n     \
    \   val rotations = length / alphabetLength\n        val rotation = (length /\
    \ alphabetLength).toInt\n        val rotationIndex = (rotations * rotation).toInt\n\
    \        val rotationIndex2 = ((rotations * rotation) + rotation).toInt\n    \
    \    val rotationIndex3 = ((rotations * rotation) + rotation + 1).toInt\n    \
    \    val rotationIndex4 = ((rotations * rotation) + rotation + 2).toInt\n    \
    \    val rotationIndex5 = ((rotations * rotation) + rotation + 3).toInt\n    \
    \    val rotationIndex6 = ((rotations * rotation) + rotation + 4).toInt\n    \
    \    val rotationIndex7 = ((rotations * rotation) + rotation + 5).toInt\n    \
    \    val rotationIndex8 = ((rotations * rotation) + rotation + 6).toInt\n    \
    \    val rotationIndex9 = ((rotations * rotation) + rotation + 7).toInt\n    \
    \    val rotationIndex10 = ((rotations * rotation) + rotation + 8).toInt\n   \
    \     val rotationIndex11 = ((rotations * rotation) + rotation + 9).toInt\n  \
    \      val rotationIndex12 = ((rotations * rotation) + rotation + 10).toInt\n\
    \        val rotationIndex13 = ((rotations * rotation) + rotation + 11).toInt\n\
    \        val rotationIndex14 = ((rotations * rotation) + rotation + 12).toInt\n\
    \        val rotationIndex15 = ((rotations * rotation) + rotation + 13).toInt\n\
    \        val rotationIndex16 = ((rotations * rotation) + rotation + 14).toInt\n\
    \        val rotationIndex17 = ((rotations * rotation) + rotation + 15).toInt\n\
    \        val rotationIndex18 = ((rotations * rotation) + rotation + 16).toInt\n\
    \        val rotationIndex19 = ((rotations * rotation) + rotation + 17).toInt\n\
    \        val rotationIndex20 = ((rotations * rotation) + rotation + 18).toInt\n\
    \        val rotationIndex21 = ((rotations * rotation) + rotation + 19).toInt\n\
    \        val rotationIndex22 = ((rotations * rotation) + rotation + 20).toInt\n\
    \        val rotationIndex23 = ((rotations * rotation) + rotation + 21).toInt\n\
    \        val rotationIndex24 = ((rotations * rotation) + rotation + 22).toInt\n\
    \        val rotationIndex25 = ((rotations * rotation) + rotation + 23).toInt\n\
    \        val rotationIndex26 = ((\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw_g7_nft.scala:49:32 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mrotationIndex26\e[0m = ((\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw_g7_nft.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x + 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3jf6986_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3jf6986_.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val index = alphabet.indexOf(s.charAt(i))\n            val newIndex\
    \ = index + 2\n            if(newIndex >= alphabetLength) newIndex -= alphabetLength\n\
    \            result.append(alphabet(newIndex))\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtyfxkbz.scala:24:52 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(newIndex >= alphabetLength)\
    \ newIndex -= alphabetLength\n\e[31m\e[31m   |\e[0m                          \
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value -= is not\
    \ a member of Int - did you mean newIndex.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbkqxzldm.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder()\n\
    \        val len = s.length\n        val l = alphabet.length\n        for(i <-\
    \ 0 until len) {\n            val index = alphabet.indexOf(s.charAt(i))\n    \
    \        val newIndex = index + 2\n            if(newIndex >= l) {\n         \
    \       newIndex -= l\n            }\n            result.append(alphabet(newIndex))\n\
    \        }\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5l2b0xox.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                newIndex -= l\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value -= is not\
    \ a member of Int - did you mean newIndex.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbkswyrit.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpbkswyrit.scala:19)\n\tat Problem$.main(tmpbkswyrit.scala:24)\n\
    \tat Problem.main(tmpbkswyrit.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            }\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ybe88l4.scala:30)\n\tat Problem.main(tmp_ybe88l4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => alphabet(alphabet.indexOf(x) + 2))\n        val result = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmprcs2moev.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmprcs2moev.scala:19)\n\tat Problem$.main(tmprcs2moev.scala:24)\n\
    \tat Problem.main(tmprcs2moev.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x) + 2))\n\
    \        val newString = new StringBuilder(s)\n        newString.reverse.foreach(x\
    \ => newString.append(newAlphabet(alphabet.indexOf(x))))\n        newString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxy5yn4cs.scala:22:18\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        newString.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    StringBuilder\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 0))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 3))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 4))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 5))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 6))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 7))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 8))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 9))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 10))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 11))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 12))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 13))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 14))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 15))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 16))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 17))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 18))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfsyrihup.scala:38:81 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet20\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> alphabet(alphabet.indexOf(x) + \n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfsyrihup.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = alphabet.map(x => x + \"y\")\n\
    \        val rotatedAlphabet3 = alphabet.map(x => x + \"x\")\n        val rotatedAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet5 = alphabet.map(x\
    \ => x + \"v\")\n        val rotatedAlphabet6 = alphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet7 = alphabet.map(x => x + \"t\")\n        val rotatedAlphabet8\
    \ = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet9 = alphabet.map(x\
    \ => x + \"r\")\n        val rotatedAlphabet10 = alphabet.map(x => x + \"q\")\n\
    \        val rotatedAlphabet11 = alphabet.map(x => x + \"p\")\n        val rotatedAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet13 = alphabet.map(x\
    \ => x + \"n\")\n        val rotatedAlphabet14 = alphabet.map(x => x + \"m\")\n\
    \        val rotatedAlphabet15 = alphabet.map(x => x + \"l\")\n        val rotatedAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet17 = alphabet.map(x\
    \ => x + \"j\")\n        val rotatedAlphabet18 = alphabet.map(x => x + \"i\")\n\
    \        val rotatedAlphabet19 = alphabet.map(x => x + \"h\")\n        val rotatedAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet21 = alphabet.map(x\
    \ => x + \"f\")\n        val rotatedAlphabet22 = alphabet.map(x => x + \"e\")\n\
    \        val rotatedAlphabet23 = alphabet.map(x => x + \"d\")\n        val rotatedAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet25 = alphabet.map(x\
    \ => x + \"b\")\n        val rotatedAlphabet26 = alphabet.map(x => x + \"a\")\n\
    \        val rotatedAlphabet27 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp8odtd67.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8odtd67.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\")\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x)))\n        val newString2 = newString.map(x\
    \ => x.toUpperCase)\n        val newString3 = newString2.map(x => x.reverse)\n\
    \        val newString4 = newString3.map(x => x.reverse)\n        val newString5\
    \ = newString4.map(x => x.reverse)\n        val newString6 = newString5.map(x\
    \ => x.reverse)\n        val newString7 = newString6.map(x => x.reverse)\n   \
    \     val newString8 = newString7.map(x => x.reverse)\n        val newString9\
    \ = newString8.map(x => x.reverse)\n        val newString10 = newString9.map(x\
    \ => x.reverse)\n        val newString11 = newString10.map(x => x.reverse)\n \
    \       val newString12 = newString11.map(x => x.reverse)\n        val newString13\
    \ = newString12.map(x => x.reverse)\n        val newString14 = newString13.map(x\
    \ => x.reverse)\n        val newString15 = newString14.map(x => x.reverse)\n \
    \       val newString16 = newString15.map(x => x.reverse)\n        val newString17\
    \ = newString16.map(x => x.reverse)\n        val newString18 = newString17.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm6n7cuub.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm6n7cuub.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"aa\").map(x => x + \"bb\").map(x\
    \ => x + \"cc\").map(x => x + \"dd\").map(x => x + \"ee\").map(x => x + \"ff\"\
    ).map(x => x + \"gg\").map(x => x + \"hh\").map(x => x + \"ii\").map(x => x +\
    \ \"jj\").map(x => x + \"kk\").map(x => x + \"ll\").map(x => x + \"mm\").map(x\
    \ => x + \"nn\").map(x => x + \"oo\").map(x => x + \"pp\").map(x => x + \"qq\"\
    ).map(x => x + \"rr\").map(x => x + \"ss\").map(x => x + \"tt\").map(x => x +\
    \ \"uu\").map(x => x + \"vv\").map(x => x + \"ww\").map(x => x + \"xx\").map(x\
    \ => x + \"yy\").map(x => x + \"zz\").map(x => x + \"aaa\").map(x => x + \"bbb\"\
    ).map(x => x + \"ccc\").map(x => x + \"ddd\").map(x => x + \"eee\").map(x => x\
    \ + \"fff\").map(x => x + \"ggg\").map(x => x + \"hhh\").map(x => x + \"iii\"\
    ).map(x => x + \"jjj\").map(x => x + \"kkk\").map(x => x + \"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_04hul5r.scala:19:1230 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"aa\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"bb\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"cc\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"dd\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ee\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"ff\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"gg\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"hh\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ii\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"jj\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"kk\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"ll\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"mm\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"nn\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"oo\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"pp\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"qq\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"rr\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ss\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"tt\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"uu\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"vv\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ww\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"xx\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"yy\"\e[0m).map(\e[36mx\e[0m => x + "
  stdout: ''
  timestamp: 1660009253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprefrckod.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet3 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet4 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet5 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet6 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet7 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet8 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet9 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet10 = List(\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val alphabet11 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp828kpw2q.scala:28:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp828kpw2q.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk8v4y0j3.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8v4y0j3.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            } else {\n   \
    \             result.append(alphabet(alphabet.length - 1))\n            }\n  \
    \      }\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa8t78985.scala:32)\n\tat Problem.main(tmpa8t78985.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 2)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet3 = alphabet.map(x => x -\
    \ 1)\n        val newAlphabet4 = alphabet.map(x => x - 2)\n        val newAlphabet5\
    \ = alphabet.map(x => x - 3)\n        val newAlphabet6 = alphabet.map(x => x -\
    \ 4)\n        val newAlphabet7 = alphabet.map(x => x - 5)\n        val newAlphabet8\
    \ = alphabet.map(x => x - 6)\n        val newAlphabet9 = alphabet.map(x => x -\
    \ 7)\n        val newAlphabet10 = alphabet.map(x => x - 8)\n        val newAlphabet11\
    \ = alphabet.map(x => x - 9)\n        val newAlphabet12 = alphabet.map(x => x\
    \ - 10)\n        val newAlphabet13 = alphabet.map(x => x - 11)\n        val newAlphabet14\
    \ = alphabet.map(x => x - 12)\n        val newAlphabet15 = alphabet.map(x => x\
    \ - 13)\n        val newAlphabet16 = alphabet.map(x => x - 14)\n        val newAlphabet17\
    \ = alphabet.map(x => x - 15)\n        val newAlphabet18 = alphabet.map(x => x\
    \ - 16)\n        val newAlphabet19 = alphabet.map(x => x - 17)\n        val newAlphabet20\
    \ = alphabet.map(x => x - 18)\n        val newAlphabet21 = alphabet.map(x => x\
    \ - 19)\n        val newAlphabet22 = alphabet.map(x => x - 20)\n        val newAlphabet23\
    \ = alphabet.map(x => x - 21)\n        val newAlphabet24 = alphabet.map(x => x\
    \ - 22)\n        val newAlphabet25 = alphabet.map(x => x - 23)\n        val newAlphabet26\
    \ = alphabet.map(x => x - 24)\n        val newAlphabet27 = alphabet.map(x => x\
    \ - 25)\n        val newAlphabet28 = alphabet.map(x => x - 26)\n        val newAlphabet29\
    \ = alphabet.map(x => x - 27)\n        val newAlphabet30 = alphabet.map(x => x\
    \ - 28)\n        val newAlphabet31 = alphabet.map(x \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4t3hhe64.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4t3hhe64.scala:49:41\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e\
    [36mnewAlphabet31\e[0m = alphabet.map(x \n\e[31m\e[31m   |\e[0m              \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \               Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4t3hhe64.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprefrckod.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(c\
    \ => c + \"z\").map(c => c + \"y\").map(c => c + \"x\").map(c => c + \"w\").map(c\
    \ => c + \"v\").map(c => c + \"u\").map(c => c + \"t\").map(c => c + \"s\").map(c\
    \ => c + \"r\").map(c => c + \"q\").map(c => c + \"p\").map(c => c + \"o\").map(c\
    \ => c + \"n\").map(c => c + \"m\").map(c => c + \"l\").map(c => c + \"k\").map(c\
    \ => c + \"j\").map(c => c + \"h\").map(c => c + \"g\").map(c => c + \"f\").map(c\
    \ => c + \"e\").map(c => c + \"d\").map(c => c + \"c\").map(c => c + \"b\").map(c\
    \ => c + \"a\").map(c => c + \"z\").map(c => c + \"y\").map(c => c + \"x\").map(c\
    \ => c + \"w\").map(c => c + \"v\").map(c => c + \"u\").map(c => c + \"t\").map(c\
    \ => c + \"s\").map(c => c + \"r\").map(c => c + \"q\").map(c => c + \"p\").map(c\
    \ => c + \"o\").map(c => c + \"n\").map(c => c + \"m\").map(c => c + \"l\").map(c\
    \ => c + \"k\").map(c => c + \"j\").map(c => c + \"h\").map(c => c + \"g\").map(c\
    \ => c + \"f\").map(c => c + \"e\").map(c => c + \"d\").map(c => c + \"c\").map(c\
    \ => c + \"b\").map(c => c + \"a\").map(c => c + \"z\").map(c => c + \"y\").map(c\
    \ => c + \"x\").map(c => c + \"w\").map(c => c + \"v\").map(c => c + \"u\").map(c\
    \ => c + \"t\").map(c => c + \"s\").map(c => c + \"r\").map(c => c + \"q\").map(c\
    \ => c + \"p\").map(c => c + \"o\").map(c => c + \"n\").map(c => c + \"m\").map(c\
    \ => c + \"l\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptiy8mds6.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mc\e[0m => c + \e[31m\"z\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"y\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"x\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"w\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"v\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"u\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"t\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"s\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"r\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"q\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"p\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"o\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"n\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"m\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"l\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"k\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"j\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"h\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"g\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"f\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"e\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"d\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"c\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"b\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"a\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"z\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"y\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"x\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"w\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"v\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"u\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"t\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"s\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"r\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"q\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"p\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"o\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"n\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"m\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"l\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"k\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"j\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"h\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"g\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"f\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"e\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"d\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"c\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"b\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"a\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"z\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"y\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmphvjnjcdb.scala:20)\n\tat Problem$.$anonfun$adapted$1(tmphvjnjcdb.scala:20)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmphvjnjcdb.scala:20)\n\
    \tat Problem$.main(tmphvjnjcdb.scala:24)\n\tat Problem.main(tmphvjnjcdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"a\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"b\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps80ike28.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprefrckod.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x) + 2))\n\
    \        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n      \
    \  newString.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpyw5ag6yf.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmpyw5ag6yf.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpyw5ag6yf.scala:19)\n\
    \tat Problem$.main(tmpyw5ag6yf.scala:24)\n\tat Problem.main(tmpyw5ag6yf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            }\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ybe88l4.scala:30)\n\tat Problem.main(tmp_ybe88l4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newAlphabet3\
    \ = alphabet.map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x\
    \ => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x\
    \ => x + \"j\").map(x => x + \"k\").map(x => x + \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx34z1e0m.scala:21:211 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \"\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                 unclosed string\
    \ literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx34z1e0m.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet2 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet3 = alphabet.map(x => (x + 4).toChar)\n        val newAlphabet4\
    \ = alphabet.map(x => (x + 6).toChar)\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + 8).toChar)\n        val newAlphabet6 = alphabet.map(x => (x + 10).toChar)\n\
    \        val newAlphabet7 = alphabet.map(x => (x + 12).toChar)\n        val newAlphabet8\
    \ = alphabet.map(x => (x + 14).toChar)\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + 16).toChar)\n        val newAlphabet10 = alphabet.map(x => (x + 18).toChar)\n\
    \        val newAlphabet11 = alphabet.map(x => (x + 20).toChar)\n        val newAlphabet12\
    \ = alphabet.map(x => (x + 22).toChar)\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + 24).toChar)\n        val newAlphabet14 = alphabet.map(x => (x + 26).toChar)\n\
    \        val newAlphabet15 = alphabet.map(x => (x + 28).toChar)\n        val newAlphabet16\
    \ = alphabet.map(x => (x + 30).toChar)\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + 32).toChar)\n        val newAlphabet18 = alphabet.map(x => (x + 34).toChar)\n\
    \        val newAlphabet19 = alphabet.map(x => (x + 36).toChar)\n        val newAlphabet20\
    \ = alphabet.map(x => (x + 38).toChar)\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + 40).toChar)\n        val newAlphabet22 = alphabet.map(x => (x + 42).toChar)\n\
    \        val newAlphabet23 = alphabet.map(x => (x + 44).toChar)\n        val newAlphabet24\
    \ = alphabet.map(x => (x + 46).toChar)\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + 48).toChar)\n        val newAlphabet26 = alphabet.map(x => (x + 50).toChar)\n\
    \        val newAlphabet27 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplt_zap50.scala:45:27 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet27\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplt_zap50.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x - \e[31m2\e[0m).toChar)\n\e[31m\e[31m   |\e[0m              \
    \                               ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplt_zap50.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet2\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x + \e[31m2\e[0m).toChar)\n\e[31m\e[31m   |\e[0m              \
    \                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                         value toChar is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplt_zap50.scala:21:53 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x + \e[31m4\e[0m).toChar)\n\e[31m\e[31m   |\e[0m              \
    \                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                         value toChar is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplt_zap50.scala:22:53 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet4\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x + \e[31m6\e[0m).toChar)\n\e["
  stdout: ''
  timestamp: 1660009264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet12 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet16 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet20 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet24 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"aa\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp875a2d8e.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp875a2d8e.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpi970bcfh.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpi970bcfh.scala:19)\n\tat Problem$.main(tmpi970bcfh.scala:24)\n\
    \tat Problem.main(tmpi970bcfh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7vcqh015.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7vcqh015.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8av9yvr.scala:24)\n\tat Problem.main(tmpe8av9yvr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"a\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"b\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"c\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"d\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"e\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"f\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"g\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"h\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"i\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"j\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"k\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"l\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"m\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"n\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"o\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"p\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"q\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"r\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"s\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"t\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"u\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"v\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"w\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"x\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"y\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"z\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"aa\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"ab\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp41u3erze.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet12 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet16 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet20 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet24 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"aa\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp875a2d8e.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp875a2d8e.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = alphabet.map(x => x + \"b\")\n\
    \        val rotatedAlphabet3 = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val rotatedAlphabet5 = alphabet.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet6 = alphabet.map(x => x + \"f\")\n\
    \        val rotatedAlphabet7 = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet8\
    \ = alphabet.map(x => x + \"h\")\n        val rotatedAlphabet9 = alphabet.map(x\
    \ => x + \"i\")\n        val rotatedAlphabet10 = alphabet.map(x => x + \"j\")\n\
    \        val rotatedAlphabet11 = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = alphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = alphabet.map(x => x + \"n\")\n\
    \        val rotatedAlphabet15 = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val rotatedAlphabet17 = alphabet.map(x\
    \ => x + \"q\")\n        val rotatedAlphabet18 = alphabet.map(x => x + \"r\")\n\
    \        val rotatedAlphabet19 = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val rotatedAlphabet21 = alphabet.map(x\
    \ => x + \"u\")\n        val rotatedAlphabet22 = alphabet.map(x => x + \"v\")\n\
    \        val rotatedAlphabet23 = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val rotatedAlphabet25 = alphabet.map(x\
    \ => x + \"y\")\n        val rotatedAlphabet26 = alphabet.map(x => x + \"z\")\n\
    \        val rotatedAlphabet27 = alphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3gfec2h3.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3gfec2h3.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"m\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"n\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"o\")\n        val newAlphabet4 = alphabet.map(x => x + \"p\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"q\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet8 = alphabet.map(x => x + \"t\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"u\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet12 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"y\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet16 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"o\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet20 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"s\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet24 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"w\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet28 = alphabet.map(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg8ueas1r.scala:46:41 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8ueas1r.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabetLength = alphabet.length\n\
    \        val alphabetLength = alphabetLength - 1\n        val alphabetLength =\
    \ alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n      \
    \  val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n        val alphabetLength = alphabetLength - 1\n    \
    \    val alphabetLength = alphabetLength - 1\n        val alphabetLength = alphabetLength\
    \ - 1\n        val alphabetLength = alphabetLength - 1\n        val alphabetLength\
    \ = alphabetLength - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6z72a08.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0malphabetLength is already defined as \e[33mvalue\e[0m \e[35malphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6z72a08.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36malphabetLength\e[0m = alphabetLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        val len = s.length\n        val alphabetLen = alphabet.length\n     \
    \   val shift = alphabetLen - 2\n        val shift2 = alphabetLen - 3\n      \
    \  val shift3 = alphabetLen - 4\n        val shift4 = alphabetLen - 5\n      \
    \  val shift5 = alphabetLen - 6\n        val shift6 = alphabetLen - 7\n      \
    \  val shift7 = alphabetLen - 8\n        val shift8 = alphabetLen - 9\n      \
    \  val shift9 = alphabetLen - 10\n        val shift10 = alphabetLen - 11\n   \
    \     val shift11 = alphabetLen - 12\n        val shift12 = alphabetLen - 13\n\
    \        val shift13 = alphabetLen - 14\n        val shift14 = alphabetLen - 15\n\
    \        val shift15 = alphabetLen - 16\n        val shift16 = alphabetLen - 17\n\
    \        val shift17 = alphabetLen - 18\n        val shift18 = alphabetLen - 19\n\
    \        val shift19 = alphabetLen - 20\n        val shift20 = alphabetLen - 21\n\
    \        val shift21 = alphabetLen - 22\n        val shift22 = alphabetLen - 23\n\
    \        val shift23 = alphabetLen - 24\n        val shift24 = alphabetLen - 25\n\
    \        val shift25 = alphabetLen - 26\n        val shift26 = alphabetLen - 27\n\
    \        val shift27 = alphabetLen - 28\n        val shift28 = alphabetLen - 29\n\
    \        val shift29 = alphabetLen - 30\n        val shift30 = alphabetLen - 31\n\
    \        val shift31 = alphabetLen - 32\n        val shift32 = alphabetLen - 33\n\
    \        val shift33 = alphabetLen - 34\n        val shift34 = alphabetLen - 35\n\
    \        val shift35 = alphabetLen - 36\n        val shift36 = alphabetLen - 37\n\
    \        val shift37 = alphabetLen - 38\n        val shift38 = alphabetLen - 39\n\
    \        val shift39 = alphabetLen - 40\n        val shift40 = alphabetLen - 41\n\
    \        val shift41 = alphabetLen - 42\n        val shift42 = alphabetLen - 43\n\
    \        val shift43 = alphabetLen - 44\n        val shift44 = alphabetLen - 45\n\
    \        val shift45 = alphabetLen - 46\n        val shift46 = alphabet\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc9nb73wv.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpi6vbkw_0.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpi6vbkw_0.scala:19)\n\tat Problem$.main(tmpi6vbkw_0.scala:24)\n\
    \tat Problem.main(tmpi6vbkw_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            val index = alphabet.indexOf(c)\n\
    \            val newIndex = index + 2\n            if(newIndex < alphabet.length){\n\
    \                result.append(alphabet(newIndex))\n            }\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxkizdwj6.scala:31)\n\tat Problem.main(tmpxkizdwj6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 0))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 3))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 4))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 5))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 6))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 7))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 8))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 9))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 10))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 11))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 12))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 13))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 14))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 15))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 16))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 17))\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93xr9b2f.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(c\
    \ => c + \"z\").map(c => c + \"y\").map(c => c + \"x\").map(c => c + \"w\").map(c\
    \ => c + \"v\").map(c => c + \"u\").map(c => c + \"t\").map(c => c + \"s\").map(c\
    \ => c + \"r\").map(c => c + \"q\").map(c => c + \"p\").map(c => c + \"o\").map(c\
    \ => c + \"n\").map(c => c + \"m\").map(c => c + \"l\").map(c => c + \"k\").map(c\
    \ => c + \"j\").map(c => c + \"h\").map(c => c + \"g\").map(c => c + \"f\").map(c\
    \ => c + \"e\").map(c => c + \"d\").map(c => c + \"c\").map(c => c + \"b\").map(c\
    \ => c + \"a\").map(c => c + \"z\").map(c => c + \"y\").map(c => c + \"x\").map(c\
    \ => c + \"w\").map(c => c + \"v\").map(c => c + \"u\").map(c => c + \"t\").map(c\
    \ => c + \"s\").map(c => c + \"r\").map(c => c + \"q\").map(c => c + \"p\").map(c\
    \ => c + \"o\").map(c => c + \"n\").map(c => c + \"m\").map(c => c + \"l\").map(c\
    \ => c + \"k\").map(c => c + \"j\").map(c => c + \"h\").map(c => c + \"g\").map(c\
    \ => c + \"f\").map(c => c + \"e\").map(c => c + \"d\").map(c => c + \"c\").map(c\
    \ => c + \"b\").map(c => c + \"a\").map(c => c + \"z\").map(c => c + \"y\").map(c\
    \ => c + \"x\").map(c => c + \"w\").map(c => c + \"v\").map(c => c + \"u\").map(c\
    \ => c + \"t\").map(c => c + \"s\").map(c => c + \"r\").map(c => c + \"q\").map(c\
    \ => c + \"p\").map(c => c + \"o\").map(c => c + \"n\").map(c => c + \"m\").map(c\
    \ => c + \"l\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptiy8mds6.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mc\e[0m => c + \e[31m\"z\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"y\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"x\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"w\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"v\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"u\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"t\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"s\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"r\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"q\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"p\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"o\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"n\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"m\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"l\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"k\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"j\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"h\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"g\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"f\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"e\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"d\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"c\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"b\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"a\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"z\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"y\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"x\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"w\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"v\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"u\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"t\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"s\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"r\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"q\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"p\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"o\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"n\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"m\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"l\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"k\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"j\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"h\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"g\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"f\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"e\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"d\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"c\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"b\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"a\"\e[0m).map(\e\
    [36mc\e[0m => c + \e[31m\"z\"\e[0m).map(\e[36mc\e[0m => c + \e[31m\"y\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x + 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x + 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x + 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x + 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x + 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x + 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x - 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf8a9lu_p.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpf8a9lu_p.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp3kyy1o5m.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmp3kyy1o5m.scala:19)\n\tat Problem$.main(tmp3kyy1o5m.scala:24)\n\
    \tat Problem.main(tmp3kyy1o5m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    y\")\n        val rotatedAlphabet3 = rotatedAlphabet2.map(x => x + \"x\")\n  \
    \      val rotatedAlphabet4 = rotatedAlphabet3.map(x => x + \"w\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet4.map(x => x + \"v\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet5.map(x => x + \"u\")\n        val rotatedAlphabet7 = rotatedAlphabet6.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet8 = rotatedAlphabet7.map(x => x +\
    \ \"s\")\n        val rotatedAlphabet9 = rotatedAlphabet8.map(x => x + \"r\")\n\
    \        val rotatedAlphabet10 = rotatedAlphabet9.map(x => x + \"q\")\n      \
    \  val rotatedAlphabet11 = rotatedAlphabet10.map(x => x + \"p\")\n        val\
    \ rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"o\")\n        val rotatedAlphabet13\
    \ = rotatedAlphabet12.map(x => x + \"n\")\n        val rotatedAlphabet14 = rotatedAlphabet13.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet15 = rotatedAlphabet14.map(x => x\
    \ + \"l\")\n        val rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"\
    k\")\n        val rotatedAlphabet17 = rotatedAlphabet16.map(x => x + \"j\")\n\
    \        val rotatedAlphabet18 = rotatedAlphabet17.map(x => x + \"i\")\n     \
    \   val rotatedAlphabet19 = rotatedAlphabet18.map(x => x + \"h\")\n        val\
    \ rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"g\")\n        val rotatedAlphabet21\
    \ = rotatedAlphabet20.map(x => x + \"f\")\n        val rotatedAlphabet22 = rotatedAlphabet21.map(x\
    \ => x + \"e\")\n        val rotatedAlphabet23 = rotatedAlphabet22.map(x => x\
    \ + \"d\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbkqxzldm.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"a\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet18 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"e\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet22 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"i\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet26 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"m\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8dibojw3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8dibojw3.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet2 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 4))\n        val newAlphabet3 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 6))\n        val newAlphabet4 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 8))\n        val newAlphabet5 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 10))\n        val newAlphabet6 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 12))\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 14))\n        val newAlphabet8 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 16))\n        val newAlphabet9 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 18))\n        val newAlphabet10 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 20))\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 22))\n        val newAlphabet12 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 24))\n        val newAlphabet13 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 26))\n        val newAlphabet14 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 28))\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 30))\n        val newAlphabet16 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 32))\n        val newAlphabet17 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 34))\n        val newAlphabet18 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 36))\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 38))\n        val newAlphabet20 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 40))\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8x7i8s3c.scala:39:11 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x7i8s3c.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet.map(x => x + \"c\")\n   \
    \     val rotatedAlphabet4 = rotatedAlphabet.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet.map(x => x + \"\
    h\")\n        val rotatedAlphabet9 = rotatedAlphabet.map(x => x + \"i\")\n   \
    \     val rotatedAlphabet10 = rotatedAlphabet.map(x => x + \"j\")\n        val\
    \ rotatedAlphabet11 = rotatedAlphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = rotatedAlphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = rotatedAlphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet.map(x => x +\
    \ \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet.map(x => x + \"o\")\n\
    \        val rotatedAlphabet16 = rotatedAlphabet.map(x => x + \"p\")\n       \
    \ val rotatedAlphabet17 = rotatedAlphabet.map(x => x + \"q\")\n        val rotatedAlphabet18\
    \ = rotatedAlphabet.map(x => x + \"r\")\n        val rotatedAlphabet19 = rotatedAlphabet.map(x\
    \ => x + \"s\")\n        val rotatedAlphabet20 = rotatedAlphabet.map(x => x +\
    \ \"t\")\n        val rotatedAlphabet21 = rotatedAlphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet.map(x => x + \"v\")\n       \
    \ val rotatedAlphabet23 = rotatedAlphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = rotatedAlphabet.map(x => x + \"x\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppb3tkttn.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb3tkttn.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"\
    b\")\n        val rotatedAlphabet3 = rotatedAlphabet.map(x => x + \"c\")\n   \
    \     val rotatedAlphabet4 = rotatedAlphabet.map(x => x + \"d\")\n        val\
    \ rotatedAlphabet5 = rotatedAlphabet.map(x => x + \"e\")\n        val rotatedAlphabet6\
    \ = rotatedAlphabet.map(x => x + \"f\")\n        val rotatedAlphabet7 = rotatedAlphabet.map(x\
    \ => x + \"g\")\n        val rotatedAlphabet8 = rotatedAlphabet.map(x => x + \"\
    h\")\n        val rotatedAlphabet9 = rotatedAlphabet.map(x => x + \"i\")\n   \
    \     val rotatedAlphabet10 = rotatedAlphabet.map(x => x + \"j\")\n        val\
    \ rotatedAlphabet11 = rotatedAlphabet.map(x => x + \"k\")\n        val rotatedAlphabet12\
    \ = rotatedAlphabet.map(x => x + \"l\")\n        val rotatedAlphabet13 = rotatedAlphabet.map(x\
    \ => x + \"m\")\n        val rotatedAlphabet14 = rotatedAlphabet.map(x => x +\
    \ \"n\")\n        val rotatedAlphabet15 = rotatedAlphabet.map(x => x + \"o\")\n\
    \        val rotatedAlphabet16 = rotatedAlphabet.map(x => x + \"p\")\n       \
    \ val rotatedAlphabet17 = rotatedAlphabet.map(x => x + \"q\")\n        val rotatedAlphabet18\
    \ = rotatedAlphabet.map(x => x + \"r\")\n        val rotatedAlphabet19 = rotatedAlphabet.map(x\
    \ => x + \"s\")\n        val rotatedAlphabet20 = rotatedAlphabet.map(x => x +\
    \ \"t\")\n        val rotatedAlphabet21 = rotatedAlphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet.map(x => x + \"v\")\n       \
    \ val rotatedAlphabet23 = rotatedAlphabet.map(x => x + \"w\")\n        val rotatedAlphabet24\
    \ = rotatedAlphabet.map(x => x + \"x\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppb3tkttn.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb3tkttn.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newString = s.map(x\
    \ => newAlphabet(alphabet.indexOf(x)).swap)\n        val newString2 = newString.map(x\
    \ => x.swap)\n        newString2.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp_q_n_26l.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmp_q_n_26l.scala:19)\n\tat Problem$.main(tmp_q_n_26l.scala:25)\n\
    \tat Problem.main(tmp_q_n_26l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$27(tmpnks8922f.scala:20)\n\tat Problem$.$anonfun$adapted$1(tmpnks8922f.scala:20)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpnks8922f.scala:20)\n\
    \tat Problem$.main(tmpnks8922f.scala:24)\n\tat Problem.main(tmpnks8922f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x + \"x\"))\n        val newAlphabet2 = alphabet.map(x => (x + \"y\"))\n\
    \        val newAlphabet3 = alphabet.map(x => (x + \"z\"))\n        val newAlphabet4\
    \ = alphabet.map(x => (x + \"a\"))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x + \"b\"))\n        val newAlphabet6 = alphabet.map(x => (x + \"c\"))\n\
    \        val newAlphabet7 = alphabet.map(x => (x + \"d\"))\n        val newAlphabet8\
    \ = alphabet.map(x => (x + \"e\"))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x + \"f\"))\n        val newAlphabet10 = alphabet.map(x => (x + \"g\"))\n\
    \        val newAlphabet11 = alphabet.map(x => (x + \"h\"))\n        val newAlphabet12\
    \ = alphabet.map(x => (x + \"i\"))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x + \"j\"))\n        val newAlphabet14 = alphabet.map(x => (x + \"k\"))\n\
    \        val newAlphabet15 = alphabet.map(x => (x + \"l\"))\n        val newAlphabet16\
    \ = alphabet.map(x => (x + \"m\"))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x + \"n\"))\n        val newAlphabet18 = alphabet.map(x => (x + \"o\"))\n\
    \        val newAlphabet19 = alphabet.map(x => (x + \"p\"))\n        val newAlphabet20\
    \ = alphabet.map(x => (x + \"q\"))\n        val newAlphabet21 = alphabet.map(x\
    \ => (x + \"r\"))\n        val newAlphabet22 = alphabet.map(x => (x + \"s\"))\n\
    \        val newAlphabet23 = alphabet.map(x => (x + \"t\"))\n        val newAlphabet24\
    \ = alphabet.map(x => (x + \"u\"))\n        val newAlphabet25 = alphabet.map(x\
    \ => (x + \"v\"))\n        val newAlphabet26 = alphabet.map(x => (x + \"w\"))\n\
    \        val newAlphabet27 = alphabet.map(x => (x + \"x\"))\n        val newAlphabet28\
    \ = alphabet.map(x => (x + \"y\"))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnsrwxjv_.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val rotatedString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.map(x => x._1\
    \ -> x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp87faxlu8.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmp87faxlu8.scala:19)\n\tat Problem$.main(tmp87faxlu8.scala:24)\n\
    \tat Problem.main(tmp87faxlu8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x -> alphabet(alphabet.indexOf(x)\
    \ + 2)))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp_px9yfco.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmp_px9yfco.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp_px9yfco.scala:19)\n\
    \tat Problem$.main(tmp_px9yfco.scala:24)\n\tat Problem.main(tmp_px9yfco.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw6quawk.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzw6quawk.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder()\n\
    \        val len = s.length\n        for(i <- 0 until len) {\n            val\
    \ c = s.charAt(i)\n            val index = alphabet.indexOf(c)\n            val\
    \ newIndex = index + 2\n            if(newIndex < alphabet.length) {\n       \
    \         result.append(alphabet(newIndex))\n            } else {\n          \
    \      result.append(alphabet(alphabet.length - 1))\n            }\n        }\n\
    \        return result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5_5oam_2.scala:34)\n\tat Problem.main(tmp5_5oam_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            result.append(alphabet(s.charAt(i)\
    \ + 2))\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 106\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmp124i9nac.scala:21)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmp124i9nac.scala:21)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmp124i9nac.scala:21)\n\
    \tat Problem$.main(tmp124i9nac.scala:25)\n\tat Problem.main(tmp124i9nac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabetLength = alphabet.length\n        val newAlphabet = alphabet.map(x\
    \ => alphabet(alphabetLength - alphabet.indexOf(x) + 1))\n        val newAlphabetLength\
    \ = newAlphabet.length\n        val newAlphabetReverse = newAlphabet.reverse\n\
    \        val newAlphabetReverseLength = newAlphabetReverse.length\n        val\
    \ newAlphabetReverseReverse = newAlphabetReverse.reverse.reverse\n        val\
    \ newAlphabetReverseReverseReverseLength = newAlphabetReverseReverseReverse.length\n\
    \        val newAlphabetReverseReverseReverse = newAlphabetReverseReverseReverse.reverse.reverse.reverse\n\
    \        val newAlphabetReverseReverseReverseLength = newAlphabetReverseReverseReverse.length\n\
    \        val newAlphabetReverseReverseReverseReverse = newAlphabetReverseReverseReverseReverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn2mtcv7o.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetReverseReverseReverseLength\e\
    [0m = newAlphabetReverseReverseReverse.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewAlphabetReverseReverseReverseLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mnewAlphabetReverseReverseReverseLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpn2mtcv7o.scala:26:47 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetReverseReverseReverse\e[0m = newAlphabetReverseReverseReverse.reverse.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35mnewAlphabetReverseReverseReverse\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\nException in thread \"main\" java.lang.StackOverflowError\n\
    \tat dotty.tools.dotc.ast.Trees$Select$.unapply(Trees.scala:448)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1528)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(unt"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpn2mtcv7o.scala

    '
  timestamp: 1660009265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ newAlphabet2 = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n   \
    \     val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x =>\
    \ x + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n      \
    \  val newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet11 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet12 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet13 = alphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet15 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet16 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet17 = alphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet19 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet20 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet21 = alphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet23 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet24 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet25 = alphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = alphabet.map(x => x + \"z\")\n        val newAlphabet27 = alphabet.map(x =>\
    \ x + \"aa\")\n        val newAlphabet28 = alphabet.map(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp875a2d8e.scala:46:45 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = alphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp875a2d8e.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val rotatedAlphabetReversed = rotatedAlphabet.map(x =>\
    \ x + \"y\")\n        val rotatedAlphabetReversedReversed = rotatedAlphabetReversed.map(x\
    \ => x + \"x\")\n        val rotatedAlphabetReversedReversedReversed = rotatedAlphabetReversedReversed.map(x\
    \ => x + \"w\")\n        val rotatedAlphabetReversedReversedReversedReversed =\
    \ rotatedAlphabetReversedReversedReversed.map(x => x + \"v\")\n        val rotatedAlphabetReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversed.map(x => x + \"u\")\n    \
    \    val rotatedAlphabetReversedReversedReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversedReversedReversed.map(x => x\
    \ + \"t\")\n        val rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => x + \"s\")\n        val rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => x + \"q\")\n        val rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => x + \"p\")\n        val rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => x + \"o\")\n        val rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1hrdtds5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed.map(\e\
    [36mx\e[0m => x + \e[31m\"q\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp1hrdtds5.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(\e\
    [36mx\e[0m => x + \e[31m\"o\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  rotatedAlphabetReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1hrdtds5.scala:25:86 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e["
  stdout: ''
  timestamp: 1660009267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val index = alphabet.indexOf(s.charAt(i))\n\
    \            val newIndex = index * 2\n            val newChar = alphabet(newIndex)\n\
    \            result.append(newChar)\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encrypt$$anonfun$1(tmpob2k3l2j.scala:23)\n\tat Problem$.encrypt$$anonfun$adapted$1(tmpob2k3l2j.scala:25)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmpob2k3l2j.scala:25)\n\
    \tat Problem$.main(tmpob2k3l2j.scala:29)\n\tat Problem.main(tmpob2k3l2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) + 2))\n        val newAlphabet2 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 2))\n        val newAlphabet3 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 4))\n        val newAlphabet4 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 6))\n        val newAlphabet5 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 8))\n        val newAlphabet6 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 10))\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 12))\n        val newAlphabet8 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 14))\n        val newAlphabet9 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 16))\n        val newAlphabet10 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 18))\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 20))\n        val newAlphabet12 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 22))\n        val newAlphabet13 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 24))\n        val newAlphabet14 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 26))\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 28))\n        val newAlphabet16 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 30))\n        val newAlphabet17 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 32))\n        val newAlphabet18 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 34))\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 36))\n        val newAlphabet20 = alphabet.map(x\
    \ => x -> alphabet(alphabet.indexOf(x) - 38))\n        val new\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnr1ri7zv.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnr1ri7zv.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 2)))\n        val newAlphabet2 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 2)))\n        val newAlphabet3 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 4)))\n        val newAlphabet4 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 4)))\n        val newAlphabet5 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 8)))\n        val newAlphabet6 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 8)))\n        val newAlphabet7 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 12)))\n        val newAlphabet8 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 12)))\n        val newAlphabet9 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 16)))\n        val newAlphabet10 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 16)))\n        val newAlphabet11 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 20)))\n        val newAlphabet12 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 20)))\n        val newAlphabet13 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 24)))\n        val newAlphabet14 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 24)))\n        val newAlphabet15 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 28)))\n        val newAlphabet16 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 28)))\n        val newAlphabet17 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 32)))\n        val newAlphabet18 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - 32)))\n        val newAlphabet19 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) + 36)))\n        val newAlphabet20 = alphabet.map(x\
    \ => (x -> alphabet(alphabet.indexOf(x) - \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl7hnuyfr.scala:38:82 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet20\e[0m = alphabet.map(\e\
    [36mx\e[0m => (x -> alphabet(alphabet.indexOf(x) - \n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl7hnuyfr.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = newAlphabet.map(x => x + \"y\")\n\
    \        val newAlphabet3 = newAlphabet2.map(x => x + \"x\")\n        val newAlphabet4\
    \ = newAlphabet3.map(x => x + \"w\")\n        val newAlphabet5 = newAlphabet4.map(x\
    \ => x + \"v\")\n        val newAlphabet6 = newAlphabet5.map(x => x + \"u\")\n\
    \        val newAlphabet7 = newAlphabet6.map(x => x + \"t\")\n        val newAlphabet8\
    \ = newAlphabet7.map(x => x + \"s\")\n        val newAlphabet9 = newAlphabet8.map(x\
    \ => x + \"r\")\n        val newAlphabet10 = newAlphabet9.map(x => x + \"q\")\n\
    \        val newAlphabet11 = newAlphabet10.map(x => x + \"p\")\n        val newAlphabet12\
    \ = newAlphabet11.map(x => x + \"o\")\n        val newAlphabet13 = newAlphabet12.map(x\
    \ => x + \"n\")\n        val newAlphabet14 = newAlphabet13.map(x => x + \"m\"\
    )\n        val newAlphabet15 = newAlphabet14.map(x => x + \"l\")\n        val\
    \ newAlphabet16 = newAlphabet15.map(x => x + \"k\")\n        val newAlphabet17\
    \ = newAlphabet16.map(x => x + \"j\")\n        val newAlphabet18 = newAlphabet17.map(x\
    \ => x + \"i\")\n        val newAlphabet19 = newAlphabet18.map(x => x + \"h\"\
    )\n        val newAlphabet20 = newAlphabet19.map(x => x + \"g\")\n        val\
    \ newAlphabet21 = newAlphabet20.map(x => x + \"f\")\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + \"e\")\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + \"d\")\n        val newAlphabet24 = newAlphabet23.map(x => x + \"c\"\
    )\n        val newAlphabet25 = newAlphabet24.map(x => x + \"b\")\n        val\
    \ newAlphabet26 = newAlphabet25.map(x => x + \"a\")\n        val new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk8v4y0j3.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8v4y0j3.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(c\
    \ => c -> alphabet(alphabet.indexOf(c) + 2))\n        val rotatedString = s.map(c\
    \ => rotatedAlphabet(alphabet.indexOf(c))).mkString(\"\")\n        rotatedString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmptn5dx84u.scala:19)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmptn5dx84u.scala:19)\n\tat Problem$.main(tmptn5dx84u.scala:24)\n\
    \tat Problem.main(tmptn5dx84u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\")\n        val newAlphabet2 = alphabet.map(x => x + \"n\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"o\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet6 = alphabet.map(x => x + \"r\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"s\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"t\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"u\")\n        val newAlphabet10 = alphabet.map(x => x + \"v\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"w\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet14 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"m\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet18 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"q\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet22 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"u\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet26 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"y\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"z\")\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpos7wh0zm.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos7wh0zm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet2 = List(\"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\")\n        val alphabet3 = List(\"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\"\
    , \"c\")\n        val alphabet4 = List(\"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\")\n    \
    \    val alphabet5 = List(\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\")\n        val alphabet6\
    \ = List(\"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n        val alphabet7 = List(\"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\")\n        val alphabet8 = List(\"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\")\n        val alphabet9 = List(\"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    )\n        val alphabet10 = List(\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")\n        val\
    \ alphabet11 = List(\"k\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmcnukif1.scala:28:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\"\
    k\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpmcnukif1.scala:30:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmcnukif1.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmcnukif1.scala:30:4\
    \ -------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: kdef\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 0))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 3))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 4))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 5))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 6))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 7))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 8))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 9))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 10))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 11))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 12))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 13))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 14))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 15))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 16))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 17))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 18))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfsyrihup.scala:38:81 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet20\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> alphabet(alphabet.indexOf(x) + \n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfsyrihup.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(c\
    \ => c + \"m\")\n        val rotatedAlphabet2 = alphabet.map(c => c + \"n\")\n\
    \        val rotatedAlphabet3 = alphabet.map(c => c + \"o\")\n        val rotatedAlphabet4\
    \ = alphabet.map(c => c + \"p\")\n        val rotatedAlphabet5 = alphabet.map(c\
    \ => c + \"q\")\n        val rotatedAlphabet6 = alphabet.map(c => c + \"r\")\n\
    \        val rotatedAlphabet7 = alphabet.map(c => c + \"s\")\n        val rotatedAlphabet8\
    \ = alphabet.map(c => c + \"t\")\n        val rotatedAlphabet9 = alphabet.map(c\
    \ => c + \"u\")\n        val rotatedAlphabet10 = alphabet.map(c => c + \"v\")\n\
    \        val rotatedAlphabet11 = alphabet.map(c => c + \"w\")\n        val rotatedAlphabet12\
    \ = alphabet.map(c => c + \"x\")\n        val rotatedAlphabet13 = alphabet.map(c\
    \ => c + \"y\")\n        val rotatedAlphabet14 = alphabet.map(c => c + \"z\")\n\
    \        val rotatedAlphabet15 = alphabet.map(c => c + \"a\")\n        val rotatedAlphabet16\
    \ = alphabet.map(c => c + \"b\")\n        val rotatedAlphabet17 = alphabet.map(c\
    \ => c + \"c\")\n        val rotatedAlphabet18 = alphabet.map(c => c + \"d\")\n\
    \        val rotatedAlphabet19 = alphabet.map(c => c + \"e\")\n        val rotatedAlphabet20\
    \ = alphabet.map(c => c + \"f\")\n        val rotatedAlphabet21 = alphabet.map(c\
    \ => c + \"g\")\n        val rotatedAlphabet22 = alphabet.map(c => c + \"h\")\n\
    \        val rotatedAlphabet23 = alphabet.map(c => c + \"i\")\n        val rotatedAlphabet24\
    \ = alphabet.map(c => c + \"j\")\n        val rotatedAlphabet25 = alphabet.map(c\
    \ => c + \"k\")\n        val rotatedAlphabet26 = alphabet.map(c => c + \"l\")\n\
    \        val rotatedAlphabet27 = alphabet.map(c => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqddt0hsk.scala:45:49 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mc\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqddt0hsk.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"m\").map(x => x + \"p\").map(x => x + \"h\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"e\").map(x => x + \"d\").map(x\
    \ => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x\
    \ => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x\
    \ => x + \"u\").map(x => x + \"t\").map(x => x + \"r\").map(x => x + \"s\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x\
    \ => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"m\").map(x => x + \"n\").map(x\
    \ => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x => x + \"h\").map(x\
    \ => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x\
    \ => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x\
    \ => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x\
    \ => x + \"u\").map(x => x + \"t\").map(x => x + \"r\").map(x => x + \"s\").map(x\
    \ => x + \"m\").\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3jul5bgn.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3jul5bgn.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val rotatedAlphabet = alphabet.map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\").map(x => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x\
    \ => x + \"j\").map(x => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x\
    \ => x + \"f\").map(x => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x\
    \ => x + \"b\").map(x => x + \"a\").map(x => x + \"z\").map(x => x + \"y\").map(x\
    \ => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"u\").map(x\
    \ => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x + \"q\").map(x\
    \ => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x => x + \"m\").map(x\
    \ => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x => x + \"i\").map(x\
    \ => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x => x + \"e\").map(x\
    \ => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x => x + \"a\").map(x\
    \ => x + \"z\").map(x => x + \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x\
    \ => x + \"v\").map(x => x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x\
    \ => x + \"r\").map(x => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x\
    \ => x + \"n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprefrckod.scala:19:1204 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e\
    [3"
  stdout: ''
  timestamp: 1660009239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"a\")\n        val newAlphabet2 = alphabet.map(x => x + \"b\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"c\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"d\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet6 = alphabet.map(x => x + \"f\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"g\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"h\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"i\")\n        val newAlphabet10 = alphabet.map(x => x + \"j\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"k\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"l\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet14 = alphabet.map(x => x + \"n\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"o\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"p\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"q\")\n        val newAlphabet18 = alphabet.map(x => x + \"r\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"s\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"t\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"u\")\n        val newAlphabet22 = alphabet.map(x => x + \"v\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"w\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"x\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"y\")\n        val newAlphabet26 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"aa\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dn_tto7.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0dn_tto7.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
    hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
    )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
    \    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp90i_s37e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp90i_s37e.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797747
