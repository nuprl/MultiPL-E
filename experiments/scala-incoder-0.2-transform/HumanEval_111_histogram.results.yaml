language: scala
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6h30jzd_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0)\n            map += (letter ->\
    \ count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvw7p8vcn.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq8w75gri.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map.update(letter,map.getOrElse(letter,0L) + 1L))\n        map.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dr_hxm4.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountPairs = maxLetterCounts.map(_._1)\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n\
    \        val maxLetterCountPairsCountSorted = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsCountSortedWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ != maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ == maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzd5agxhv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzd5agxhv.scala:26:70\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterCountPairsCountSorted\e[0m = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value sortBy is not a member of scala.collection.View[(String,\
    \ Int)]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzd5agxhv.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo3fds52.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> count + 1\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpblxj7mdo.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0)\n          \
    \  map += (letter -> count + 1)\n        }\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelinlqee.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (String, AnyVal), but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpelinlqee.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq8w75gri.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size).toMap\n   \
    \     letterCounts.filter(_._2 > 1).map(_._1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeiaxmnkj.scala:21:41\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        letterCounts.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mscala\e[0m\e[1m\e[31m.\e[0mcollection.\e\
    [1m\e[31mimmutable\e[0m.\e[1m\e[31mIterable\e[0m[String]\n\e[31m   |\e[0m    \
    \    Required: collection.\e[1m\e[32mmutable\e[0m.\e[1m\e[32mMap\e[0m[String\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7qmi1ad.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => map += letter -> (letters.count(_ == letter)))\n        map.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5od1e22.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> count + 1\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpblxj7mdo.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> count+1\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaapc71rv.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpz23f4r.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map.update(letter,map.getOrElse(letter,0L) + 1L))\n        map.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dr_hxm4.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter, 0L)\n            map += (letter\
    \ -> count + 1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhign3qv.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphr239tw7.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmedeuru.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap = new mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap += (x._1 -> x._2))\n \
    \       val maxLetterCountMapSorted = maxLetterCountMap.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapSortedKeys = maxLetterCountMapSorted.keys.toList\n\
    \        val maxLetterCountMapSortedValues = maxLetterCountMapSorted.values.toList\n\
    \        val maxLetterCountMapSortedKeysAndValues = maxLetterCountMapSorted.map{x\
    \ => (x._1, x._2)}\n        val maxLetterCountMapSortedKeysAndValuesSorted = maxLetterCountMapSortedKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeys = maxLetterCountMapSortedKeysAndValuesSorted.keys.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedValues = maxLetterCountMapSortedKeysAndValuesSorted.values.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues = maxLetterCountMapSortedKeysAndValuesSorted.map{x\
    \ => (x._1, x._2)}\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeys\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.keys.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.values.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.map{x\
    \ => (x._1, x._2)}\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwufhatt7.scala:22:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxLetters\e[0m = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n\e[31m\e[31m   |\e[0m                              \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpwufhatt7.scala:23:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxLetterCounts\e[0m = letterCounts.filter(_._2 == maxCount)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwufhatt7.scala:24:36\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterCountMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwufhatt7.scala:37:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues\e\
    [0m = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.map{\e\
    [36mx\e[0m => (x._1, x._2)}\n\e[31m\e[31m   |\e[0m                           \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwufhatt7.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660028815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = maxCount.toLong\n        val maxLetterCount = letters.count(x => x == maxLetter)\n\
    \        val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf771kqd8.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf771kqd8.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCount\e[0m = maxCount.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf771kqd8.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCount\e[0m = maxLetterCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLetterCount is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf771kqd8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCount\e[0m = maxLetterCount\
    \ / maxCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCount is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf771kqd8.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLetter\e[0m = maxLetter.toString.toLowerCase\
    \ \e[34m// to handle cases like \"A\" and \"a\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLetter\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLetter\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definition"
  stdout: ''
  timestamp: 1660028813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwcdu_k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0L)\n         \
    \   map += (letter -> count + 1)\n        }\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpih0jrxrf.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (String, Long), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpih0jrxrf.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(identity).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxLetterCount\
    \ = counts.maxBy(_._2)._2\n        val result = counts.filter(_._2 == maxLetterCount).filter(_._1\
    \ == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n        val maxLetter\
    \ = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetterCount = result.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetterCount = result.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetterCount = result.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetter\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjj1xj8is.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjj1xj8is.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCount\e[0m = result.maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjj1xj8is.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLetter\e[0m = result.maxBy(_._2)._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLetter is already defined as \e[33mvalue\e[0m \e[35mmaxLetter\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjj1xj8is.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCount\e[0m = result.maxBy(_._2)._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLetterCount is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjj1xj8is.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = counts.filter(_._2 ==\
    \ maxLetterCount).filter(_._1 == maxLetter)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660028815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            counts(letter) += letters.length\n        }\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgtxnbx7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0)\n            map += letter ->\
    \ (count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg4moxxz.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbsyj9y7.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMap.toMap\n        val maxLetterCountMapWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicates.toSeq.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicates : Map[String,Long]\
    \ = maxLetterCountMapWithDuplicatesSorted.filter(_._2 > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicates.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted.toSeq.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.toSeq.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.map{case\
    \ (letter,count) => (letter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9xz2k_hd.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9xz2k_hd.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9xz2k_hd.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted.map{\e\
    [33mcase\e[0m (letter,count) => (letter,count)}\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9xz2k_hd.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.toSeq.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCountMapWithDuplicatesSortedWithDuplicate"
  stdout: ''
  timestamp: 1660028816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejnvqhx3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwcdu_k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += letters.length\n        })\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpznjh9ijp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogmpc25s.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxLettersCount = maxLetters.map(x => (x,counts.get(x)))\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val \n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4wtznnh0.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4wtznnh0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = counts.maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4wtznnh0.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLettersCount.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4wtznnh0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLettersCount.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4wtznnh0.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLettersCount.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter,map.getOrElse(letter,0L)+1L)\n        })\n   \
    \     map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplmac9jfn.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbskz64v2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").foreach(x => map.updated(x, map.getOrElse(x, 0L) + 1))\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8t3fi0mc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphp3fh8y2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += 1\n        })\n        counts.toMap\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyd9lemiw.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl_k0_ydb.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (String, AnyVal), but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_k0_ydb.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            counts(letter) += 1\n        }\n        counts.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7k5b_09.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.updated(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotbsaci5.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCount = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letterCount.getOrElse(letter,0)\n            letterCount\
    \ += (letter -> count+1)\n        }\n        letterCount.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46uh0x2_.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mletterCount\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountPairs = maxLetterCounts.map(_._1)\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n\
    \        val maxLetterCountPairsCountSorted = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsCountSortedWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ != maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ == maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp705wy2vb.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp705wy2vb.scala:22:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxLetters\e[0m = letterCounts.filter(_._2 == maxCount).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp705wy2vb.scala:23:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCounts\e[0m = letterCounts.filter(_._2\
    \ == maxCount)\n\e[31m\e[31m   |\e[0m                                        \
    \          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp705wy2vb.scala:26:70 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPairsCountSorted\e[0m = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value sortBy is not a member of scala.collection.View[(String,\
    \ Int)]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp705wy2vb.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += letter ->\
    \ (count + 1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2_5fxpv.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpz23f4r.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(x => x == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphli4lyta.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0L)\n         \
    \   map += letter -> (count + 1)\n        }\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqai62nrv.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.updated(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotbsaci5.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmedeuru.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogmpc25s.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount).map(_._2)\n        val maxLetterCountSum = maxLetterCounts.sum\n\
    \        val maxLetterCountAverage = maxLetterCountSum / maxLetterCounts.size\n\
    \        val maxLetterCountAverageString = maxLetterCountAverage.toString\n  \
    \      val maxLetterCountAverageStringWithDecimals = maxLetterCountAverageString.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpaces = maxLetterCountAverageStringWithDecimals.replace(\"\
    ,\", \" \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpaces.replace(\".\", \",\")\n\
    \        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDot.replace(\",\", \"\
    \ \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpaces.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDot.replace(\"\
    ,\", \" \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpaces.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot.replace(\"\
    ,\", \" \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsu7ivl4x.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsu7ivl4x.scala:35:118\
    \ --------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot\e\
    [0m = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot.replace(\e\
    [31m\".\"\e[0m, \e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsu7ivl4x.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: collection.mutable.Map[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").foreach(x => map.updated(x, map.getOrElse(x, 0L) + 1))\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8t3fi0mc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L) + 1L))\n        map.toMap\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmple2ly6zc.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwcdu_k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwcdu_k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").foreach(x => {\n            val count = map.getOrElse(x,0L)\n\
    \            map += x -> count + 1\n        })\n        map.toMap\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhtlfuhw.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        for (letter <- letters)\
    \ {\n            val count = map.get(letter).getOrElse(0L)\n            map +=\
    \ (letter -> (count + 1))\n        }\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyq1d5ar.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = maxLetters.groupBy(x =>\
    \ x).mapValues(_.size)\n        val maxLetterMaxCount = maxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetters = maxLetterCounts.filter(_._2 == maxLetterMaxCount).map(_._1)\n\
    \        val maxLetterMaxLetterCounts = maxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxLetterMaxLetterMaxCount = maxLetterMaxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetters = maxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxCount).map(_._1)\n        val maxLetterMaxLetterMaxLetterCounts\
    \ = maxLetterMaxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxLetterMaxLetterMaxLetterMaxCount = maxLetterMaxLetterMaxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetters = maxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n        val maxLetterMaxLetterMaxLetterMaxLetterCounts\
    \ = maxLetterMaxLetterMaxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxCount = maxLetterMaxLetterMaxLetterMaxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxLetters = maxLetterMaxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n        val maxLetterMaxLetterMaxLetterMaxLetterMaxCounts\
    \ = maxLetterMaxLetterMaxLetterMaxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCount = maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetters = maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n      \
    \  val maxLetterMax\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiekdmaz6.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiekdmaz6.scala:36:68\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCount\e[0m = maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCounts.maxBy(_._2)._2\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       Not found: maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCounts\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiekdmaz6.scala:37:70\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetters\e[0m = maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m Not found: maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetterCounts\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiekdmaz6.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            counts(letter) += letters.length\n        }\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgtxnbx7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.updated(letter,map.getOrElse(letter,0L)+1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqe_kdiw_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter, map.getOrElse(letter, 0L) + 1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi2ahhq7d.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjxtckn3_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0)\n            map += (letter ->\
    \ count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvw7p8vcn.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount).map(_._2)\n        val maxLetterCountMap = new mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap += (x -> x.toLong))\n\
    \        val maxLetterCountMap2 = new mutable.HashMap[String,Long]()\n       \
    \ maxLetterCountMap.foreach(x => maxLetterCountMap2 += (x._1 -> x._2))\n     \
    \   val maxLetterCountMap3 = new mutable.HashMap[String,Long]()\n        maxLetterCountMap2.foreach(x\
    \ => maxLetterCountMap3 += (x._1 -> x._2))\n        val maxLetterCountMap4 = new\
    \ mutable.HashMap[String,Long]()\n        maxLetterCountMap3.foreach(x => maxLetterCountMap4\
    \ += (x._1 -> x._2))\n        val maxLetterCountMap5 = new mutable.HashMap[String,Long]()\n\
    \        maxLetterCountMap4.foreach(x => maxLetterCountMap5 += (x._1 -> x._2))\n\
    \        val maxLetterCountMap6 = new mutable.HashMap[String,Long]()\n       \
    \ maxLetterCountMap5.foreach(x => maxLetterCountMap6 += (x._1 -> x._2))\n    \
    \    val maxLetterCountMap7 = new mutable.HashMap[String,Long]()\n        maxLetterCountMap6.foreach(x\
    \ => maxLetterCountMap7 += (x._1 -> x._2))\n        val maxLetterCountMap8 = new\
    \ mutable.HashMap[String,Long]()\n        maxLetterCountMap7.foreach(x => maxLetterCountMap8\
    \ += (x._1 -> x._2))\n        val maxLetterCountMap9 = new mutable.HashMap[String,Long]()\n\
    \        maxLetterCountMap8.foreach(x => maxLetterCountMap9 += (x._1 -> x._2))\n\
    \        val maxLetterCountMap10 = new mutable.HashMap[String,Long]()\n      \
    \  maxLetterCountMap9.foreach(x => maxLetterCountMap10 += (x._1 -> x._2))\n  \
    \      val maxLetterCountMap11 = new mutable.HashMap[String,Long]()\n        maxLetterCountMap10.foreach(x\
    \ => maxLetterCountMap11\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprza7mcjh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprza7mcjh.scala:24:36\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterCountMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprza7mcjh.scala:26:37\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterCountMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprza7mcjh.scala:28:37\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterCountMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprza7mcjh.scala:30:37\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxLetterCountMap4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprza7mcjh.scala:32:3"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            map.get(letter) match {\n                case Some(count)\
    \ => map.put(letter, count + 1)\n                case None => map.put(letter,\
    \ 1)\n            }\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcvq2p0t.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> (count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jrh_yic.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbsn6b2kl.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count+1)\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsbx1d948.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6h30jzd_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ytqvti2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += letter\
    \ -> count + 1\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfuknbjb.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.HashMap[String,Long]()\n \
    \       test.split(\" \").foreach(x => map.update(x,map.getOrElse(x,0L) + 1L))\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq83wm8w6.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(x => x == letter)\n            counts(letter)\
    \ = count\n        })\n        counts.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84im83my.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxLettersCount = maxLetters.map(x => (x,counts.get(x)))\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val \n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4wtznnh0.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4wtznnh0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = counts.maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4wtznnh0.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLettersCount.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4wtznnh0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLettersCount.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4wtznnh0.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLettersCount.filter(_._2\
    \ > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjyild_3.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        letterCounts.filter(_._2 ==\
    \ maxCount).map(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpingkvvru.scala:22:49\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.View[String]\n\e[31m  \
    \ |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> count + 1\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3yk973g.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0)\n            map += (letter ->\
    \ count + 1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp88_7bsjp.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount).map(_._2)\n        val maxLetterCountSum = maxLetterCounts.sum\n\
    \        val maxLetterCountAverage = maxLetterCountSum / maxLetterCounts.size\n\
    \        val maxLetterCountAverageString = maxLetterCountAverage.toString\n  \
    \      val maxLetterCountAverageStringWithDecimals = maxLetterCountAverageString.replace(\"\
    .\",\",\")\n        val maxLetterCountAverageStringWithDecimalsWithCommas = maxLetterCountAverageStringWithDecimals.replace(\"\
    ,\",\".\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithCommas.replace(\" \",\"\")\n  \
    \      val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDots\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpaces.replace(\".\"\
    ,\",\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommas\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDots.replace(\"\
    ,\",\".\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommas.replace(\"\
    \ \",\"\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots.replace(\"\
    .\",\",\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommas\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommas.replace(\"\
    ,\",\".\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommasWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommasWithSpaces.replace(\"\
    \ \",\"\")\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsio126rp.scala:36:11 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpsio126rp.scala:22:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxLetters\e[0m = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n\e[31m\e[31m   |\e[0m                              \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpsio126rp.scala:23:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxLetterCounts\e[0m = letterCounts.filter(_._2 == maxCount).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsio126rp.scala:33:110\
    \ --------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots\e\
    [0m = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots.replace(\e\
    [31m\".\"\e[0m,\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsio126rp.scala:34:120 --------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWi"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").foreach(x => {\n            val count = map.getOrElse(x,0L)\n\
    \            map += x -> count + 1\n        })\n        map.toMap\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhtlfuhw.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphr239tw7.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.map(letter => (letter, letters.count(letter =>\
    \ letter == letter)).toMap\n        letterCounts.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1uvjwvto.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        letterCounts.maxBy(_._2)._1\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    expression expected\
    \ but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1uvjwvto.scala:20:101 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = letters.map(\e[36mletter\e\
    [0m => (letter, letters.count(\e[36mletter\e[0m => letter == letter)).toMap\n\e\
    [31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toMap is not a member of (String, Int) - did you mean\
    \ (String, Int).swap?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1uvjwvto.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(x => x._2 ==\
    \ maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp08lvvdti.scala:50:45 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08lvvdti.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCount\e[0m = counts.maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08lvvdti.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\e\
    [36mx\e[0m => x._1).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08lvvdti.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\e\
    [36mx\e[0m => x._1).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08lvvdti.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\e\
    [36mx\e[0m => x._1).size"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ztsjgcx.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count+\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of (String, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ztsjgcx.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxLetterCount\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.filter(x => x._2\
    \ == maxLetterCount).map(_._1)\n        val maxLetterCountMap = new scala.collection.mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap += (x._1 -> x._2))\n \
    \       val maxLetterCountMapWithMaxCount = maxLetterCountMap + (maxLetter ->\
    \ maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxLetter = maxLetterCountMapWithMaxCount.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetter.filter(_._2 == maxCount)\n    \
    \    val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter =\
    \ maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount.filter(_._1 == maxLetter)\n\
    \        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp51egav_7.scala:26:61 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        maxLetterCounts.foreach(\e[36mx\e[0m => maxLetterCountMap\
    \ += (x._1 -> x._2))\n\e[31m\e[31m   |\e[0m                                  \
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         \
    \             value _1 is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp51egav_7.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: collection.mutable.Map[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp391vkuh4.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpz23f4r.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0L)\n            map += letter\
    \ -> count + 1\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb77t6s3g.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejnvqhx3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn87hlvb.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmedeuru.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0L)\n            map +=\
    \ (letter -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjrxeyxug.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (String, Long), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrxeyxug.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mwgjwe_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letterCounts.getOrElse(letter,0L)\n            letterCounts\
    \ += letter -> count+1\n        }\n        letterCounts\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1ad9y95.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq8w75gri.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphp3fh8y2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map.put(letter,map.getOrElse(letter,0l)+1))\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdf36p7s.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter, map.getOrElse(letter, 0L) + 1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi2ahhq7d.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            counts(letter) += letters.length\n        }\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgtxnbx7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> count + 1\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd55incku.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(x => x._2 ==\
    \ maxCount).map(_._1).mkString(\" \")\n        val maxLetterCount = counts.filter(x\
    \ => x._2 == maxCount).map(_._2).sum\n        val maxLetterCounts = counts.filter(x\
    \ => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSum = counts.filter(x\
    \ => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSums = counts.filter(x\
    \ => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSum = counts.filter(x\
    \ => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSums = counts.filter(x\
    \ => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSum =\
    \ counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSumsSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcgdr9sjk.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcgdr9sjk.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCount\e[0m = counts.maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpcgdr9sjk.scala:24:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxLetters\e[0m = counts.filter(\e[36mx\e[0m => x._2 ==\
    \ maxCount).map(_._1).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \  Values of types Int and (String, Int) cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcgdr9sjk.scala:25:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCount\e[0m = counts.filter(\e\
    [36mx\e[0m => x._2 == maxCount).map(_._2).sum\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \  Values of types Int and (String, Int) cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcgdr9sjk.scala:26:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCounts\e[0m = counts.filter(\e\
    [36mx\e[0m => x._2 == maxCount).map(_._2).sum\n\e[31m\e[31m   |\e[0m         \
    \                                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \  Values of types Int and (String, Int) cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcgdr9sjk.scala:27:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountSum\e[0m =\
    \ counts.filter(\e[36mx\e[0m => x._2 == maxCount).map(_._2).sum\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660028837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbskz64v2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn09x2dc0.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwcdu_k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap = maxLetterCounts.map(_._1)\n  \
    \      val maxLetterCountMapWithCount = maxLetterCountMap.toMap\n        val maxLetterCountMapWithCountWithMax\
    \ = maxLetterCountMapWithCount.map{case (k, v) => (k, v.toLong)}\n        val\
    \ maxLetterCountMapWithCountWithMaxWithMax = maxLetterCountMapWithCountWithMax.map{case\
    \ (k, v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMax.map{case (k, v) => (k, v)}\n    \
    \    val maxLetterCountMapWithCountWithMaxWithMaxWithMax = maxLetterCountMapWithCountWithMaxWithMaxWithMax.map{case\
    \ (k, v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMax.map{case (k, v) =>\
    \ (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{case (k,\
    \ v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{case (k,\
    \ v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{case (k,\
    \ v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map{case\
    \ (k, v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0kio_xa6.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithCountWithMaxWithMaxWithMax\e\
    [0m = maxLetterCountMapWithCountWithMaxWithMaxWithMax.map{\e[33mcase\e[0m (k,\
    \ v) => (k, v)}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountMapWithCountWithMaxWithMaxWithMax is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxLetterCountMapWithCountWithMaxWithMaxWithMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0kio_xa6.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{\e[33mcase\e\
    [0m (k, v) => (k, v)}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0kio_xa6.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{\e[33mcase\e\
    [0m (k, v) => (k, v)}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountMapWithCountWithMaxWithMaxWith"
  stdout: ''
  timestamp: 1660028837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpz23f4r.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> (count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jrh_yic.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L)+1))\n        map.toMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy_dmk5fg.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter, map.getOrElse(letter,0L) + 1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t8caj1z.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts(letter)\
    \ = count\n        }\n        counts.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm3cqdze.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").foreach(x => map.updated(x, map.getOrElse(x, 0L) + 1))\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8t3fi0mc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map.put(letter,map.getOrElse(letter,0l)+1))\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6wm0mvi.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountPairs = maxLetterCounts.map(_._1)\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n\
    \        val maxLetterCountPairsCountSorted = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsCountSortedWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ != maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMax\
    \ = maxLetterCountPairsCountSortedWithMax.map(_._1).takeWhile(_._2 != maxLetterCountPairsCountSortedWithMax.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax = maxLetterCountPairsCountSortedWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMax.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSortedWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMax.last._2)\n        val\
    \ maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax = maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax.last._2)\n   \
    \     val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax =\
    \ maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWith\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaezy9c5t.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.last._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpaezy9c5t.scala:26:70 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPairsCountSorted\e[0m\
    \ = maxLetterCountPairsCount.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m    value sortBy is not a member of scala.collection.View[(String,\
    \ Int)]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaezy9c5t.scala:33:87 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWith\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      Not found: maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWith\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaezy9c5t.scala:34:5\
    \ --"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        letterCounts.filter(_._2 ==\
    \ maxCount).map(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpingkvvru.scala:22:49\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.View[String]\n\e[31m  \
    \ |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map.put(letter,map.getOrElse(letter,0L)+1))\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y2hwgd1.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount).map(_._2)\n        val maxLetterCountPair = maxLetterCounts.maxBy(_._1)._1\n\
    \        val maxLetterCountPairs = maxLetterCounts.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj7yn92js.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPair\e[0m\
    \ = maxLetterCountPairs.maxBy(_._1)._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountPair is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLetterCountPair\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7yn92js.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPairs\e[0m\
    \ = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountPairs is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLetterCountPairs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7yn92js.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPair\e[0m\
    \ = maxLetterCountPairs.maxBy(_._1)._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountPair is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLetterCountPair\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj7yn92js.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountPairs\e[0m\
    \ = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLetterCountPairs is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLetterCountPairs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejnvqhx3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val map = mutable.Map[String,Long]()\n     \
    \   test.split(\" \").foreach(x => {\n            val count = map.getOrElse(x,0L)\n\
    \            map += x -> count + 1\n        })\n        map.toMap\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhtlfuhw.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05vurv6n.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphp3fh8y2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwcdu_k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpz23f4r.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dd_4aoc.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter,map.getOrElse(letter,0L) + 1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbks0k7o1.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        letterCounts.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkh2ohtj8.scala:21:33\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        letterCounts.maxBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    String\n\e[31m   |\e[0m        Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letterCounts.getOrElse(letter,0L)\n            letterCounts\
    \ += letter -> count + 1\n        }\n        letterCounts.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjv2yol4c.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            counts(letter) += letters.length\n        }\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgtxnbx7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter,map.getOrElse(letter,0L) + 1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbks0k7o1.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6h30jzd_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphr239tw7.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += 1\n        })\n        counts.toMap\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyd9lemiw.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter, 0L)\n            map += (letter\
    \ -> count + 1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhign3qv.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.updated(letter,map.getOrElse(letter,0L)+1L)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqe_kdiw_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMap.toMap\n        val maxLetterCountMapWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicates : Map[String,Long]\
    \ = maxLetterCountMapWithDuplicatesSorted.filter(_._2 > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_b0ievp.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1_b0ievp.scala:24:70 --------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxLetterCountMap\e[0m : \e[35mMap\e[0m[\e[35mString\e\
    [0m,\e[35mLong\e[0m] = maxLetterCounts.map{\e[33mcase\e[0m (letter,count) => (letter,count)}\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    scala.collection.View[(String,\
    \ Int)]\n\e[31m   |\e[0m                          Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_b0ievp.scala:25:65\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithDuplicates\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = maxLetterCountMap.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Found:    Map[String, Long]\n\e[31m   |\e[0m                          Required:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_b0ievp.scala:26:122\
    \ -------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLetterCountMapWithDuplicatesSorted\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m] = maxLetterCountMapWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    Seq[(String, Long)]\n\e[31m\
    \   |\e[0m                  "
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0)\n          \
    \  map += (letter -> count + 1)\n        }\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelinlqee.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (String, AnyVal), but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpelinlqee.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += letters.length\n        })\n        counts.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpznjh9ijp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0)\n            map += letter ->\
    \ (count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg4moxxz.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map += letter -> (letters.count(_ == letter)))\n        map\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptno01ts4.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmedeuru.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(x => x == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphli4lyta.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphr239tw7.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq8w75gri.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d9d8p27.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0L)\n            map += letter\
    \ -> count + 1\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb77t6s3g.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => map.updated(letter, map.getOrElse(letter, 0L) + 1))\n        map.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjhwfg0f.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += letter ->\
    \ (count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_yrnx9k.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr30nijhv.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = scala.collection.mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0L)\n          \
    \  map += (letter -> count + 1)\n        }\n        map.toMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vciy20p.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            map += (letter -> count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of (String, Long), but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vciy20p.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejnvqhx3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0)\n            counts\
    \ += letter -> count+1\n        })\n        counts.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2aplhyzb.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.update(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn09x2dc0.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += letter\
    \ -> count + 1\n        })\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvqufk5dv.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7qmi1ad.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = map.getOrElse(letter,0)\n            map += (letter ->\
    \ count+1)\n        }\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvw7p8vcn.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphp3fh8y2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bbf3t49.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(x => x._2 ==\
    \ maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp08lvvdti.scala:50:45 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08lvvdti.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCount\e[0m = counts.maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08lvvdti.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\e\
    [36mx\e[0m => x._1).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08lvvdti.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\e\
    [36mx\e[0m => x._1).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08lvvdti.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxLettersCount\e[0m = maxLetters.map(\e\
    [36mx\e[0m => x._1).size"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter, 0)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mwgjwe_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            map.put(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbsyj9y7.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpz23f4r.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9mxv6zbn.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6h30jzd_.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ map.update(letter,map.getOrElse(letter,0L)+1))\n        map.toMap\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw20fdqft.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphp3fh8y2.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => counts(letter) += 1)\n        counts.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo7fud7o.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n \
    \   // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
    a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>>\
    \ histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>>\
    \ histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String)\
    \ : Map[String,Long] = {\n        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaimursj9.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
