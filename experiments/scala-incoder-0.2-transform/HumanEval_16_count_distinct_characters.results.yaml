language: scala
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val distinctCount = counts.foldLeft(0L)((a, b) => a + b)\n        distinctCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpiz0r2h0y.scala:12:60 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdistinctCount\e[0m = counts.foldLeft(\e\
    [31m0L\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e[31m   |\e[0m   \
    \                                                       ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\
    \e[31m   |\e[0mmatch arguments ((b : (Char, Int)))\n1 error found\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var distinctCharacterCount\
    \ = 0\n        for(character <- string) {\n            distinctCharacterCount\
    \ += if(character.toLowerCase == character) 1 else 0\n        }\n        distinctCharacterCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo5du9gze.scala:12:38 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            distinctCharacterCount += \e[33mif\e[0m(character.toLowerCase\
    \ == character) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                                      ^^\e[0m\n\e[31m   |\e[0m            \
    \                          expression expected but \e[31mif\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo5du9gze.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            distinctCharacterCount += \e[33mif\e[0m(character.toLowerCase\
    \ == character) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0w75ehob.scala:15)\n\tat Problem.main(tmp0w75ehob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val charsSet = chars.toSet\n        charsSet.size\
    \ * (charsSet.size + 1) / 2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"\
    abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) ==\
    \ (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n \
    \   assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98jjmhgm.scala:16)\n\tat Problem.main(tmp98jjmhgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        var charCount\
    \ = 0\n        for(i <- 0 until string.length){\n            charCount += string.charAt(i).toChar.map(_.toLowerCase\
    \ + _.toUpperCase).count(_ == string.charAt(i))\n        }\n        charCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5t2hvi_3.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            charCount += string.charAt(i).toChar.map(_.toLowerCase\
    \ + _.toUpperCase).count(_ == string.charAt(i))\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5t2hvi_3.scala:12:49\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            charCount +=\
    \ string.charAt(i).toChar.map(_.toLowerCase + _.toUpperCase).count(_ == string.charAt(i))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         value map is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n \
    \   assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
    abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0w75ehob.scala:15)\n\tat Problem.main(tmp0w75ehob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"\
    ))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n\
    \    def countDistinctCharacters(string : String) : Long = {\n        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size\n    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
    \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n  \
    \  assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"\
    aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY\
    \ JeRRRY\")) == (5l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805665
