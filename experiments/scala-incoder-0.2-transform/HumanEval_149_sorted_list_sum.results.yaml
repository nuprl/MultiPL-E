language: scala
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9i8o0rag.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length()\
    \ % 2 == 1){\n                newList += x\n            }\n        })\n      \
    \  newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n    \
    \    newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jsfcyob.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      val word = lst(i)\n            if(word.length % 2 != 0){\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith((x, y)\
    \ => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6nhkrlv.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 != 0) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortWith((x, y) => {\n            if (x.length < y.length)\
    \ {\n                true\n            } else if (x.length > y.length) {\n   \
    \             false\n            } else {\n                x.compareTo(y) == 0\n\
    \            }\n        })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp791w_jxu.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length%2\
    \ != 0){\n                newList += x\n            }\n        })\n        newList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6_a5dnt.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7av_8gd_.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 == 1) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbclwfcev.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy4u6kcmy.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        val map = mutable.Map[String, Int]()\n\
    \        lst.foreach(x => {\n            val value = map.getOrElse(x, 0)\n   \
    \         map.put(x, value + 1)\n        })\n        map.foreach { case (k, v)\
    \ => result.add(k) }\n        result.sortBy(x => x.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9trwchh.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9trwchh.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        val newList2 = mutable.ListBuffer[String]()\n\
    \        val newList3 = mutable.ListBuffer[String]()\n        val newList4 = mutable.ListBuffer[String]()\n\
    \        val newList5 = mutable.ListBuffer[String]()\n        val newList6 = mutable.ListBuffer[String]()\n\
    \        val newList7 = mutable.ListBuffer[String]()\n        val newList8 = mutable.ListBuffer[String]()\n\
    \        val newList9 = mutable.ListBuffer[String]()\n        val newList10 =\
    \ mutable.ListBuffer[String]()\n        val newList11 = mutable.ListBuffer[String]()\n\
    \        val newList12 = mutable.ListBuffer[String]()\n        val newList13 =\
    \ mutable.ListBuffer[String]()\n        val newList14 = mutable.ListBuffer[String]()\n\
    \        val newList15 = mutable.ListBuffer[String]()\n        val newList16 =\
    \ mutable.ListBuffer[String]()\n        val newList17 = mutable.ListBuffer[String]()\n\
    \        val newList18 = mutable.ListBuffer[String]()\n        val newList19 =\
    \ mutable.ListBuffer[String]()\n        val newList20 = mutable.ListBuffer[String]()\n\
    \        val newList21 = mutable.ListBuffer[String]()\n        val newList22 =\
    \ mutable.ListBuffer[String]()\n        val newList23 = mutable.ListBuffer[String]()\n\
    \        val newList24 = mutable.ListBuffer[String]()\n        val newList25 =\
    \ mutable.ListBuffer[String]()\n        val newList26 = mutable.ListBuffer[String]()\n\
    \        val newList27 = mutable.ListBuffer[String]()\n        val newList28 =\
    \ mutable.ListBuffer[String]()\n        val newList29 = mutable.ListBuffer[String]()\n\
    \        val newList30 = mutable.ListBuffer[String]()\n        val newList31 =\
    \ mutable.ListBuffer[String]()\n        val newList32 = mutable.ListBuffer[String]()\n\
    \        val newList33 = mutable.ListBuffer[String]()\n        val newList34 =\
    \ mutable.ListBuffer[String]()\n        val newList35 = mutable.ListBuffer[String]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2zs0k15.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg2zs0k15.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2zs0k15.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewList3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2zs0k15.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewList4\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2zs0k15.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewList5\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2zs0k15.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    "
  stdout: ''
  timestamp: 1659795327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length() % 2 ==\
    \ 1) result.add(x) else result.add(x))\n        result.sortWith(_.length < _.length)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9fb9b_ww.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    result.add(word)\n            } else {\n                val index = lst.indexWhere(x\
    \ => x == word)\n                val nextWord = lst(index + 1)\n             \
    \   val nextWordIndex = lst.indexWhere(x => x == nextWord)\n                if(nextWordIndex\
    \ == -1) {\n                    result.add(word)\n                } else {\n \
    \                   val nextWordLength = nextWord.length\n                   \
    \ val nextWordIndex = lst.indexWhere(x => x == nextWord)\n                   \
    \ val nextWordLength = lst(nextWordIndex).length\n                    val nextWord\
    \ = lst(nextWordIndex + 1)\n                    val nextWordIndex = lst.indexWhere(x\
    \ => x == nextWord)\n                    val nextWordLength = lst(nextWordIndex).length\n\
    \                    val nextWord = lst(nextWordIndex + 1)\n                 \
    \   val nextWordIndex = lst.indexWhere(x => x == nextWord)\n                 \
    \   val nextWordLength = lst(nextWordIndex).length\n                    val nextWord\
    \ = lst(nextWordIndex + 1)\n                    val nextWordIndex = lst.indexWhere(x\
    \ => x == nextWord)\n                    val nextWordLength = lst(nextWordIndex).length\n\
    \                    val nextWord = lst(nextWordIndex + 1)\n                 \
    \   val nextWordIndex = lst.indexWhere(x => x == nextWord)\n                 \
    \   val nextWordLength = lst(nextWordIndex).length\n                    val nextWord\
    \ = lst(nextWordIndex + 1)\n                    val nextWordIndex = lst.indexWhere(x\
    \ => x == nextWord)\n                    val nextWordLength = lst(nextWordIndex).length\n\
    \                    val nextWord = lst(nextWordIndex + 1)\n                 \
    \   val nextWordIndex = lst.indexWhere(x => x == nextWord)\n                 \
    \   val nextWordLength = lst(nextWordIndex).length\n                    val nextWord\
    \ = lst(nextWordIndex + 1)\n                    val nextWordIndex = lst.indexWhere(x\
    \ => x == nextWord)\n                    val nextWordLength = lst(nextWordIndex).length\n\
    \                    val nextWord = lst(nextWordIndex + 1)\n                 \
    \   val nextWordIndex = lst.indexWhere(x => x == nextWord)\n                 \
    \   val nextWordLength = lst(nextWordIndex).length\n                    val nextWord\
    \ = lst(nextWordIndex + 1)\n                    val nextWordIndex = lst.indexWhere(x\
    \ => x == nextWord)\n                    val nextWordLength = lst(nextWordIndex).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9f2nu7w_.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp9f2nu7w_.scala:74:0 ----------------------------\e[0m\e[0m\n\e[31m74\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9f2nu7w_.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9f2nu7w_.scala:34:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    \e\
    [33mval\e[0m \e[36mnextWordLength\e[0m = lst(nextWordIndex).length\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextWordLength is already defined as \e[33mvalue\e[0m \e[35mnextWordLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9f2nu7w_.scala:36:24 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m                    \e[33mval\e[0m \e[36mnextWordIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == nextWord)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextWordIndex is already defined as \e[33mvalue\e[0m \e[35mnextWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9f2nu7w_.scala:37:24 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m                    \e[33mval\e[0m \e[36mnextWordLength\e[0m = lst(nextWordIndex).length\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result.add(x) else result.add(x+\"_\"))\n        result.sortBy(x => x.split(\"\
    _\").length)\n        result.sortBy(x => x.split(\"_\").mkString.toLowerCase)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cx2fq5f.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 != 0)\
    \ result += x else result.sortWith(_ < _))\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputlj4pzw.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 != 0) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiv8wqrp3.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 != 0) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_pht9dwn.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase\
    \ )\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzbj5fjo.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 != 0)\
    \ result += x else result.add(x))\n        result.sortWith((x, y) => x.length\
    \ <= y.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0mnvy29.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1gcqoxhw.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length() % 2 ==\
    \ 1) result.add(x) else result.add(x))\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdsiq0i3z.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpdsiq0i3z.scala:20:25 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 1)\
    \ result.add(x) else result.add(x))\n        result.sortWith((x, y) => x.length\
    \ <= y.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzv0oece7.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_58vgm9h.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 != 0) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith((x, y)\
    \ => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcln295i0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.length).sum\n            newList += x.substring(0,newWord)\n\
    \        })\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp07qwnprv.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        val newList2 = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val word = lst(i)\n       \
    \     if(word.length % 2 != 0) {\n                newList += word\n          \
    \  }\n            else {\n                newList2 += word\n            }\n  \
    \      }\n        newList.sortWith(_.length < _.length)\n        newList2.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqla3uyye.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqla3uyye.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu18vsp.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporu18vsp.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 != 0) {\n            \
    \    result += word\n            }\n        }\n        result.sortWith((x, y)\
    \ => x.length <= y.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9m41pfd.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val length\
    \ = x.length\n            if (length % 2 == 1) {\n                result.add(x)\n\
    \            }\n        })\n        result.sortWith((x, y) => x.length <= y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ky5gz0k.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu18vsp.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporu18vsp.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            val\
    \ newWord = x\n            if(newWord.length % 2 == 1){\n                newList\
    \ += newWord\n            }\n        })\n        newList.sortWith((x, y) => x.length\
    \ < y.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsrvmggz5.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1){\n                newList += x\n            }\n        })\n      \
    \  newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0zjo1ey.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length%2\
    \ != 0) newList += x\n        })\n        newList.sortWith(_ < _)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx1cr6l7.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result += x else result.add(x))\n        result.sortWith((x, y) => x.length\
    \ <= y.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wz29hbt.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_djtdzt.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length <\
    \ _.length)\n        newList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdby7wfzw.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase )\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoh58cip1.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.toString.toLowerCase < _.toString.toLowerCase\
    \ )\n        newList.sortWith(_.toString.toLowerCase == _.toString.toLowerCase\
    \ )\n        newList.sortWith(_.toString.toLowerCase > _.toString.toLowerCase\
    \ )\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7znn06je.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_ < _)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparo50k01.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(word <- lst) {\n            if(word.length\
    \ % 2 == 1) {\n                result.add(word)\n            }\n        }\n  \
    \      result.sortWith((a, b) => a.length < b.length)\n        result.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppulomswt.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 == 1) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith((a, b) => a.length < b.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvj9q2ecr.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 != 0) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttiij315.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith((x, y) => x.length <= y.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn92dpzc.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    result.add(word)\n            }\n        }\n        result.sortWith((x, y)\
    \ => x.length <= y.length)\n        result.sortWith((x, y) => x.toString.compareTo(y.toString))\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3pm9_0or.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").filter(_ => _.length % 2 != 0).sorted\n            newList\
    \ += newWord.mkString(\" \")\n        })\n        newList.sortBy(x => x.split(\"\
    \ \").length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3724kqo0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp3724kqo0.scala:22:51 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length % \e[31m2\e[0m != \e[31m0\e[0m).sorted\n\e\
    [31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => _$2.length % 2 != 0.\n2 errors found\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 != 0)\
    \ result += x else result.sort)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpunefwb23.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.sortWith((x,\
    \ y) => x.toString.compareTo(y.toString) < 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbdrzus7a.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(word <- lst) {\n            if(word.length\
    \ % 2 != 0) {\n                newList += word\n            }\n        }\n   \
    \     newList.sortWith((x, y) => x.length <= y.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa3f_zrqr.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        val map = new mutable.HashMap[String,\
    \ Int]()\n        lst.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n    \
    \    map.foreach(x => result.add(x._1))\n        result.sortWith(_.length < _.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu3d4j4x.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu3d4j4x.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            val\
    \ newWord = x.split(\" \").map(_.length).sum\n            newList += x if(newWord\
    \ % 2 == 1)\n        })\n        newList.sortBy(x => x.split(\" \").map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp66x30ati.scala:23:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66x30ati.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoxtjb0ir.scala:66:25 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        newList.sortWith(\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoxtjb0ir.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result += x else result.add(x))\n        result.sortBy(x => x.length)\n    \
    \    result.sortBy(x => x.length)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo_jedwh.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith((x, y) => x.length < y.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuiruwa8p.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            val length = word.length\n            if(length\
    \ % 2 == 1) {\n                result.add(word)\n            } else {\n      \
    \          val word1 = word.substring(0, length / 2)\n                val word2\
    \ = word.substring(length / 2)\n                result.add(word1 + word2)\n  \
    \          }\n        }\n        result.sortWith((word1, word2) => word1.length\
    \ < word2.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoh2ofxua.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val word\
    \ = x\n            val len = word.length\n            if (len % 2 == 1) {\n  \
    \              val index = word.indexOf(\"a\")\n                if (index != -1)\
    \ {\n                    val newWord = word.substring(0, index) + \"a\" + word.substring(index\
    \ + 1)\n                    result.add(newWord)\n                }\n         \
    \   }\n        })\n        result.sortWith(_.length < _.length)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dzrrcds.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65boe6fe.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1){\n                newList += x\n            }\n        })\n      \
    \  newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase )\n\
    \        newList.sortBy(x => x.toUpperCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcfspp7hr.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase )\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps4dqqjdc.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 == 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpob_0ex96.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpebfurc88.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(word => if (word.length %\
    \ 2 != 0) result.+=(word))\n        result.sortWith((a, b) => a.length < b.length)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsbjbvfm5.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 == 1) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpppqpz4yf.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 != 0) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfakqr7e8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.map(x => if\
    \ (x.length % 2 == 0) x else x.dropRight(1)).sortBy(x => x).map(x => x.mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnnv_ccv.scala:23)\n\tat Problem.main(tmppnnv_ccv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.toLowerCase < _.toLowerCase )\n      \
    \  newList.sortWith(_.toLowerCase == _.toLowerCase )\n        newList.sortWith(_.toLowerCase\
    \ > _.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8flx3ims.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 != 0)\
    \ result += x else result.sortWith(_ < _))\n        result.sortWith(_ < _)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2mpr6otv.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result += x else result.add(x))\n        result.sortWith(_.length < _.length)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpafz2lc_2.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ lst.filterNot(x => x.length % 2 == 0).sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.mkString.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvzeb1m96.scala:24)\n\tat Problem.main(tmpvzeb1m96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 == 1) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqkh0a5e0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 == 1) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortWith(_.length < _.length)\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkarajq91.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 != 0) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortWith(_.length < _.length)\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtmjvdco.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu18vsp.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporu18vsp.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmd8rv6v.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ lst.filterNot(_.length%2 == 0).sortBy(_.length)\n        newList.sortBy(_.toLower)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xe55jid.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        newList.sortBy(_.toLower)\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \   value toLower is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmp0xe55jid.scala:21:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ newList.sortBy(_.toLower)\n\e[31m\e[31m   |\e[0m                           \
    \      ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m\
    \ \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length == _.length && _.length > 0)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplab8k5x4.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnos2tu6c.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpnos2tu6c.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfm1uq2_.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1){\n                newList += x\n            }\n        })\n      \
    \  newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvihgjk1u.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6op03prv.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result += x else result.add(x))\n        result.sortWith(_.length < _.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph19_wjsv.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        val map = mutable.HashMap[String, Int]()\n\
    \        lst.foreach(x => {\n            val key = x.split(\" \").length\n   \
    \         map.put(x, key)\n        })\n        map.toList.sortWith((x, y) => map.get(x)\
    \ < map.get(y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxerc456f.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxerc456f.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 != 0){\n                newList += x\n            }\n        })\n      \
    \  newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n    \
    \    newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n  \
    \      newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptg65e7tz.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmptg65e7tz.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.length).sum\n            newList += x.substring(0,newWord)\n\
    \        })\n        newList.sortBy(x => x.length)\n        newList.sortBy(x =>\
    \ x.toUpperCase)\n        newList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0fw267x.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8letu973.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.sortWith((x,\
    \ y) => x.toLowerCase < y.toLowerCase )\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl2h4v344.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 != 0) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphw3iwlf6.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpis_6wqsx.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.toLowerCase < _.toLowerCase )\n      \
    \  newList.sortWith(_.toLowerCase == _.toLowerCase )\n        newList.sortWith(_.toLowerCase\
    \ > _.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8flx3ims.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 == 1) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l4iehhd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.toString < _.toString)\n        newList.sortWith(_.toString\
    \ == _.toString)\n        newList.sortWith(_.toString > _.toString)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_wcpl5z.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith((x, y)\
    \ => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8y0cncqd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(word <- lst){\n            if(word.length\
    \ % 2 != 0){\n                newList += word\n            }\n        }\n    \
    \    newList.sortWith((word1, word2) => word1.length < word2.length)\n       \
    \ newList.sortWith((word1, word2) => word1 < word2)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_3kmb5r.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val words\
    \ = x.split(\" \").map(_.toUpperCase)\n            val len = words.length\n  \
    \          if (len % 2 == 0) {\n                val even = words.take(len)\n \
    \               val odd = words.drop(len)\n                val evenSum = even.foldLeft(0)(_\
    \ + _)\n                val oddSum = odd.foldLeft(0)(_ + _)\n                if\
    \ (evenSum > oddSum) {\n                    result += even\n                }\
    \ else {\n                    result += odd\n                }\n            }\n\
    \        })\n        result.sortBy(x => x.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmg0j6yyl.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmg0j6yyl.scala:27:47\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m\
    \ \e[36mevenSum\e[0m = even.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Found:    String\n\e[31m   |\e\
    [0m                                               Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmg0j6yyl.scala:28:45 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                    \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \     Found:    String\n\e[31m   |\e[0m                                      \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result += x else result.sort)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeoroac22.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.toInt).sum\n            newList += newWord\n        })\n\
    \        newList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vcpfysp.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65boe6fe.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttu0nkvm.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xsabtam.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    result.add(word)\n            } else {\n                val index = lst.indexWhere(x\
    \ => x == word)\n                val newWord = lst.take(index).mkString(\"\")\
    \ + word.substring(word.length / 2)\n                result.add(newWord)\n   \
    \         }\n        }\n        result.sortWith(_.length < _.length)\n       \
    \ result.sortWith(_.length > _.length)\n        result.sortWith(_.length > _.length)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43eiusmo.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith((x, y) => x.length <= y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0xdozy7.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt0ps7gb2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ > _.length)\n        newList.sortWith(_.length == _.length)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzjlxv_2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jv6xeba.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jvnih_b.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 != 0) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3m8qto1v.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").filterNot(_.length%2 == 0).sortBy(_.length).mkString(\" \"\
    )\n            newList += newWord\n        })\n        newList.sortBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfjlr1yg.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length == _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkb6ck6r.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      if(lst(i).length%2 == 1){\n                newList += lst(i)\n        \
    \    }\n        }\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toUpperCase)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsloyqle6.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0nkl6jx_.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n\
    \            }\n        }\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toUpperCase)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2i9hy7j7.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length\
    \ == _.length)\n        newList.sortWith(_.toString.toLowerCase < _.toString.toLowerCase\
    \ )\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn17nhmq_.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_x_6b0u.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      if(lst(i).length%2 != 0){\n                newList += lst(i)\n        \
    \    }\n        }\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphstjxarx.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.length).filter(_ % 2 == 1).mkString(\" \")\n        \
    \    newList += newWord\n        })\n        newList.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprnzeqn04.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            val\
    \ newWord = x.split(\" \").map(_.length).sum\n            newList += x if(newWord\
    \ % 2 == 1)\n        })\n        newList.sortBy(x => x.split(\" \").map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp66x30ati.scala:23:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66x30ati.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_x_6b0u.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ lst.filterNot(x => x.length % 2 == 0).sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.mkString.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvzeb1m96.scala:24)\n\tat Problem.main(tmpvzeb1m96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      val word = lst(i)\n            if(word.length % 2 == 1){\n            \
    \    result.add(word)\n            }\n        }\n        result.sortWith(_.length\
    \ < _.length)\n        result.sortWith(_.length > _.length)\n        result.sortWith(_.length\
    \ > _.length)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1loyhwg.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortBy(x =>\
    \ x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n\
    \        lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n      \
    \  lst.sortBy(x => x.length)\n        lst.sortBy(x => x.length)\n        lst.sortBy(x\
    \ => x.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8b5iz9jj.scala:79)\n\tat Problem.main(tmp8b5iz9jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1gcqoxhw.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      val word = lst(i)\n            if(word.length % 2 != 0){\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length < _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_80i449.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu18vsp.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporu18vsp.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 != 0) {\n                result += x\n            }\n        })\n      \
    \  result.sortWith((x, y) => x.length <= y.length)\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2eueb24m.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(word <- lst){\n            if(word.length\
    \ % 2 != 0){\n                newList += word\n            }\n        }\n    \
    \    newList.sortBy(x => x.length)\n        newList.sortBy(x => x)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3_xha4v.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n\
    \            }\n        }\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkeitb6c.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 == 1) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith((x, y) => x.compareTo(y))\n  \
    \      newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4lrb45c.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length%2\
    \ != 0){\n                newList += x\n            }\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39qy_xfm.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            val\
    \ newWord = x.split(\" \").filter(_ => _.length != 0).mkString(\" \")\n      \
    \      newList += newWord\n        })\n        newList.sortWith(_.length < _.length)\n\
    \        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcze3g0p3.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpcze3g0p3.scala:22:51 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = x.split(\e\
    [31m\" \"\e[0m).filter(_ => _.length != \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => _$2.length != 0.\n2 errors found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         if(lst(i).length() % 2 == 1) {\n                newList += lst(i)\n\
    \            }\n        }\n        newList.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ues_hbk.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9i8o0rag.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase )\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwlyks57.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(word <- lst) {\n            if(word.length\
    \ % 2 != 0) {\n                result.add(word)\n            }\n        }\n  \
    \      result.sortWith(_.length < _.length)\n        result.sortWith(_.length\
    \ > _.length)\n        result.sortWith(_.toString < _.toString)\n        result.sortWith(_.toString\
    \ > _.toString)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpto9za8n0.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if (x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65boe6fe.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1){\n                newList += x\n            }\n        })\n      \
    \  newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n    \
    \    newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi03arhkm.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.sortWith((x,\
    \ y) => x.toString.compareTo(y.toString) < 0)\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpff0g74_e.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length == _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkb6ck6r.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8letu973.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.toLowerCase < _.toLowerCase )\n      \
    \  newList.sortWith(_.toLowerCase == _.toLowerCase )\n        newList.sortWith(_.toLowerCase\
    \ > _.toLowerCase )\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8flx3ims.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6op03prv.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ lst.filterNot(x => x.length % 2 == 1)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrkez49o.scala:31)\n\tat Problem.main(tmptrkez49o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith(_.length < _.length)\n       \
    \ newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2su707gv.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith(_.length < _.length)\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkf4s28g8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        val newList2 = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val newList3 = x.split(\" \").filter(x\
    \ => x.length % 2 != 0).sorted\n            newList2 += newList3\n           \
    \ newList += newList3\n        })\n        newList2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps1qe4mez.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps1qe4mez.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase )\n\
    \        newList.sortBy(x => x.toUpperCase )\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpc0iv41.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        val wordSet = mutable.Set[String]()\n\
    \        lst.foreach(word => {\n            val wordSet = wordSet.toSet\n    \
    \        val wordSetSize = wordSet.size\n            if (wordSetSize % 2 == 0)\
    \ {\n                wordSet.add(word)\n            } else {\n               \
    \ val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val wordSetSize = wordSet.size\n           \
    \     val wordSetSize = wordSet.size\n                val wordSetSize = wordSet.size\n\
    \                val wordSetSize = wordSet.size\n                val wordSetSize\
    \ = wordSet.size\n                val word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp50lxlwht.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp50lxlwht.scala:90:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp50lxlwht.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp50lxlwht.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp50lxlwht.scala:79:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m79 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 != 0)\
    \ result.add(x) else result.add(x))\n        result.sortWith((x, y) => x.length\
    \ <= y.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmdvqbp51.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy4u6kcmy.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 != 0){\n                newList += x\n            }\n        })\n      \
    \  newList.sortWith((x, y) => x.length <= y.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_9qky0k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newList =\
    \ lst\n        newList = newList.filterNot(x => x.length%2 == 1)\n        newList\
    \ = newList.sortBy(x => x.length)\n        newList = newList.sortBy(x => x)\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqwowrpby.scala:33)\n\tat Problem.main(tmpqwowrpby.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 1)\
    \ result.add(x) else if (x.length > 1) result.add(x+x.substring(1,x.length)))\
    \ \n        result.sortBy(x => x.length)\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0spkoyj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 != 0) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith((a, b) => a.length < b.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposojylip.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x\n            val wordLength = x.length\n            if (wordLength % 2 ==\
    \ 1) {\n                newWord = x.substring(0, wordLength / 2)\n           \
    \ }\n            newList += newWord\n        })\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.compareTo(_)\
    \ < 0)\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrqozc1n.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpcrqozc1n.scala:25:24 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                newWord = x.substring(\e[31m0\e[0m, wordLength\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val newWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 1)\
    \ result += x else result)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sortBy(x => x.length)\n        result.sortBy(x\
    \ => x.length)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwup2a8a.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i).length() % 2 == 1) {\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc258gm3_.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 != 0){\n                newList += x\n            }\n        })\n      \
    \  newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length == _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb18tf9o5.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.length).sum\n            newList += x if(newWord % 2\
    \ == 1)\n        })\n        newList.sortBy(x => x.split(\" \").map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxaq63ckj.scala:23:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxaq63ckj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ lst.filterNot(x => x.length%2 == 0).sortBy(x => x.length)\n        newList.sortBy(x\
    \ => x.mkString.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tvrty5i.scala:24)\n\tat Problem.main(tmp0tvrty5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        val newList2 = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x.length() % 2 == 1) {\n        \
    \        newList2.append(x)\n            } else {\n                newList.append(x)\n\
    \            }\n        })\n        newList2.sortWith((x, y) => x.length() < y.length())\n\
    \        newList2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplm7lzwrd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplm7lzwrd.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 1)\
    \ result.add(x) else result.add(x+x.substring(1,x.length)))\n        result.sortWith((x,y)\
    \ => x.length < y.length)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5yit2ep4.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").filter(_.length%2==1).mkString(\" \")\n            newList\
    \ += newWord\n        })\n        newList.sortWith(_.length < _.length)\n    \
    \    newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu8v4usx.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporu18vsp.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporu18vsp.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 == 1) {\n            \
    \    result.add(word)\n            }\n        }\n        result.sortWith((x, y)\
    \ => x.length <= y.length)\n        result.sortWith((x, y) => x.compareTo(y) ==\
    \ 0)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfh5027pa.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.length).sum\n            newList += x if(newWord % 2\
    \ == 1)\n        })\n        newList.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0o51neha.scala:23:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            newList += x \e[33mif\e[0m(newWord % \e[31m2\e\
    [0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e\
    [31m   |\e[0m                         end of statement expected but 'if' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0o51neha.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 != 0) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase )\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xb_ekam.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      if(lst(i).length() % 2 != 0){\n                newList += lst(i)\n    \
    \        }\n        }\n        newList.sortWith((x, y) => x.compareTo(y))\n  \
    \      newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppm2mksna.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        val newList2 = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x.length % 2 == 1) {\n          \
    \      newList2.append(x)\n            } else {\n                newList.append(x)\n\
    \            }\n        })\n        newList2.sortWith((x, y) => x.length <= y.length)\n\
    \        newList2.sortWith((x, y) => x.compareTo(y) == 0)\n        newList2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvpitpqp8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvpitpqp8.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.sortWith((x,\
    \ y) => x.compareTo(y) == 1)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj90bexmk.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val len\
    \ = x.length\n            if (len % 2 != 0) {\n                result.add(x)\n\
    \            }\n        })\n        result.sortWith((x, y) => x.length <= y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12xuph5l.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            val newWord = word.filterNot(x => x.length%2\
    \ == 1)\n            newList += newWord\n        }\n        newList.sortBy(x =>\
    \ x.length)\n        newList.sortBy(x => x.mkString.toLowerCase)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp62vn_dc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp62vn_dc9.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = word.filterNot(\e\
    [36mx\e[0m => x.length%\e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                  value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith((x, y) => x.length <= y.length)\n        newList.sortWith((x,\
    \ y) => x.toString.compareTo(y.toString) < 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbdrzus7a.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newList =\
    \ lst\n        newList = newList.filter(_ => _.length%2 != 0)\n        newList\
    \ = newList.sortBy(_.length)\n        newList = newList.sortBy(_.toLowerCase)\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp09j5pf9t.scala:21:38 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        newList = newList.filter(_ => _.length%\e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \    ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length % 2 != 0.\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortBy(x => x.length)\n        newList.sortBy(x => x.toLowerCase)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyltltbd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length % 2 == 0)\
    \ result.add(x) else result.add(x+x))\n        result.sortBy(x => x.length)\n\
    \        result.sortBy(x => x.length)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_g4tu7v.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n \
    \       newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jvnih_b.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n   \
    \     newList.sortBy(x => x.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb55f3mc9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 == 1) {\n                newList += x\n            }\n        })\n     \
    \   newList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnktx586.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n      \
    \      val word = lst(i)\n            if(word.length % 2 == 1){\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith((x,y)\
    \ => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwhg0g63.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         val word = lst(i)\n            if(word.length % 2 == 1) {\n        \
    \        newList += word\n            }\n        }\n        newList.sortWith((x,\
    \ y) => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptvz3epqq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         val word = lst(i)\n            if(word.length % 2 == 1) {\n        \
    \        newList += word\n            }\n        }\n        newList.sortWith((a,\
    \ b) => a.length < b.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnt2cakx0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            if(x.length\
    \ % 2 != 0){\n                newList += x\n            }\n        })\n      \
    \  newList.sortWith((x, y) => x.length <= y.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_9qky0k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").filter(x => x.length % 2 != 0).mkString(\" \")\n          \
    \  newList += newWord\n        })\n        newList.sortWith(_.length < _.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud361n9o.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length ==\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxyza881f.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newList =\
    \ lst\n        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sortBy(x => x.length)\n        newList.sortBy(x => x.length)\n\
    \        newList.sort\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpffqwiu.scala:77:16 ------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        newList.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[String] - did you mean\
    \ List[String].sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val newWord\
    \ = x.split(\" \").map(_.length).sum\n            newList += x.substring(0,newWord)\n\
    \        })\n        newList.sortBy(x => x.length)\n        newList.sortBy(x =>\
    \ x.toUpperCase)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxxg0orw2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        val hashSet = mutable.HashSet[String]()\n\
    \        lst.foreach(word => {\n            val len = word.length\n          \
    \  if (len % 2 == 1) {\n                hashSet += word\n            } else {\n\
    \                hashSet -= word\n            }\n        })\n        hashSet.foreach(word\
    \ => {\n            result += word\n        })\n        result.sortBy(word =>\
    \ word.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54oaq_7b.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54oaq_7b.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhashSet\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => newList += x)\n     \
    \   newList.sortWith(_.length < _.length)\n        newList.sortWith(_.length >\
    \ _.length)\n        newList.sortWith(_.length > _.length)\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6op03prv.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => if (x.length%2==0) result+=x\
    \ else result.sortBy(x => x))\n        result.sortBy(x => x.length)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpstiquth3.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n            if\
    \ (x.length % 2 != 0) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttiij315.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         val word = lst(i)\n            val newWord = if (word.length % 2 ==\
    \ 1) word.dropRight(word.length / 2) else word.drop(word.length / 2)\n       \
    \     newList += newWord\n        }\n        newList.sortWith(_.length < _.length)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sckw__1.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => newList += x)\n \
    \       newList.sortWith((x, y) => x.length <= y.length)\n        newList.sortWith((x,\
    \ y) => x.toLowerCase < y.toLowerCase )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnq04yho8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            val splitted\
    \ = x.split(\" \").map(_.toInt)\n            val sum = splitted.sum\n        \
    \    if(sum % 2 == 1) {\n                newList += x\n            }\n       \
    \ })\n        newList.sortBy(x => x.split(\" \").map(_.toInt).sum)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2m0fy6rw.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         val word = lst(i)\n            if(word.length % 2 != 0) {\n        \
    \        newList += word\n            }\n        }\n        newList.sortWith(_.length\
    \ < _.length)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0x39mek2.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val newList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n       \
    \     val word = lst(i)\n            if(word.length % 2 != 0) {\n            \
    \    newList += word\n            }\n        }\n        newList.sortWith((x, y)\
    \ => x.length <= y.length)\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcln295i0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newList =\
    \ lst\n        newList = newList.filterNot(x => x.length%2==0)\n        newList\
    \ = newList.sortBy(x => x.length)\n        newList = newList.sortBy(x => x)\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkst8ep3x.scala:27)\n\tat Problem.main(tmpkst8ep3x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979976
