name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        var count = 0\n        var start = 1\n        var end = 1\n\
    \        while(start <= n) {\n            while(start <= n && end <= n) {\n  \
    \              if(start == end) {\n                    count += 1\n          \
    \      }\n                start += 1\n                end += 1\n            }\n\
    \            start += 1\n            end = start\n        }\n        count", " \
    \       var count = 0\n        var last = 0\n        for(i <- 0 until n){\n  \
    \          if((i%10)==1 && (i%100)!=0 && (i%1000)!=0){\n                count\
    \ += 1\n                last = i\n            }\n        }\n        count += last\n\
    \        return count", "        var count = 0\n        val ones = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 10 == 1) {\n               \
    \ ones += i\n            }\n        }\n        for (i <- ones) {\n           \
    \ if (i % 10 == 1) {\n                count += 1\n            }\n        }\n \
    \       count", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Map[Long,\
    \ Long]()\n        val zerosCount = mutable.Map[Long, Long]()\n        val onesZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n\
    \        val onesOnes = mutable.Map[Long, Long]()\n        val zerosZeros = mutable.Map[Long,\
    \ Long]()\n        val onesZeroOnes = mutable.Map[Long, Long]()\n        val zerosOneOnes\
    \ = mutable.Map[Long, Long]()\n        val onesOneOnes = mutable.Map[Long, Long]()\n\
    \        val zerosZeroOnes = mutable.Map[Long, Long]()\n        val onesZeroZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOneZeros = mutable.Map[Long, Long]()\n\
    \        val onesOneZeros = mutable.Map[Long, Long]()\n        val zerosOneOneZeros\
    \ = mutable.Map[Long, Long]()\n        val onesOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosZeroOneZeros = mutable.Map[Long, Long]()\n       \
    \ val onesZeroZeroOnes = mutable.Map[Long, Long]()\n        val zerosOneZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val onesOneZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosOneOneZeroOnes = mutable.Map[Long, Long]()\n     \
    \   val onesOneOneZeroOnes = mutable.Map[Long, Long]()\n        val zerosZeroOneOneZeros\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeroOneOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosOneZeroOneOnes = mutable.Map[Long, Long]()\n     \
    \   val onesOneZeroOneOnes = mutable.Map[Long, Long]()\n        val zerosOneOneZeroOneOnes\
    \ = mutable.Map[Long, Long]()\n        val onesOneOneZeroOneOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosZeroOneOneOneZeros = mutable.Map[Long, Long]()\n \
    \       val onesZeroZeroOneOneOnes = mutable.Map[Long, Long]()\n        val zeros",
  "        val ones = mutable.ListBuffer[Long]()\n        var count = 0\n        for\
    \ (i <- 0 until n) if (i % 10 == 1) ones += i\n        for (i <- 0 until n) if\
    \ (i % 10 != 1 && i % 10 != 9) count += ones.length\n        count", "       \
    \ val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.reverse.toInt)\n\
    \        val digit = digits.head\n        val digitCount = digits.count(_ == digit)\n\
    \        val oneCount = digits.count(_ == 1)\n        val zeroCount = digits.count(_\
    \ == 0)\n        val oneDigitCount = digits.count(_ == digit)\n        val zeroDigitCount\
    \ = digits.count(_ == 0)\n        val oneDigit = digits.head\n        val zeroDigit\
    \ = digits.last\n        val oneDigitCount = digits.count(_ == oneDigit)\n   \
    \     val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigit = digits.head\n        val zeroDigit = digits.last\n\
    \        val oneDigitCount = digits.count(_ == oneDigit)\n        val zeroDigitCount\
    \ = digits.count(_ == zeroDigit)\n        val oneDigitCount = digits.count(_ ==\
    \ oneDigit)\n        val zeroDigitCount = digits.count(_ == zeroDigit)\n     \
    \   val oneDigit = digits.head\n        val zeroDigit = digits.last\n        val\
    \ oneDigitCount = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_\
    \ == zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n   \
    \     val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n      \
    \  val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n      \
    \  val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n      \
    \  val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val starts = mutable.ListBuffer[Long]()\n        val ends = mutable.ListBuffer[Long]()\n\
    \        val zeroIndex = mutable.ListBuffer[Long]()\n        val oneIndex = mutable.ListBuffer[Long]()\n\
    \        val zeroCount = mutable.ListBuffer[Long]()\n        val oneCount = mutable.ListBuffer[Long]()\n\
    \        while(n > 0) {\n            val digit = n % 10\n            if(digit\
    \ == 1) {\n                ones += digit\n                oneIndex += digit\n\
    \                oneCount += digit\n            } else if(digit == 0) {\n    \
    \            zeros += digit\n                zeroIndex += digit\n            \
    \    zeroCount += digit\n            } else {\n                counts += digit\n\
    \                starts += digit\n                ends += digit\n            }\n\
    \            n /= 10\n        }\n        val zeroCount = ones.size - zeros.size\n\
    \        val oneCount = ones.size - ones.tail.head\n        val zeroIndex = ones.size\
    \ - zeros.size - ones.tail.head\n        val oneIndex = ones.size - ones.tail.head\n\
    \        val zeros = zeros.tail\n        val ones = ones.tail\n        val zeroIndex\
    \ = zeroIndex.tail\n        val oneIndex = oneIndex.tail\n        val zeroCount\
    \ = zeroCount.tail\n        val oneCount = oneCount.tail\n        val starts =\
    \ starts.tail\n        val ends = ends.tail\n        val counts = counts.tail\n\
    \        val zeros = zeros.take(zeroCount.size)\n        val ones = ones.take(oneCount.size)\n\
    \        val zeroIndex = zeroIndex.take(zeroCount.size)\n        val oneIndex\
    \ = oneIndex.take(oneCount.size)\n        val zeroCount = zeroCount.take(zeroCount.size)\n\
    \        val oneCount = oneCount.take(oneCount.size)\n        val starts = starts.take(starts.size)\n\
    \        val ends = ends.take(ends.size)\n        val counts = counts.take(counts.size)\n\
    \        val zeros = zeros.toList\n        val ones = ones.toList\n        val\
    \ zeroIndex = zeroIndex.toList\n        val oneIndex = oneIndex.toList\n     \
    \   val zeroCount = zeroCount.toList\n        val oneCount = oneCount.toList\n\
    \        val starts = starts.toList\n        val ends = ends.toList\n        val\
    \ counts = counts.toList\n        ", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n      \
    \  for (i <- 0 until digits.size) {\n            val digit = digits(i)\n     \
    \       if (digit == 1)\n                ones += digits(i)\n            else if\
    \ (digit == 0)\n                zeros += digits(i)\n            else {\n     \
    \           val count = counts.getOrElse(digits(i), 0) + 1\n                counts\
    \ += digit -> (count + 1)\n            }\n        }\n        val oneCount = ones.toList.size\n\
    \        val zeroCount = zeros.toList.size\n        val count = oneCount + zeroCount\n\
    \        count", "        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val limit = math.pow(10, math.ceil(math.log10(n)))\n        val starts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val current = 1\n        while(current <= limit) {\n            val remainder\
    \ = n % current\n            n /= current\n            val newCount = if (remainder\
    \ == 0) 1 else 0\n            counts += newCount\n            if (newCount ==\
    \ 1 && current == 1) {\n                starts += current\n            } else\
    \ if (newCount == 1 && current == 0) {\n                ends += current\n    \
    \        }\n            current += 1\n        }\n        val result = counts.sum\n\
    \        val startsOne = starts.sum\n        val endsOne = ends.sum\n        val\
    \ startsOneEnd = startsOne + endsOne\n        val endsOneEnd = startsOne + endsOne\
    \ + ones.size\n        val startsZero = starts.size - ends.size - ones.size\n\
    \        val endsZero = startsZero + ends.size - ones.size\n        val startsZeroEnd\
    \ = startsZero + ends.size - ones.size\n        val endsZeroEnd = startsZeroEnd\
    \ + ends.size - ones.size\n        val startsOneEnd = startsOne + endsOne + ones.size\n\
    \        val endsOneEnd = startsOne + endsOne + ones.size\n        val startsZeroEnd\
    \ = startsZero + ends.size - ends.size - ones.size\n        val endsZeroEnd =\
    \ startsZeroEnd + ends.size - ends.size - ones.size\n        val startsOneEnd\
    \ = startsOne + endsOne + ones.size\n        val endsOneEnd = startsOne + endsOne\
    \ + ones.size\n        val startsZeroEnd = startsZero + ends.size - ends.size\
    \ - ones.size\n        val endsZeroEnd = startsZeroEnd + ends.size - ends.size\
    \ - ones.size\n        val startsOneEnd = startsOne + endsOne + ones.size\n  \
    \      val endsOneEnd = startsOne + endsOne + ones.size\n        val startsZeroEnd\
    \ = startsZero + ends.size - ends.size - ones.size\n        val endsZeroEnd =\
    \ startsZeroEnd + ends.size - ends.size - ones.size\n        val startsOneEnd\
    \ = startsOne + endsOne + ones.size\n        val endsOne", "        var count\
    \ = 0\n        var last = 0\n        var lastOne = 0\n        var lastTwo = 0\n\
    \        var lastThree = 0\n        var lastFour = 0\n        var lastFive = 0\n\
    \        var lastSix = 0\n        var lastSeven = 0\n        var lastEight = 0\n\
    \        var lastNine = 0\n        var lastTen = 0\n        var lastEleven = 0\n\
    \        var lastTwelve = 0\n        var lastThirteen = 0\n        var lastFourteen\
    \ = 0\n        var lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen\
    \ = 0\n        var lastEighteen = 0\n        var lastNineteen = 0\n        var\
    \ lastTwenty = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n\
    \        var lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var\
    \ lastTwentyFive = 0\n        var lastTwentySix = 0\n        var lastTwentySeven\
    \ = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine = 0\n     \
    \   var lastThirty = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo\
    \ = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour = 0\n     \
    \   var lastThirtyFive = 0\n        var lastThirtySix = 0\n        var lastThirtySeven\
    \ = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine = 0\n     \
    \   var lastFourty = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo\
    \ = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour = 0\n     \
    \   var lastFourtyFive = 0\n        var lastFourtySix = 0\n        var lastFourtySeven\
    \ = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine = 0\n     \
    \   var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Map[Long, Long]()\n        val zerosCount\
    \ = mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCountZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeros = mutable.Map[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            if (i % 10 == 1) {\n     \
    \           ones += i\n                onesCount += 1\n                onesCounts\
    \ += i -> onesCount.getOrElse(i, 0)\n            }\n            if (i % 10 ==\
    \ 0) {\n                zeros += i\n                zerosCount += 1\n        \
    \        zerosCounts += i -> zerosCount.getOrElse(i, 0)\n            }\n     \
    \   }\n        for (i <- 1 to n) {\n            if (onesCount.getOrElse(i, 0)\
    \ == 1) {\n                onesCountZeros += i -> onesCount.getOrElse(i, 0)\n\
    \            }\n            if (zerosCount.getOrElse(i, 0) == 1) {\n         \
    \       zerosCountZeros += i -> zerosCount.getOrElse(i, 0)\n            }\n  \
    \      }\n        val onesCountZeros = onesCountZeros.toSeq\n        val zerosCountZeros\
    \ = zerosCountZeros.toSeq\n        val onesCounts = onesCounts.toSeq\n       \
    \ val zerosCounts = zerosCounts.toSeq\n        val onesCountZeros = onesCountZeros.toSeq\n\
    \        val zerosCountZeros = zerosCountZeros.toSeq\n        val onesCountZeros\
    \ = onesCountZeros.toSeq\n        val zerosCountZeros = zerosCountZeros.toSeq\n\
    \        val onesCounts = onesCounts.toSeq\n        val zerosCounts = zerosCounts.toSeq\n\
    \        val onesCountZeros = onesCountZeros.toSeq\n        val zerosCountZeros\
    \ = zerosCountZeros.toSeq\n        val onesCounts = onesCounts.toSeq\n       \
    \ val zerosCounts = zerosCounts.toSeq\n        val onesCountZeros = onesCountZeros.toSeq\n\
    \        val zerosCountZeros = zerosCountZeros.toSeq\n        val onesCounts =\
    \ onesCounts.toSeq\n        val zerosCounts = zerosCounts.toSeq\n        ", " \
    \       var count = 0\n        val ones = scala.collection.mutable.ArrayBuffer(1)\n\
    \        val zeros = scala.collection.mutable.ArrayBuffer(0)\n        val onesCount\
    \ = ones.takeWhile(x => x <= n).length\n        val zerosCount = zeros.takeWhile(x\
    \ => x <= n).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x ",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCounts =\
    \ mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCountss = mutable.ListBuffer[Long]()\n        val zerosCountss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountsss = mutable.ListBuffer[Long]()\n        val onesCountssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssss = mutable.ListBuffer[Long]()\n        val zerosCountsssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountssssss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountssssss = mutable.ListBuffer[Long]()\n        val onesCountsssssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssssss = mutable.ListBuffer[Long]()\n        val zerosCountssssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsssssss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountssssss = mutable.ListBuffer[Long]()\n        val onesCountsssssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssssss = mutable.ListBuffer[Long]()\n        val zerosCountssssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsssssss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountssssss = mutable.ListBuffer[Long]()\n        val onesCountsssssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssssss = mutable.ListBuffer[Long", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val counts\
    \ = mutable.Map[Long, Long]()\n        for(i <- 1 to n){\n            val digit\
    \ = i / 10\n            val remainder = i % 10\n            if(remainder == 1){\n\
    \                ones += digit\n            }\n            else if(remainder ==\
    \ 0){\n                zeros += digit\n            }\n            else{\n    \
    \            counts += digit -> (counts(digit) + 1)\n            }\n        }\n\
    \        ones.size + zeros.size + counts.values.sum", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.takeWhile(x => x < n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x < n).length\n        val countsCount = counts.takeWhile(x\
    \ => x < n).length\n        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).length\n        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).length\n        val countsOnes = counts.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).length\n        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).length\n        val countsZeros = counts.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).length\n        val onesZeroZeros = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).takeWhile(x => x == 0).length\n        val zerosOneZeros = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x == 1).takeWhile(x => x == 0).length\n        val\
    \ countsOneZeros = counts.takeWhile(x => x < n).takeWhile(x => x == 1).takeWhile(x\
    \ => x == 0).length\n        val onesOneZeros = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).takeWhile(x => x == 0).length\n        val zerosOneOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x == 1).takeWhile(x => x == 1).length\n        val\
    \ countsOneOnes = counts.takeWhile(x => x < n).takeWhile(x => x == 1).takeWhile(x\
    \ => x == 1).length\n        val onesOneOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).takeWhile(x => x == 1).length\n        val zerosOneZeroZeros = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x == 1).takeWhile(x => x == 0).takeWhile(x => x ==\
    \ 0).length\n        val countsOneZeroZeros = counts.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).takeWhile", "        val counts = mutable.HashMap[Long, Long]()\n\
    \        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.takeWhile(x => x < n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val onesOnes\
    \ = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        while (i < n) {\n            if (ones.contains(i))\
    \ {\n                counts += i\n            }\n            i += 1\n        }\n\
    \        while (i < n) {\n            if (zeros.contains(i)) {\n             \
    \   counts += i\n            }\n            i += 1\n        }\n        counts.sum",
  "        var count = 0\n        var last = 1\n        while(n > 1) {\n         \
    \   val temp = n % 10\n            if(temp == 1) {\n                count += 1\n\
    \            }\n            n /= 10\n        }\n        count", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n) {\n            val temp = i\n\
    \            while(temp > 0) {\n                if(temp % 10 == 1) {\n       \
    \             ones += i\n                    onesCount += i\n                \
    \    count += 1\n                }\n                temp /= 10\n            }\n\
    \        }\n        onesCount.toList.sortBy(_ * -1).toList.length", "        val\
    \ ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n  \
    \      val count = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val zerosZeros = mutable.ListBuffer[Long]()\n\
    \        val onesZeroOnes = mutable.ListBuffer[Long]()\n        val zerosOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeroOnes = mutable.ListBuffer[Long]()\n        val onesZeroZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneZeros = mutable.ListBuffer[Long]()\n\
    \        val onesOneZeros = mutable.ListBuffer[Long]()\n        val zerosOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesOneOneZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosZeroOneZeros = mutable.ListBuffer[Long]()\n        val onesZeroZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneZeroOnes = mutable.ListBuffer[Long]()\n        val zerosOneOneZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesOneOneZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeroOneOneZeros = mutable.ListBuffer[Long]()\n        val onesZeroZeroOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneZeroOneOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneZeroOneOnes = mutable.ListBuffer[Long]()\n        val zerosOneOneZeroOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesOneOneZeroOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeroOneOneOneZeros = mutable.ListBuffer[Long]()\n        val\
    \ onesZeroZeroOneOneOnes = mutable.ListBuffer[Long]()\n        val zerosOneZeroOneOneOne",
  "        val counts = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeros = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.Array", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val count = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeros = mutable.ListBuffer[Long]()\n        val onesZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneOnes = mutable.ListBuffer[Long]()\n        val zerosZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeros = mutable.ListBuffer[Long]()\n        val onesOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneZeros = mutable.ListBuffer[Long]()\n\
    \        val onesOneOneZeros = mutable.ListBuffer[Long]()\n        val zerosZeroOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeroOnes = mutable.ListBuffer[Long]()\n        val onesOneZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneOneZeroOnes = mutable.ListBuffer[Long]()\n        val zerosZeroOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeroOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeroOneOnes = mutable.ListBuffer[Long]()\n        val onesOneZeroOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneZeroOneOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneOneZeroOneOnes = mutable.ListBuffer[Long]()\n        val zerosZeroOneOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeroOneOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeroOneOneOne", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val zerosCounts_ = mutable.Set[Long]()\n        ", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val maxDigit = math.pow(10,\
    \ math.ceil(math.log10(n)))\n        val digits = math.ceil(n/maxDigit).toInt\n\
    \        val starts = mutable.ListBuffer[Long]()\n        val ends = mutable.ListBuffer[Long]()\n\
    \        val digit = math.pow(10, math.floor(math.log10(n)))\n        val digits\
    \ = math.ceil(n/digit).toInt\n        val startOnes = mutable.ListBuffer[Long]()\n\
    \        val endOnes = mutable.ListBuffer[Long]()\n        val startZeros = mutable.ListBuffer[Long]()\n\
    \        val endZeros = mutable.ListBuffer[Long]()\n        val startCount = mutable.ListBuffer[Long]()\n\
    \        val endCount = mutable.ListBuffer[Long]()\n        val startOneCount\
    \ = mutable.ListBuffer[Long]()\n        val endOneCount = mutable.ListBuffer[Long]()\n\
    \        val startZeroCount = mutable.ListBuffer[Long]()\n        val endZeroCount\
    \ = mutable.ListBuffer[Long]()\n        val startOneCounts = mutable.ListBuffer[Long]()\n\
    \        val endOneCounts = mutable.ListBuffer[Long]()\n        val startZeroCounts\
    \ = mutable.ListBuffer[Long]()\n        val endZeroCounts = mutable.ListBuffer[Long]()\n\
    \        val startOneCountOnes = mutable.ListBuffer[Long]()\n        val endOneCountOnes\
    \ = mutable.ListBuffer[Long]()\n        val startZeroCountOnes = mutable.ListBuffer[Long]()\n\
    \        val endZeroCountOnes = mutable.ListBuffer[Long]()\n        val startOneCountZeros\
    \ = mutable.ListBuffer[Long]()\n        val endOneCountZeros = mutable.ListBuffer[Long]()\n\
    \        val startZeroCountZeros = mutable.ListBuffer[Long]()\n        val endZeroCountZeros\
    \ = mutable.ListBuffer[Long]()\n        val startOneCountOnesZeros = mutable.ListBuffer[Long]()\n\
    \        val endOneCountOnesZeros = mutable.ListBuffer[Long]()\n        val startZeroCountOnesZeros\
    \ = mutable.ListBuffer[Long]()\n        val endZeroCountOnesZeros = mutable.ListBuffer",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val countsZero = mutable.Map[Long,\
    \ Long]()\n        val countsOne = mutable.Map[Long, Long]()\n        val countsZeroOne\
    \ = mutable.Map[Long, Long]()\n        val countsOneOne = mutable.Map[Long, Long]()\n\
    \        val countsZeroZero = mutable.Map[Long, Long]()\n        val countsOneZero\
    \ = mutable.Map[Long, Long]()\n        val countsZeroOneZero = mutable.Map[Long,\
    \ Long]()\n        val countsOneOneZero = mutable.Map[Long, Long]()\n        val\
    \ countsZeroZeroOne = mutable.Map[Long, Long]()\n        val countsOneZeroOne\
    \ = mutable.Map[Long, Long]()\n        val countsZeroOneZeroOne = mutable.Map[Long,\
    \ Long]()\n        val countsOneOneZeroOne = mutable.Map[Long, Long]()\n     \
    \   val countsZeroZeroOneZero = mutable.Map[Long, Long]()\n        val countsOneZeroOneZero\
    \ = mutable.Map[Long, Long]()\n        val countsZeroOneZeroOne = mutable.Map[Long,\
    \ Long]()\n        val countsOneOneZeroOne = mutable.Map[Long, Long]()\n     \
    \   val countsZeroZeroOneZeroOne = mutable.Map[Long, Long]()\n        val countsOneZeroOneZeroOne\
    \ = mutable.Map[Long, Long]()\n        val countsZeroOneZeroOneZero = mutable.Map[Long,\
    \ Long]()\n        val countsOneOneZeroOneZero = mutable.Map[Long, Long]()\n \
    \       val countsZeroZeroOneZeroOne = mutable.Map[Long, Long]()\n        val\
    \ countsOneZeroOneZeroOne = mutable.Map[Long, Long]()\n        val countsZeroOneZeroOneZero\
    \ = mutable.Map[Long, Long]()\n        val countsOneOneZeroOneZero = mutable.Map[Long,\
    \ Long]()\n        val countsZeroZeroOneZeroOne = mutable.Map[Long, Long]()\n\
    \        val countsOneZeroOneZeroOne = mutable.Map[Long, Long]()\n        val\
    \ countsZeroOneZeroOneZero = mutable.Map[Long, ", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val zerosCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val zerosCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val zerosCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val zerosCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val zerosCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val zerosCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val zerosCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val zerosCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val zerosCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val zerosCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val zerosCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val zerosCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val zerosCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val zerosCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val zerosCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val zerosCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val zerosCount18 = ", "        var count = 0\n        var last = 0\n\
    \        while(n > 0){\n            val next = (n % 10).toInt\n            if(next\
    \ == 1){\n                count += 1\n            }\n            n /= 10\n   \
    \     }\n        return count", "        val ones = mutable.ArrayBuffer(1)\n \
    \       val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val onesCount = ones.takeWhile(x => x < n).length\n\
    \        val zerosCount = zeros.takeWhile(x => x < n).length\n        val count\
    \ = (onesCount + zerosCount).toLong\n        val newCount = count + onesCount\
    \ + zerosCount\n        val newZeros = zeros.takeWhile(x => x < n).length\n  \
    \      val newOnes = ones.takeWhile(x => x < n).length\n        val newCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        newCounts += newCount\n        newCounts\
    \ += newCount + onesCount\n        newCounts += newCount + zerosCount\n      \
    \  newCounts += newCount + onesCount + zerosCount\n        newCounts += newCount\
    \ + onesCount + zerosCount + onesCount + zerosCount\n        newCounts += newCount\
    \ + onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount\n\
    \        newCounts += newCount + onesCount + zerosCount + onesCount + zerosCount\
    \ + onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount +\
    \ onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount\
    \ + zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount +\
    \ zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount\
    \ + onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount +\
    \ onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount\
    \ + zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount +\
    \ zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount\
    \ + onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount +\
    \ onesCount + zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount\
    \ + zerosCount + onesCount + zerosCount + onesCount + zerosCount + onesCount +\
    \ zerosCount + onesCount + zerosCount + onesCoun", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ListBuffer(1)\n        val zeros\
    \ = mutable.ListBuffer(0)\n        var count = 0\n        while(n > 0){\n    \
    \        val nextDigit = n % 10\n            ones += nextDigit\n            n\
    \ /= 10\n            zeros += nextDigit * 10\n            count += 1\n       \
    \ }\n        ones.length", "        val ones = mutable.ArrayBuffer(1)\n      \
    \  val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ digit = digits.head\n        val digitCount = digits.tail.count(_ == digit)\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digitCount = digitCount.toLong\n        val digitCount = digitCount.toLong\n\
    \        val digit", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val onesCount = mutable.Map[Long, Long]()\n        val zerosCount = mutable.Map[Long,\
    \ Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeroZeros = mutable.Map[Long, Long]()\n        val zerosCountOneOnes\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeroZeroZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOneOneOnes = mutable.Map[Long, Long]()\n    \
    \    val onesCountZeroZeroZeroZeros = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeroZeroZeroZeroZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOneOneOneOneOnes = mutable.Map[Long, Long]()\n\
    \        val onesCountZeroZeroZeroZeroZeroZeros = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOnes = mutable.Map[Long, Long]()\n     \
    \   val onesCountZeroZeroZeroZeroZeroZeroZeros = mutable.Map[Long, Long]()\n \
    \       val zerosCountOneOneOneOneOneOneOnes = mutable.Map[Long, Long]()\n   \
    \     val onesCountZeroZeroZeroZeroZeroZeroZeroZeros = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOneOneOnes = mutable.Map[Long, Long]()\n\
    \        val onesCountZeroZeroZeroZeroZeroZeroZeroZeros = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOneOneOneOneOnes = mutable.Map[Long, Long]()\n\
    \        val onesCountZeroZeroZeroZeroZeroZeroZeroZeroZeroZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOne",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val n = n.toInt\n   \
    \     val onesCount = ones.size\n        val zerosCount = zeros.size\n       \
    \ val countsCount = counts.size\n        val onesZeros = ones.toSet.intersect(zeros.toSet)\n\
    \        val onesCount = ones.toSet.size + (ones.toSet.size - onesZeros)\n   \
    \     val zerosCount = zeros.toSet.size + (zeros.toSet.size - onesZeros)\n   \
    \     val countsCount = counts.size + (counts.size - onesZeros)\n        val onesZeros\
    \ = ones.toSet.intersect(zeros.toSet)\n        val onesCount = ones.toSet.size\
    \ + (ones.toSet.size - onesZeros)\n        val zerosCount = zeros.toSet.size +\
    \ (zeros.toSet.size - onesZeros)\n        val countsCount = counts.size + (counts.size\
    \ - onesZeros)\n        val onesZeros = ones.toSet.intersect(zeros.toSet)\n  \
    \      val onesCount = ones.toSet.size + (ones.toSet.size - onesZeros)\n     \
    \   val zerosCount = zeros.toSet.size + (zeros.toSet.size - onesZeros)\n     \
    \   val countsCount = counts.size + (counts.size - onesZeros)\n        val onesZeros\
    \ = ones.toSet.intersect(zeros.toSet)\n        val onesCount = ones.toSet.size\
    \ + (ones.toSet.size - onesZeros)\n        val zerosCount = zeros.toSet.size +\
    \ (zeros.toSet.size - onesZeros)\n        val countsCount = counts.size + (counts.size\
    \ - onesZeros)\n        val onesZeros = ones.toSet.intersect(zeros.toSet)\n  \
    \      val onesCount = ones.toSet.size + (ones.toSet.size - onesZeros)\n     \
    \   val zerosCount = zeros.toSet.size + (zeros.toSet.size - onesZeros)\n     \
    \   val countsCount = counts.size + (counts.size - onesZeros)\n        val onesZeros\
    \ = ones.toSet.intersect(zeros.toSet)\n        val onesCount = ones.toSet.size\
    \ + (ones.toSet.size - onesZeros)\n        val zerosCount = zeros.toSet.size +\
    \ (zeros.toSet.size - onesZeros)\n        val countsCount = counts.size + (counts.size\
    \ - onesZeros)\n        val onesZeros = ones.toSet.intersect(", "        val ones\
    \ = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n     \
    \   val count = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val onesZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val onesOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosZeros = mutable.ArrayBuffer(0)\n        val onesZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOneZeros = mutable.ArrayBuffer(0)\n        val onesOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesZeroOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneZeros = mutable.ArrayBuffer(0)\n        val onesOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeroOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val\
    \ onesOneZeroOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeroOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val\
    \ onesOneZeroOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeroOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val\
    \ onesOneZeroOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeroOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val\
    \ onesOneZeroOne", "        val ones = mutable.Set[Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n      \
    \  val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ListBuffer[Long]()\n        var\
    \ count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n         \
    \       ones += i\n                count += 1\n            }\n        }\n    \
    \    ones.size", "        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n     \
    \   val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        while(digits.hasNext)\
    \ {\n            val digit = digits.next()\n            val digitCount = digits.count(_\
    \ == digit)\n            val digitZeroCount = digits.count(_ == 0)\n         \
    \   val digitOneCount = digits.count(_ == 1)\n            val digitZeroZeroCount\
    \ = digits.count(_ == 0)\n            val digitOneOneCount = digits.count(_ ==\
    \ 1)\n            val digitZeroOneCount = digits.count(_ == 0)\n            val\
    \ digitOneZeroCount = digits.count(_ == 1)\n            val digitZeroZeroZeroCount\
    \ = digits.count(_ == 0)\n            val digitOneOneOneCount = digits.count(_\
    \ == 1)\n            val digitZeroOneOneCount = digits.count(_ == 0)\n       \
    \     val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZeroOneCount\
    \ = digits.count(_ == 0)\n            val digitOneOneZeroCount = digits.count(_\
    \ == 1)\n            val digitZeroOneZeroCount = digits.count(_ == 0)\n      \
    \      val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZeroOneCount\
    \ = digits.count(_ == 0)\n            val digitOneOneOneCount = digits.count(_\
    \ == 1)\n            val digitZeroOneOneCount = digits.count(_ == 0)\n       \
    \     val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZeroOneCount\
    \ = digits.count(_ == 0)\n            val digitOneOneZeroCount = digits.count(_\
    \ == 1)\n            val digitZeroOneZeroCount = digits.count(_ == 0)\n      \
    \      val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZeroOneCount\
    \ = digits.count(_ == 0)\n            val digitOneOneOneCount = digits.count(_\
    \ == 1)\n            val digitZeroOneOneCount = digits.count(_ == 0)\n       \
    \     val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZeroOneCount\
    \ = digits.count(_ == 0)\n            val digitOneOneZeroCount = digits.count(_\
    \ == 1)\n            val digitZeroOneZeroCount = digits.count(_ == 0)\n      \
    \      val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZeroOneCount\
    \ = digits.count(_ == 0)\n            val digitOneOneOneCount = digits.count(_\
    \ == 1)\n            val digitZeroOneOneCount = digits.count(_ == 0)\n       \
    \     val digitOneZeroOneCount = digits.count(_ == 1)\n            val digitZeroZero",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        var i = n\n        while(i > 0) {\n    \
    \        ones += i\n            i /= 10\n        }\n        i = n\n        while(i\
    \ > 0) {\n            zeros += i\n            i /= 10\n        }\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += i)\n        zeros.foreach(i => zerosCount += i)\n        ones.foreach(i\
    \ => onesCount += ", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val maxDigit = math.pow(10, math.ceil(math.log10(n)))\n        for(i <- 0\
    \ until n) {\n            val digit = math.floor(i / maxDigit)\n            val\
    \ remainder = i % maxDigit\n            val digitCount = if (remainder == 0) 1\
    \ else 0\n            val digitZeroCount = if (digit == 0) 1 else 0\n        \
    \    val digitOneCount = if (digit == 1) 1 else 0\n            val digitCount\
    \ = digitCount + (digitZeroCount + digitOneCount)\n            val digitZeroCount\
    \ = digitZeroCount + (digitOneCount == 0)\n            val digitOneCount = digitOneCount\
    \ + (digitZeroCount == 0)\n            val digitCount = digitCount + (digitZeroCount\
    \ + digitOneCount)\n            val digitZeroCount = digitZeroCount + (digitOneCount\
    \ == 0)\n            val digitOneCount = digitOneCount + (digitZeroCount == 0)\n\
    \            val digitCount = digitCount + (digitZeroCount + digitOneCount)\n\
    \            val digitZeroCount = digitZeroCount + (digitOneCount == 0)\n    \
    \        val digitOneCount = digitOneCount + (digitZeroCount == 0)\n         \
    \   val digitCount = digitCount + (digitZeroCount + digitOneCount)\n         \
    \   val digitZeroCount = digitZeroCount + (digitOneCount == 0)\n            val\
    \ digitOneCount = digitOneCount + (digitZeroCount == 0)\n            val digitCount\
    \ = digitCount + (digitZeroCount + digitOneCount)\n            val digitZeroCount\
    \ = digitZeroCount + (digitOneCount == 0)\n            val digitOneCount = digitOneCount\
    \ + (digitZeroCount == 0)\n            val digitCount = digitCount + (digitZeroCount\
    \ + digitOneCount)\n            val digitZeroCount = digitZeroCount + (digitOneCount\
    \ == 0)\n            val digitOneCount = digitOneCount + (digitZeroCount == 0)\n\
    \            val digitCount = digitCount + (digitZeroCount + digitOneCount)\n\
    \            val digitZeroCount = digitZeroCount + (digitOneCount == 0)\n    \
    \        val digitOneCount = digitOneCount + (digitZeroCount == 0)\n         \
    \   val digitCount = digitCount + (digitZeroCount + digitOneCount)\n         \
    \   val digitZeroCount = digitZeroCount + (digitOneCount == 0)\n            val\
    \ digitOneCount = digitOneCount + (digitZeroCount == 0)\n            val digitCount\
    \ = digitCount + (digitZeroCount + digitOneCount)\n            val digitZeroCount\
    \ = digitZeroCount + (digitOneCoun", "        var count = 0\n        var last\
    \ = 0\n        var current = 0\n        var next = 1\n        var remainder =\
    \ n\n        while (next <= n) {\n            current = next\n            next\
    \ = current * 10 + remainder\n            if (next > n) {\n                remainder\
    \ = next - n\n                last = 1\n            } else {\n               \
    \ last = 0\n            }\n            if (last == 1) {\n                count\
    \ += 1\n            }\n        }\n        count", "        var count = 0\n   \
    \     var last = 1\n        while(n > 0){\n            val next = (last * 10 +\
    \ n) % 100\n            count += next == 1\n            last = next\n        \
    \    n -= 1\n        }\n        count", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        while(n > 1) {\n            val lastDigit = n % 10\n            val lastDigitCount\
    \ = if (lastDigit == 1) ones.size else zeros.size\n            val newCount =\
    \ lastDigitCount + 1\n            counts += newCount\n            n /= 10\n  \
    \      }\n        counts.sum", "        var count = 0\n        for(i <- 1 to n){\n\
    \            if(i%10 == 1){\n                count += 1\n            }\n     \
    \   }\n        return count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val twos = mutable.ListBuffer[Long]()\n        val threes = mutable.ListBuffer[Long]()\n\
    \        val fours = mutable.ListBuffer[Long]()\n        val fives = mutable.ListBuffer[Long]()\n\
    \        val sixes = mutable.ListBuffer[Long]()\n        val sevens = mutable.ListBuffer[Long]()\n\
    \        val eights = mutable.ListBuffer[Long]()\n        val nines = mutable.ListBuffer[Long]()\n\
    \        val tens = mutable.ListBuffer[Long]()\n        val hundreds = mutable.ListBuffer[Long]()\n\
    \        val thousands = mutable.ListBuffer[Long]()\n        val millions = mutable.ListBuffer[Long]()\n\
    \        val billions = mutable.ListBuffer[Long]()\n        val trillions = mutable.ListBuffer[Long]()\n\
    \        val quadrillions = mutable.ListBuffer[Long]()\n        val quintillions\
    \ = mutable.ListBuffer[Long]()\n        val sextillions = mutable.ListBuffer[Long]()\n\
    \        val septillions = mutable.ListBuffer[Long]()\n        val octillions\
    \ = mutable.ListBuffer[Long]()\n        val nonillions = mutable.ListBuffer[Long]()\n\
    \        val decillions = mutable.ListBuffer[Long]()\n        val undecillions\
    \ = mutable.ListBuffer[Long]()\n        val duodecillions = mutable.ListBuffer[Long]()\n\
    \        val tredecillions = mutable.ListBuffer[Long]()\n        val quattuordecillions\
    \ = mutable.ListBuffer[Long]()\n        val quindecillions = mutable.ListBuffer[Long]()\n\
    \        val sexdecillions = mutable.ListBuffer[Long]()\n        val septendecillions\
    \ = mutable.ListBuffer[Long]()\n        val octodecillions = mutable.ListBuffer[Long]()\n\
    \        val novemdecillions = mutable.ListBuffer[Long]()\n        val vigintillions\
    \ = mutable.ListBuffer[Long]()\n        val unvigintillions = mutable.ListBuffer[Long]()\n\
    \        val duovigintilli", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0){\n            ones += n\n       \
    \     n -= 1\n        }\n        ones.foreach(n => {\n            if(n % 10 ==\
    \ 1){\n                count += 1\n            }\n        })\n        count",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val count = mutable.ListBuffer[Long]()\n        while(n > 0){\n     \
    \       val tmp = n % 10\n            if(tmp == 1){\n                ones += tmp\n\
    \                count += ones.length\n            }else{\n                zeros\
    \ += tmp\n            }\n            n /= 10\n        }\n        ones.length +\
    \ zeros.length", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        var start = 0\n        var end = n\n        while (start < end) {\n\
    \            if (start % 10 == 1 && end % 10 != 1) {\n                count +=\
    \ 1\n            }\n            start += 1\n            end -= 1\n        }\n\
    \        count", "        var count = 0\n        var last = 0\n        var lastStart\
    \ = 0\n        var lastEnd = 0\n        for(i <- 1 to n){\n            val current\
    \ = i\n            val start = current - 1\n            val end = current + 1\n\
    \            if(start == lastStart && end == lastEnd){\n                count\
    \ += 1\n            }\n            lastStart = start\n            lastEnd = end\n\
    \        }\n        count", "        val ones = mutable.Set[Long]()\n        val\
    \ zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long, Long]()\n\
    \        val zerosCountZeros = mutable.Map[Long, Long]()\n        val onesCountOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOnes = mutable.Map[Long, Long]()\n       \
    \ val zerosCountZeroOnes = mutable.Map[Long, Long]()\n        val onesCountOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeros = mutable.Map[Long, Long]()\n      \
    \  val zerosCountZeroZeros = mutable.Map[Long, Long]()\n        val onesCountOneZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOnes = mutable.Map[Long, Long]()\n       \
    \ val zerosCountZeroOnes = mutable.Map[Long, Long]()\n        val onesCountOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroOnes = mutable.Map[Long, Long]()\n   \
    \     val zerosCountZeroZeroOnes = mutable.Map[Long, Long]()\n        val onesCountOneZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOneOnes = mutable.Map[Long, Long]()\n    \
    \    val zerosCountZeroOneOnes = mutable.Map[Long, Long]()\n        val onesCountOneOneZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroOnes = mutable.Map[Long, Long]()\n   \
    \     ", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val zerosOnes = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val zeroOnes = mutable.Set[Long]()\n        val onesZeroOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOnes = mutable.Set[Long]()\n        val onesOnesOnes = mutable.Set[Long]()\n\
    \        val zerosOnesOnes = mutable.Set[Long]()\n        val onesZeroOnesOnes\
    \ = mutable.Set[Long]()\n        val zerosZeroOnesOnes = mutable.Set[Long]()\n\
    \        val onesOnesOnesOnes = mutable.Set[Long]()\n        val zerosOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val onesZeroOnesOnesOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOnesOnesOnes = mutable.Set[Long]()\n        val onesOnesOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val zerosOnesOnesOnesOnes = mutable.Set[Long]()\n\
    \        val onesZeroOnesOnesOnesOnes = mutable.Set[Long]()\n        val zerosZeroOnesOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val onesOnesOnesOnesOnesOnes = mutable.Set[Long]()\n\
    \        val zerosOnesOnesOnesOnesOnes = mutable.Set[Long]()\n        val onesZeroOnesOnesOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val zerosZeroOnesOnesOnesOnesOnes = mutable.Set[Long]()\n\
    \        val onesOnesOnesOnesOnesOnesOnes = mutable.Set[Long]()\n        val zerosOnesOnesOnesOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val onesZeroOnesOnesOnesOnesOnesOne", "     \
    \   val ones = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n by 10)\
    \ {\n            if (i.toString.toLong == 1) {\n                ones += i\n  \
    \          }\n        }\n        ones.count(_ == 1)", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ListBuffer(1)\n        val zeros\
    \ = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n \
    \       while(n > 0) {\n            val digit = n % 10\n            n /= 10\n\
    \            val newCount = if (digit == 1) ones.size + zeros.size else zeros.size\
    \ + ones.size\n            counts += newCount\n        }\n        counts.sum",
  "        val counts = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.HashSet.empty[Long]\n\
    \        val zeros = mutable.HashSet.empty[Long]\n        val onesCount = mutable.HashSet.empty[Long]\n\
    \        val zerosCount = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.Hash", "        var count = 0\n        var last = 1\n        while(n\
    \ > 0) {\n            val next = (n % 10) + 1\n            n /= 10\n         \
    \   if(next == 1) {\n                count += 1\n                last = next\n\
    \            }\n        }\n        count", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val iter = Iterator.from(1).takeWhile(_ < n).iterator\n   \
    \     while (iter.hasNext) {\n            val next = iter.next\n            if\
    \ (next == 1)\n                ones += next\n            else\n              \
    \  zeros += next\n        }\n        val oneCount = ones.toSet.size + 1\n    \
    \    val zeroCount = zeros.toSet.size + 1\n        val count = oneCount + zeroCount\n\
    \        counts += n -> count\n        count", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n",
  "        var count = 0\n        var last = 1\n        var next = 1\n        while(n\
    \ > 1) {\n            count += 1\n            next *= 10\n            next +=\
    \ last\n            last = next\n            n -= 1\n        }\n        count",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val remainder =\
    \ n\n        val remainders = mutable.ArrayBuffer.empty[Long]\n        val zeroCount\
    \ = 0\n        val oneCount = 0\n        while(zeroCount < n && oneCount < n)\
    \ {\n            val remainders = remainder / 10\n            val remaindersRemainder\
    \ = remainders % 10\n            val remaindersRemainders = remaindersRemainder\
    \ / 10\n            val remaindersRemaindersRemainder = remaindersRemainders %\
    \ 10\n            val remaindersRemaindersRemainders = remaindersRemaindersRemainder\
    \ / 10\n            val remaindersRemaindersRemaindersRemainder = remaindersRemaindersRemainders\
    \ % 10\n            val remaindersRemaindersRemaindersRemainders = remaindersRemaindersRemaindersRemainder\
    \ / 10\n            val remaindersRemaindersRemaindersRemaindersRemainder = remaindersRemaindersRemaindersRemainders\
    \ % 10\n            val remaindersRemaindersRemaindersRemaindersRemainders = remaindersRemaindersRemaindersRemaindersRemainder\
    \ / 10\n            val remaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = remaindersRemaindersRemaindersRemaindersRemainders % 10\n            val remaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = remaindersRemaindersRemaindersRemaindersRemaindersRemainder / 10\n       \
    \     val remaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = remaindersRemaindersRemaindersRemaindersRemaindersRemainders % 10\n      \
    \      val remaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = remaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders % 10\n\
    \            val remaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = remaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 10\n            val remaindersRemaindersRemaindersRemaindersRemaindersRemainder",
  "        val counts = mutable.HashMap[Long, Long]()\n        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val onesCount = ones.takeWhile(x\
    \ => x < n).length\n        val zerosCount = zeros.takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosZeros\
    \ = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesOnes = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosZeros\
    \ = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n",
  "        var count = 0\n        var last = 1\n        for(i <- 1 to n){\n      \
    \      if(last == 1){\n                count += 1\n            }\n           \
    \ last -= 1\n        }\n        count", "        var count = 0\n        var last\
    \ = 0\n        var lastStart = 0\n        var lastEnd = 0\n        var lastStartOne\
    \ = 0\n        var lastEndOne = 0\n        var lastStartOneEnd = 0\n        var\
    \ lastEndOneEnd = 0\n        var lastStartOneEndOne = 0\n        var lastEndOneEndOne\
    \ = 0\n        var lastStartOneEndOneOne = 0\n        var lastEndOneEndOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEndOneOneOne\
    \ = 0\n        var lastStartOneEndOneOneOne = 0\n        var lastEndOneEnd", " \
    \       val ones = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            if (i % 10 == 1) ones += i\n        }\n        ones.count(_ == 1)",
  "        var count = 0\n        var start = 1\n        var end = 1\n        while\
    \ (start <= n) {\n            while (start <= n && n % start == 0) {\n       \
    \         count += 1\n                start += 1\n            }\n            while\
    \ (end <= n && n % end == 0) {\n                count += 1\n                end\
    \ += 1\n            }\n            start += 1\n            end += 1\n        }\n\
    \        count", "        val counts = mutable.HashMap[Long, Long]()\n       \
    \ val ones = mutable.ArrayBuffer(Long.MaxValue)\n        val zeros = mutable.ArrayBuffer(Long.MinValue)\n\
    \        val onesCount = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCount\
    \ = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n\
    \        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts\
    \ = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n\
    \        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts\
    \ = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n\
    \        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts\
    \ = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n\
    \        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts\
    \ = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n\
    \        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts\
    \ = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n\
    \        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts\
    \ = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n\
    \        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts\
    \ = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n\
    \        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts\
    \ = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n\
    \        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts\
    \ = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts = mutable.ArrayBuffer(Long.MinValue)\n\
    \        val onesCounts = mutable.ArrayBuffer(Long.MaxValue)\n        val zerosCounts\
    \ = mutable.ArrayBuffer(Long.MinValue)\n        val onesCounts = mutable.ArrayBuffer(",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        var count = 0\n        while(n > 0){\n            val x = n % 10\n  \
    \          if(x == 1){\n                ones += x\n                count += ones.length\n\
    \            }\n            if(x == 0){\n                zeros += x\n        \
    \        count += zeros.length\n            }\n            n /= 10\n        }\n\
    \        count", "        val ones = mutable.ArrayBuffer.empty[Long]\n       \
    \ val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ListBuffer[Long]()\n        val\
    \ zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ digitCount = digits.count(_ > 0)\n        val oneCount = digits.count(_ == 1)\n\
    \        val zeroCount = digits.count(_ == 0)\n        val oneDigitCount = digits.count(_\
    \ == 1)\n        val zeroDigitCount = digits.count(_ == 0)\n        val oneDigit\
    \ = digits.find(_ == 1)\n        val zeroDigit = digits.find(_ == 0)\n       \
    \ val oneDigitCount = digits.count(_ == 1)\n        val zeroDigitCount = digits.count(_\
    \ == 0)\n        val oneDigit = digits.find(_ == 1)\n        val zeroDigit = digits.find(_\
    \ == 0)\n        val oneDigitCount = digits.count(_ == 1)\n        val zeroDigitCount\
    \ = digits.count(_ == 0)\n        val oneDigit = digits.find(_ == 1)\n       \
    \ val zeroDigit = digits.find(_ == 0)\n        val oneDigitCount = digits.count(_\
    \ == 1)\n        val zeroDigitCount = digits.count(_ == 0)\n        val oneDigit\
    \ = digits.find(_ == 1)\n        val zeroDigit = digits.find(_ == 0)\n       \
    \ val oneDigitCount = digits.count(_ == 1)\n        val zeroDigitCount = digits.count(_\
    \ == 0)\n        val oneDigit = digits.find(_ == 1)\n        val zeroDigit = digits.find(_\
    \ == 0)\n        val oneDigitCount = digits.count(_ == 1)\n        val zeroDigitCount\
    \ = digits.count(_ == 0)\n        val oneDigit = digits.find(_ == 1)\n       \
    \ val zeroDigit = digits.find(_ == 0)\n        val oneDigitCount = digits.count(_\
    \ == 1)\n        val zeroDigitCount = digits.count(_ == 0)\n        val oneDigit\
    \ = digits.find(_ == 1)\n        val zeroDigit = digits.find(_ == 0)\n       \
    \ val oneDigitCount = digits.count(_ == 1)\n        val zeroDigitCount = digits.count(_\
    \ == 0)\n        val oneDigit = digits.find(_ == 1)\n        val zeroDigit = digits.find(_\
    \ == 0)\n        val oneDigitCount = digits.count(_ == 1)\n        val zeroDigitCount\
    \ = digits.count(_ == 0)\n        val oneDigit = digits.find(_ == 1)\n       \
    \ val zeroDigit = digits.find(_ == 0)\n        val oneDigitCount = digits.count(_\
    \ == 1)\n        val zeroDigitCount = digits.count(_ == 0)\n        val oneDigit\
    \ = digits.", "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCounts =\
    \ mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCountZeros = mutable.ListBuffer[Long]()\n        val zerosCountZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOnes = mutable.ListBuffer[Long]()\n        val onesCountZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val onesCountOneOnes = mutable.ListBuffer[Long]()\n        val zerosCountOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesCountZeroZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountZeroZeros = mutable.ListBuffer[Long]()\n        val onesCountOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountOneZeros = mutable.ListBuffer[Long]()\n\
    \        val onesCountOneOneZeros = mutable.ListBuffer[Long]()\n        val zerosCountOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountZeroOneZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountZeroOneZeros = mutable.ListBuffer[Long]()\n        val\
    \ onesCountOneZeroZeros = mutable.ListBuffer[Long]()\n        val zerosCountOneZeroZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOneOneZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOneOneZeros = mutable.ListBuffer[Long]()\n        val onesCountZeroZeroOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountZeroZeroOneZeros = mutable.ListBuffer[Long]()\n\
    \        val onesCountOneZeroZeros = mutable.ListBuffer[Long]()\n        val zerosCountOneZeroZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOneOneZeroZeros = mutable.ListBuffer[Long]",
  "        var count = 0\n        var last = 0\n        var lastDigit = 0\n      \
    \  while(n > 0){\n            val digit = n % 10\n            if(digit == 1){\n\
    \                count += 1\n            }\n            n /= 10\n        }\n \
    \       return count", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long, Long]()\n\
    \        val zerosCountZeros = mutable.Map[Long, Long]()\n        val onesCountOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOnes = mutable.Map[Long, Long]()\n       \
    \ val zerosCountZeroOnes = mutable.Map[Long, Long]()\n        val onesCountOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeros = mutable.Map[Long, Long]()\n      \
    \  val zerosCountZeroZeros = mutable.Map[Long, Long]()\n        val onesCountOneZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOnes = mutable.Map[Long, Long]()\n       \
    \ val zerosCountZeroOnes = mutable.Map[Long, Long]()\n        val onesCountOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroZeros = mutable.Map[Long, Long]()\n  \
    \      val zerosCountZeroZeroZeros = mutable.Map[Long, Long]()\n        val onesCountOneZeroZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneZeroZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOneZeros = mutable.Map[Long, Long]()\n   \
    \     val zerosCountZeroOneZeros = mutable.Map[Long, Long]()\n        val onesCountOneOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroZeroZeros = mutable.Map[Long, Long]",
  "        var count = 0\n        var last = 0\n        while(n > 0) {\n         \
    \   val next = (n % 10).toInt\n            val last = (last % 10).toInt\n    \
    \        if((next == 1) || (last == 1)) {\n                count += 1\n      \
    \      }\n            n /= 10\n        }\n        count", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val counts\
    \ = mutable.Map[Long, Long]()\n        val start = n\n        val end = n\n  \
    \      while (start > 0) {\n            val digit = start % 10\n            if\
    \ (digit == 1) {\n                ones += digit\n            } else {\n      \
    \          zeros += digit\n            }\n            start /= 10\n        }\n\
    \        while (end > 0) {\n            val digit = end % 10\n            if (digit\
    \ == 1) {\n                ones += digit\n            } else {\n             \
    \   zeros += digit\n            }\n            end /= 10\n        }\n        val\
    \ onesCount = ones.size\n        val zerosCount = zeros.size\n        val onesZeroCount\
    \ = ones.size + zeros.size\n        val onesZeroZeroCount = ones.size + zeros.size\
    \ + ones.size\n        val onesZeroOnesCount = ones.size + zeros.size + ones.size\
    \ + ones.size\n        val onesOnesCount = ones.size + ones.size + ones.size\n\
    \        val onesOnesZeroCount = ones.size + ones.size + ones.size + zeros.size\n\
    \        val onesOnesOnesCount = ones.size + ones.size + ones.size + ones.size\
    \ + ones.size\n        val onesOnesOnesZeroCount = ones.size + ones.size + ones.size\
    \ + ones.size + ones.size + zeros.size\n        val onesOnesOnesOnesCount = ones.size\
    \ + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size\n  \
    \      val onesOnesOnesOnesZeroCount = ones.size + ones.size + ones.size + ones.size\
    \ + ones.size + ones.size + ones.size + zeros.size\n        val onesOnesOnesOnesOnesCount\
    \ = ones.size + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size\
    \ + ones.size + ones.size\n        val onesOnesOnesOnesOnesZeroCount = ones.size\
    \ + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size\
    \ + zeros.size\n        val onesOnesOnesOnesOnesCount = ones.size + ones.size\
    \ + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size\n\
    \        val onesOnesOnesOnesOnesZeroCount = ones.size + ones.size + ones.size\
    \ + ones.size + ones.size + ones.size + ones.size + ones.size + zeros.size\n \
    \       val onesOnesOnesOnesOnesOnesCount = ones.size + ones.size + ones.size\
    \ + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size + ones.size\n\
    \        val onesOnesOnesOnesOnesOnesZeroCount = ones.size + ones.size + ones.size\
    \ + ones.size + ones.size + ones.size + ", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Map[Long, Long]()\n        val zerosCount\
    \ = mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCountZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZero = mutable.Map[Long, Long]()\n       \
    \ val zerosCountOneOne = mutable.Map[Long, Long]()\n        val onesCountZeroZeroZero\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroZeroZero = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOne = mutable.Map[Long, Long]()\n        val onesCountZeroZeroZeroZeroZero\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOneOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroZeroZeroZeroZero = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOne = mutable.Map[Long, Long]()\n      \
    \  val onesCountZeroZeroZeroZeroZeroZeroZero = mutable.Map[Long, Long]()\n   \
    \     val zerosCountOneOneOneOneOneOneOne = mutable.Map[Long, Long]()\n      \
    \  val onesCountZeroZeroZeroZeroZeroZeroZeroZero = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOneOneOne = mutable.Map[Long, Long]()\n\
    \        val onesCountZeroZeroZeroZeroZeroZeroZeroZero = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneOneOneOneOneOne = mutable.Map[Long, Long]()\n\
    \        val onesCountZeroZeroZeroZeroZeroZeroZeroZeroZero = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOneOneOneOneOneOneOneOneOneOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = mutable.Map[Long, ",
  "        val ones = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n  \
    \          if (i.toString.toLong == 1) {\n                ones += i\n        \
    \    }\n        }\n        ones.count(_ == 1)", "        val ones = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n){\n            if (i.toString.toLong == 1){\n   \
    \             ones += i\n            }\n        }\n        ones.count(_ == 1)",
  "        val ones = mutable.ListBuffer[Long]()\n        var count = 0\n        for\
    \ (i <- 1 to n) {\n            if (i % 10 == 1) {\n                count += 1\n\
    \                ones += i\n            }\n        }\n        ones.length", " \
    \       val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount2 = mutable.ListBuffer[Long]()\n        val onesCount3\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val zerosCount4\
    \ = mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount5 = mutable.ListBuffer[Long]()\n        val onesCount6\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val zerosCount7\
    \ = mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount8 = mutable.ListBuffer[Long]()\n        val onesCount9\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val zerosCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val zerosCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val zerosCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n",
  "        var count = 0\n        var last = 0\n        var next = 1\n        while(next\
    \ <= n) {\n            val nextDigit = next\n            val lastDigit = last\n\
    \            val lastDigitNext = lastDigit + next\n            val lastDigitNextNext\
    \ = lastDigitNext + next\n            val lastDigitNextNextNext = lastDigitNextNext\
    \ + next\n            val lastDigitNextNextNextNext = lastDigitNextNextNext +\
    \ next\n            val lastDigitNextNextNextNextNext = lastDigitNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNext = lastDigitNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNextNextNext =\
    \ lastDigitNextNextNextNextNextNextNextNextNextNext + next\n            val lastDigitNextNextNextNextNextNextNextNextNextNext\
    \ = lastDigitNextNextNextNextNextNextNextNextNextNext + next\n            val\
    \ lastDigitNextNextNextNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNextNextNext =\
    \ lastDigitNextNextNextNextNextNextNextNextNextNext + next\n            val lastDigitNextNextNextNextNextNextNextNextNextNext\
    \ = lastDigitNextNextNextNextNextNextNextNextNextNext + next\n            val\
    \ lastDigitNextNextNextNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNextNextNext =\
    \ lastDigitNextNextNextNextNextNextNextNextNextNext + next\n            val lastDigitNextNextNextNextNextNextNextNextNextNext\
    \ = lastDigitNextNextNextNextNextNextNextNextNextNext + next\n            val\
    \ lastDigitNextNextNextNextNextNextNextNextNextNext = lastDigitNextNextNextNextNextNextNextNextNextNext\
    \ + next\n            val lastDigitNextNextNextNextNextNextNextNext", "      \
    \  val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        val starts = mutable.ArrayBuffer(0)\n\
    \        val ends = mutable.ArrayBuffer(0)\n        val nums = mutable.ArrayBuffer(n)\n\
    \        val numsLen = nums.length\n        val numsLenMinusOne = numsLen - 1\n\
    \        val numsLenMinusOneMinusOne = numsLen - 2\n        val numsLenMinusOneMinusOneMinusOne\
    \ = numsLen - 3\n        val numsLenMinusOneMinusOneMinusOneMinusOne = numsLen\
    \ - 4\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOne = numsLen -\
    \ 5\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numsLen\
    \ - 6\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 7\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 8\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 9\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 10\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 11\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 12\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 13\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeros = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.Array", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        while(n > 1) {\n            val digit = n % 10\n            n /= 10\n\
    \            val digitCount = if (digit == 1) ones.size else zeros.size\n    \
    \        counts += digitCount\n        }\n        counts.sum", "        var count\
    \ = 0\n        var last = 0\n        var lastOne = 0\n        var lastTwo = 0\n\
    \        var lastThree = 0\n        var lastFour = 0\n        var lastFive = 0\n\
    \        var lastSix = 0\n        var lastSeven = 0\n        var lastEight = 0\n\
    \        var lastNine = 0\n        var lastTen = 0\n        var lastEleven = 0\n\
    \        var lastTwelve = 0\n        var lastThirteen = 0\n        var lastFourteen\
    \ = 0\n        var lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen\
    \ = 0\n        var lastEighteen = 0\n        var lastNineteen = 0\n        var\
    \ lastTwenty = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n\
    \        var lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var\
    \ lastTwentyFive = 0\n        var lastTwentySix = 0\n        var lastTwentySeven\
    \ = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine = 0\n     \
    \   var lastThirty = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo\
    \ = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour = 0\n     \
    \   var lastThirtyFive = 0\n        var lastThirtySix = 0\n        var lastThirtySeven\
    \ = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine = 0\n     \
    \   var lastFourty = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo\
    \ = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour = 0\n     \
    \   var lastFourtyFive = 0\n        var lastFourtySix = 0\n        var lastFourtySeven\
    \ = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine = 0\n     \
    \   var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            val digit = i / 10\n     \
    \       if (digit == 1) {\n                ones += i\n            } else if (digit\
    \ == 0) {\n                zeros += i\n            } else {\n                counts(digit)\
    \ += 1\n            }\n        }\n        val oneCount = ones.count(_ == 1)\n\
    \        val zeroCount = zeros.count(_ == 0)\n        val count = oneCount + zeroCount\n\
    \        counts(n) += count\n        count", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOnes = mutable.ArrayBuffer.empty[Long]\n        val onesOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val onesZeroZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOneOneZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeroOneZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesZeroZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosOneZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesOneOneZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosZeroOneOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesZeroZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosOneZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesOneZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosOneOneZeroOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesOneOneZeroOneOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosZeroOneOneOneZeros = mutable.ArrayBuffer.empty[Long]\n     \
    \   val onesZeroZeroOneOneOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ zerosOneZeroOneOne", "        var count = 0\n        var start = 1\n       \
    \ var end = n\n        while (start < end) {\n            if (start % 10 == 1\
    \ && end % 10 != 1) {\n                count += 1\n            }\n           \
    \ start += 1\n            end -= 1\n        }\n        count", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCount2 = mutable.ArrayBuffer.empty[Long]\n        val onesCount3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount4 = mutable.ArrayBuffer.empty[Long]\n        val zerosCount4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCount5 = mutable.ArrayBuffer.empty[Long]\n        val onesCount6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount7 = mutable.ArrayBuffer.empty[Long]\n        val zerosCount7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCount8 = mutable.ArrayBuffer.empty[Long]\n        val onesCount9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount10 = mutable.ArrayBuffer.empty[Long]\n        val zerosCount10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCount11 = mutable.ArrayBuffer.empty[Long]\n        val onesCount12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount13 = mutable.ArrayBuffer.empty[Long]\n        val zerosCount13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCount14 = mutable.ArrayBuffer.empty[Long]\n        val onesCount15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount16 = mutable.ArrayBuffer.empty[Long]\n        val zerosCount16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount17 = mutable.ArrayBuffer.empty[Long]\n",
  "        var count = 0\n        val ones = scala.collection.mutable.ArrayBuffer(1)\n\
    \        val zeros = scala.collection.mutable.ArrayBuffer(0)\n        val onesCount\
    \ = ones.takeWhile(_ < n).length\n        val zerosCount = zeros.takeWhile(_ <\
    \ n).length\n        val onesZeros = ones.takeWhile(_ < n).zip(zeros.takeWhile(_\
    \ < n)).filter(_._1 == 1).length\n        val onesOnes = ones.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 1).length\n        val onesZeroOnes = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._1 == 1).zip(ones.takeWhile(_ < n)).filter(_._1\
    \ == 1).length\n        val onesOneOnes = ones.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 1).zip(ones.takeWhile(_ < n)).filter(_._1 == 1).zip(zeros.takeWhile(_\
    \ < n)).filter(_._1 == 1).length\n        val onesZeroZeros = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._1 == 1).zip(zeros.takeWhile(_ < n)).filter(_._1\
    \ == 0).length\n        val onesOneZeros = ones.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 1).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).length\n\
    \        val onesZeroOnes = ones.takeWhile(_ < n).zip(zeros.takeWhile(_ < n)).filter(_._1\
    \ == 0).zip(ones.takeWhile(_ < n)).filter(_._1 == 1).length\n        val onesOneZeros\
    \ = ones.takeWhile(_ < n).zip(ones.takeWhile(_ < n)).filter(_._1 == 1).zip(zeros.takeWhile(_\
    \ < n)).filter(_._1 == 0).length\n        val onesZeroZeros = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._1 == 0).zip(zeros.takeWhile(_ < n)).filter(_._1\
    \ == 0).length\n        val onesOneOnes = ones.takeWhile(_ < n).zip(ones.takeWhile(_\
    \ < n)).filter(_._1 == 1).zip(ones.takeWhile(_ < n)).filter(_._1 == 1).zip(zeros.takeWhile(_\
    \ < n)).filter(_._1 == 0).length\n        val onesZeroZeros = ones.takeWhile(_\
    \ < n).zip(zeros.takeWhile(_ < n)).filter(_._", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val ones", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount2 = mutable.ListBuffer[Long]()\n        val onesCount3\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val zerosCount4\
    \ = mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount5 = mutable.ListBuffer[Long]()\n        val onesCount6\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val zerosCount7\
    \ = mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount8 = mutable.ListBuffer[Long]()\n        val onesCount9\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val zerosCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val zerosCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val zerosCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n",
  "        var count = 0\n        var last = 0\n        var current = 1\n        while(current\
    \ <= n) {\n            if(current == 1) {\n                count += 1\n      \
    \      } else {\n                count = 0\n            }\n            last =\
    \ current\n            current = current * 10\n        }\n        return count",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val digits = mutable.ArrayBuffer(n)\n        while(digits.size > 0) {\n\
    \            val digit = digits.head\n            digits.remove(digit)\n     \
    \       val digitCount = digits.count(_ == digit)\n            if(digit == 1)\
    \ {\n                ones += digitCount\n            } else if(digit == 0) {\n\
    \                zeros += digitCount\n            } else {\n                counts\
    \ += digitCount\n                count += digitCount\n            }\n        }\n\
    \        ones.length", "        val ones = mutable.ListBuffer[Long]()\n      \
    \  val zeros = mutable.ListBuffer[Long]()\n        val twos = mutable.ListBuffer[Long]()\n\
    \        val threes = mutable.ListBuffer[Long]()\n        val fours = mutable.ListBuffer[Long]()\n\
    \        val fives = mutable.ListBuffer[Long]()\n        val sixes = mutable.ListBuffer[Long]()\n\
    \        val sevens = mutable.ListBuffer[Long]()\n        val eights = mutable.ListBuffer[Long]()\n\
    \        val nines = mutable.ListBuffer[Long]()\n        val tens = mutable.ListBuffer[Long]()\n\
    \        val hundreds = mutable.ListBuffer[Long]()\n        val thousands = mutable.ListBuffer[Long]()\n\
    \        val millions = mutable.ListBuffer[Long]()\n        val billions = mutable.ListBuffer[Long]()\n\
    \        val trillions = mutable.ListBuffer[Long]()\n        val quadrillions\
    \ = mutable.ListBuffer[Long]()\n        val quintillions = mutable.ListBuffer[Long]()\n\
    \        val sextillions = mutable.ListBuffer[Long]()\n        val septillions\
    \ = mutable.ListBuffer[Long]()\n        val octillions = mutable.ListBuffer[Long]()\n\
    \        val nonillions = mutable.ListBuffer[Long]()\n        val decillions =\
    \ mutable.ListBuffer[Long]()\n        val undecillions = mutable.ListBuffer[Long]()\n\
    \        val duodecillions = mutable.ListBuffer[Long]()\n        val tredecillions\
    \ = mutable.ListBuffer[Long]()\n        val quattuordecillions = mutable.ListBuffer[Long]()\n\
    \        val quindecillions = mutable.ListBuffer[Long]()\n        val sexdecillions\
    \ = mutable.ListBuffer[Long]()\n        val septendecillions = mutable.ListBuffer[Long]()\n\
    \        val octodecillions = mutable.ListBuffer[Long]()\n        val novemdecillions\
    \ = mutable.ListBuffer[Long]()\n        val vigintillions = mutable.ListBuffer[Long]()\n\
    \        val unvigintillions = mutable.ListBuffer", "        var count = 0\n \
    \       var last = 1\n        while(n > 1) {\n            count += 1\n       \
    \     last += 1\n            n -= last\n        }\n        return count", "  \
    \      val ones = mutable.ListBuffer(1)\n        var count = 0\n        while(n\
    \ > 1) {\n            ones += n\n            n -= 1\n        }\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones +=\
    \ n\n        ones += n\n        ones += n\n        ones += n\n        ones += ",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        for(i <- 1 to n){\n            if((i.toString.toLong % 10) == 1){\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount2 = mutable.Set[Long]()\n        val zerosCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val zerosCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val zerosCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val zerosCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val zerosCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val zerosCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val zerosCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val zerosCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val zerosCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val zerosCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val zerosCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val zerosCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val zerosCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val zerosCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val zerosCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val zerosCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val zerosCount18 = ",
  "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZeros = mutable.ListBuffer[Long]()\n        val onesAndZerosCount\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount3 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount4\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount6 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount7\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount9 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount12 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount15 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount18 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount21 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosCount24 = mutable.ListBuffer[Long]()\n        val onesAndZerosCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosCount26", "        var\
    \ count = 0\n        var last = 0\n        var lastOne = 0\n        var lastTwo\
    \ = 0\n        var lastThree = 0\n        var lastFour = 0\n        var lastFive\
    \ = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var lastEight\
    \ = 0\n        var lastNine = 0\n        var lastTen = 0\n        var lastEleven\
    \ = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n        var lastFourteen\
    \ = 0\n        var lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen\
    \ = 0\n        var lastEighteen = 0\n        var lastNineteen = 0\n        var\
    \ lastTwenty = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n\
    \        var lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var\
    \ lastTwentyFive = 0\n        var lastTwentySix = 0\n        var lastTwentySeven\
    \ = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine = 0\n     \
    \   var lastThirty = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo\
    \ = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour = 0\n     \
    \   var lastThirtyFive = 0\n        var lastThirtySix = 0\n        var lastThirtySeven\
    \ = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine = 0\n     \
    \   var lastFourty = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo\
    \ = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour = 0\n     \
    \   var lastFourtyFive = 0\n        var lastFourtySix = 0\n        var lastFourtySeven\
    \ = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine = 0\n     \
    \   var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val zerosOnes = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val zerosZeros = mutable.Set[Long]()\n        val onesZeroOnes = mutable.Set[Long]()\n\
    \        val zerosOneOnes = mutable.Set[Long]()\n        val onesOneOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOnes = mutable.Set[Long]()\n        val onesZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosOneZeroOnes = mutable.Set[Long]()\n\
    \        val onesOneZeroOnes = mutable.Set[Long]()\n        val zerosZeroOneOnes\
    \ = mutable.Set[Long]()\n        val onesZeroZeroOneOnes = mutable.Set[Long]()\n\
    \        val zerosOneZeroZeroOneOnes = mutable.Set[Long]()\n        val onesOneZeroZeroOneOnes\
    \ = mutable.Set[Long]()\n        val zerosZeroOneZeroOneOnes = mutable.Set[Long]()\n\
    \        val onesZeroZeroOneZeroOneOnes = mutable.Set[Long]()\n        val zerosOneZeroZeroOneZeroOneOnes\
    \ = mutable.Set[Long]()\n        val onesOneZeroZeroOneZeroOneOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOneZeroZeroOneOneOnes = mutable.Set[Long]()\n        val\
    \ onesZeroZeroOneZeroZeroOneOnes = mutable.Set[Long]()\n        val zerosOneZeroZeroOneZeroOneOnes\
    \ = mutable.Set[Long]()\n        val onesOneZeroZeroOneZeroOneOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOneZeroZeroOneZeroOneOnes = mutable.Set[Long]()\n      \
    \  val onesZeroZeroOneZeroZeroOneOnes = mutable.Set[Long]()\n        val zerosOneZeroZeroOneZeroOneOnes\
    \ = mutable.Set[Long]()\n        val onesOneZeroZeroOneZeroOneOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOne", "        val ones = mutable.ListBuffer(1)\n      \
    \  val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesEnds = mutable.ListBuffer[Long]()\n\
    \        val zerosEnds = mutable.ListBuffer[Long]()\n        val onesStarts =\
    \ mutable.ListBuffer[Long]()\n        val zerosStarts = mutable.ListBuffer[Long]()\n\
    \        val onesEndsCount = mutable.ListBuffer[Long]()\n        val zerosEndsCount\
    \ = mutable.ListBuffer[Long]()\n        val onesStartsCount = mutable.ListBuffer[Long]()\n\
    \        val zerosStartsCount = mutable.ListBuffer[Long]()\n        val onesEndsCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosEndsCounts = mutable.ListBuffer[Long]()\n\
    \        val onesStartsCounts = mutable.ListBuffer[Long]()\n        val zerosStartsCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesEndsCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosEndsCounts = mutable.ListBuffer[Long]()\n        val onesStartsCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosStartsCounts = mutable.ListBuffer[Long]()\n\
    \        val onesEndsCounts = mutable.ListBuffer[Long]()\n        val zerosEndsCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesStartsCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosStartsCounts = mutable.ListBuffer[Long]()\n        val onesEndsCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosEndsCounts = mutable.ListBuffer[Long]()\n\
    \        val onesStartsCounts = mutable.ListBuffer[Long]()\n        val zerosStartsCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesEndsCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosEndsCounts = mutable.ListBuffer[Long]()\n        val onesStartsCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosStartsCounts = mutable.ListBuffer[Long]()\n\
    \        val ", "        val ones = mutable.ListBuffer(1)\n        val zeros =\
    \ mutable.ListBuffer(0)\n        var count = 0\n        while(n > 0){\n      \
    \      val digit = n % 10\n            n /= 10\n            if(digit == 1){\n\
    \                ones += digit\n            }\n            else{\n           \
    \     zeros += digit\n            }\n        }\n        count += ones.size - zeros.size\n\
    \        count", "        val ones = mutable.Set[Long]()\n        val zeros =\
    \ mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n      \
    \  val onesCount = mutable.Map[Long, Long]()\n        val zerosCount = mutable.Map[Long,\
    \ Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeros = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeros = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeros = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeros = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeros = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeros = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeros = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeros = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOnes = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeros = mutable.Map[Long, Long]()\n", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val starts = mutable.Set[Long]()\n        val ends = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = ", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val starts = mutable.ListBuffer[Long]()\n\
    \        val ends = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val digitCount = digits.count(_ > 0)\n        val digitZeroCount = digits.count(_\
    \ == 0)\n        val digitOneCount = digits.count(_ == 1)\n        val digitZeroCount\
    \ = digits.count(_ == 0)\n        val digitOneCount = digits.count(_ == 1)\n \
    \       val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount =\
    \ digits.count(_ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n  \
    \      val digitOneCount = digits.count(_ == 1)\n        val digitZeroCount =\
    \ digits.count(_ == 0)\n        val digitOneCount = digits.count(_ == 1)\n   \
    \     val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount = digits.count(_\
    \ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount\
    \ = digits.count(_ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n\
    \        val digitOneCount = digits.count(_ == 1)\n        val digitZeroCount\
    \ = digits.count(_ == 0)\n        val digitOneCount = digits.count(_ == 1)\n \
    \       val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount =\
    \ digits.count(_ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n  \
    \      val digitOneCount = digits.count(_ == 1)\n        val digitZeroCount =\
    \ digits.count(_ == 0)\n        val digitOneCount = digits.count(_ == 1)\n   \
    \     val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount = digits.count(_\
    \ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount\
    \ = digits.count(_ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n\
    \        val digitOneCount = digits.count(_ == 1)\n        val digitZeroCount\
    \ = digits.count(_ == 0)\n        val digitOneCount = digits.count(_ == 1)\n \
    \       val digitZeroCount = digits.count(_ == 0)\n        val digitOneCount =\
    \ digits.count(_ == 1)\n        val digitZeroCount = digits.count(_ == 0)\n  \
    \      val digitOneCount = digits.count(_ == 1)\n        val digitZeroCount =\
    \ digits.count(_ == 0)\n        val digitOneCount = digits.count(_ == 1)\n", " \
    \       val counts = mutable.HashMap[Long, Long]()\n        val ones = mutable.Array[Long]()\n\
    \        val zeros = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        for (i <- 1 to n) {\n\
    \            val digit = i / 10\n            if (i % 10 == 1) {\n            \
    \    onesCount += digit\n                ones += digit\n            } else {\n\
    \                zerosCount += digit\n                zeros += digit\n       \
    \     }\n        }\n        for (i <- onesCount.indices) {\n            val digit\
    \ = onesCount(i)\n            val count = counts.getOrElse(digit, 0)\n       \
    \     counts.put(digit, count + 1)\n        }\n        for (i <- zerosCount.indices)\
    \ {\n            val digit = zerosCount(i)\n            val count = counts.getOrElse(digit,\
    \ 0)\n            counts.put(digit, count + 1)\n        }\n        counts.values.sum",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val starts = mutable.Set[Long]()\n        val ends = mutable.Set[Long]()\n\
    \        val max = (n / 10).floor\n        val min = (n / 10).ceil\n        val\
    \ digits = math.pow(10, math.ceil(math.log(max, 10)))\n        val digit = math.pow(10,\
    \ math.ceil(math.log(min, 10)))\n        val maxDigit = math.pow(10, math.ceil(math.log(max,\
    \ 10)))\n        val minDigit = math.pow(10, math.ceil(math.log(min, 10)))\n \
    \       val digitCount = math.pow(10, math.ceil(math.log(max, 10)))\n        val\
    \ digitMax = math.pow(10, math.ceil(math.log(max, 10)))\n        val digitMin\
    \ = math.pow(10, math.ceil(math.log(min, 10)))\n        val digitMaxDigit = math.pow(10,\
    \ math.ceil(math.log(max, 10)))\n        val digitMinDigit = math.pow(10, math.ceil(math.log(min,\
    \ 10)))\n        val digitMaxDigitMin = math.pow(10, math.ceil(math.log(max, 10)))\n\
    \        val digitMinDigitMin = math.pow(10, math.ceil(math.log(min, 10)))\n \
    \       val digitMaxDigitMinDigit = math.pow(10, math.ceil(math.log(max, 10)))\n\
    \        val digitMinDigitMinDigit = math.pow(10, math.ceil(math.log(min, 10)))\n\
    \        val digitMaxDigitMinDigitMin = math.pow(10, math.ceil(math.log(max, 10)))\n\
    \        val digitMinDigitMinDigitMin = math.pow(10, math.ceil(math.log(min, 10)))\n\
    \        val digitMaxDigitMinDigitMinDigit = math.pow(10, math.ceil(math.log(max,\
    \ 10)))\n        val digitMinDigitMinDigitMinDigit = math.pow(10, math.ceil(math.log(min,\
    \ 10)))\n        val digitMaxDigitMinDigitMinDigit = math.pow(10, math.ceil(math.log(max,\
    \ 10)))\n        val digitMinDigitMinDigitMinDigit = math.pow(10, math.ceil(math.log(min,\
    \ 10)))\n        val digitMaxDigitMinDigitMinDigitMin = math.pow(10, math.ceil(math.log(max,\
    \ 10)))\n        val digitMinDigitMinDigitMinDigitMin = math.pow(10, math.ceil(math.log(min,\
    \ 10)))\n        val digitMaxDigitMinDigitMinDigitMin = math.pow(10, math.ceil(math.log(max,\
    \ 10)))\n        val digitMinDigitMinDigitMinDigitMin = math.pow(10, math.ceil(math.log(min,\
    \ 10)))\n        val digitMaxDigitMinDigitMinDigitMin = math.pow(10, math.ceil(math.log(max,\
    \ 10)))\n        val digitMin", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        var count = 0\n        val ones =\
    \ scala.collection.mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n   \
    \         val temp = i\n            while(temp > 0){\n                ones +=\
    \ temp % 10\n                temp /= 10\n            }\n        }\n        val\
    \ onesSet = scala.collection.mutable.Set[Long](ones)\n        for(i <- 1 to n){\n\
    \            val temp = i\n            while(temp > 0){\n                if(onesSet.contains(temp\
    \ % 10)) count += 1\n                temp /= 10\n            }\n        }\n  \
    \      count", "        val ones = mutable.Set[Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n      \
    \  val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mutable.Set[Long]()\n\
    \        val onesCounts_ = mutable.Set[Long]()\n        val onesCounts_ = mut",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n       \
    \ val counts = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val onesCounts = mutable.ArrayBuffer(0)\n\
    \        val zerosCounts = mutable.ArrayBuffer(0)\n        val onesCountZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeros = mutable.ArrayBuffer(0)\n\
    \        val onesCountOnes = mutable.ArrayBuffer(0)\n        val zerosCountOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroOnes = mutable.ArrayBuffer(0)\n        val onesCountOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeroZeros = mutable.ArrayBuffer(0)\n        val zerosCountZeroZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOneZeros = mutable.ArrayBuffer(0)\n        val onesCountZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOne = mutable.ArrayBuffer(0)\n        val zerosCountOneOne\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZero = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZero = mutable.ArrayBuffer(0)\n        val onesCountOneZero\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZero = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeroOne = mutable.ArrayBuffer(0)\n        val zerosCountZeroOne\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOneOne = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOneOne = mutable.ArrayBuffer(0)\n        val onesCountZeroZero\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeroZero = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneZero = mutable.ArrayBuffer(0)\n        val zerosCountOneZero\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroOne = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroOne = mutable.ArrayBuffer(0)\n        val onesCountOneOne\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneOne = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeroZero = mutable.", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val start = ones.head\n        val end = zeros.head\n        val current\
    \ = ones.head\n        val currentCount = ones.head\n        val currentCounts\
    \ = ones.head\n        val currentCountZeros = ones.head\n        while(current\
    \ <= n) {\n            counts += currentCount\n            currentCounts += currentCountZeros\n\
    \            currentCount += 1\n            currentCountZeros += 1\n         \
    \   current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            current = current + ones.size\n            current = current + zeros.size\n\
    \            ", "        val ones = mutable.ListBuffer[Long]()\n        for (i\
    \ <- 1 to n) {\n            if (i % 10 == 1) {\n                ones += i\n  \
    \          }\n        }\n        ones.count(_ == 1)", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val zerosCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val zerosCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val zerosCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val zerosCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val zerosCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val zerosCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val zerosCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val zerosCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val zerosCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val zerosCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val zerosCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val zerosCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val zerosCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val zerosCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val zerosCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val zerosCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val zerosCount18 = ", "        val ones = mutable.Set[Long]()\n     \
    \   val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val zerosOnes = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val zerosZeros = mutable.Set[Long]()\n        val onesZeroOnes = mutable.Set[Long]()\n\
    \        val zerosOneOnes = mutable.Set[Long]()\n        val onesOneOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOnes = mutable.Set[Long]()\n        val onesZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosOneZeroOnes = mutable.Set[Long]()\n\
    \        val onesOneZeroOnes = mutable.Set[Long]()\n        val zerosZeroOneOnes\
    \ = mutable.Set[Long]()\n        val onesZeroOneOnes = mutable.Set[Long]()\n \
    \       val zerosOneZeroZeroOnes = mutable.Set[Long]()\n        val onesOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosZeroOneZeroOnes = mutable.Set[Long]()\n\
    \        val onesZeroOneZeroOnes = mutable.Set[Long]()\n        val zerosOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val onesOneZeroZeroOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOneZeroOnes = mutable.Set[Long]()\n        val onesZeroOneZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosOneZeroZeroOnes = mutable.Set[Long]()\n\
    \        val onesOneZeroZeroOnes = mutable.Set[Long]()\n        val zerosZeroOneZeroOnes\
    \ = mutable.Set[Long]()\n        val onesZeroOneZeroOnes = mutable.Set[Long]()\n\
    \        val zerosOneZeroZeroOnes = mutable.Set[Long]()\n        val onesOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosZeroOneZeroOnes = mutable.Set[Long]()\n\
    \        val onesZeroOneZeroOnes = mutable.Set[Long]()\n        val zerosOneZeroZeroOnes\
    \ = mut", "        var count = 0\n        val ones = mutable.ListBuffer(1)\n \
    \       val zeros = mutable.ListBuffer(0)\n        val onesCount = ones.takeWhile(x\
    \ => x < n).length\n        val zerosCount = zeros.takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosZeros\
    \ = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesOnes = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosZeros = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).take", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counter = mutable.Map[Long,\
    \ Long]()\n        val counter2 = mutable.Map[Long, Long]()\n        val counter3\
    \ = mutable.Map[Long, Long]()\n        val counter4 = mutable.Map[Long, Long]()\n\
    \        val counter5 = mutable.Map[Long, Long]()\n        val counter6 = mutable.Map[Long,\
    \ Long]()\n        val counter7 = mutable.Map[Long, Long]()\n        val counter8\
    \ = mutable.Map[Long, Long]()\n        val counter9 = mutable.Map[Long, Long]()\n\
    \        val counter10 = mutable.Map[Long, Long]()\n        val counter11 = mutable.Map[Long,\
    \ Long]()\n        val counter12 = mutable.Map[Long, Long]()\n        val counter13\
    \ = mutable.Map[Long, Long]()\n        val counter14 = mutable.Map[Long, Long]()\n\
    \        val counter15 = mutable.Map[Long, Long]()\n        val counter16 = mutable.Map[Long,\
    \ Long]()\n        val counter17 = mutable.Map[Long, Long]()\n        val counter18\
    \ = mutable.Map[Long, Long]()\n        val counter19 = mutable.Map[Long, Long]()\n\
    \        val counter20 = mutable.Map[Long, Long]()\n        val counter21 = mutable.Map[Long,\
    \ Long]()\n        val counter22 = mutable.Map[Long, Long]()\n        val counter23\
    \ = mutable.Map[Long, Long]()\n        val counter24 = mutable.Map[Long, Long]()\n\
    \        val counter25 = mutable.Map[Long, Long]()\n        val counter26 = mutable.Map[Long,\
    \ Long]()\n        val counter27 = mutable.Map[Long, Long]()\n        val counter28\
    \ = mutable.Map[Long, Long]()\n        val counter29 = mutable.Map[Long, Long]()\n\
    \        val counter30 = mutable.Map[Long, Long]()\n        val counter31 = mutable.Map[Long,\
    \ Long]()\n        val counter32 = mutable.Map[Long, Long]()\n        val counter33\
    \ = mutable.Map[Long, Long]()\n        val counter34 = mutable.Map[Long, Long]()\n\
    \        val counter35 = mutable.Map[Long, Long]()\n        val counter36 = mutable.Map[",
  "        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val onesCount19 = mutable.Set[Long]()\n\
    \        val onesCount20 = mutable.Set[Long]()\n        val onesCount21 = mutable.Set[Long]()\n\
    \        val onesCount22 = mutable.Set[Long]()\n        val onesCount23 = mutable.Set[Long]()\n\
    \        val onesCount24 = mutable.Set[Long]()\n        val onesCount25 = mutable.Set[Long]()\n\
    \        val onesCount26 = mutable.Set[Long]()\n        val onesCount27 = mutable.Set[Long]()\n\
    \        val onesCount28 = mutable.Set[Long]()\n        val onesCount29 = mutable.Set[Long]()\n\
    \        val onesCount30 = mutable.Set[Long]()\n        val onesCount31 = mutable.Set[Long]()\n\
    \        val onesCount32 = mutable.Set[Long]()\n        val onesCount33 = mutable.Set[Long]()\n\
    \        val onesCount34 = mutable.Set[Long]()\n        val one", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val counts\
    \ = mutable.HashMap[Long, Long]()\n        val ones = mutable.ArrayBuffer(1L)\n\
    \        val zeros = mutable.ArrayBuffer(0L)\n        val onesCount = ones.takeWhile(x\
    \ => x < n).length\n        val zerosCount = zeros.takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosZeros\
    \ = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesOnes = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosZeros\
    \ = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => ", "  \
    \      val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount2 = mutable.ListBuffer[Long]()\n        val onesCount3\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val zerosCount4\
    \ = mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount5 = mutable.ListBuffer[Long]()\n        val onesCount6\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val zerosCount7\
    \ = mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount8 = mutable.ListBuffer[Long]()\n        val onesCount9\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val zerosCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val zerosCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val zerosCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long,\
    \ Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n        val onesZeros\
    \ = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n      \
    \  val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val ", "        val ones\
    \ = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n       \
    \ val onesCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val onesCount19 = mutable.Set[Long]()\n\
    \        val onesCount20 = mutable.Set[Long]()\n        val onesCount21 = mutable.Set[Long]()\n\
    \        val onesCount22 = mutable.Set[Long]()\n        val onesCount23 = mutable.Set[Long]()\n\
    \        val onesCount24 = mutable.Set[Long]()\n        val onesCount25 = mutable.Set[Long]()\n\
    \        val onesCount26 = mutable.Set[Long]()\n        val onesCount27 = mutable.Set[Long]()\n\
    \        val onesCount28 = mutable.Set[Long]()\n        val onesCount29 = mutable.Set[Long]()\n\
    \        val onesCount30 = mutable.Set[Long]()\n        val onesCount31 = mutable.Set[Long]()\n\
    \        val onesCount32 = mutable.Set[Long]()\n        val onesCount33 = mutable.Set[Long]()\n\
    \        val onesCount34 = mutable.Set[Long]()\n        val one", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 10 == 1) {\n               \
    \ ones += i\n            } else {\n                zeros += i\n            }\n\
    \        }\n        ones.count(_ == 1)", "        val ones = mutable.Set[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n\
    \                ones += i\n            }\n        }\n        for(i <- 1 to n){\n\
    \            if(i%10 == 0){\n                count += ones.size\n            \
    \    ones.clear()\n            }\n        }\n        count", "        val counts\
    \ = mutable.HashMap[Long, Long]()\n        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val onesCount = ones.takeWhile(x\
    \ => x < n).length\n        val zerosCount = zeros.takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosZeros\
    \ = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesOnes = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosZeros = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val zerosOnes\
    \ = ", "        val counts = mutable.HashMap.empty[Long, Long]\n        val ones\
    \ = mutable.HashSet.empty[Long]\n        val ends = mutable.HashSet.empty[Long]\n\
    \        val onesCount = mutable.HashSet.empty[Long]\n        val endsCount =\
    \ mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val endsCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val endsCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val endsCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val endsCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val endsCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val endsCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val endsCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val endsCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val endsCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val endsCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val endsCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val endsCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val endsCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val endsCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val endsCounts\
    \ = mutable.", "        val counts = mutable.HashMap[Long, Long]()\n        val\
    \ ones = mutable.ArrayBuffer(Long(1))\n        val zeros = mutable.ArrayBuffer(Long(0))\n\
    \        val onesCount = ones.count(n => n % 10 == 0)\n        val zerosCount\
    \ = zeros.count(n => n % 10 == 0)\n        val onesZeros = ones.count(n => n %\
    \ 10 == 1 && n % 100 != 0)\n        val zerosOnes = zeros.count(n => n % 10 ==\
    \ 1 && n % 100 != 0)\n        val onesOnes = ones.count(n => n % 10 == 1 && n\
    \ % 100 == 0)\n        val zerosZeros = zeros.count(n => n % 10 == 0 && n % 100\
    \ != 0)\n        val zerosZeros = zeros.count(n => n % 10 == 0 && n % 100 == 0)\n\
    \        val onesZeroOnes = ones.count(n => n % 10 == 1 && n % 100 == 0 && n %\
    \ 1000 == 0)\n        val zerosOneOnes = zeros.count(n => n % 10 == 1 && n % 100\
    \ == 0 && n % 1000 == 0)\n        val zerosZeroOnes = zeros.count(n => n % 10\
    \ == 0 && n % 100 == 0 && n % 1000 == 0)\n        val zerosOneZeros = zeros.count(n\
    \ => n % 10 == 1 && n % 100 != 0 && n % 1000 == 0)\n        val zerosZeroZeros\
    \ = zeros.count(n => n % 10 == 0 && n % 100 != 0 && n % 1000 == 0)\n        val\
    \ zerosOneOnes = zeros.count(n => n % 10 == 1 && n % 100 == 0 && n % 100 != 0)\n\
    \        val zerosZeroOnes = zeros.count(n => n % 10 == 0 && n % 100 == 0 && n\
    \ % 100 != 0)\n        val zerosOneZeros = zeros.count(n => n % 10 == 1 && n %\
    \ 100 != 0 && n % 100 == 0)\n        val zerosZeroZeros = zeros.count(n => n %\
    \ 10 == 0 && n % 100 != 0 && n % 100 == 0)\n        val zerosOneOnes = zeros.count(n\
    \ => n % 10 == 1 && n % 100 == 0 && n % 100 != 0)\n        val zerosZeroOnes =\
    \ zeros.count(n => n % 10 == 0 && n % 100 == 0 && n % 100 != 0)\n        val zerosOneZeros\
    \ = zeros.count(n => n % 10 == 1 && n % 100 != 0 && n % 100 == 0)\n        val\
    \ zerosZeroZeros = zeros.count(n => n % 10 == 0 && n % 100 != 0 && n % 100 ==\
    \ 0)\n        val zerosOneOnes = zeros.count(n => n % 10 == 1 && n % 100 == 0\
    \ && n % 100 != 0)\n        val zerosZeroOnes = zeros.count(n => n % 10 == 0 &&\
    \ n % ", "        val count = new mutable.HashMap[Long, Long]()\n        val ones\
    \ = new mutable.HashSet[Long]()\n        val zeros = new mutable.HashSet[Long]()\n\
    \        val onesCount = new mutable.HashMap[Long, Long]()\n        val zerosCount\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount2 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount2 = new mutable.HashMap[Long, Long]()\n     \
    \   val onesCount3 = new mutable.HashMap[Long, Long]()\n        val zerosCount3\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount4 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount4 = new mutable.HashMap[Long, Long]()\n     \
    \   val onesCount5 = new mutable.HashMap[Long, Long]()\n        val zerosCount5\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount6 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount6 = new mutable.HashMap[Long, Long]()\n     \
    \   val onesCount7 = new mutable.HashMap[Long, Long]()\n        val zerosCount7\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount8 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount8 = new mutable.HashMap[Long, Long]()\n     \
    \   val onesCount9 = new mutable.HashMap[Long, Long]()\n        val zerosCount9\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount10 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount10 = new mutable.HashMap[Long, Long]()\n    \
    \    val onesCount11 = new mutable.HashMap[Long, Long]()\n        val zerosCount11\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount12 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount12 = new mutable.HashMap[Long, Long]()\n    \
    \    val onesCount13 = new mutable.HashMap[Long, Long]()\n        val zerosCount13\
    \ = new mutable.HashMap[Long, Long]()\n        val onesCount14 = new mutable.HashMap[Long,\
    \ Long]()\n        val zerosCount14 = new mutable.HashMap[Long, Long]()\n    \
    \    val onesCount15 = new mutable.HashMap[Long", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val starts = mutable.ArrayBuffer(0)\n        val ends = mutable.ArrayBuffer(0)\n\
    \        val startsEnds = mutable.ArrayBuffer(0)\n        val endsStarts = mutable.ArrayBuffer(0)\n\
    \        val startsEndsStarts = mutable.ArrayBuffer(0)\n        val endsStartsEnds\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEnds = mutable.ArrayBuffer(0)\n\
    \        val startsEndsStartsEndsStarts = mutable.ArrayBuffer(0)\n        val\
    \ startsEndsStartsEndsStartsEnds = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStarts\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEnds\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStarts\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEnds\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStarts\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEnds\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStarts\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEnds\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStarts\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEnds\
    \ = mutable.ArrayBuffer(0)\n        val startsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStartsEndsStarts\
    \ = mutable.ArrayBuffer(0)\n        val startsEnd", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        while(digits.hasNext)\
    \ {\n            val digit = digits.next()\n            val count = digits.count(_\
    \ == digit)\n            counts += count\n            if(digit == 1) ones += count\n\
    \            if(digit == 0) zeros += count\n        }\n        ones.toList.sum",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 10 ==\
    \ 1) {\n                count += 1\n                ones += i\n            }\n\
    \        }\n        ones.size", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n\
    \            if (i % 10 == 1) {\n                ones += i\n            } else\
    \ {\n                zeros += i\n            }\n        }\n        ones.toList.size\
    \ + (zeros.toList.size - ones.toList.size)", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        while(n > 0){\n            val temp = n % 10\n            if(temp ==\
    \ 1){\n                ones += temp\n                count += 1\n            }\n\
    \            else if(temp == 0){\n                zeros += temp\n            }\n\
    \            n /= 10\n        }\n        ones.length", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        for (i <- 1 to n) {\n            val str = i.toString\n     \
    \       if (str.startsWith(\"1\") || str.endsWith(\"1\")) {\n                counts.put(i,\
    \ counts.getOrElse(i, 0) + 1L)\n            }\n        }\n        counts.values.sum",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCounts = mutable.Set[Long]()\n        val zerosCounts = mutable.Set[Long]()\n\
    \        val onesCountZeros = mutable.Set[Long]()\n        val zerosCountZeros\
    \ = mutable.Set[Long]()\n        val onesCountOnes = mutable.Set[Long]()\n   \
    \     val zerosCountOnes = mutable.Set[Long]()\n        val onesCountZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosCountZeroOnes = mutable.Set[Long]()\n\
    \        val onesCountOneOnes = mutable.Set[Long]()\n        val zerosCountOneOnes\
    \ = mutable.Set[Long]()\n        val onesCountZeroZeros = mutable.Set[Long]()\n\
    \        val zerosCountZeroZeros = mutable.Set[Long]()\n        val onesCountOneZeros\
    \ = mutable.Set[Long]()\n        val zerosCountOneZeros = mutable.Set[Long]()\n\
    \        val onesCountOneOneZeros = mutable.Set[Long]()\n        val zerosCountOneOneZeros\
    \ = mutable.Set[Long]()\n        val onesCountZeroOneOnes = mutable.Set[Long]()\n\
    \        val zerosCountZeroOneOnes = mutable.Set[Long]()\n        val onesCountOneZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosCountOneZeroOnes = mutable.Set[Long]()\n\
    \        val onesCountOneOneZeroOnes = mutable.Set[Long]()\n        val zerosCountOneOneZeroOnes\
    \ = mutable.Set[Long]()\n        val onesCountZeroZeroOnes = mutable.Set[Long]()\n\
    \        val zerosCountZeroZeroOnes = mutable.Set[Long]()\n        val onesCountOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosCountOneZeroZeroOnes = mutable.Set[Long]()\n\
    \        val onesCountOneOneZeroZeroOnes = mutable.Set[Long]()\n        val zerosCountOneOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val onesCountZeroOneOneZeroOnes = mutable.Set[",
  "        val ones = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n  \
    \          if (i % 10 == 1) {\n                ones += i\n            }\n    \
    \    }\n        ones.count(_ == 1)", "        var count = 0\n        var start\
    \ = 1\n        while (start <= n) {\n            if (start == 1) {\n         \
    \       count += 1\n            }\n            start *= 10\n        }\n      \
    \  return count", "        val ones = mutable.ListBuffer[Long]()\n        val\
    \ zeros = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n          \
    \  if (i % 10 == 1) {\n                ones += i\n            } else {\n     \
    \           zeros += i\n            }\n        }\n        ones.count(_ == 1)",
  "        val ones = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) ones +=\
    \ i\n        ones.count(i => i%10 == 1)", "        val ones = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) ones += i\n        ones.count(_ == 1)", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val onesCount = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val onesCount = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val onesCount = scala.collection.mut", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        val zeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n           \
    \ val digit = i / 10\n            if (digits.contains(digit)) {\n            \
    \    val count = digits(digit)\n                counts += digit -> count\n   \
    \             if (count == 1) {\n                    ones += digit\n         \
    \       } else {\n                    zeros += digit\n                }\n    \
    \        }\n        }\n        val oneCount = ones.count(_ == 1)\n        val\
    \ zeroCount = zeros.count(_ == 0)\n        counts + (oneCount + zeroCount) ->\
    \ oneCount + zeroCount", "        val ones = mutable.ListBuffer[Long]()\n    \
    \    val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        var count = 0\n        var last = 0\n        for(i <- 1 to n) {\n     \
    \       if(i % 10 == 1) {\n                count += 1\n                last =\
    \ i\n            }\n        }\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            if(i % 10 == 1){\n\
    \                ones += i\n                count += 1\n            }\n      \
    \  }\n        ones.length", "        val ones = mutable.ListBuffer(1)\n      \
    \  val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val x = ones + zeros\n\
    \            if (x == ones) {\n                counts += ones.length\n       \
    \         i += 1\n            } else if (x == zeros) {\n                counts\
    \ += zeros.length\n                i += 1\n            } else {\n            \
    \    counts += x.size\n                i += 1\n            }\n        }\n    \
    \    counts.sum", "        val ones = mutable.Set[Long]()\n        val zeros =\
    \ mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n      \
    \  val onesCount = mutable.Map[Long, Long]()\n        val zerosCount = mutable.Map[Long,\
    \ Long]()\n        val onesZeros = mutable.Map[Long, Long]()\n        val zerosOnes\
    \ = mutable.Map[Long, Long]()\n        val onesZeroOnes = mutable.Map[Long, Long]()\n\
    \        val zerosOnesOnes = mutable.Map[Long, Long]()\n        val onesZeroOnesOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOnesOnesOnes = mutable.Map[Long,\
    \ Long]()\n        val onesZeroOnesOnesOnes = mutable.Map[Long, Long]()\n    \
    \    val zerosOnesOnesOnesOnes = mutable.Map[Long, Long]()\n        val onesZeroOnesOnesOnesOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOnesOnesOnesOnesOnes = mutable.Map[Long,\
    \ Long]()\n        val onesZeroOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n\
    \        val zerosOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n     \
    \   val onesZeroOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n       \
    \ val zerosOnesOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n        val\
    \ onesZeroOnesOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosOnesOnesOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n        val\
    \ onesZeroOnesOnesOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n     \
    \   val zerosOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = mutable.Map[Long, Long]()\n\
    \        val onesZeroOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosOnesOnesOnesOnesOnes", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        var count = 0\n \
    \       for(i <- 1 to n){\n            if(i%10 == 1){\n                ones +=\
    \ i\n                onesCount += i\n                count += 1\n            }\n\
    \        }\n        onesCount.toList.sortWith(_ < _).length", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n        val\
    \ onesCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val onesCount19 = mutable.Set[Long]()\n\
    \        val onesCount20 = mutable.Set[Long]()\n        val onesCount21 = mutable.Set[Long]()\n\
    \        val onesCount22 = mutable.Set[Long]()\n        val onesCount23 = mutable.Set[Long]()\n\
    \        val onesCount24 = mutable.Set[Long]()\n        val onesCount25 = mutable.Set[Long]()\n\
    \        val onesCount26 = mutable.Set[Long]()\n        val onesCount27 = mutable.Set[Long]()\n\
    \        val onesCount28 = mutable.Set[Long]()\n        val onesCount29 = mutable.Set[Long]()\n\
    \        val onesCount30 = mutable.Set[Long]()\n        val onesCount31 = mutable.Set[Long]()\n\
    \        val onesCount32 = mutable.Set[Long]()\n        val onesCount33 = mutable.Set[Long]()\n\
    \        val onesCount34 = mutable.Set[Long]()\n        val one", "        val\
    \ ones = mutable.ListBuffer.empty[Long]\n        val zeros = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount = mutable.ListBuffer.empty[Long]\n        val zerosCount\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCounts = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ListBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCounts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ListBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCounts = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ListBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCounts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ListBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCounts = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ListBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCounts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ListBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCounts = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ListBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCounts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ListBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCounts = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ListBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCounts = mutable.ListBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ListBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCounts = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ListBuffer.", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mut", "        val ones = mutable.Set[Long]()\n     \
    \   val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n\
    \        val start = scala.math.pow(10, n).toLong\n        val end = scala.math.pow(10,\
    \ n-1).toLong\n        while(start <= end) {\n            val mid = start + (end\
    \ - start) / 2\n            val isOne = scala.math.pow(10, mid).toLong == 1\n\
    \            if(isOne) {\n                ones += mid\n            } else {\n\
    \                zeros += mid\n            }\n            counts(mid) += 1\n \
    \           start = mid + 1\n        }\n        ones.size + (zeros.size - ones.size)",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        while(n > 0){\n\
    \            val digit = n % 10\n            val digitCount = digits.count(_ ==\
    \ digit)\n            val digitZeroCount = digits.count(_ == 0)\n            val\
    \ digitOneCount = digits.count(_ == 1)\n            val digitZeroOneCount = digits.count(_\
    \ == 0 && _ == 1)\n            val digitOneZeroCount = digits.count(_ == 1 &&\
    \ _ == 0)\n            val digitZeroZeroCount = digits.count(_ == 0 && _ == 0)\n\
    \            val digitOneOneCount = digits.count(_ == 1 && _ == 1)\n         \
    \   val digitZeroOneOneCount = digits.count(_ == 0 && _ == 1 && _ == 0)\n    \
    \        val digitOneZeroOneCount = digits.count(_ == 1 && _ == 0 && _ == 1)\n\
    \            val digitZeroZeroOneCount = digits.count(_ == 0 && _ == 0 && _ ==\
    \ 1)\n            val digitOneOneZeroCount = digits.count(_ == 1 && _ == 1 &&\
    \ _ == 0)\n            val digitZeroOneZeroCount = digits.count(_ == 0 && _ ==\
    \ 1 && _ == 0)\n            val digitOneZeroZeroCount = digits.count(_ == 1 &&\
    \ _ == 0 && _ == 0)\n            val digitZeroOneOneCount = digits.count(_ ==\
    \ 0 && _ == 1 && _ == 1)\n            val digitZeroOneOneZeroCount = digits.count(_\
    \ == 0 && _ == 1 && _ == 1 && _ == 0)\n            val digitOneZeroOneZeroCount\
    \ = digits.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n            val digitZeroOneZeroOneCount\
    \ = digits.count(_ == 0 && _ == 1 && _ == 0 && _ == 1)\n            val digitZeroOneZeroOneZeroCount\
    \ = digits.count(_ == 0 && _ == 1 && _ == 0 && _ == 1 && _ == 0)\n           \
    \ val digitOneZeroZeroOneCount = digits.count(_ == 1 && _ == 0 && _ == 0 && _\
    \ == 1)\n            val digitZeroOneZeroOneZeroCount = digits.count(_ == 0 &&\
    \ _ == 1 && _ == 0 && _ == 1 && _ == 0)\n            val digitOneZeroOneZeroOneCount\
    \ = digits.count(_ == 1 && _ == 0 && _ == 0 && _ == 1 && _ == 1)\n           \
    \ val digitZeroOneZeroOneZeroOneCount = digits.count(_ == 0 && _ == 1 && _ ==\
    \ 0 && _ == 1 && _ == 1)\n            val digitOneZeroZeroOneCount = digits.count(_\
    \ == 1 && _ == 0 && _ == 0 && _ == 1)\n            val digitZeroOneZeroOneCount\
    \ = digits.count(_ == 0 && _ == 1 && ", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val digits = n.toString.reverse.grouped(10).reverse\n     \
    \   digits.foreach { x =>\n            val digit = x.toLong\n            if (digit\
    \ == 1) ones += digit\n            if (digit == 0) zeros += digit\n          \
    \  counts += digit -> counts.getOrElse(digit, 0) + 1\n        }\n        val oneCount\
    \ = ones.size\n        val zeroCount = zeros.size\n        val count = oneCount\
    \ + zeroCount\n        val onesCount = ones.toSeq.sum\n        val zerosCount\
    \ = zeros.toSeq.sum\n        val onesZeroCount = onesCount + zerosCount\n    \
    \    val onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n        val\
    \ onesZeroCount = onesCount + zerosCount\n        val onesZeroCount = onesCount\
    \ + zerosCount\n        val onesZeroCount = onesCount + zerosCount\n", "     \
    \   val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        var last = 1\n        while(n != 0) {\n            val next = (n\
    \ % 10).toInt\n            if(next == 1) {\n                count += 1\n     \
    \       }\n            last = next\n            n /= 10\n        }\n        return\
    \ count", "        var count = 0\n        val ones = Vector.fill(n / 10)(1)\n\
    \        val zeros = Vector.fill(n / 10)(0)\n        val onesCount = ones.count(_\
    \ == 1)\n        val zerosCount = zeros.count(_ == 0)\n        if (onesCount ==\
    \ 1 && zerosCount == 0) {\n            count = n\n        } else if (onesCount\
    \ == 1 && zerosCount > 0) {\n            count = onesCount + zerosCount\n    \
    \    } else if (onesCount > 0 && zerosCount == 0) {\n            count = onesCount\
    \ + n\n        } else {\n            count = onesCount + zerosCount + n\n    \
    \    }\n        count", "        val ones = mutable.ListBuffer[Long]()\n     \
    \   val zeros = mutable.ListBuffer[Long]()\n        val count = mutable.ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            val remainder = i % 10\n\
    \            if (remainder == 1) {\n                ones += i\n            } else\
    \ if (remainder == 0) {\n                zeros += i\n            } else {\n  \
    \              count += i\n            }\n            i /= 10\n        }\n   \
    \     val oneCount = ones.count(_ == 1)\n        val zeroCount = zeros.count(_\
    \ == 0)\n        val count = count.sum\n        val oneEndCount = oneCount - zeroCount\n\
    \        oneEndCount", "        val counts = mutable.HashMap[Long, Long]()\n \
    \       for (i <- 1 to n) counts(i) = 1\n        val ones = mutable.HashSet[Long]()\n\
    \        for (i <- 1 to n) ones.add(i * 10)\n        ones.count(i => counts(i)\
    \ == 1)", "        var count = 0\n        val ones = Vector.fill(n / 10)(1)\n\
    \        val zeros = Vector.fill(n / 10)(0)\n        val onesVector = ones.toVector\n\
    \        val zerosVector = zeros.toVector\n        val onesVectorSize = onesVector.length\n\
    \        val zerosVectorSize = zerosVector.length\n        val onesVectorIterator\
    \ = onesVector.iterator\n        val zerosVectorIterator = zerosVector.iterator\n\
    \        val onesVectorIteratorSize = onesVectorIterator.size\n        val zerosVectorIteratorSize\
    \ = zerosVectorIterator.size\n        while(onesVectorIterator.hasNext && zerosVectorIterator.hasNext)\
    \ {\n            val onesVectorElement = onesVectorIterator.next()\n         \
    \   val zerosVectorElement = zerosVectorIterator.next()\n            if(onesVectorElement\
    \ == 1 && zerosVectorElement == 0) {\n                count += 1\n           \
    \ }\n        }\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Map[Long, Long]()\n        val zerosCount\
    \ = mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCountZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOnes =\
    \ mutable.Map[Long, Long]()\n        val zerosCountZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneZero = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOneZero = mutable.Map[Long, Long]()\n        val onesCountZeroOne\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOne = mutable.Map[Long, Long]()\n        val\
    \ zerosCountOneOne = mutable.Map[Long, Long]()\n        val onesCountZeroZeroOne\
    \ = mutable.Map[Long, Long]()\n        val zerosCountZeroZeroOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneZeroZero = mutable.Map[Long, Long]()\n    \
    \    val zerosCountOneZeroZero = mutable.Map[Long, Long]()\n        val onesCountOneOneZero\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneZero = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeroOne = mutable.Map[Long, Long]()\n    \
    \    val zerosCountZeroZeroOne = mutable.Map[Long, Long]()\n        val onesCountOneZeroZero\
    \ = mutable.Map[Long, Long]()\n        ", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mut", "        val ones = mutable.ArrayBuffer(1)\n  \
    \      val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        while (i < n) {\n            val x = ones + zeros\n\
    \            val y = ones - zeros\n            val z = ones + zeros\n        \
    \    val w = zeros - ones\n            val z = z + w\n            val x = x +\
    \ z\n            val y = y + x\n            val z = z + y\n            val w =\
    \ w + z\n            val x = x + w\n            val y = y + x\n            val\
    \ z = z + y\n            val w = w + z\n            val x = x + w\n          \
    \  val y = y + x\n            val z = z + y\n            val w = w + z\n     \
    \       val x = x + w\n            val y = y + x\n            val z = z + y\n\
    \            val w = w + z\n            val x = x + w\n            val y = y +\
    \ x\n            val z = z + y\n            val w = w + z\n            val x =\
    \ x + w\n            val y = y + x\n            val z = z + y\n            val\
    \ w = w + z\n            val x = x + w\n            val y = y + x\n          \
    \  val z = z + y\n            val w = w + z\n            val x = x + w\n     \
    \       val y = y + x\n            val z = z + y\n            val w = w + z\n\
    \            val x = x + w\n            val y = y + x\n            val z = z +\
    \ y\n            val w = w + z\n            val x = x + w\n            val y =\
    \ y + x\n            val z = z + y\n            val w = w + z\n            val\
    \ x = x + w\n            val y = y + x\n            val z = z + y\n          \
    \  val w = w + z\n            val x = x + w\n            val y = y + x\n     \
    \       val z = z + y\n            val w = w + z\n            val x = x + w\n\
    \            val y = y + x\n            val z = z + y\n            val w = w +\
    \ z\n            val x = x + w\n            val y = y + x\n            val z =\
    \ z + y\n            val w = w + z\n            val x = x + w\n            val\
    \ y = y + x\n            val z = z + y\n            val w = w + z\n          \
    \  val x = x + w\n            val y = y + x\n            val z = z + y\n     \
    \       val w = w + z\n            val x = x + w\n            val y = y + x\n\
    \            val z = z + y\n            val w = w + z\n            val x = x +\
    \ w\n            val y = y + x", "        val ones = mutable.ListBuffer(1)\n \
    \       val zeros = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val remainder = n % 10\n        val remainderDigit = remainder % 10\n\
    \        val remainderDigit2 = remainderDigit % 10\n        val remainderDigit3\
    \ = remainderDigit % 10\n        val remainderDigit4 = remainderDigit % 10\n \
    \       val remainderDigit5 = remainderDigit % 10\n        val remainderDigit6\
    \ = remainderDigit % 10\n        val remainderDigit7 = remainderDigit % 10\n \
    \       val remainderDigit8 = remainderDigit % 10\n        val remainderDigit9\
    \ = remainderDigit % 10\n        val remainderDigit10 = remainderDigit % 10\n\
    \        val remainderDigit11 = remainderDigit % 10\n        val remainderDigit12\
    \ = remainderDigit % 10\n        val remainderDigit13 = remainderDigit % 10\n\
    \        val remainderDigit14 = remainderDigit % 10\n        val remainderDigit15\
    \ = remainderDigit % 10\n        val remainderDigit16 = remainderDigit % 10\n\
    \        val remainderDigit17 = remainderDigit % 10\n        val remainderDigit18\
    \ = remainderDigit % 10\n        val remainderDigit19 = remainderDigit % 10\n\
    \        val remainderDigit20 = remainderDigit % 10\n        val remainderDigit21\
    \ = remainderDigit % 10\n        val remainderDigit22 = remainderDigit % 10\n\
    \        val remainderDigit23 = remainderDigit % 10\n        val remainderDigit24\
    \ = remainderDigit % 10\n        val remainderDigit25 = remainderDigit % 10\n\
    \        val remainderDigit26 = remainderDigit % 10\n        val remainderDigit27\
    \ = remainderDigit % 10\n        val remainderDigit28 = remainderDigit % 10\n\
    \        val remainderDigit29 = remainderDigit % 10\n        val remainderDigit30\
    \ = remainderDigit % 10\n        val remainderDigit31 = remainderDigit % 10\n\
    \        val remainderDigit32 = remainderDigit % 10\n        val remainderDigit33\
    \ = remainderDigit % 10\n        val remainderDigit34 = remainderDigit % 10\n\
    \        val remainderDigit35 = remainderDig", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Map[Long, Long]()\n        val zerosCount\
    \ = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long, Long]()\n\
    \        val zerosOnes = mutable.Map[Long, Long]()\n        val onesOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosZeros = mutable.Map[Long, Long]()\n        val onesZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOnes = mutable.Map[Long, Long]()\n\
    \        val onesOneOnes = mutable.Map[Long, Long]()\n        val zerosZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeros = mutable.Map[Long, Long]()\n\
    \        val onesOneZeros = mutable.Map[Long, Long]()\n        val zerosOneZeros\
    \ = mutable.Map[Long, Long]()\n        val onesOneZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ onesOneOneZeros = mutable.Map[Long, Long]()\n        val zerosZeroOneZeros =\
    \ mutable.Map[Long, Long]()\n        val onesZeroOneZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ onesOneOneZeros = mutable.Map[Long, Long]()\n        val zerosZeroOneZeros =\
    \ mutable.Map[Long, Long]()\n        val onesZeroOneZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ onesOneOneZeros = mutable.Map[Long, Long]()\n        val zerosZeroOneZeros =\
    \ mutable.Map[Long, Long]()\n        val onesZeroOneZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ onesOneOneZeros = mutable.Map[Long, Long]()\n        val zerosZeroOneZeros =\
    \ mutable.Map[Long, Long]()\n        val onesZeroOneZeros = mutable.Map[Long,\
    \ Long]()\n", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val digit = i / 10\n            if (digit == 1) {\n             \
    \   ones += i\n            } else if (digit == 0) {\n                zeros +=\
    \ i\n            } else {\n                counts += (digit - 1) -> (counts(digit)\
    \ + 1)\n            }\n        }\n        val oneCount = ones.count(_ == 1)\n\
    \        val zeroCount = zeros.count(_ == 0)\n        val totalCount = ones.size\
    \ + zeros.size\n        val oneEndCount = ones.size - oneCount\n        val zeroEndCount\
    \ = zeros.size - zeroCount\n        val oneEnds = ones.take(oneEndCount)\n   \
    \     val zeroEnds = zeros.take(zeroEndCount)\n        val oneEndsCount = ones.size\
    \ - oneEnds.size\n        val zeroEndsCount = zeros.size - zeroEnds.size\n   \
    \     val oneEndsCount = ones.size - oneEnds.size\n        val zeroEndsCount =\
    \ zeros.size - zeroEnds.size\n        val oneEndsCount = ones.size - oneEnds.size\n\
    \        val zeroEndsCount = zeros.size - zeroEnds.size\n        val oneEndsCount\
    \ = ones.size - oneEnds.size\n        val zeroEndsCount = zeros.size - zeroEnds.size\n\
    \        val oneEndsCount = ones.size - oneEnds.size\n        val zeroEndsCount\
    \ = zeros.size - zeroEnds.size\n        val oneEndsCount = ones.size - oneEnds.size\n\
    \        val zeroEndsCount = zeros.size - zeroEnds.size\n        val oneEndsCount\
    \ = ones.size - oneEnds.size\n        val zeroEndsCount = zeros.size - zeroEnds.size\n\
    \        val oneEndsCount = ones.size - oneEnds.size\n        val zeroEndsCount\
    \ = zeros.size - zeroEnds.size\n        val oneEndsCount = ones.size - oneEnds.size\n\
    \        val zeroEndsCount = zeros.size - zeroEnds.size\n        val oneEndsCount\
    \ = ones.size - oneEnds.size\n        val zeroEndsCount = zeros.size - zeroEnds.size\n\
    \        val oneEndsCount = ones.size - oneEnds.size\n        val zeroEndsCount\
    \ = zeros.size - zeroEnds.size\n        val oneEndsCount = ones.size - oneEnds.size\n\
    \        val zeroEndsCount = zeros.size - zeroEnds.size\n        val oneEndsCount\
    \ = ones.size - oneEnds.size\n        val zeroEndsCount = zeros.size - zeroEnds.size\n\
    \        val oneEndsCount = ones.size - oneEnds.size\n        val zeroEnds", " \
    \       val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val onesCount = ones.takeWhile(x => x < n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x < n).length\n        val count = (onesCount + zerosCount).toLong\n\
    \        counts += count\n        count", "        val ones = mutable.Set[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            val temp = i\n\
    \            while(temp > 0){\n                if(temp % 10 == 1){\n         \
    \           ones += i\n                    break\n                }\n        \
    \        temp = temp / 10\n            }\n        }\n        count = ones.size\
    \ - n\n        count", "        val ones = mutable.Set[Long]()\n        var count\
    \ = 0\n        for(i <- 1 to n){\n            val remainder = i % 10\n       \
    \     if(remainder == 1){\n                ones += i\n            }\n        }\n\
    \        ones.size", "        val ones = mutable.ListBuffer[Long]()\n        var\
    \ count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n         \
    \       ones += i\n                count += 1\n            }\n        }\n    \
    \    ones.size", "        val counts = mutable.HashMap[Long, Long]()\n       \
    \ val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.takeWhile(x => x < n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val onesOnes\
    \ = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < ", "        var count = 0\n\
    \        var last = 1\n        var next = 1\n        var next2 = 1\n        var\
    \ next3 = 1\n        var next4 = 1\n        var next5 = 1\n        var next6 =\
    \ 1\n        var next7 = 1\n        var next8 = 1\n        var next9 = 1\n   \
    \     var next10 = 1\n        var next11 = 1\n        var next12 = 1\n       \
    \ var next13 = 1\n        var next14 = 1\n        var next15 = 1\n        var\
    \ next16 = 1\n        var next17 = 1\n        var next18 = 1\n        var next19\
    \ = 1\n        var next20 = 1\n        var next21 = 1\n        var next22 = 1\n\
    \        var next23 = 1\n        var next24 = 1\n        var next25 = 1\n    \
    \    var next26 = 1\n        var next27 = 1\n        var next28 = 1\n        var\
    \ next29 = 1\n        var next30 = 1\n        var next31 = 1\n        var next32\
    \ = 1\n        var next33 = 1\n        var next34 = 1\n        var next35 = 1\n\
    \        var next36 = 1\n        var next37 = 1\n        var next38 = 1\n    \
    \    var next39 = 1\n        var next40 = 1\n        var next41 = 1\n        var\
    \ next42 = 1\n        var next43 = 1\n        var next44 = 1\n        var next45\
    \ = 1\n        var next46 = 1\n        var next47 = 1\n        var next48 = 1\n\
    \        var next49 = 1\n        var next50 = 1\n        var next51 = 1\n    \
    \    var next52 = 1\n        var next53 = 1\n        var next54 = 1\n        var\
    \ next55 = 1\n        var next56 = 1\n        var next57 = 1\n        var next58\
    \ = 1\n        var next59 = 1\n        var next60 = 1\n        var next61 = 1\n\
    \        var next62 = 1\n        var next63 = 1\n        var next64 = 1\n    \
    \    var next65 = 1\n        var next66 = 1\n        var next67 = 1\n        var\
    \ next68 = 1\n        var next69 = 1\n        var next70 = 1\n        var next71\
    \ = 1\n        var next72 = 1\n        var next73 = 1\n        var next74 = 1\n\
    \        var next75 = 1\n        var next76 = 1\n        var next77 = 1\n    \
    \    var next78 = 1\n        var next79 = 1\n        var next80 = 1\n        var\
    \ next81 = 1\n        var next82 = 1\n        var next83 = 1\n        var next84\
    \ = 1\n        var next85 = 1\n        var next86 = 1\n        var next87 = 1\n\
    \        var next88 = 1\n        var next89 = 1\n        var next90 = 1\n    \
    \    var next91 = 1\n        var next92 = 1\n        var next93 = 1\n        var\
    \ next94 = 1\n        var next95 = 1\n        var next96 = 1\n        var ", " \
    \       val counts = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeroes = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to\
    \ n) {\n            val digit = i / 10\n            if (digits.contains(digit))\
    \ {\n                val count = counts(digit)\n                if (count == 0)\
    \ {\n                    counts(digit) = i + 1\n                    ones += digit\n\
    \                } else {\n                    counts(digit) = count + 1\n   \
    \                 zeroes += digit\n                }\n            }\n        }\n\
    \        val oneCount = counts.filter(_._1 == 1).size\n        val zeroCount =\
    \ counts.filter(_._1 == 0).size\n        val total = oneCount + zeroCount\n  \
    \      if (oneCount == 0) {\n            oneCount += 1\n        }\n        if\
    \ (zeroCount == 0) {\n            zeroCount += 1\n        }\n        total + oneCount\
    \ + zeroCount", "        val ones = mutable.ListBuffer[Long]()\n        val zeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val zerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val zerosCount3\
    \ = mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount4 = mutable.ListBuffer[Long]()\n        val onesCount5\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val zerosCount6\
    \ = mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount7 = mutable.ListBuffer[Long]()\n        val onesCount8\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val zerosCount9\
    \ = mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val zerosCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val zerosCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        var count = 0\n        val ones =\
    \ Vector.fill(n / 10)(1)\n        val zeros = Vector.fill(n / 10)(0)\n       \
    \ val onesZeros = Vector.fill(n / 10)(1)(0)\n        val onesZeroOnes = Vector.fill(n\
    \ / 10)(1)(0)(1)\n        val onesZeroOnesZeros = Vector.fill(n / 10)(1)(0)(1)(0)\n\
    \        val onesZeroOnesZeroOnes = Vector.fill(n / 10)(1)(0)(1)(0)(1)\n     \
    \   val onesZeroOnesZeroOnesZeros = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(0)\n\
    \        val onesZeroOnesZeroOnesZeroOnes = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)\n\
    \        val onesZeroOnesZeroOnesZeroOnesZeros = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)(0)(0)\n\
    \        val onesZeroOnesZeroOnesZeroOnesZeroOnes = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)\n\
    \        val onesZeroOnesZeroOnesZeroOnesZeroOnesZeros = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(0)\n\
    \        val onesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnes = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(0)\n\
    \        val onesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeros = Vector.fill(n\
    \ / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(0)(0)\n        val onesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnes\
    \ = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(0)\n       \
    \ val onesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeros = Vector.fill(n\
    \ / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(0)(0)\n        val onesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeros\
    \ = Vector.fill(n / 10)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(1)(0)(0)(0)\n\
    \        val onesZeroOnesZeroOnesZeroOnesZeroOnes", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        var i = n\n     \
    \   while(i != 0) {\n            ones += i\n            onesCount += i\n     \
    \       i /= 10\n        }\n        val onesSet = onesCount.toSet\n        val\
    \ onesSetSize = onesSet.size\n        val onesSetIterator = onesSet.iterator\n\
    \        while(onesSetIterator.hasNext) {\n            val onesSetElement = onesSetIterator.next\n\
    \            if(onesSetElement == 1) {\n                onesSetIterator.remove\n\
    \                onesSetSize -= 1\n            }\n        }\n        onesSetSize",
  "        val counts = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.HashSet.empty[Long]\n\
    \        val zeros = mutable.HashSet.empty[Long]\n        for (i <- 1 to n) {\n\
    \            val digit = i / Math.pow(10, n.toInt)\n            if (digits.contains(digit))\
    \ {\n                counts(digit) += 1\n                if (digits == 1) {\n\
    \                    ones += digit\n                } else {\n               \
    \     zeros += digit\n                }\n            }\n        }\n        counts.toSeq.foldLeft(0L)\
    \ { (acc, x) => acc + x }", "        var count = 0\n        var last = 1\n   \
    \     var next = 1\n        while(n > 0) {\n            count += 1\n         \
    \   next *= 10\n            next += n % 10\n            n /= 10\n        }\n \
    \       while(last != next) {\n            count += 1\n            last /= 10\n\
    \        }\n        count"]
stop_tokens:
- "\n    }\n"
