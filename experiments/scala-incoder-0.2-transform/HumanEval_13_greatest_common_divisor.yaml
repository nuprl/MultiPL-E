name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l),\
  \ (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n\
  \    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0) 1\n    \
    \    else {\n            val r = a / b\n            if (r == 0) 1\n          \
    \  else greatestCommonDivisor(r, b)\n        }", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        val lcm = a.lcm(b)\n        val\
    \ gcd = a.gcd(b)\n        lcm / gcd", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -a else a)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd > 0) gcd else a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val gcd = math.gcd(a, b)\n        if (gcd\
    \ > 0) gcd else a", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n     \
    \   lcm", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0) 1\n\
    \        else greatestCommonDivisor(b, a % b)", "        val lcm = a / b\n   \
    \     val gcd = a % b\n        if (gcd == 0) lcm\n        else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0) 0\n    \
    \    else if (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -1 else 1)"]
stop_tokens:
- "\n    }\n"
