name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l),\
  \ (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n\
  \    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0) 1\n    \
    \    else {\n            val r = a / b\n            if (r == 0) 1\n          \
    \  else greatestCommonDivisor(r, b)\n        }", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        val lcm = a.lcm(b)\n        val\
    \ gcd = a.gcd(b)\n        lcm / gcd", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -a else a)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd > 0) gcd else a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val gcd = math.gcd(a, b)\n        if (gcd\
    \ > 0) gcd else a", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n     \
    \   lcm", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0) 1\n\
    \        else greatestCommonDivisor(b, a % b)", "        val lcm = a / b\n   \
    \     val gcd = a % b\n        if (gcd == 0) lcm\n        else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0) 0\n    \
    \    else if (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -1 else 1)", "  \
    \      val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else a", "        if (a == 0) b\n        else if (b == 0) a\n\
    \        else greatestCommonDivisor(b, a % b)", "        val a = a.toInt\n   \
    \     val b = b.toInt\n        var gcd = 1\n        var i = 2\n        while (i\
    \ <= a || i <= b) {\n            if (a % i == 0 && b % i == 0) {\n           \
    \     gcd = i\n            }\n            i += 1\n        }\n        gcd", " \
    \       val lcm = a.toLong * b.toLong / GCD(a, b)\n        lcm", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + 1",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + 1", "        val gcd = if (a < b) a else b\n        val lcm = if (gcd % a\
    \ == 0) gcd / a else gcd / b\n        lcm", "        if (a == 0 || b == 0) 1\n\
    \        else greatestCommonDivisor(b, a % b)", "        val lcm = lcm(a,b)\n\
    \        val gcd = a / lcm\n        val remainder = a % lcm\n        (gcd, remainder)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val lcm = a.toLong * b.toLong / GCD(a,b)\n\
    \        lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (b > 0) a else 0)", "        val a = a.toInt\n   \
    \     val b = b.toInt\n        var gcd = 1\n        var i = 2\n        while (i\
    \ <= a || i <= b) {\n            if (a % i == 0 && b % i == 0) {\n           \
    \     gcd = i\n            }\n            i += 1\n        }\n        gcd", " \
    \       val a = a.toInt\n        val b = b.toInt\n        var gcd = 1\n      \
    \  while (b != 0) {\n            if (b % gcd == 0) {\n                gcd = gcd\
    \ * a\n            }\n            b = b // b /= a\n            a = a * a\n   \
    \     }\n        gcd // return gcd of both numbers", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val gcd = math.gcd(a, b)\n        if (gcd\
    \ > 0) gcd else a", "        val gcd = if (a < b) a else b\n        val q = a\
    \ / gcd\n        val r = a % gcd\n        val s = b / gcd\n        val t = b %\
    \ gcd\n        val gcd = if (r > s) r else s\n        val gcd = if (t > gcd) t\
    \ else gcd\n        val gcd = if (q > gcd) q else gcd\n        gcd", "       \
    \ val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd\
    \ == 0) gcd else gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (b == 0) a else a / b)", "        val gcd = if (b\
    \ == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd > a) gcd else\
    \ a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < 0) -1 else 1)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)", "   \
    \     val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + 1", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n        if (gcd\
    \ > lcm) gcd else lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + 1", "        if (a == 0 || b == 0) 0\n        else if\
    \ (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val gcd = if (a\
    \ < b) a else b\n        val q = a / gcd\n        val r = a % gcd\n        val\
    \ s = b / gcd\n        val t = b % gcd\n        gcd * (q + r * s + t * gcd)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) 1 else gcd", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + 1", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else a", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd + 1",
  "        if (a == 0 || b == 0) 0\n        else if (a > b) greatestCommonDivisor(b,\
    \ a % b)\n        else greatestCommonDivisor(a % b, b)", "        val gcd = if\
    \ (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd > a) gcd else\
    \ a", "        val a = math.abs(a)\n        val b = math.abs(b)\n        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a <\
    \ b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -1 else 1)", "        val a = a.toInt\n  \
    \      val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val lcm = a.lcm(b)\n        val gcd =\
    \ a.gcd(b)\n        lcm / gcd", "        val lcm = a.toLong * b.toLong / GCD(a,\
    \ b)\n        val gcd = a.toLong / lcm\n        lcm", "        val gcd = if (b\
    \ == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else\
    \ b)", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n        lcm /\
    \ gcd", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n        val gcd =\
    \ a.toLong / lcm\n        lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -1 else 1)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val a = a.toInt\n\
    \        val b = b.toInt\n        val gcd = if (a > b) a else b\n        val i\
    \ = a / gcd\n        val j = b / gcd\n        val gcdi = if (i == 0) gcd else\
    \ greatestCommonDivisor(gcd, i)\n        val gcdj = if (j == 0) gcd else greatestCommonDivisor(gcd,\
    \ j)\n        gcdi * gcdj", "        val lcm = a.toLong * b.toLong / gcd.toLong\n\
    \        val gcd = a.toLong / lcm\n        lcm", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val lcm = a.toLong * b.toLong / GCD(a, b)\n        lcm.toLong", "     \
    \   val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n        lcm / gcd", "    \
    \    val a = a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        gcd.toLong", "        val a =\
    \ a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val a = a.toInt\n\
    \        val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val a1 = a / b\n        val a2 = a % b\n\
    \        val b1 = b / a\n        val b2 = b % a\n        if(a1 == a2) b1 else\
    \ b1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        val gcd = if (a < b) a else b\n\
    \        val q = a / gcd\n        val r = a % gcd\n        val s = b / gcd\n \
    \       val t = b % gcd\n        if (t == 0) gcd else greatestCommonDivisor(gcd,\
    \ t)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < 0) -1 else 1)", "        val gcd = if (a > b) a else b\n\
    \        val lcm = a / gcd\n        val rcm = b / gcd\n        gcd * (lcm / rcm)",
  "        val a1 = a / b\n        val a2 = a % b\n        val b1 = b / a\n      \
    \  val b2 = b % a\n        if(a1 == 0) a1\n        else greatestCommonDivisor(a1,\
    \ b1) + greatestCommonDivisor(a2, b2)", "        val lcm = a.lcm(b)\n        val\
    \ gcd = a.gcd(b)\n        lcm / gcd", "        if (a == 0 || b == 0) 0\n     \
    \   else if (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a,\
    \ (b % a))", "        val lcm = math.lcm(a, b)\n        val gcd = math.gcd(a,\
    \ b)\n        if (gcd > lcm) gcd else lcm", "        val lcm = a.lcm(b)\n    \
    \    val gcd = a.gcd(b)\n        lcm / gcd", "        val lcm = a.toLong * b.toLong\
    \ / GCD(a,b)\n        val lcmInt = lcm.toInt\n        if (lcmInt > Integer.MAX_VALUE)\
    \ Integer.MAX_VALUE else lcmInt", "        val a = a % b\n        val b = b %\
    \ a\n        if (a == 0) b\n        else if (b == 0) a\n        else greatestCommonDivisor(a,\
    \ b)", "        val gcd = if (a > b) a else b\n        val r = a / gcd\n     \
    \   val q = a % gcd\n        val s = b / gcd\n        val t = b % gcd\n      \
    \  val gcd_ = if (r > s) r else s\n        val gcd_q = if (r > t) r else t\n \
    \       val gcd_r = if (q > s) q else s\n        val gcd_s = if (q > t) q else\
    \ t\n        gcd_ * gcd_q * gcd_r * gcd_s", "        if (a == 0) b\n        else\
    \ if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        if (a\
    \ == 0 || b == 0) 1\n        else if (a > b) greatestCommonDivisor(b, a % b)\n\
    \        else greatestCommonDivisor(a % b, b)", "        if (a == 0 || b == 0)\
    \ 1\n        else greatestCommonDivisor(b, a % b)", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else\
    \ b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        val lcm = a.toLong * b.toLong\
    \ / gcd.toLong\n        val gcd = a.toLong / lcm\n        lcm", "        val a\
    \ = a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd > 0) gcd else a", "        val a = a.toInt\n       \
    \ val b = b.toInt\n        val gcd = if (a > b) a else b\n        val i = a /\
    \ gcd\n        val j = b / gcd\n        val k = if (i == 0) j else j\n       \
    \ val l = if (i == 0) k else k\n        val m = if (i == 0) l else l\n       \
    \ val n = if (i == 0) m else m\n        val gcd = if (i == 0) n else n\n     \
    \   val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else\
    \ gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i ==\
    \ 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd\
    \ = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n   \
    \     val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else\
    \ gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i ==\
    \ 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd\
    \ = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n   \
    \     val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else\
    \ gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i ==\
    \ 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd\
    \ = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n   \
    \     val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else\
    \ gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i ==\
    \ 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd\
    \ = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else gcd\n   \
    \     val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i == 0) gcd else\
    \ gcd\n        val gcd = if (i == 0) gcd else gcd\n        val gcd = if (i ==\
    \ 0) gcd else gcd\n        val ", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) a else gcd", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -a else a)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val gcd = math.gcd(a, b)\n        val gcd_abs\
    \ = math.abs(gcd)\n        if (gcd_abs == 0) gcd_abs\n        else gcd_abs / b",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd > a) gcd else a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else\
    \ b)", "        val a = a.toInt\n        val b = b.toInt\n        val gcd = if\
    \ (a > b) a else b\n        val rem = a % gcd\n        if (rem == 0) gcd else\
    \ greatestCommonDivisor(gcd, rem)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -1 else 1)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < 0) a else 0)", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0 && b < 0) a else b)\
    \ * gcd / b", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a\
    \ % b)\n        if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd +\
    \ 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        if (gcd > a) gcd else a", "        val lcm = math.lcm(a, b)\n       \
    \ val gcd = math.gcd(a, b)\n        if (gcd == 0) gcd else lcm", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd ==\
    \ 0) gcd else gcd + 1", "        val a = a.toInt\n        val b = b.toInt\n  \
    \      var gcd = 1\n        while (b > 0) {\n            val t = b % a\n     \
    \       gcd = if (t == 0) gcd else gcd\n            b = t\n        }\n       \
    \ gcd", "        val a = a.toInt\n        val b = b.toInt\n        val gcd = if\
    \ (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd.toLong", "    \
    \    val a = a.toInt\n        val b = b.toInt\n        var gcd = 1\n        while\
    \ (a != 0) {\n            val t = a\n            a = b % a\n            b = t\n\
    \            gcd = gcd % b\n        }\n        gcd", "        val a = a.toInt\n\
    \        val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        if (a == 0) b\n  \
    \      else if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "  \
    \      val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else gcd(gcd, a)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val aMod = a % b\n\
    \        val bMod = b % a\n        if(aMod == 0) bMod else aMod", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if\
    \ (a < 0) -1 else 1)", "        if (a == 0 || b == 0) 0\n        else if (a >\
    \ b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a % b,\
    \ b)", "        val aMod = a % b\n        val bMod = b % a\n        if (aMod ==\
    \ 0) bMod\n        else greatestCommonDivisor(bMod, aMod)", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val gcd = math.gcd(a, b)\n        if (gcd\
    \ == 0) a else gcd", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val gcd =\
    \ if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd\
    \ else gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd > a) gcd else a", "        if (a == 0) b\n        else\
    \ if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + 1", "  \
    \      if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b, a % b)",
  "        val a = a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd.toLong", "        val a\
    \ = a.toInt\n        val b = b.toInt\n        val gcd = if (a > b) a else b\n\
    \        val i = gcd / b\n        val j = gcd % b\n        if (i == 0) j\n   \
    \     else greatestCommonDivisor(j, i)", "        val lcm = a / b\n        val\
    \ gcd = a % b\n        gcd match {\n            case 0 => lcm\n            case\
    \ _ => greatestCommonDivisor(lcm, gcd)\n        }", "        val aMod = a % b\n\
    \        val bMod = b % a\n        if (aMod > 0 && bMod > 0) {\n            return\
    \ greatestCommonDivisor(bMod, aMod)\n        } else if (aMod > 0 && bMod < 0)\
    \ {\n            return greatestCommonDivisor(bMod, aMod + b)\n        } else\
    \ if (aMod < 0 && bMod > 0) {\n            return greatestCommonDivisor(aMod +\
    \ b, aMod)\n        } else {\n            return a\n        }", "        if (a\
    \ == 0 || b == 0)\n            return 0\n        val r = a / b\n        val r1\
    \ = a % b\n        val r2 = b\n        val r3 = r * r2\n        val r4 = r * r1\n\
    \        val r5 = r * r3\n        val r6 = r * r4\n        val r7 = r * r5\n \
    \       val r8 = r * r6\n        val r9 = r * r7\n        val r10 = r * r8\n \
    \       val r11 = r * r9\n        val r12 = r * r10\n        val r13 = r * r11\n\
    \        val r14 = r * r12\n        val r15 = r * r13\n        val r16 = r * r14\n\
    \        val r17 = r * r15\n        val r18 = r * r16\n        val r19 = r * r17\n\
    \        val r20 = r * r18\n        val r21 = r * r19\n        val r22 = r * r20\n\
    \        val r23 = r * r21\n        val r24 = r * r22\n        val r25 = r * r23\n\
    \        val r26 = r * r24\n        val r27 = r * r25\n        val r28 = r * r26\n\
    \        val r29 = r * r27\n        val r30 = r * r28\n        val r31 = r * r29\n\
    \        val r32 = r * r30\n        val r33 = r * r31\n        val r34 = r * r32\n\
    \        val r35 = r * r33\n        val r36 = r * r34\n        val r37 = r * r35\n\
    \        val r38 = r * r36\n        val r39 = r * r37\n        val r40 = r * r38\n\
    \        val r41 = r * r39\n        val r42 = r * r40\n        val r43 = r * r41\n\
    \        val r44 = r * r42\n        val r45 = r * r43\n        val r46 = r * r44\n\
    \        val r47 = r * r45\n        val r48 = r * r46\n        val r49 = r * r47\n\
    \        val r50 = r * r48\n        val r51 = r * r49\n        val r52 = r * r50\n\
    \        val r53 = r * r51\n        val r54 = r * r52\n        val r55 = r * r53\n\
    \        val ", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + 1", "        val a = a.toInt\n        val b = b.toInt\n\
    \        var gcd = 1\n        var i = 2\n        while (i <= a || i <= b) {\n\
    \            if (a % i == 0 && b % i == 0) {\n                gcd = i\n      \
    \      }\n            i += 1\n        }\n        gcd", "        val lcm = a.toLong\
    \ * b.toLong / GCD(a, b)\n        lcm", "        val a = a % b\n        val b\
    \ = b % a\n        if (a == 0) b\n        else greatestCommonDivisor(a, b)", " \
    \       val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n       \
    \ gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -a else a)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -a else a)",
  "        if (a == 0 || b == 0) 0\n        else if (a > b) greatestCommonDivisor(b,\
    \ a % b)\n        else greatestCommonDivisor(a % b, b)", "        val a = a.toInt\n\
    \        val b = b.toInt\n        var gcd = 1\n        while (b != 0) {\n    \
    \        val t = a % b\n            a = b\n            b = t\n            gcd\
    \ = b\n        }\n        gcd", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) a else 0)", "        val lcm = a.lcm(b)\n\
    \        val gcd = a.gcd(b)\n        lcm.gcd(gcd)", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd(gcd,\
    \ a)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        if (gcd == 0) gcd else gcd + 1", "        if (a == 0) b\n        else\
    \ if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        if (a\
    \ == 0) b\n        else if (b == 0) a\n        else greatestCommonDivisor(b, a\
    \ % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val a = a.toInt\n\
    \        val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val lcm = a.lcm(b)\n        val gcd =\
    \ a.gcd(b)\n        lcm / gcd", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  if (gcd > 0) gcd else a", "        val gcd = if (a > b) a else b\n        val\
    \ div = a / gcd\n        val mod = a % gcd\n        gcd * (div + mod)", "    \
    \    val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -a else a)", "        if (a == 0 || b == 0)\
    \ 1\n        else greatestCommonDivisor(b, a % b)", "        val a = a.toInt\n\
    \        val b = b.toInt\n        val gcd = if (a > b) a else b\n        val q\
    \ = a / gcd\n        val r = a % gcd\n        val s = b / gcd\n        val t =\
    \ b % gcd\n        val gcd_ = if (r > s) r else s\n        val q_ = q / gcd_\n\
    \        val r_ = q % gcd_\n        val s_ = s / gcd_\n        val t_ = s % gcd_\n\
    \        val gcd__ = if (r_ > t_) r_ else t_\n        val q_q_ = q_ / gcd__\n\
    \        val r_r_ = q_ % gcd__\n        val s_s_ = s_ / gcd__\n        val t_t_\
    \ = s % gcd__\n        val gcd__ = if (r_r_ > t_t_) r_r_ else t_t_\n        val\
    \ q_q_q_ = q_q_ / gcd__\n        val r_r_r_ = q_q_ % gcd__\n        val s_s_s_\
    \ = s_s_ / gcd__\n        val t_t_t_ = s % gcd__\n        val gcd__ = if (r_r_r_\
    \ > t_t_t_) r_r_r_ else t_t_t_\n        val q_q_q_q_ = q_q_q_ / gcd__\n      \
    \  val r_r_r_r_ = q_q_q_ % gcd__\n        val s_s_s_s_ = s_s_s_ / gcd__\n    \
    \    val t_t_t_t_ = s % gcd__\n        val gcd__ = if (r_r_r_r_ > t_t_t_t_) r_r_r_r_\
    \ else t_t_t_t_\n        val q_q_q_q_q_ = q_q_q_q_ / gcd__\n        val r_r_r_r_r_\
    \ = q_q_q_q_ % gcd__\n        val s_s_s_s_s_ = s_s_s_s_ / gcd__\n        val t_t_t_t_t_\
    \ = s % gcd__\n        val gcd__ = if (r_r_r_r_r_ > t_t_t_t_t_) r_r_r_r_r_ else\
    \ t_t_t_t_t_\n        val q_q_q_q_q_ = q_q_q_q_q_ / gcd__\n        val r_r_r_r_r_r_\
    \ = q_q_q_q_q_ % gcd__\n        val s_s_s_s_s_s_ = s_s_s_s_s_ / gcd__\n      \
    \  val t_t_t_t_t_t_ = s % gcd__\n        val gcd__ = if (", "        val gcd =\
    \ if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b)\
    \ a else b)", "        if (a == 0 || b == 0)\n            throw new ArithmeticException(\"\
    Division by zero\")\n        if (a == b)\n            return a\n        if (a\
    \ < b)\n            greatestCommonDivisor(b, a)\n        else\n            greatestCommonDivisor(a,\
    \ a)", "        if (a == 0 || b == 0)\n            return 0\n        val x = a\
    \ / b\n        val y = b / a\n        if (x != y)\n            greatestCommonDivisor(x,\
    \ y)\n        else\n            x", "        val aMod = a % b\n        val bMod\
    \ = b % a\n        if(aMod > 0 && bMod > 0) aMod else bMod", "        if (a ==\
    \ 0 || b == 0) 0\n        else if (a > b) greatestCommonDivisor(b, a % b)\n  \
    \      else greatestCommonDivisor(a, (b % a))", "        val lcm = a.toLong *\
    \ b.toLong / gcd.gcd(a.toLong, b.toLong)\n        lcm.toLong", "        val lcm\
    \ = a.toLong * b.toLong / GCD(a, b)\n        lcm", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) a else\
    \ 0)", "        val lcm = a.toLong * b.toLong / GCD(a,b)\n        val gcd = a.toLong\
    \ / lcm\n        lcm", "        val a = a.toInt\n        val b = b.toInt\n   \
    \     if (a == 0 || b == 0) 1\n        else if (a > b) greatestCommonDivisor(b,\
    \ a - b)\n        else greatestCommonDivisor(a, a - b)", "        val lcm = a.toLong\
    \ * b.toLong / GCD(a, b)\n        lcm.toLong", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val lcm = a.toLong * b.toLong / GCD(a,b)\n        val lcm2 = a.toLong *\
    \ b.toLong / GCD(a,b)\n        if (lcm == lcm2) lcm\n        else lcm2", "   \
    \     val aMod = a % b\n        val bMod = b % a\n        if (aMod == 0) bMod\n\
    \        else greatestCommonDivisor(aMod, bMod)", "        val lcm = a / b\n \
    \       val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (a < b) a else b\n        val q = a / gcd\n   \
    \     val r = a % gcd\n        q * gcd + r", "        if (a == 0 || b == 0) 1\n\
    \        else greatestCommonDivisor(b, a % b)", "        val lcm = a.lcm(b)\n\
    \        val gcd = a / lcm\n        gcd.toLong", "        val lcm = a.lcm(b)\n\
    \        val gcd = a.gcd(b)\n        lcm / gcd", "        val a = a % b\n    \
    \    if (a == 0) b\n        else greatestCommonDivisor(b, a)", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a <\
    \ b) a else b)", "        if (a == 0) return b\n        if (b == 0) return a\n\
    \        if (a < b) greatestCommonDivisor(b, a / b) else greatestCommonDivisor(a\
    \ / b, a)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val a = a.toInt\n   \
    \     val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd > 0) gcd else a", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd + 1", " \
    \       val lcm = a.toLong * b.toLong / GCD(a, b)\n        val gcd = a.toLong\
    \ / lcm\n        lcm", "        val lcm = a.toLong * b.toLong / GCD(a,b)\n   \
    \     if (lcm == 0) 1\n        else lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd > a) gcd else a", "       \
    \ val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd +\
    \ (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val lcm = a.toLong *\
    \ b.toLong / GCD(a,b)\n        lcm", "        val aMod = a % b\n        val bMod\
    \ = b % a\n        if(aMod == 0 || bMod == 0) 1\n        else greatestCommonDivisor(aMod,\
    \ bMod)"]
stop_tokens:
- "\n    }\n"
