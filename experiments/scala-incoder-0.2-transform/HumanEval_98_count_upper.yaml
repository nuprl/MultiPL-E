name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>>\
  \ countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n  \
  \  // (0l)\n    def countUpper(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val upperIndices = mutable.ListBuffer[Int]()\n        for(i <- 0 until\
    \ s.length)\n            if(vowels.indexOf(s.charAt(i)) >= 0)\n              \
    \  if(i % 2 == 0)\n                    evenIndices += i\n                else\n\
    \                    upperIndices += i\n        evenIndices.toList.map(evenIndices.indexOf(_)).sum",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = evenIndices.filter(i => i % 2 == 0)\n  \
    \      val evenIndices = evenIndices.map(i => vowels(i))\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'x')\n        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'X')\n\
    \        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'y')\n     \
    \   val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Y')\n        val\
    \ evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'Z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n\
    \        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n     \
    \   val evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n        val\
    \ evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n\
    \        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n     \
    \   val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val\
    \ evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'Z')\n        val evenIndices = ", "        val vowels = \"AEIOUaeiou\"\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n        evenIndices.size", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"AEIOUaeiou\".toCharArray\n        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n\
    \                if (s(i) == 'a')\n                    count += 1\n          \
    \      else if (s(i) == 'e')\n                    count += 1\n               \
    \ else if (s(i) == 'i')\n                    count += 1\n                else\
    \ if (s(i) == 'o')\n                    count += 1\n                else if (s(i)\
    \ == 'u')\n                    count += 1\n                else if (s(i) == 'A')\n\
    \                    count += 1\n                else if (s(i) == 'E')\n     \
    \               count += 1\n                else if (s(i) == 'I')\n          \
    \          count += 1\n                else if (s(i) == 'O')\n               \
    \     count += 1\n                else if (s(i) == 'U')\n                    count\
    \ += 1\n                else\n                    count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        val evenIndices_ = mutable.Set[Int]()\n      \
    \  for (i <- 0 until s.length)\n            if (vowels(s(i)))\n              \
    \  if (s(i) % 2 == 0)\n                    evenIndices += i\n                else\n\
    \                    evenIndices_ += i\n        evenIndices_.size match {\n  \
    \          case 0 => 0\n            case _ => evenIndices.size match {\n     \
    \           case 0 => 0\n                case _ => evenIndices.count(_ % 2 ==\
    \ 0)\n            }\n        }", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val evenIndices = mutable.ListBuffer[Int]()\n        val evenIndices_ = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                evenIndices += i\n            if (evenIndices.contains(i)\
    \ && s(i).isUpper)\n                evenIndices_ += i\n        evenIndices_.length",
  "        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.length", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield {\n            if (i % 2 == 0) Some(i)\n            else None\n      \
    \  }\n        evenIndices.foldLeft(0l) { (acc, i) =>\n            vowels.count(_.toUpperCase\
    \ == s.charAt(i)) match {\n                case 0 => acc + 1\n               \
    \ case _ => acc\n            }\n        }", "        val vowels = Set(\"A\", \"\
    E\", \"I\", \"O\", \"U\")\n        val even = s.toList.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val upper = even.filter(vowels.contains).length\n\
    \        upper", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n\
    \        val evenIndices = mutable.Set[Int]()\n        val oddIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n          \
    \      else\n                    oddIndices += i\n        evenIndices.toSet.size\
    \ + (oddIndices.toSet.size - evenIndices.toSet.size) * vowels.size", "       \
    \ val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \      evenIndices.size", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n    \
    \    val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i) % 2 == 0)\n                evenIndices += i\n     \
    \   evenIndices.toList.count(i => s(i).isUpper)", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        val evenIndicesWithVowels\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0)\n        val evenIndicesWithoutVowels\
    \ = evenIndices.map(i => if (vowels(i)) 0 else 1)\n        val evenIndicesWithoutVowelsCount\
    \ = evenIndices.map(i => if (vowels(i)) 0 else 1).sum\n        val evenIndicesWithVowelsCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).sum\n        val evenIndicesWithVowelsAndEvenIndices\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).map(x => x._1\
    \ + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesCount = evenIndices.map(i\
    \ => if (vowels(i)) 1 else 0).zip(evenIndices).map(x => x._1 + x._2).sum\n   \
    \     val evenIndicesWithVowelsAndEvenIndicesAndEvenIndices = evenIndices.map(i\
    \ => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).map(x => x._1\
    \ + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndices\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndicesCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndicesAndEvenIndices\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndicesAndEvenIndicesCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).zip(evenIndice",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val evenIndices_ = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).toUpperCase\
    \ == \"A\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"E\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"I\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"O\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"U\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"A\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"E\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"I\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"O\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"U\")\n                    evenIndices_ += i\n        evenIndices.toList.map(evenIndices_\
    \ += _).sum", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)",
  "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.toList.size", " \
    \       val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l) { (sum,\
    \ i) =>\n            if (sum > 0) sum + vowels(i)\n            else sum\n    \
    \    }", "        val vowels = \"aeiouAEIOU\".toCharArray\n        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n\
    \                count += s.charAt(i).toUpperCase == s.charAt(i)\n        count",
  "        var count = 0\n        for (i <- 0 until s.length if s(i) == 'A') {\n \
    \           count += 1\n        }\n        for (i <- 0 until s.length if s(i)\
    \ == 'E') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'I') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'O') {\n            count += 1\n        }\n        for (i\
    \ <- 0 until s.length if s(i) == 'U') {\n            count += 1\n        }\n \
    \       count", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n\
    \        val even = s.toList.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n  \
    \      val upper = even.count(vowels.contains)\n        upper", "        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val oddIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n                evenIndices\
    \ += i\n            else\n                oddIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        var count = 0L\n        for (i <- 0 until s.length)\n      \
    \      if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) ==\
    \ 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n\
    \                count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = s filter (_ % 2 == 0) map (_ / 2)\n       \
    \ evenIndices map { i => vowels.count(vowels.indexOf(_, i)) }", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelCounts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                vowelCounts += (s.charAt(i) -> 1)\n        vowelCounts.filter(_._2\
    \ % 2 == 0).map(_._1).sum", "        val vowels = \"aeiouAEIOU\".toList\n    \
    \    val evenIndices = 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper)\
    \ vowels.count(_ == s(i)) else 0)", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0L)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.count(i\
    \ => s(i).toUpper == 'A')", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).toUpperCase\
    \ == \"A\")\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + i)", "        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n                  \
    \  evenIndices += i\n        evenIndices.toList.size", "        val vowels = \"\
    aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n   \
    \     for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n      \
    \          if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        var count = 0\n        for (i <- 0 until s.length)\n       \
    \     if (s(i).isUpper)\n                count += 1\n            else\n      \
    \          if (s(i).isUpper)\n                    count += 1\n               \
    \ else\n                    if (s(i).isUpper)\n                        count +=\
    \ 1\n        return count", "        val vowels = Set(\"A\", \"a\", \"E\", \"\
    e\", \"I\", \"i\", \"O\", \"o\", \"U\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.size", "      \
    \  var count = 0\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'E' || s(i) == 'e')\
    \ count += 1\n            if (s(i) == 'I' || s(i) == 'i') count += 1\n       \
    \     if (s(i) == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'U'\
    \ || s(i) == 'u') count += 1\n        if (count % 2 == 0)\n            count\n\
    \        else\n            0", "        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (s(i).isUpper)\n                count += 1\n     \
    \       if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) ==\
    \ 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'B' && s(i+1) == 'B' && s(i+2) == 'B')\n           \
    \     count += 1\n            else if (s(i) == 'b' && s(i+1) == 'b' && s(i+2)\
    \ == 'b')\n                count += 1\n            else if (s(i) == 'C' && s(i+1)\
    \ == 'C' && s(i+2) == 'C')\n                count += 1\n            else if (s(i)\
    \ == 'c' && s(i+1) == 'c' && s(i+2) == 'c')\n                count += 1\n    \
    \        else if (s(i) == 'D' && s(i+1) == 'D' && s(i+2) == 'D')\n           \
    \     count += 1\n            else if (s(i) == 'd' && s(i+1) == 'd' && s(i+2)\
    \ == 'd')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'E' && s(i+2) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'e' && s(i+2) == 'e')\n                count += 1\n    \
    \        else if (s(i) == 'F' && s(i+1) == 'F' && s(i+2) == 'F')\n           \
    \     count += 1\n            else if (s(i) == 'f' && s(i+1) == 'f' && s(i+2)\
    \ == 'f')\n                count += 1\n            else if (s(i) == 'G' && s(i+1)\
    \ == 'G' && s(i+2) == 'G')\n                count += 1\n            else if (s(i)\
    \ == 'g' && s(i+1) == 'g' && s(i+2) == 'g')\n                count += 1\n    \
    \        else if (s(i) == 'H' && s(i+1) == 'H' && s(i+2) == 'H')\n           \
    \     count += 1\n            else if (s(i) == 'h' && s(i+1) == 'h' && s(i+2)\
    \ == 'h')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'I' && s(i+2) == 'I')\n                count += 1\n            else if (s(i)\
    \ == 'i' && s(i+1) == 'i' && s(i+2) == 'i')\n                count += 1\n    \
    \        else if (s(i) == 'J' && s(i+1) == 'J' && s(i+2) == 'J')\n           \
    \     count += 1\n            else if (s(i) == 'j' && s(i+1) == 'j' && s(i+2)\
    \ == 'j')\n                count += 1\n            else if (s(i) == 'K' && s(i+1)\
    \ == 'K' && s(i+2) == 'K')\n                count += 1\n            else if (s(i)\
    \ == 'k' && s(i+1) == 'k' && s(i+2) == 'k')\n                count += 1\n    \
    \        ", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val upperIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n                else\n\
    \                    upperIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)\n        upperIndices.toList.foldLeft(0l)(_ + _)", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + i)", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foldLeft(0L) { (acc, i) => acc + (if\
    \ (i % 2 == 0) vowels(i) else 0L) }", "        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I'\
    \ || s(i) == 'O' || s(i) == 'U')\n                count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'B' || s(i) == 'b')\
    \ count += 1\n            if (s(i) == 'C' || s(i) == 'c') count += 1\n       \
    \     if (s(i) == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'E'\
    \ || s(i) == 'e') count += 1\n            if (s(i) == 'F' || s(i) == 'f') count\
    \ += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n        if (count\
    \ % 2 == 0)\n            count\n        else\n            0", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).equals(s.charAt(i))) {\n                if (i % 2 ==\
    \ 0)\n                    evenIndices += i\n            }\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i).toUpper == s(i))\n                    evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l) { (acc, i) => acc + 1 }", "  \
    \      val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        val oddIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(s(i))) evenIndices += i\n  \
    \          else oddIndices += i\n        evenIndices.toSet.count(i => vowels(s(i)))\
    \ % 2 == 0", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \             else\n                    count -= 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)((acc, i) => acc + i)", "        val vowels\
    \ = \"AEIOUaeiou\".toSet\n        val evenIndices = mutable.Set[Int]()\n     \
    \   for (i <- 0 until s.length)\n            if (vowels(s(i))) evenIndices +=\
    \ i\n        evenIndices.toList.count(_ % 2 == 0)", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <-\
    \ 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)) && i % 2 ==\
    \ 0)\n                evenIndices += i\n        evenIndices.toList.size", "  \
    \      val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices_ = mutable.Set[Int]()\n        val evenIndices_2 = mutable.Set[Int]()\n\
    \        val evenIndices_3 = mutable.Set[Int]()\n        val evenIndices_4 = mutable.Set[Int]()\n\
    \        val evenIndices_5 = mutable.Set[Int]()\n        val evenIndices_6 = mutable.Set[Int]()\n\
    \        val evenIndices_7 = mutable.Set[Int]()\n        val evenIndices_8 = mutable.Set[Int]()\n\
    \        val evenIndices_9 = mutable.Set[Int]()\n        val evenIndices_10 =\
    \ mutable.Set[Int]()\n        val evenIndices_11 = mutable.Set[Int]()\n      \
    \  val evenIndices_12 = mutable.Set[Int]()\n        val evenIndices_13 = mutable.Set[Int]()\n\
    \        val evenIndices_14 = mutable.Set[Int]()\n        val evenIndices_15 =\
    \ mutable.Set[Int]()\n        val evenIndices_16 = mutable.Set[Int]()\n      \
    \  val evenIndices_17 = mutable.Set[Int]()\n        val evenIndices_18 = mutable.Set[Int]()\n\
    \        val evenIndices_19 = mutable.Set[Int]()\n        val evenIndices_20 =\
    \ mutable.Set[Int]()\n        val evenIndices_21 = mutable.Set[Int]()\n      \
    \  val evenIndices_22 = mutable.Set[Int]()\n        val evenIndices_23 = mutable.Set[Int]()\n\
    \        val evenIndices_24 = mutable.Set[Int]()\n        val evenIndices_25 =\
    \ mutable.Set[Int]()\n        val evenIndices_26 = mutable.Set[Int]()\n      \
    \  val evenIndices_27 = mutable.Set[Int]()\n        val evenIndices_28 = mutable.Set[Int]()\n\
    \        val evenIndices_29 = mutable.Set[Int]()\n        val evenIndices_30 =\
    \ mutable.Set[Int]()\n        val evenIndices_31 = mutable.Set[Int]()\n      \
    \  val evenIndices_32 = mutable.Set[Int]()\n        val evenIndices_33 = mutable.Set[Int]()\n\
    \        val even", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndicesWithVowels = evenIndices.filter(i\
    \ => vowels(i) % 2 == 0)\n        evenIndicesWithVowels.sum", "        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n   \
    \     val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for(i\
    \ <- 0 until s.length)\n            if(vowels.indexOf(s.charAt(i)) >= 0)\n   \
    \             if(i % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.length",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(s(i)) && s(i) % 2 == 0)\n                evenIndices += i\n   \
    \     evenIndices.toList.foldLeft(0l) { (acc, i) => acc + 1 }", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n\
    \                if (s(i).toUpperCase == \"A\" || s(i).toUpperCase == \"E\" ||\
    \ s(i).toUpperCase == \"I\" || s(i).toUpperCase == \"O\" || s(i).toUpperCase ==\
    \ \"U\")\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + i)", "        val vowels = Set(\"A\", \"a\", \"E\", \"e\", \"I\"\
    , \"i\", \"O\", \"o\", \"U\", \"u\")\n        val evenIndices = s filter (_ %\
    \ 2 == 0)\n        evenIndices.toList.map(vowels.contains).sum", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i).equals(s.charAt(i)) && s.charAt(i) != 'A')\n\
    \                count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) > -1)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A')\n                count += 1\n            if (s(i) ==\
    \ 'a' && s(i+1) == 'a')\n                count += 1\n            if (s(i) == 'E'\
    \ && s(i+1) == 'E')\n                count += 1\n            if (s(i) == 'e' &&\
    \ s(i+1) == 'e')\n                count += 1\n            if (s(i) == 'I' && s(i+1)\
    \ == 'I')\n                count += 1\n            if (s(i) == 'i' && s(i+1) ==\
    \ 'i')\n                count += 1\n            if (s(i) == 'O' && s(i+1) == 'O')\n\
    \                count += 1\n            if (s(i) == 'o' && s(i+1) == 'o')\n \
    \               count += 1\n            if (s(i) == 'U' && s(i+1) == 'U')\n  \
    \              count += 1\n            if (s(i) == 'u' && s(i+1) == 'u')\n   \
    \             count += 1\n            if (s(i) == 'a' && s(i+1) == 'A')\n    \
    \            count += 1\n            if (s(i) == 'A' && s(i+1) == 'a')\n     \
    \           count += 1\n            if (s(i) == 'E' && s(i+1) == 'E')\n      \
    \          count += 1\n            if (s(i) == 'e' && s(i+1) == 'e')\n       \
    \         count += 1\n            if (s(i) == 'I' && s(i+1) == 'I')\n        \
    \        count += 1\n            if (s(i) == 'i' && s(i+1) == 'i')\n         \
    \       count += 1\n            if (s(i) == 'O' && s(i+1) == 'O')\n          \
    \      count += 1\n            if (s(i) == 'o' && s(i+1) == 'o')\n           \
    \     count += 1\n            if (s(i) == 'U' && s(i+1) == 'U')\n            \
    \    count += 1\n            if (s(i) == 'u' && s(i+1) == 'u')\n             \
    \   count += 1\n            if (s(i) == 'a' && s(i+1) == 'A')\n              \
    \  count += 1\n            if (s(i) == 'A' && s(i+1) == 'a')\n               \
    \ count += 1\n            if (s(i) == 'E' && s(i+1) == 'E')\n                count\
    \ += 1\n            if (s(i) == 'e' && s(i+1) == 'e')\n                count +=\
    \ 1\n            if (s(i) == 'I' && s(i+1) == 'I')\n                count += 1\n\
    \            if (s(i) == 'i' && s(i+1) == 'i')\n                count += 1\n \
    \           if (s(i) == 'O' && s(i+1) == 'O')\n                count += 1\n  \
    \          if (s(i) == 'o' && s(i+1) == 'o')\n                count += 1\n   \
    \         if (s(i) == 'U' && s(i+1) == 'U')\n                count += 1\n    \
    \        if (s(i) == 'u' && s(i+1) == 'u')\n                count += 1\n     \
    \       if (s(i) == 'a' && s(i+1) == 'A')\n                count += 1\n      \
    \      if (s(i) == 'A' && s(i+", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.count(i => s.charAt(i) == 'A')", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.length", "        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.size", "      \
    \  var count = 0\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'B' || s(i) == 'b')\
    \ count += 1\n            if (s(i) == 'C' || s(i) == 'c') count += 1\n       \
    \     if (s(i) == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'E'\
    \ || s(i) == 'e') count += 1\n            if (s(i) == 'F' || s(i) == 'f') count\
    \ += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n        if (count\
    \ % 2 == 0) 1 else 0", "        val vowels = \"AEIOUaeiou\".toSet\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.toList.foldLeft(0l) { (acc,\
    \ idx) =>\n            if (idx % 2 == 0) acc + vowels(s(idx)).toLong\n       \
    \     else acc\n        }", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ vowelCount = mutable.Map[Char, Long]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                vowelCount(s.charAt(i))\
    \ += 1\n        vowelCount.filter(_._2 % 2 == 0).map(_._1).sum", "        val\
    \ vowels = \"aeiouAEIOU\"\n        var count = 0\n        var index = 0\n    \
    \    while (index < s.length)\n            if (vowels.indexOf(s.charAt(index))\
    \ >= 0)\n                if (index % 2 == 0)\n                    count += 1\n\
    \            index += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        var count = 0L\n        for (i <- 0 until s.length)\n       \
    \     if (vowels(i).isUpper)\n                count += 1\n            else\n \
    \               if (i % 2 == 0)\n                    count += 1\n            \
    \    else\n                    count -= 1\n        count", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l) { (sum,\
    \ index) => sum + vowels(index) }", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).toUpperCase\
    \ == \"A\" || s(i).toUpperCase == \"E\" || s(i).toUpperCase == \"I\" || s(i).toUpperCase\
    \ == \"O\" || s(i).toUpperCase == \"U\")\n                    evenIndices += i\n\
    \        evenIndices.length", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNext", "        var count = 0L\n       \
    \ var evenIndex = -1\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n\
    \                if (evenIndex % 2 == 0)\n                    count += 1\n   \
    \             else\n                    evenIndex += 1\n        count", "    \
    \    var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) ==\
    \ 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n         \
    \       count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) if (vowels(i) % 2 == 0) evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\")\n        var count = 0\n        for (i <- 0 until\
    \ s.length if i % 2 == 0) {\n            val c = s.charAt(i)\n            if (vowels.contains(c))\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n       \
    \ val vowelCount = evenIndices.count(vowels.contains)\n        vowelCount", " \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n  \
    \      val evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = ", "        val vowels = \"AEIOUaeiou\".toCharArray\n   \
    \     val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i).equals(s.charAt(i)))\n                if (i % 2 == 0)\n    \
    \                evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ +\
    \ _)", "        var count = 0\n        for (i <- 0 until s.length)\n         \
    \   if (s(i) == 'A' && s(i+1) == 'A')\n                count += 1\n          \
    \  else if (s(i) == 'a' && s(i+1) == 'a')\n                count += 1\n      \
    \      else if (s(i) == 'B' && s(i+1) == 'B')\n                count += 1\n  \
    \          else if (s(i) == 'b' && s(i+1) == 'b')\n                count += 1\n\
    \            else if (s(i) == 'C' && s(i+1) == 'C')\n                count +=\
    \ 1\n            else if (s(i) == 'c' && s(i+1) == 'c')\n                count\
    \ += 1\n            else if (s(i) == 'D' && s(i+1) == 'D')\n                count\
    \ += 1\n            else if (s(i) == 'd' && s(i+1) == 'd')\n                count\
    \ += 1\n            else if (s(i) == 'E' && s(i+1) == 'E')\n                count\
    \ += 1\n            else if (s(i) == 'e' && s(i+1) == 'e')\n                count\
    \ += 1\n            else if (s(i) == 'F' && s(i+1) == 'F')\n                count\
    \ += 1\n            else if (s(i) == 'f' && s(i+1) == 'f')\n                count\
    \ += 1\n            else if (s(i) == 'G' && s(i+1) == 'G')\n                count\
    \ += 1\n            else if (s(i) == 'g' && s(i+1) == 'g')\n                count\
    \ += 1\n            else if (s(i) == 'H' && s(i+1) == 'H')\n                count\
    \ += 1\n            else if (s(i) == 'h' && s(i+1) == 'h')\n                count\
    \ += 1\n            else if (s(i) == 'I' && s(i+1) == 'I')\n                count\
    \ += 1\n            else if (s(i) == 'i' && s(i+1) == 'i')\n                count\
    \ += 1\n            else if (s(i) == 'J' && s(i+1) == 'J')\n                count\
    \ += 1\n            else if (s(i) == 'j' && s(i+1) == 'j')\n                count\
    \ += 1\n            else if (s(i) == 'K' && s(i+1) == 'K')\n                count\
    \ += 1\n            else if (s(i) == 'k' && s(i+1) == 'k')\n                count\
    \ += 1\n            else if (s(i) == 'L' && s(i+1) == 'L')\n                count\
    \ += 1\n            else if (s(i) == 'l' && s(i+1) == 'l')\n                count\
    \ += 1\n            else if (s(i) == 'M' && s(i+1) == 'M')\n                count\
    \ += 1\n            else if (s(i) == 'm' && s(i+1) == 'm')\n                count\
    \ += 1\n            else if (s(i) == 'N' && s(i+1) == 'N')\n                count\
    \ += 1\n            else if (s(i) == 'n' && s(i+1) == 'n')\n                count\
    \ += 1\n            else if (s(i) == 'O' && s(i+1) == 'O')\n                count\
    \ += 1\n            else if (s(i) == 'o' && s(i+1) == 'o')\n", "        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'E') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'U') {\n            count += 1\n        }\n        count",
  "        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && i % 2 == 0)\n                evenIndices += i\n        evenIndices.length",
  "        val vowels = Set(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\"\
    , \"U\", \"u\")\n        var count = 0\n        for (i <- 0 until s.length) count\
    \ += vowels(s(i)) match {\n            case true => 1\n            case false\
    \ => 0\n        }\n        count", "        val vowels = \"aeiouAEIOU\"\n    \
    \    var count = 0\n        var i = 0\n        while (i < s.length)\n        \
    \    if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2 == 0)\n\
    \                    count += 1\n            i += 1\n        count", "       \
    \ val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = s filter (_ % 2\
    \ == 0)\n        val upperIndices = evenIndices filter (vowels.contains)\n   \
    \     upperIndices.size + 1", "        val vowels = Set(\"A\", \"E\", \"I\", \"\
    O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0\
    \ until s.length)\n            if (vowels(s(i)))\n                if (s(i) % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        evenIndices.count(vowels.contains)", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i).equals(s.charAt(i)) && s.charAt(i) != 'A')\n\
    \                count += 1\n        count", "        val vowels = \"AEIOUaeiou\"\
    .toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n             \
    \   evenIndices += i\n        evenIndices.toList.foldLeft(0L)(_ + _)", "     \
    \   val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + s.length - i)", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels =\
    \ \"AEIOUaeiou\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).toUpperCase\
    \ == s(i).toLowerCase && s(i) != \"A\" && s(i) != \"E\" && s(i) != \"I\" && s(i)\
    \ != \"O\" && s(i) != \"U\")\n                    count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until s.length){\n            if(vowels(i).equals(s.charAt(i))){\n\
    \                evenIndices += i\n            }\n        }\n        evenIndices.toList.count(_\
    \ % 2 == 0)", "        var count = 0L\n        for (i <- 0 until s.length)\n \
    \           if (s(i) == 'A' && s(i+1) == 'A')\n                count += 1\n  \
    \          if (s(i) == 'a' && s(i+1) == 'a')\n                count += 1\n   \
    \         if (s(i) == 'B' && s(i+1) == 'B')\n                count += 1\n    \
    \        if (s(i) == 'b' && s(i+1) == 'b')\n                count += 1\n     \
    \       if (s(i) == 'C' && s(i+1) == 'C')\n                count += 1\n      \
    \      if (s(i) == 'c' && s(i+1) == 'c')\n                count += 1\n       \
    \     if (s(i) == 'D' && s(i+1) == 'D')\n                count += 1\n        \
    \    if (s(i) == 'd' && s(i+1) == 'd')\n                count += 1\n         \
    \   if (s(i) == 'E' && s(i+1) == 'E')\n                count += 1\n          \
    \  if (s(i) == 'e' && s(i+1) == 'e')\n                count += 1\n           \
    \ if (s(i) == 'F' && s(i+1) == 'F')\n                count += 1\n            if\
    \ (s(i) == 'f' && s(i+1) == 'f')\n                count += 1\n            if (s(i)\
    \ == 'G' && s(i+1) == 'G')\n                count += 1\n            if (s(i) ==\
    \ 'g' && s(i+1) == 'g')\n                count += 1\n            if (s(i) == 'H'\
    \ && s(i+1) == 'H')\n                count += 1\n            if (s(i) == 'h' &&\
    \ s(i+1) == 'h')\n                count += 1\n            if (s(i) == 'I' && s(i+1)\
    \ == 'I')\n                count += 1\n            if (s(i) == 'i' && s(i+1) ==\
    \ 'i')\n                count += 1\n            if (s(i) == 'J' && s(i+1) == 'J')\n\
    \                count += 1\n            if (s(i) == 'j' && s(i+1) == 'j')\n \
    \               count += 1\n            if (s(i) == 'K' && s(i+1) == 'K')\n  \
    \              count += 1\n            if (s(i) == 'k' && s(i+1) == 'k')\n   \
    \             count += 1\n            if (s(i) == 'L' && s(i+1) == 'L')\n    \
    \            count += 1\n            if (s(i) == 'l' && s(i+1) == 'l')\n     \
    \           count += 1\n            if (s(i) == 'M' && s(i+1) == 'M')\n      \
    \          count += 1\n            if (s(i) == 'm' && s(i+1) == 'm')\n       \
    \         count += 1\n            if (s(i) == 'N' && s(i+1) == 'N')\n        \
    \        count += 1\n            if (s(i) == 'n' && s(i+1) == 'n')\n         \
    \       count += 1\n            if (s(i) == 'O' && s(i+1) == 'O')\n          \
    \      count += 1\n            if (s(i) == 'o' && s(i+1) == 'o')\n           \
    \     count += 1\n            if (s(i) == 'P' && s(i+1) == 'P')\n            \
    \    count += 1\n            if (s(i) == 'p' && s(i+1", "        val vowels =\
    \ \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l) { (sum,\
    \ i) =>\n            if (sum > 0) sum + vowels(i)\n            else 0\n      \
    \  }", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) > -1)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.size",
  "        val vowels = Set(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\"\
    , \"U\", \"u\")\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)) && s(i) % 2 == 0)\n                count += 1\n\
    \        count", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i).equals(s.charAt(i)) && i % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.length", "        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A')\n         \
    \       count += 1\n            if (s(i) == 'a' && s(i+1) == 'a')\n          \
    \      count += 1\n            if (s(i) == 'B' && s(i+1) == 'B')\n           \
    \     count += 1\n            if (s(i) == 'b' && s(i+1) == 'b')\n            \
    \    count += 1\n            if (s(i) == 'C' && s(i+1) == 'C')\n             \
    \   count += 1\n            if (s(i) == 'c' && s(i+1) == 'c')\n              \
    \  count += 1\n            if (s(i) == 'D' && s(i+1) == 'D')\n               \
    \ count += 1\n            if (s(i) == 'd' && s(i+1) == 'd')\n                count\
    \ += 1\n            if (s(i) == 'E' && s(i+1) == 'E')\n                count +=\
    \ 1\n            if (s(i) == 'e' && s(i+1) == 'e')\n                count += 1\n\
    \            if (s(i) == 'F' && s(i+1) == 'F')\n                count += 1\n \
    \           if (s(i) == 'f' && s(i+1) == 'f')\n                count += 1\n  \
    \          if (s(i) == 'G' && s(i+1) == 'G')\n                count += 1\n   \
    \         if (s(i) == 'g' && s(i+1) == 'g')\n                count += 1\n    \
    \        if (s(i) == 'H' && s(i+1) == 'H')\n                count += 1\n     \
    \       if (s(i) == 'h' && s(i+1) == 'h')\n                count += 1\n      \
    \      if (s(i) == 'I' && s(i+1) == 'I')\n                count += 1\n       \
    \     if (s(i) == 'i' && s(i+1) == 'i')\n                count += 1\n        \
    \    if (s(i) == 'J' && s(i+1) == 'J')\n                count += 1\n         \
    \   if (s(i) == 'j' && s(i+1) == 'j')\n                count += 1\n          \
    \  if (s(i) == 'K' && s(i+1) == 'K')\n                count += 1\n           \
    \ if (s(i) == 'k' && s(i+1) == 'k')\n                count += 1\n            if\
    \ (s(i) == 'L' && s(i+1) == 'L')\n                count += 1\n            if (s(i)\
    \ == 'l' && s(i+1) == 'l')\n                count += 1\n            if (s(i) ==\
    \ 'M' && s(i+1) == 'M')\n                count += 1\n            if (s(i) == 'm'\
    \ && s(i+1) == 'm')\n                count += 1\n            if (s(i) == 'N' &&\
    \ s(i+1) == 'N')\n                count += 1\n            if (s(i) == 'n' && s(i+1)\
    \ == 'n')\n                count += 1\n            if (s(i) == 'O' && s(i+1) ==\
    \ 'O')\n                count += 1\n            if (s(i) == 'o' && s(i+1) == 'o')\n\
    \                count += 1\n            if (s(i) == 'P' && s(i+1) == 'P')\n \
    \               count += 1\n            if (s(i) == 'p' && s(i+1) == '", "   \
    \     val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.map(vowels.indexOf(_)).sum", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).isUpper)\n\
    \                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        var count = 0\n        for (i <- 0 until s.length)\n       \
    \     if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'B'\
    \ || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c') count\
    \ += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n            if\
    \ (s(i) == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'F' || s(i)\
    \ == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n\
    \        if (count % 2 == 0)\n            count\n        else\n            0",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s filter\
    \ (_ % 2 == 0)\n        val upperIndices = evenIndices filter (vowels.contains)\n\
    \        upperIndices.toList.size", "        val vowels = \"aeiouAEIOU\"\n   \
    \     var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        var count = 0\n        for (i <- 0 until s.length)\n  \
    \          if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper)\n\
    \                count += 1\n            if (s(i).isUpper)\n                count\
    \ += 1\n            if (s(i).isUpper)\n                count += 1\n          \
    \  if (s(i).isUpper)\n                count += 1\n            if (s(i).isUpper",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        var count = 0\n      \
    \  for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n         \
    \       if (i % 2 == 0)\n                    count += 1\n                else\n\
    \                    count -= 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (vowels(i).isUpper)\n                count += 1\n            else\n\
    \                if (vowels(i).isLower)\n                    count += 1\n    \
    \            else\n                    count += 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toCharArray\n        var count =\
    \ 0L\n        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n\
    \                count += s.charAt(i).toUpperCase == s.charAt(i)\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for(i <- 0 until s.length) if(vowels.indexOf(s.charAt(i)) >= 0) evenIndices\
    \ += i\n        evenIndices.toList.count(i => s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n   \
    \     val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n        evenIndices.size", "        val vowels =\
    \ \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).equals(s.charAt(i)) && s.charAt(i) != 'A')\n      \
    \          count += 1\n        count", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l) { (acc, i) =>\n            if\
    \ (i % 2 == 0)\n                acc + 1\n            else\n                acc\n\
    \        }", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (acc, i) =>\n            if (i % 2 == 0)\n                acc + s.charAt(i)\n\
    \        }", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)((acc, i) => acc + i)", "        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n  \
    \              if (s(i).isEven)\n                    count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l) { (sum, i) =>\n            if (sum >\
    \ 0)\n                sum + vowels.indexOf(s.charAt(i)) > 0\n                ?\
    \ vowels.indexOf(s.charAt(i)) > 0\n                : sum\n        }", "      \
    \  val vowels = Set(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"\
    U\", \"u\")\n        var count = 0\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(s(i)) && s(i) % 2 == 0)\n                count += 1\n    \
    \    count", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (s(i).isUpper)\n                count += 1\n     \
    \       else\n                break\n        count / s.length", "        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.size", "      \
    \  val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels(s(i))\
    \ && s(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.size",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n             \
    \   evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "     \
    \   val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s(i).toChar) != -1)\n            \
    \    if (s(i).toChar == 'A' || s(i).toChar == 'E' || s(i).toChar == 'I' || s(i).toChar\
    \ == 'O' || s(i).toChar == 'U')\n                    count += 1\n            \
    \    else\n                    count += 0\n        count - 1", "        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices_ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) > -1)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n                else\n        \
    \            evenIndices_ += i\n        evenIndices.size match {\n           \
    \ case 0 => 0\n            case 1 => evenIndices_.head\n            case _ =>\
    \ evenIndices_.size - evenIndices.size match {\n                case 0 => 0\n\
    \                case 1 => evenIndices_.head\n                case _ => evenIndices_.size\
    \ - evenIndices.size match {\n                    case 0 => evenIndices_.head\n\
    \                    case 1 => evenIndices_.head\n                    case _ =>\
    \ evenIndices_.size - evenIndices.size match {\n                        case 0\
    \ => evenIndices_.head\n                        case 1 => evenIndices_.head\n\
    \                        case _ => evenIndices_.size - evenIndices.size match\
    \ {\n                            case 0 => evenIndices_.head\n               \
    \             case 1 => evenIndices_.head\n                            case _\
    \ => evenIndices_.size - evenIndices.size match {\n                          \
    \      case 0 => evenIndices_.head\n                                case 1 =>\
    \ evenIndices_.head\n                                case _ => evenIndices_.size\
    \ - evenIndices.size match {\n                                    case 0 => evenIndices_.head\n\
    \                                    case 1 => evenIndices_.head\n           \
    \                         case _ => evenIndices_.size - evenIndices.size match\
    \ {\n                                        case 0 => evenIndices_.head\n   \
    \                                     case 1 => evenIndices_.head\n          \
    \                              case _ => evenIndices_.size - evenIndices.size\
    \ match {\n                                            case 0 => evenIndices_.head\n\
    \                                            case 1 => evenIndices_.head\n   \
    \                                         case _ => evenIndices_.size - evenIndices.size\
    \ match {\n                                                case 0 => evenIndices_.head\n\
    \                                                case 1 => evenIndices_.head\n\
    \                                                case _ => evenIndices_.size -\
    \ evenIndices.size match {\n                                                 \
    \   case 0 => evenIndices_.head\n                                            \
    \        case 1 => evenIndices_.head\n                                       \
    \             case _ => evenIndices_.size - evenIndices.size match {\n       \
    \                                                 case 0 => evenIndices_.head\n\
    \                                                        case 1 => evenIndices_.head\n\
    \                                                        case _ => evenIndices_.size\
    \ - evenIndices.size match {\n                                               \
    \             case 0 => evenIndices_.head\n                                  \
    \                          ", "        val vowels = \"aeiouAEIOU\".toList\n  \
    \      val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for (i\
    \ <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n  \
    \              if (i % 2 == 0)\n                    evenIndices += i\n       \
    \ evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = s filter (x => x % 2 == 0) map (x => vowels.indexOf(x))\n    \
    \    evenIndices.toSet.size + (evenIndices.toSet filter (x => vowels.contains(x)).size)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1) evenIndices += i\n        evenIndices.toList.filter(x => x % 2 == 0).length",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s filter\
    \ (_ % 2 == 0)\n        val evenIndices_vowels = evenIndices filter (vowels.contains)\n\
    \        evenIndices_vowels.length", "        val vowels = \"aeiouAEIOU\"\n  \
    \      var count = 0L\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i).toCharArray()(0))\
    \ != -1)\n                count += 1\n        count", "        val vowels = \"\
    AEIOUaeiou\".toSet\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                count += 1\n        count", " \
    \       var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'B' && s(i+1) == 'B')\n                count += 1\n            else if (s(i)\
    \ == 'b' && s(i+1) == 'b')\n                count += 1\n            else if (s(i)\
    \ == 'C' && s(i+1) == 'C')\n                count += 1\n            else if (s(i)\
    \ == 'c' && s(i+1) == 'c')\n                count += 1\n            else if (s(i)\
    \ == 'D' && s(i+1) == 'D')\n                count += 1\n            else if (s(i)\
    \ == 'd' && s(i+1) == 'd')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'e')\n                count += 1\n            else if (s(i)\
    \ == 'F' && s(i+1) == 'F')\n                count += 1\n            else if (s(i)\
    \ == 'f' && s(i+1) == 'f')\n                count += 1\n            else if (s(i)\
    \ == 'G' && s(i+1) == 'G')\n                count += 1\n            else if (s(i)\
    \ == 'g' && s(i+1) == 'g')\n                count += 1\n            else if (s(i)\
    \ == 'H' && s(i+1) == 'H')\n                count += 1\n            else if (s(i)\
    \ == 'h' && s(i+1) == 'h')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'I')\n                count += 1\n            else if (s(i)\
    \ == 'i' && s(i+1) == 'i')\n                count += 1\n            else if (s(i)\
    \ == 'J' && s(i+1) == 'J')\n                count += 1\n            else if (s(i)\
    \ == 'j' && s(i+1) == 'j')\n                count += 1\n            else if (s(i)\
    \ == 'K' && s(i+1) == 'K')\n                count += 1\n            else if (s(i)\
    \ == 'k' && s(i+1) == 'k')\n                count += 1\n            else if (s(i)\
    \ == 'L' && s(i+1) == 'L')\n                count += 1\n            else if (s(i)\
    \ == 'l' && s(i+1) == 'l')\n                count += 1\n            else if (s(i)\
    \ == 'M' && s(i+1) == 'M')\n                count += 1\n            else if (s(i)\
    \ == 'm' && s(i+1) == 'm')\n                count += 1\n            else if (s(i)\
    \ == 'N' && s(i+1) == 'N')\n                count += 1\n            else if (s(i)\
    \ == 'n' && s(i+1) == 'n')\n                count += 1\n            else if (s(i)\
    \ == 'O' && s(i+1) == 'O')\n                count += 1\n            else if (s(i)\
    \ == 'o' && s(i+1) == 'o')\n", "        val vowels = \"aeiouAEIOU\".toList\n \
    \       var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    count += 1\n           \
    \     else\n                    count -= 1\n        count", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (acc, i) => acc + if (i % 2 == 0) 1 else 0 }", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        var count = 0\n        for (i <- 0 until s.length)\n        \
    \    if (vowels(i).equals(s.charAt(i)) && s.charAt(i).toUpper == s.charAt(i))\n\
    \                count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <-\
    \ 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)) && i % 2 ==\
    \ 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i).equals(s.charAt(i)))\n                if (i % 2 == 0)\n    \
    \                evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + i)", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                count += 1\n        count % 2 == 0", "        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices_ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n                else\n                    evenIndices_\
    \ += i\n        evenIndices.toSet.size + (evenIndices_.toSet.size * (evenIndices.toSet.size\
    \ / evenIndices_.toSet.size))", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length) if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until s.length)\n            if(vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                evenIndices += i\n        evenIndices.toList.filter(_\
    \ % 2 == 0).length", "        val vowels = \"aeiouAEIOU\".toCharArray\n      \
    \  val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i) % 2 == 0)\n                evenIndices += i\n     \
    \   evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    \n        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && s.charAt(i) != 'A')\n                count += 1\n        count", "      \
    \  var count = 0\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n         \
    \       count += 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = for (i <- 0 until s.length) yield {\n            if\
    \ (i % 2 == 0) i else s.length\n        }\n        val evenIndices = evenIndices.toSet\n\
    \        val upperCounts = for (i <- 0 until s.length) yield {\n            val\
    \ index = i / 2\n            if (vowels(index).isUpper) 1\n            else 0\n\
    \        }\n        evenIndices.foldLeft(0L) { (sum, index) =>\n            sum\
    \ + (upperCounts(index))\n        }", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        var count = 0L\n        for (i <- 0 until s.length)\n            if (vowels(i)\
    \ % 2 == 0)\n                count += s.length - i\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0L)(_ + _)",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'B' && s(i+1) == 'B' && s(i+2)\
    \ == 'B')\n                count += 1\n            else if (s(i) == 'b' && s(i+1)\
    \ == 'b' && s(i+2) == 'b')\n                count += 1\n            else if (s(i)\
    \ == 'C' && s(i+1) == 'C' && s(i+2) == 'C')\n                count += 1\n    \
    \        else if (s(i) == 'c' && s(i+1) == 'c' && s(i+2) == 'c')\n           \
    \     count += 1\n            else if (s(i) == 'D' && s(i+1) == 'D' && s(i+2)\
    \ == 'D')\n                count += 1\n            else if (s(i) == 'd' && s(i+1)\
    \ == 'd' && s(i+2) == 'd')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'E' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'e' && s(i+2) == 'e')\n           \
    \     count += 1\n            else if (s(i) == 'F' && s(i+1) == 'F' && s(i+2)\
    \ == 'F')\n                count += 1\n            else if (s(i) == 'f' && s(i+1)\
    \ == 'f' && s(i+2) == 'f')\n                count += 1\n            else if (s(i)\
    \ == 'G' && s(i+1) == 'G' && s(i+2) == 'G')\n                count += 1\n    \
    \        else if (s(i) == 'g' && s(i+1) == 'g' && s(i+2) == 'g')\n           \
    \     count += 1\n            else if (s(i) == 'H' && s(i+1) == 'H' && s(i+2)\
    \ == 'H')\n                count += 1\n            else if (s(i) == 'h' && s(i+1)\
    \ == 'h' && s(i+2) == 'h')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'I' && s(i+2) == 'I')\n                count += 1\n    \
    \        else if (s(i) == 'i' && s(i+1) == 'i' && s(i+2) == 'i')\n           \
    \     count += 1\n            else if (s(i) == 'J' && s(i+1) == 'J' && s(i+2)\
    \ == 'J')\n                count += 1\n            else if (s(i) == 'j' && s(i+1)\
    \ == 'j' && s(i+2) == 'j')\n                count += 1\n            else if (s(i)\
    \ == 'K' && s(i+1) == 'K' && s(i+2) == 'K')\n                count += 1\n    \
    \        else if (s(i) == 'k' && s(i+1) == 'k' && s(i+2) == 'k')\n           \
    \     count += 1\n            ", "        val vowels = \"aeiouAEIOU\"\n      \
    \  var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices =\
    \ mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n           \
    \ if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2 == 0)\n   \
    \                 evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n       \
    \ for (i <- 0 until s.length) count += vowels.indexOf(s.charAt(i)) match {\n \
    \           case -1 => 0\n            case i => if (i % 2 == 0) 1 else 0\n   \
    \     }\n        count", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i).isUpper)\n\
    \                evenIndices += i\n        evenIndices.toList.foldLeft(0l) { (acc,\
    \ i) => acc + 1 }", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(s\
    \ => vowels.contains(s.charAt(_)))", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i).equals(s.charAt(i)) && i % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \          count += 1\n        count * s.length", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ < s.length)\n  \
    \      val evenIndices = evenIndices.filter(_ < s.length)\n        ", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) > -1)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i).isUpper)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + i)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels.indexOf(s.charAt(i)) > -1)\n                if (i % 2 == 0)\n \
    \                   evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        val upperIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n            else\n                upperIndices\
    \ += i\n        evenIndices.foreach { i =>\n            if (s(i) != s(i))\n  \
    \              upperIndices.remove(i)\n        }\n        upperIndices.foreach\
    \ { i =>\n            if (s(i) != s(i))\n                evenIndices.remove(i)\n\
    \        }\n        evenIndices.toList.size + (upperIndices.toList.size - evenIndices.toList.size)",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i).toUpper) != -1)\n\
    \                count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (vowels(i) % 2 == 0 && vowels(i) != s.charAt(i))\n              \
    \  count += 1\n        count", "        val vowels = Set(\"A\", \"E\", \"I\",\
    \ \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n     \
    \           evenIndices += i\n        evenIndices.size", "        val vowels =\
    \ \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (sum, i) => sum + vowels(s(i)) }", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = mutable.ListBuffer.empty[Int]\n        for (i <- 0\
    \ until s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels =\
    \ \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l) { (acc, i) =>\n            if\
    \ (i % 2 == 0)\n                acc + 1\n            else\n                acc\n\
    \        }", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.map(_.toLong).sum", "        val vowels = Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.size", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.size", "        val vowels = \"aeiouAEIOU\".toCharArray\n    \
    \    val evenIndices = mutable.Set[Int]()\n        val oddIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n            else\n                oddIndices\
    \ += i\n        val evenCounts = evenIndices.count(i => vowels(i) == 'A')\n  \
    \      val oddCounts = oddIndices.count(i => vowels(i) == 'A')\n        evenCounts\
    \ + oddCounts", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' && s(i+1) == 'A')\n                count += 1\n \
    \           else if (s(i) == 'a' && s(i+1) == 'a')\n                count += 1\n\
    \            else if (s(i) == 'B' && s(i+1) == 'B')\n                count +=\
    \ 1\n            else if (s(i) == 'b' && s(i+1) == 'b')\n                count\
    \ += 1\n            else if (s(i) == 'C' && s(i+1) == 'C')\n                count\
    \ += 1\n            else if (s(i) == 'c' && s(i+1) == 'c')\n                count\
    \ += 1\n            else if (s(i) == 'D' && s(i+1) == 'D')\n                count\
    \ += 1\n            else if (s(i) == 'd' && s(i+1) == 'd')\n                count\
    \ += 1\n            else if (s(i) == 'E' && s(i+1) == 'E')\n                count\
    \ += 1\n            else if (s(i) == 'e' && s(i+1) == 'e')\n                count\
    \ += 1\n            else if (s(i) == 'F' && s(i+1) == 'F')\n                count\
    \ += 1\n            else if (s(i) == 'f' && s(i+1) == 'f')\n                count\
    \ += 1\n            else if (s(i) == 'G' && s(i+1) == 'G')\n                count\
    \ += 1\n            else if (s(i) == 'g' && s(i+1) == 'g')\n                count\
    \ += 1\n            else if (s(i) == 'H' && s(i+1) == 'H')\n                count\
    \ += 1\n            else if (s(i) == 'h' && s(i+1) == 'h')\n                count\
    \ += 1\n            else if (s(i) == 'I' && s(i+1) == 'I')\n                count\
    \ += 1\n            else if (s(i) == 'i' && s(i+1) == 'i')\n                count\
    \ += 1\n            else if (s(i) == 'J' && s(i+1) == 'J')\n                count\
    \ += 1\n            else if (s(i) == 'j' && s(i+1) == 'j')\n                count\
    \ += 1\n            else if (s(i) == 'K' && s(i+1) == 'K')\n                count\
    \ += 1\n            else if (s(i) == 'k' && s(i+1) == 'k')\n                count\
    \ += 1\n            else if (s(i) == 'L' && s(i+1) == 'L')\n                count\
    \ += 1\n            else if (s(i) == 'l' && s(i+1) == 'l')\n                count\
    \ += 1\n            else if (s(i) == 'M' && s(i+1) == 'M')\n                count\
    \ += 1\n            else if (s(i) == 'm' && s(i+1) == 'm')\n                count\
    \ += 1\n            else if (s(i) == 'N' && s(i+1) == 'N')\n                count\
    \ += 1\n            else if (s(i) == 'n' && s(i+1) == 'n')\n                count\
    \ += 1\n            else if (s(i) == 'O' && s(i+1) == 'O')\n                count\
    \ += 1\n            else if (s(i) == 'o' && s(i+1) == 'o')\n", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        val\
    \ evenIndices_ = mutable.Set[Int]()\n        val evenIndices_2 = mutable.Set[Int]()\n\
    \        val evenIndices_3 = mutable.Set[Int]()\n        val evenIndices_4 = mutable.Set[Int]()\n\
    \        val evenIndices_5 = mutable.Set[Int]()\n        val evenIndices_6 = mutable.Set[Int]()\n\
    \        val evenIndices_7 = mutable.Set[Int]()\n        val evenIndices_8 = mutable.Set[Int]()\n\
    \        val evenIndices_9 = mutable.Set[Int]()\n        val evenIndices_10 =\
    \ mutable.Set[Int]()\n        val evenIndices_11 = mutable.Set[Int]()\n      \
    \  val evenIndices_12 = mutable.Set[Int]()\n        val evenIndices_13 = mutable.Set[Int]()\n\
    \        val evenIndices_14 = mutable.Set[Int]()\n        val evenIndices_15 =\
    \ mutable.Set[Int]()\n        val evenIndices_16 = mutable.Set[Int]()\n      \
    \  val evenIndices_17 = mutable.Set[Int]()\n        val evenIndices_18 = mutable.Set[Int]()\n\
    \        val evenIndices_19 = mutable.Set[Int]()\n        val evenIndices_20 =\
    \ mutable.Set[Int]()\n        val evenIndices_21 = mutable.Set[Int]()\n      \
    \  val evenIndices_22 = mutable.Set[Int]()\n        val evenIndices_23 = mutable.Set[Int]()\n\
    \        val evenIndices_24 = mutable.Set[Int]()\n        val evenIndices_25 =\
    \ mutable.Set[Int]()\n        val evenIndices_26 = mutable.Set[Int]()\n      \
    \  val evenIndices_27 = mutable.Set[Int]()\n        val evenIndices_28 = mutable.Set[Int]()\n\
    \        val evenIndices_29 = mutable.Set[Int]()\n        val evenIndices_30 =\
    \ mutable.Set[Int]()\n        val evenIndices_31 = mutable.Set[Int]()\n      \
    \  val evenIndices_32 = mutable.Set[Int]()\n        val evenIndices_33 = mutable.Set[Int]()\n\
    \        val evenIndices_", "        val vowels = \"aeiouAEIOU\".toList\n    \
    \    var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n\
    \                count += 1\n            else\n                count += 0\n  \
    \      count", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                count += 1\n        if (count\
    \ % 2 == 0)\n            count\n        else\n            0L", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        val\
    \ evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n    \
    \        if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n        evenIndices.size", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val evenIndices = evenIndices.map(i => s.charAt(i))\n        val evenIndices\
    \ = evenIndices.filter(c => vowelsSet.contains(c))\n        evenIndices.count(_\
    \ == 'U')", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i).toChar)\
    \ != -1)\n                if (s(i).toChar == 'A' || s(i).toChar == 'E' || s(i).toChar\
    \ == 'I' || s(i).toChar == 'O' || s(i).toChar == 'U')\n                    count\
    \ += 1\n                else\n                    count += 0\n        count",
  "        var count = 0L\n        var evenIndex = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                if (evenIndex % 2 == 0)\n    \
    \                count += 1\n                evenIndex += 1\n        evenIndex\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n  \
    \              if (evenIndex % 2 == 1)\n                    count += 1\n     \
    \           evenIndex += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s(i).toChar) != -1)\n            \
    \    if (s(i).toChar == 'A' || s(i).toChar == 'E' || s(i).toChar == 'I' || s(i).toChar\
    \ == 'O' || s(i).toChar == 'U')\n                    evenIndices += i\n      \
    \  evenIndices.toList.foldLeft(0l)((acc, i) => acc + i)", "        val vowels\
    \ = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) > -1)\n\
    \                if (s(i).isUpper)\n                    evenIndices += i\n   \
    \     evenIndices.toList.foldLeft(0l)((acc, i) => acc + i)"]
stop_tokens:
- "\n    }\n"
