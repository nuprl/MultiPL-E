name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>>\
  \ countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n  \
  \  // (0l)\n    def countUpper(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val upperIndices = mutable.ListBuffer[Int]()\n        for(i <- 0 until\
    \ s.length)\n            if(vowels.indexOf(s.charAt(i)) >= 0)\n              \
    \  if(i % 2 == 0)\n                    evenIndices += i\n                else\n\
    \                    upperIndices += i\n        evenIndices.toList.map(evenIndices.indexOf(_)).sum",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = evenIndices.filter(i => i % 2 == 0)\n  \
    \      val evenIndices = evenIndices.map(i => vowels(i))\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'x')\n        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'X')\n\
    \        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'y')\n     \
    \   val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Y')\n        val\
    \ evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'Z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n\
    \        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n     \
    \   val evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n        val\
    \ evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n\
    \        val evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n     \
    \   val evenIndices = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val\
    \ evenIndices = evenIndices.filter(i => s.charAt(i) != 'z')\n        val evenIndices\
    \ = evenIndices.filter(i => s.charAt(i) != 'Z')\n        val evenIndices = evenIndices.filter(i\
    \ => s.charAt(i) != 'z')\n        val evenIndices = evenIndices.filter(i => s.charAt(i)\
    \ != 'Z')\n        val evenIndices = ", "        val vowels = \"AEIOUaeiou\"\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n        evenIndices.size", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"AEIOUaeiou\".toCharArray\n        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n\
    \                if (s(i) == 'a')\n                    count += 1\n          \
    \      else if (s(i) == 'e')\n                    count += 1\n               \
    \ else if (s(i) == 'i')\n                    count += 1\n                else\
    \ if (s(i) == 'o')\n                    count += 1\n                else if (s(i)\
    \ == 'u')\n                    count += 1\n                else if (s(i) == 'A')\n\
    \                    count += 1\n                else if (s(i) == 'E')\n     \
    \               count += 1\n                else if (s(i) == 'I')\n          \
    \          count += 1\n                else if (s(i) == 'O')\n               \
    \     count += 1\n                else if (s(i) == 'U')\n                    count\
    \ += 1\n                else\n                    count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        val evenIndices_ = mutable.Set[Int]()\n      \
    \  for (i <- 0 until s.length)\n            if (vowels(s(i)))\n              \
    \  if (s(i) % 2 == 0)\n                    evenIndices += i\n                else\n\
    \                    evenIndices_ += i\n        evenIndices_.size match {\n  \
    \          case 0 => 0\n            case _ => evenIndices.size match {\n     \
    \           case 0 => 0\n                case _ => evenIndices.count(_ % 2 ==\
    \ 0)\n            }\n        }", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val evenIndices = mutable.ListBuffer[Int]()\n        val evenIndices_ = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                evenIndices += i\n            if (evenIndices.contains(i)\
    \ && s(i).isUpper)\n                evenIndices_ += i\n        evenIndices_.length",
  "        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.length", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield {\n            if (i % 2 == 0) Some(i)\n            else None\n      \
    \  }\n        evenIndices.foldLeft(0l) { (acc, i) =>\n            vowels.count(_.toUpperCase\
    \ == s.charAt(i)) match {\n                case 0 => acc + 1\n               \
    \ case _ => acc\n            }\n        }", "        val vowels = Set(\"A\", \"\
    E\", \"I\", \"O\", \"U\")\n        val even = s.toList.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val upper = even.filter(vowels.contains).length\n\
    \        upper", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n\
    \        val evenIndices = mutable.Set[Int]()\n        val oddIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n          \
    \      else\n                    oddIndices += i\n        evenIndices.toSet.size\
    \ + (oddIndices.toSet.size - evenIndices.toSet.size) * vowels.size", "       \
    \ val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \      evenIndices.size", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n    \
    \    val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i) % 2 == 0)\n                evenIndices += i\n     \
    \   evenIndices.toList.count(i => s(i).isUpper)", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        val evenIndicesWithVowels\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0)\n        val evenIndicesWithoutVowels\
    \ = evenIndices.map(i => if (vowels(i)) 0 else 1)\n        val evenIndicesWithoutVowelsCount\
    \ = evenIndices.map(i => if (vowels(i)) 0 else 1).sum\n        val evenIndicesWithVowelsCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).sum\n        val evenIndicesWithVowelsAndEvenIndices\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).map(x => x._1\
    \ + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesCount = evenIndices.map(i\
    \ => if (vowels(i)) 1 else 0).zip(evenIndices).map(x => x._1 + x._2).sum\n   \
    \     val evenIndicesWithVowelsAndEvenIndicesAndEvenIndices = evenIndices.map(i\
    \ => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).map(x => x._1\
    \ + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndices\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndicesCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndicesAndEvenIndices\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).zip(evenIndices).map(x\
    \ => x._1 + x._2).sum\n        val evenIndicesWithVowelsAndEvenIndicesAndEvenIndicesAndEvenIndicesAndEvenIndicesCount\
    \ = evenIndices.map(i => if (vowels(i)) 1 else 0).zip(evenIndices).zip(evenIndices).zip(evenIndices).zip(evenIndice",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val evenIndices_ = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).toUpperCase\
    \ == \"A\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"E\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"I\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"O\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"U\")\n                    evenIndices += i\n                else if (s(i).toUpperCase\
    \ == \"A\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"E\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"I\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"O\")\n                    evenIndices_ += i\n                else if (s(i).toUpperCase\
    \ == \"U\")\n                    evenIndices_ += i\n        evenIndices.toList.map(evenIndices_\
    \ += _).sum", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)"]
stop_tokens:
- "\n    }\n"
