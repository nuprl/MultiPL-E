language: scala
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = mutable.HashMap[String, Int]()\n        for (openingBracket\
    \ <- openingBrackets) {\n            val closingBracketIndex = openingBracket.lastIndexOf(\"\
    \\\\)\")\n            val closingBracket = openingBracket.substring(closingBracketIndex\
    \ + 1)\n            val closingBracketCount = openingBracketsMap.get(closingBracket)\n\
    \            if (closingBracketCount == null) {\n                openingBracketsMap.put(closingBracket,\
    \ 1)\n            } else {\n                openingBracketsMap.put(closingBracket,\
    \ closingBracketCount + 1)\n            }\n        }\n        val closingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        for (closingBracket <- closingBrackets)\
    \ {\n            val openingBracketIndex = closingBracket.lastIndexOf(\"\\\\(\"\
    )\n            val openingBracket = closingBracket.substring(openingBracketIndex\
    \ + 1)\n            val openingBracketCount = closingBracketsMap.get(openingBracket)\n\
    \            if (openingBracketCount == null) {\n                closingBracketsMap.put(openingBracket,\
    \ 1)\n            } else {\n                closingBracketsMap.put(openingBracket,\
    \ openingBracketCount + 1)\n            }\n        }\n        for (openingBracket\
    \ <- openingBracketsMap.keys) {\n            val closingBracketCount = closingBracketsMap.get(openingBracket)\n\
    \            if (closingBracketCount != openingBracketsMap.get(openingBracket))\
    \ {\n                return false\n            }\n        }\n        true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj554gtrd.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj554gtrd.scala:33:33 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795196
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qvkqb1p.scala:24)\n\tat Problem.main(tmp5qvkqb1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795198
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qvkqb1p.scala:24)\n\tat Problem.main(tmp5qvkqb1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = mutable.Stack[String]()\n        val bracketMap = new\
    \ mutable.HashMap[String, String]()\n        brackets.split(\"\\\\(\").foreach(x\
    \ => stack += x)\n        while(stack.nonEmpty) {\n            val x = stack.pop()\n\
    \            val y = stack.pop()\n            val bracket = bracketMap.getOrElse(x\
    \ + \"|\" + y, \"\")\n            if(bracket.nonEmpty) {\n                bracketMap\
    \ += x + \"|\" + y -> bracket\n                stack += bracket\n            }\n\
    \        }\n        !bracketMap.nonEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm30btchd.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm30btchd.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbracketMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = mutable.Stack[String]()\n        for (i <- 0 until\
    \ brackets.length)\n            if (brackets(i) == '(')\n                stack.push(brackets(i))\n\
    \            else if (brackets(i) == ')')\n                stack.pop\n       \
    \     else\n                false\n        stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvofuuu6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795195
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnkvq59d.scala:22)\n\tat Problem.main(tmprnkvq59d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBrackets\
    \ = bracketsArray.filter(x => x != \")\")\n        val closingBrackets = bracketsArray.filter(x\
    \ => x != \")\")\n        val openingBracketsCount = openingBrackets.size\n  \
    \      val closingBracketsCount = closingBrackets.size\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptkendbv0.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x != \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmptkendbv0.scala:17:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x != \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var currentBracket = bracketsArray(0)\n\
    \        var currentBracketIndex = 0\n        var currentBracketOpeningIndex =\
    \ 0\n        var currentBracketClosingIndex = 0\n        for(i <- 1 to bracketsArray.length){\n\
    \            currentBracket = bracketsArray(i)\n            currentBracketIndex\
    \ = i\n            currentBracketOpeningIndex = openingBrackets\n            currentBracketClosingIndex\
    \ = closingBrackets\n            openingBrackets = currentBracketIndex\n     \
    \       closingBrackets = currentBracketIndex\n            currentBracket = bracketsArray(i)\n\
    \            currentBracketIndex = i\n            currentBracketOpeningIndex =\
    \ openingBrackets\n            currentBracketClosingIndex = closingBrackets\n\
    \            openingBrackets = currentBracketIndex\n            closingBrackets\
    \ = currentBracketIndex\n        }\n        openingBrackets == closingBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.correctBracketing$$anonfun$1(tmp9y98bac6.scala:23)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.correctBracketing(tmp9y98bac6.scala:35)\n\
    \tat Problem$.main(tmp9y98bac6.scala:39)\n\tat Problem.main(tmp9y98bac6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44q25_7d.scala:26)\n\tat Problem.main(tmp44q25_7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnkvq59d.scala:22)\n\tat Problem.main(tmprnkvq59d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezgkmyas.scala:22)\n\tat Problem.main(tmpezgkmyas.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44q25_7d.scala:26)\n\tat Problem.main(tmp44q25_7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezgkmyas.scala:22)\n\tat Problem.main(tmpezgkmyas.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = openingBrackets.toMap\n        val closingBracketsMap =\
    \ closingBrackets.toMap\n        val openingBracketsKeys = openingBracketsMap.keys\n\
    \        val closingBracketsKeys = closingBracketsMap.keys\n        val openingBracketsValues\
    \ = openingBracketsMap.values.toList\n        val closingBracketsValues = closingBracketsMap.values.toList\n\
    \        val openingBracketsKeysCount = openingBracketsKeys.length\n        val\
    \ closingBracketsKeysCount = closingBracketsKeys.length\n        val openingBracketsValuesCount\
    \ = openingBracketsValues.length\n        val closingBracketsValuesCount = closingBracketsValues.length\n\
    \        if (openingBracketsKeysCount != openingBracketsValuesCount) {\n     \
    \       return false\n        }\n        if (openingBracketsKeysCount != closingBracketsKeysCount)\
    \ {\n            return false\n        }\n        val openingBracketsKeysMap =\
    \ openingBracketsKeys.toMap\n        val closingBracketsKeysMap = closingBracketsKeys.toMap\n\
    \        val openingBracketsValuesMap = openingBracketsValues.toMap\n        val\
    \ closingBracketsValuesMap = closingBracketsValues.toMap\n        val openingBracketsKeysMapKeys\
    \ = openingBracketsKeysMap.keys\n        val closingBracketsKeysMapKeys = closingBracketsKeysMap.keys\n\
    \        val openingBracketsKeysMapValues = openingBracketsKeysMap.values.toList\n\
    \        val closingBracketsKeysMapValues = closingBracketsKeysMap.values.toList\n\
    \        val openingBracketsKeysMapValuesCount = openingBracketsKeysMapValues.length\n\
    \        val closingBracketsKeysMapValuesCount = closingBracketsKeysMapValues.length\n\
    \        if (openingBracketsKeysMapValuesCount != openingBracketsValuesCount)\
    \ {\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_tbvb159.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp_tbvb159.scala:22:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = openingBrackets.toMap\n\e[31m\e[31m   |\e[0m                             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \         Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                     where:    K is a type variable\n\e[31m \
    \  |\e[0m                                               V is a type variable\n\
    \e[31m   |\e[0m                                     .\n\e[31m\e[31m-- Error: /tmp/tmp_tbvb159.scala:23:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = closingBrackets.toMap\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                     Cannot prove that String <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \  where:    K is a type variable\n\e[31m   |\e[0m                           \
    \                    V is a type variable\n\e[31m   |\e[0m                   \
    \                  .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tbvb159.scala:65:1\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp_tbvb159.scala:50:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftavuw50.scala:22)\n\tat Problem.main(tmpftavuw50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsSet = brackets.toSet\n        val openingBrackets =\
    \ bracketsSet.filter(_ == \"(\")\n        val closingBrackets = bracketsSet.filter(_\
    \ == \")\")\n        openingBrackets.size == closingBrackets.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0z9_be25.scala:16:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsSet.filter(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp0z9_be25.scala:17:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsSet.filter(_ == \e[31m\"\
    )\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qvkqb1p.scala:24)\n\tat Problem.main(tmp5qvkqb1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795198
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnkvq59d.scala:22)\n\tat Problem.main(tmprnkvq59d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '(').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == ')').length\n        openingBracketsCount != closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi597ug_b.scala:22)\n\tat Problem.main(tmpi597ug_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
    )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qvkqb1p.scala:24)\n\tat Problem.main(tmp5qvkqb1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795198
