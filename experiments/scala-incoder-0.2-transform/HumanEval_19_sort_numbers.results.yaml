language: scala
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        val sortedString = sortedList.mkString(\"\
    \ \")\n        sortedString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4m9wlt17.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp4m9wlt17.scala:10)\n\
    \tat Problem$.main(tmp4m9wlt17.scala:16)\n\tat Problem.main(tmp4m9wlt17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers\
    \ = numberList.sortWith(_ < _)\n        sortedNumbers.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp6qzj6e0z.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp6qzj6e0z.scala:10)\n\
    \tat Problem$.main(tmp6qzj6e0z.scala:15)\n\tat Problem.main(tmp6qzj6e0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").toList\n        val sortedNumbers = numberList.sortBy(_.toInt)\n\
    \        sortedNumbers.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp5z18imix.scala:11)\n\
    \tat scala.math.Ordering$$anon$1.compare(Ordering.scala:141)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.SeqOps.sorted(Seq.scala:700)\n\tat scala.collection.SeqOps.sorted$(Seq.scala:692)\n\
    \tat scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.List.sorted(List.scala:79)\n\tat scala.collection.SeqOps.sortBy(Seq.scala:754)\n\
    \tat scala.collection.SeqOps.sortBy$(Seq.scala:754)\n\tat scala.collection.AbstractSeq.sortBy(Seq.scala:1161)\n\
    \tat Problem$.sortNumbers(tmp5z18imix.scala:11)\n\tat Problem$.main(tmp5z18imix.scala:17)\n\
    \tat Problem.main(tmp5z18imix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassL"
  stdout: ''
  timestamp: 1659798498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        sortedList.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpon8kkb2x.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpon8kkb2x.scala:10)\n\
    \tat Problem$.main(tmpon8kkb2x.scala:15)\n\tat Problem.main(tmpon8kkb2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers\
    \ = numberList.sortWith(_ < _)\n        sortedNumbers.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp6qzj6e0z.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp6qzj6e0z.scala:10)\n\
    \tat Problem$.main(tmp6qzj6e0z.scala:15)\n\tat Problem.main(tmp6qzj6e0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers\
    \ = numberList.sortBy(_.toInt)\n        val sortedNumberString = sortedNumbers.mkString(\"\
    \ \")\n        sortedNumberString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpt9wk1lnu.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpt9wk1lnu.scala:10)\n\
    \tat Problem$.main(tmpt9wk1lnu.scala:16)\n\tat Problem.main(tmpt9wk1lnu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").toList\n        val sortedNumbers = numberList.sortWith(_\
    \ < _)\n        sortedNumbers.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpize3hi3u.scala:17)\n\tat Problem.main(tmpize3hi3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        sortedList.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2at11vej.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp2at11vej.scala:10)\n\
    \tat Problem$.main(tmp2at11vej.scala:15)\n\tat Problem.main(tmp2at11vej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").toList\n        val sortedNumbers = numberList.sortWith(_\
    \ < _)\n        sortedNumbers.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpize3hi3u.scala:17)\n\tat Problem.main(tmpize3hi3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        val sortedString = sortedList.mkString(\"\
    \ \")\n        sortedString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4m9wlt17.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp4m9wlt17.scala:10)\n\
    \tat Problem$.main(tmp4m9wlt17.scala:16)\n\tat Problem.main(tmp4m9wlt17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        sortedList.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2at11vej.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp2at11vej.scala:10)\n\
    \tat Problem$.main(tmp2at11vej.scala:15)\n\tat Problem.main(tmp2at11vej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        sortedList.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2at11vej.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp2at11vej.scala:10)\n\
    \tat Problem$.main(tmp2at11vej.scala:15)\n\tat Problem.main(tmp2at11vej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberArray = numbers.split(\" \").map(_.toInt)\n        val sortedArray\
    \ = numberArray.sortWith(_ < _)\n        val sortedString = sortedArray.toString\n\
    \        sortedString\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4gxzib4o.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp4gxzib4o.scala:10)\n\
    \tat Problem$.main(tmp4gxzib4o.scala:16)\n\tat Problem.main(tmp4gxzib4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        val sortedString = sortedList.mkString(\"\
    \ \")\n        sortedString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4m9wlt17.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp4m9wlt17.scala:10)\n\
    \tat Problem$.main(tmp4m9wlt17.scala:16)\n\tat Problem.main(tmp4m9wlt17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt).toList\n        val sortedNumbers\
    \ = numberList.sortWith(_ < _)\n        sortedNumbers.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpp7t4465h.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp7t4465h.scala:10)\n\
    \tat Problem$.main(tmpp7t4465h.scala:15)\n\tat Problem.main(tmpp7t4465h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt).toList\n        val sortedList\
    \ = numberList.sortBy(_.toInt)\n        val sortedString = sortedList.mkString(\"\
    \ \")\n        sortedString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxhza_6tb.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpxhza_6tb.scala:10)\n\
    \tat Problem$.main(tmpxhza_6tb.scala:16)\n\tat Problem.main(tmpxhza_6tb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers\
    \ = numberList.sortWith(_ < _)\n        val result = sortedNumbers.mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpbdz_qfex.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpbdz_qfex.scala:10)\n\
    \tat Problem$.main(tmpbdz_qfex.scala:16)\n\tat Problem.main(tmpbdz_qfex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").toList\n        val sortedNumbers = numberList.sortWith(_\
    \ < _)\n        sortedNumbers.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpize3hi3u.scala:17)\n\tat Problem.main(tmpize3hi3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        sortedList.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpon8kkb2x.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpon8kkb2x.scala:10)\n\
    \tat Problem$.main(tmpon8kkb2x.scala:15)\n\tat Problem.main(tmpon8kkb2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedList\
    \ = numberList.sortWith(_ < _)\n        sortedList.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpon8kkb2x.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpon8kkb2x.scala:10)\n\
    \tat Problem$.main(tmpon8kkb2x.scala:15)\n\tat Problem.main(tmpon8kkb2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798349
