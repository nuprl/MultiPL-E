name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n\
  \    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        var max = 0\n        var min = 0\n        var even = 0\n  \
    \      var odd = 0\n        var evenMax = 0\n        var oddMax = 0\n        var\
    \ evenMin = 0\n        var oddMin = 0\n        var evenMaxIndex = 0\n        var\
    \ oddMaxIndex = 0\n        var evenMinIndex = 0\n        var oddMinIndex = 0\n\
    \        var evenMaxCount = 0\n        var oddMaxCount = 0\n        var evenMinCount\
    \ = 0\n        var oddMinCount = 0\n        var evenMaxCountIndex = 0\n      \
    \  var oddMaxCountIndex = 0\n        var evenMinCountIndex = 0\n        var oddMinCountIndex\
    \ = 0\n        var evenMaxCountCount = 0\n        var oddMaxCountCount = 0\n \
    \       var evenMinCountCount = 0\n        var oddMinCountCount = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCount", "        val evens = mutable.Set[Long]()\n        val odds =\
    \ mutable.Set[Long]()\n        val evensCount = mutable.Set[Long]()\n        val\
    \ oddsCount = mutable.Set[Long]()\n        val evensCount2 = mutable.Set[Long]()\n\
    \        val oddsCount2 = mutable.Set[Long]()\n        val evensCount3 = mutable.Set[Long]()\n\
    \        val oddsCount3 = mutable.Set[Long]()\n        val evensCount4 = mutable.Set[Long]()\n\
    \        val oddsCount4 = mutable.Set[Long]()\n        val evensCount5 = mutable.Set[Long]()\n\
    \        val oddsCount5 = mutable.Set[Long]()\n        val evensCount6 = mutable.Set[Long]()\n\
    \        val oddsCount6 = mutable.Set[Long]()\n        val evensCount7 = mutable.Set[Long]()\n\
    \        val oddsCount7 = mutable.Set[Long]()\n        val evensCount8 = mutable.Set[Long]()\n\
    \        val oddsCount8 = mutable.Set[Long]()\n        val evensCount9 = mutable.Set[Long]()\n\
    \        val oddsCount9 = mutable.Set[Long]()\n        val evensCount10 = mutable.Set[Long]()\n\
    \        val oddsCount10 = mutable.Set[Long]()\n        val evensCount11 = mutable.Set[Long]()\n\
    \        val oddsCount11 = mutable.Set[Long]()\n        val evensCount12 = mutable.Set[Long]()\n\
    \        val oddsCount12 = mutable.Set[Long]()\n        val evensCount13 = mutable.Set[Long]()\n\
    \        val oddsCount13 = mutable.Set[Long]()\n        val evensCount14 = mutable.Set[Long]()\n\
    \        val oddsCount14 = mutable.Set[Long]()\n        val evensCount15 = mutable.Set[Long]()\n\
    \        val oddsCount15 = mutable.Set[Long]()\n        val evensCount16 = mutable.Set[Long]()\n\
    \        val oddsCount16 = mutable.Set[Long]()\n        val evensCount17 = mutable.Set[Long]()\n\
    \        val oddsCount17 = mutable.Set[Long]()\n        val evens", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n      \
    \  val evensAndOddsAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n     \
    \   val evensAndOddsAndOddsAndEvensAndOddsAndEvens = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvens = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOdd", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val evensCount\
    \ = mutable.Set[Long]()\n        val oddsCount = mutable.Set[Long]()\n       \
    \ val evensCount2 = mutable.Set[Long]()\n        val oddsCount2 = mutable.Set[Long]()\n\
    \        val evensCount3 = mutable.Set[Long]()\n        val oddsCount3 = mutable.Set[Long]()\n\
    \        val evensCount4 = mutable.Set[Long]()\n        val oddsCount4 = mutable.Set[Long]()\n\
    \        val evensCount5 = mutable.Set[Long]()\n        val oddsCount5 = mutable.Set[Long]()\n\
    \        val evensCount6 = mutable.Set[Long]()\n        val oddsCount6 = mutable.Set[Long]()\n\
    \        val evensCount7 = mutable.Set[Long]()\n        val oddsCount7 = mutable.Set[Long]()\n\
    \        val evensCount8 = mutable.Set[Long]()\n        val oddsCount8 = mutable.Set[Long]()\n\
    \        val evensCount9 = mutable.Set[Long]()\n        val oddsCount9 = mutable.Set[Long]()\n\
    \        val evensCount10 = mutable.Set[Long]()\n        val oddsCount10 = mutable.Set[Long]()\n\
    \        val evensCount11 = mutable.Set[Long]()\n        val oddsCount11 = mutable.Set[Long]()\n\
    \        val evensCount12 = mutable.Set[Long]()\n        val oddsCount12 = mutable.Set[Long]()\n\
    \        val evensCount13 = mutable.Set[Long]()\n        val oddsCount13 = mutable.Set[Long]()\n\
    \        val evensCount14 = mutable.Set[Long]()\n        val oddsCount14 = mutable.Set[Long]()\n\
    \        val evensCount15 = mutable.Set[Long]()\n        val oddsCount15 = mutable.Set[Long]()\n\
    \        val evensCount16 = mutable.Set[Long]()\n        val oddsCount16 = mutable.Set[Long]()\n\
    \        val evensCount17 = mutable.Set[Long]()\n        val oddsCount17 = mutable.Set[Long]()\n\
    \        val evens", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = (x to y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else -1", "        val\
    \ evens = x to y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n    \
    \    if (evensCount == 0) {\n            -1\n        } else {\n            evens.max\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n   \
    \     val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSorted = evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < ",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n \
    \       val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n  \
    \      val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSet", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evensCount = mutable.Set[Long]()\n\
    \        val oddsCount = mutable.Set[Long]()\n        val evensCount2 = mutable.Set[Long]()\n\
    \        val oddsCount2 = mutable.Set[Long]()\n        val evensCount3 = mutable.Set[Long]()\n\
    \        val oddsCount3 = mutable.Set[Long]()\n        val evensCount4 = mutable.Set[Long]()\n\
    \        val oddsCount4 = mutable.Set[Long]()\n        val evensCount5 = mutable.Set[Long]()\n\
    \        val oddsCount5 = mutable.Set[Long]()\n        val evensCount6 = mutable.Set[Long]()\n\
    \        val oddsCount6 = mutable.Set[Long]()\n        val evensCount7 = mutable.Set[Long]()\n\
    \        val oddsCount7 = mutable.Set[Long]()\n        val evensCount8 = mutable.Set[Long]()\n\
    \        val oddsCount8 = mutable.Set[Long]()\n        val evensCount9 = mutable.Set[Long]()\n\
    \        val oddsCount9 = mutable.Set[Long]()\n        val evensCount10 = mutable.Set[Long]()\n\
    \        val oddsCount10 = mutable.Set[Long]()\n        val evensCount11 = mutable.Set[Long]()\n\
    \        val oddsCount11 = mutable.Set[Long]()\n        val evensCount12 = mutable.Set[Long]()\n\
    \        val oddsCount12 = mutable.Set[Long]()\n        val evensCount13 = mutable.Set[Long]()\n\
    \        val oddsCount13 = mutable.Set[Long]()\n        val evensCount14 = mutable.Set[Long]()\n\
    \        val oddsCount14 = mutable.Set[Long]()\n        val evensCount15 = mutable.Set[Long]()\n\
    \        val oddsCount15 = mutable.Set[Long]()\n        val evensCount16 = mutable.Set[Long]()\n\
    \        val oddsCount16 = mutable.Set[Long]()\n        val evensCount17 = mutable.Set[Long]()\n\
    \        val oddsCount17 = mutable.Set[Long]()\n        val evens", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val range = (x to y).filter(_ % 2 == 0)\n        range.foreach(x => if (x %\
    \ 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 == 1) odds += x)\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even <\
    \ odd) even else -1", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n \
    \       val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax > oddMax)\n            evenMax\n        else\n          \
    \  oddMax", "        val evens = x until y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) {\n            return -1\n        }\n\
    \        val evensMax = evens.max\n        if (evensMax % 2 == 0) {\n        \
    \    return evensMax\n        }\n        val evensMin = evens.min\n        if\
    \ (evensMin % 2 == 0) {\n            return evensMin\n        }\n        val evensSum\
    \ = evens.sum\n        if (evensSum % 2 == 0) {\n            return evensSum\n\
    \        }\n        val evensProduct = evens.product\n        if (evensProduct\
    \ % 2 == 0) {\n            return evensProduct\n        }\n        val evensProductSum\
    \ = evensProduct.sum\n        if (evensProductSum % 2 == 0) {\n            return\
    \ evensProductSum\n        }\n        val evensProductProduct = evensProduct.product\n\
    \        if (evensProductProduct % 2 == 0) {\n            return evensProductProduct\n\
    \        }\n        val evensProductProductSum = evensProductProduct.sum\n   \
    \     if (evensProductProductSum % 2 == 0) {\n            return evensProductProductSum\n\
    \        }\n        val evensProductProductProduct = evensProductProduct.product\n\
    \        if (evensProductProductProduct % 2 == 0) {\n            return evensProductProductProduct\n\
    \        }\n        val evensProductProductProductSum = evensProductProductProduct.sum\n\
    \        if (evensProductProductProductSum % 2 == 0) {\n            return evensProductProductProductSum\n\
    \        }\n        val evensProductProductProductProduct = evensProductProductProduct.product\n\
    \        if (evensProductProductProductProduct % 2 == 0) {\n            return\
    \ evensProductProductProductProduct\n        }\n        val evensProductProductProductProductSum\
    \ = evensProductProductProductProduct.sum\n        if (evensProductProductProductProductSum\
    \ % 2 == 0) {\n            return evensProductProductProductProductSum\n     \
    \   }\n        val evensProductProductProductProductProduct = evensProductProductProductProduct.product\n\
    \        if (evensProductProductProductProductProduct % 2 == 0) {\n          \
    \  return evensProductProductProductProductProduct\n        }\n        val evensProductProductProductProductProductSum\
    \ = evensProductProductProductProductProduct.sum\n        if (evensProductProductProductProductProductSum\
    \ % 2 == 0) {\n            return evensProductProductProductProductProductSum\n\
    \        }\n        val evensProductProductProductProductProductProduct = evensProductProductProductProductProduct.product\n\
    \        if (evensProductProductProductProductProductProduct % 2 == 0) {\n   \
    \         return evensProductProductProductProductProductProduct\n        }\n\
    \        val ", "        val evens = x filter (_ % 2 == 0)\n        val odds =\
    \ x filter (_ % 2 != 0)\n        if (evens.isEmpty) -1\n        else if (evens.size\
    \ == 1) evens.head\n        else if (evens.size == 2) evens.head + evens.last\n\
    \        else if (evens.size == 3) evens.head + evens.last + evens.last\n    \
    \    else if (evens.size == 4) evens.head + evens.last + evens.last + evens.last\n\
    \        else if (evens.size == 5) evens.head + evens.last + evens.last + evens.last\
    \ + evens.last\n        else if (evens.size == 6) evens.head + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last\n        else if (evens.size == 7) evens.head\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\n\
    \        else if (evens.size == 8) evens.head + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last\n        else if (evens.size\
    \ == 9) evens.head + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last\n        else if (evens.size\
    \ == 10) evens.head + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last\n        else\
    \ if (evens.size == 11) evens.head + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last\n        else if (evens.size == 12) evens.head + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last\n        else if (evens.size\
    \ == 13) evens.head + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last\n        else if (evens.size == 14) evens.head + evens.last\
    \ + evens.last + evens.last + evens.last + even", "        val evens = x to y\
    \ by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ > 0) {\n            evens.max\n        } else {\n            -1\n        }",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenAndOdd = mutable.ListBuffer[Long]()\n        val evenAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenAndOddsSum = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSums = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSum = mutable.ListBuffer[Long]()\n        val\
    \ evenAndOddsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n   \
    \     val evenAndOddsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n     \
    \   val evenAndOddsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n    \
    \    val evenAndOddsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n  \
    \      val evenAndOddsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.List", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n      \
    \  val evensAndOddsAndEvensAndOddsAndEvens = mutable.ListBuffer[Long]()\n    \
    \    val evensAndOddsAndEvensAndOddsAndOdds = mutable.ListBuffer[Long]()\n   \
    \     val evensAndOddsAndEvensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndO",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer", "        val evens = for (i <- 1 to y) yield {\n    \
    \        if (i % 2 == 0) i\n            else -1\n        }\n        val even =\
    \ evens.max\n        if (even >= x) even else -1", "        val evens = x to y\
    \ by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) -1\n        else evens.max", "        val evens = x to y by 2\n      \
    \  val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_\
    \ % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = x filter (_ % 2 == 0)\n        val odds = x\
    \ filter (_ % 2 != 0)\n        val evensSum = evens.sum\n        val oddsSum =\
    \ odds.sum\n        val evensSumOdds = evensSum + odds.sum\n        val evensSumEvens\
    \ = evensSum + evens.sum\n        val oddsSumEvens = odds.sum + evens.sum\n  \
    \      val evensSumOddsEvens = evensSum + oddsSum + evens.sum\n        val evensSumEvensOdds\
    \ = evensSum + evensSum + odds.sum\n        val oddsSumEvensEvens = odds.sum +\
    \ evensSum + evens.sum\n        val evensSumOddsOdds = evensSum + oddsSum + odds.sum\n\
    \        val evensSumEvensEvensOdds = evensSum + evensSum + evensSum + odds.sum\n\
    \        val oddsSumEvensEvensOdds = odds.sum + evensSum + evensSum + odds.sum\n\
    \        val evensSumOddsEvensEvensOdds = evensSum + oddsSum + evensSum + evensSum\
    \ + odds.sum\n        val evensSumEvensOddsEvensOdds = evensSum + evensSum + oddsSum\
    \ + evensSum + evensSum + odds.sum\n        val oddsSumEvensEvensOddsEvensOdds\
    \ = odds.sum + evensSum + evensSum + oddsSum + evensSum + evensSum + odds.sum\n\
    \        val evensSumOddsOddsEvensEvensOdds = evensSum + oddsSum + evensSum +\
    \ oddsSum + evensSum + evensSum + odds.sum\n        val evensSumEvensEvensOddsOddsEvensOdds\
    \ = evensSum + evensSum + evensSum + oddsSum + evensSum + evensSum + evensSum\
    \ + odds.sum\n        val oddsSumEvensEvensOddsEvensOddsEvensOdds = odds.sum +\
    \ evensSum + evensSum + oddsSum + evensSum + evensSum + evensSum + evensSum +\
    \ odds.sum\n        val ", "        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val range = (x - y).abs()\n        val evenRange\
    \ = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n\
    \        evenRange foreach { x => evens += x }\n        oddRange foreach { x =>\
    \ odds += x }\n        val evensSize = evens.size\n        val oddsSize = odds.size\n\
    \        if (evensSize > oddsSize) {\n            evens.last\n        } else if\
    \ (evensSize < oddsSize) {\n            odds.last\n        } else {\n        \
    \    -1\n        }", "        var even = 0\n        var odd = 0\n        var max\
    \ = 0\n        var min = 0\n        for(i <- x to y) {\n            if((i % 2)\
    \ == 0) {\n                even += i\n            } else {\n                odd\
    \ += i\n            }\n        }\n        if(even > odd) {\n            max =\
    \ even\n        } else {\n            max = odd\n        }\n        if(max > x)\
    \ {\n            max = x\n        }\n        if(max < y) {\n            max =\
    \ y\n        }\n        if(min < x) {\n            min = x\n        }\n      \
    \  if(min > y) {\n            min = y\n        }\n        if(even == 0 && odd\
    \ > 0) {\n            max = odd\n        }\n        if(even == 0 && odd < 0) {\n\
    \            max = even\n        }\n        if(even == 0 && odd == 0) {\n    \
    \        max = -1\n        }\n        if(even == 0 && even == 0) {\n         \
    \   max = -1\n        }\n        if(even == 0 && even > 0) {\n            max\
    \ = even\n        }\n        if(even == 0 && even < 0) {\n            max = even\n\
    \        }\n        if(even == 0 && even == 0) {\n            max = -1\n     \
    \   }\n        if(even > 0 && even > 0) {\n            max = even\n        }\n\
    \        if(even > 0 && even < 0) {\n            max = even\n        }\n     \
    \   if(even > 0 && even == 0) {\n            max = -1\n        }\n        if(even\
    \ < 0 && even > 0) {\n            max = even\n        }\n        if(even < 0 &&\
    \ even < 0) {\n            max = even\n        }\n        if(even < 0 && even\
    \ == 0) {\n            max = -1\n        }\n        if(even > 0 && even > 0) {\n\
    \            max = even\n        }\n        if(even > 0 && even < 0) {\n     \
    \       max = even\n        }\n        if(even > 0 && even == 0) {\n         \
    \   max = -1\n        }\n        if(even < 0 && even > 0) {\n            max =\
    \ even\n        }\n        if(even < 0 && even < 0) {\n            max = even\n\
    \        }\n        if(even < 0 && even == 0) {\n            max = -1\n      \
    \  }\n        if(even > 0 && even > 0) {\n            max = even\n        }\n\
    \        if(even > 0 && even < 0) {\n            max = even\n        }\n     \
    \   if(even > 0 && even == 0) {\n            max = -1\n        }\n        if(even\
    \ < 0 && even > 0) {\n            max = even\n        }\n        if(even < 0 &&\
    \ even < 0) {\n            max = even\n        }\n        if(even < 0 && even\
    \ == 0) {\n            max = -1\n        }\n        if(even > 0 && even > 0) {\n\
    \            max = even\n        }\n        if(even > 0 && even < 0) {\n     \
    \       max = even\n        }\n        if(even > 0 && even == 0) {\n         \
    \   max = -1\n        }\n        if(even < 0 && even > 0) {\n            max =\
    \ even\n        }\n        if(even < 0 && even < 0) {\n            max = even\n\
    \        }\n        if(even < 0 && even == 0) {\n            max = -1\n", "  \
    \      val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val evensAndOdds = mutable.Set[Long]()\n        val evensAndOddsAndEvens\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvens = mutable.Set[Long]()\n     \
    \   val evensAndOddsAndEvensAndOddsAndEvensAndOdds = mutable.Set[Long]()\n   \
    \     val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens = mutable.Set[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.Set[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.Set[Long]()\n        val evensAnd", "        val evens = x to y by\
    \ 2\n        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_\
    \ % 2 == 0)\n        val evensSorted = evensSorted.takeWhile(_ < y)\n        val\
    \ evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.lastOption.getOrElse(-1)\n\
    \        evensSorted", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n        val odd\
    \ = mutable.Set[Long]()\n        val evenInRange = mutable.Set[Long]()\n     \
    \   val oddInRange = mutable.Set[Long]()\n        val evenInRangeAndOdd = mutable.Set[Long]()\n\
    \        val oddInRangeAndOdd = mutable.Set[Long]()\n        val evenInRangeAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n        val\
    \ oddInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven =\
    \ mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOd",
  "        var max = 0\n        var min = 0\n        var even = 0\n        var odd\
    \ = 0\n        var evenMax = 0\n        var evenMin = 0\n        var oddMax =\
    \ 0\n        var oddMin = 0\n        var evenMaxIndex = 0\n        var evenMinIndex\
    \ = 0\n        var oddMaxIndex = 0\n        var oddMinIndex = 0\n        var evenMaxValue\
    \ = 0\n        var evenMinValue = 0\n        var oddMaxValue = 0\n        var\
    \ oddMinValue = 0\n        var evenMaxIndexValue = 0\n        var evenMinIndexValue\
    \ = 0\n        var oddMaxIndexValue = 0\n        var oddMinIndexValue = 0\n  \
    \      var evenMaxValueIndex = 0\n        var evenMinValueIndex = 0\n        var\
    \ oddMaxValueIndex = 0\n        var oddMinValueIndex = 0\n        var evenMaxIndexValueIndex\
    \ = 0\n        var evenMinIndexValueIndex = 0\n        var oddMaxIndexValueIndex\
    \ = 0\n        var oddMinIndexValueIndex = 0\n        var evenMaxValueValueIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexValueValueIndex\
    \ = 0\n        var evenMinIndexValueValueIndex = 0\n        var oddMaxIndexValueValueIndex\
    \ = 0\n        var oddMinIndexValueValueIndex = 0\n        var evenMaxValueValueValueIndex\
    \ = 0\n        var evenMinValueValueValueIndex = 0\n        var oddMaxValueValueValueIndex\
    \ = 0\n        var oddMinValueValueValueIndex = 0\n        var evenMaxIndexValueValueValueIndex\
    \ = 0\n        var evenMinIndexValueValueValueIndex = 0\n        var oddMaxIndexValueValueValueIndex\
    \ = 0\n        var oddMinIndexValueValueValueIndex = 0\n        var evenMaxValueValueValueIndex\
    \ = 0\n        var evenMinValueValueValueIndex = 0\n        var oddMaxValueValueValueIndex\
    \ = 0\n        var oddMinValueValueValueIndex = 0\n        var evenMaxIndexValueValueValueIndex\
    \ = 0\n        var evenMinIndexValueValueValueIndex = 0\n        var oddMaxIndexValueValueValueIndex\
    \ = 0\n        var oddMinIndexValueValueValueIndex = 0\n        var evenMaxValueValueValueIndex\
    \ = 0\n        var evenMinValueValueValueIndex = 0\n        var oddMaxValueValueValueIndex\
    \ = 0\n        var oddMinValueValueValueIndex = 0\n        var evenMaxIndexValueValueValueIndex\
    \ = 0\n        var evenMinIndexValueValueValueIndex = 0\n        var oddMaxIndexValueValueValueIndex\
    \ = 0\n        var oddMinIndexValueValueValueIndex = 0\n        var evenMaxValueValueValueIndex\
    \ = 0\n        var evenMinValueValueValueIndex = 0\n        var oddMaxValueValueValueIndex\
    \ = 0\n        var oddMinValueValueValueIndex = 0\n        var evenMaxIndexValueValueValueIndex",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n \
    \       val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n  \
    \      val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mut", "        val\
    \ evens = x to y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n    \
    \    if (evensCount == 0) -1\n        else evens.max", "        val evens = x\
    \ to y by 2\n        val evensSorted = evens.toList\n        val evensSorted =\
    \ evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ > x)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ <= y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= ", "        val evens =\
    \ x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n        val\
    \ evensOdds = evens ++ odds\n        val evensOddsSum = evensOdds.sum\n      \
    \  val evensOddsSumEvens = evensOddsSum / evens.length\n        val evensOddsSumOdds\
    \ = evensOddsSum / odds.length\n        val evensOddsSumEvensOdds = evensOddsSumEvens\
    \ * evensOddsSumOdds\n        val evensOddsSumEvensOddsOdds = evensOddsSumEvens\
    \ * evensOddsSumOdds * evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOdds\
    \ = evensOddsSumEvens * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds\
    \ * evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOdds = evensOddsSumEvens\
    \ * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds\
    \ * evensOddsSumOdds * evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvens * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds\
    \ * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds\
    \ * evensOddsSumOdds * evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvens * evensOddsSumOdds * evensOddsSumOdds * evensOddsSumOdds\
    \ * evensOddsSumOdds * evensOddsSumO", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = x to y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) {\n            return -1\n        }\n\
    \        val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n          \
    \  return maxEven\n        }\n        return -1", "        val evens = x to y\
    \ by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.Buffer[Long] = evensSorted.sortBy(_)\n        val evensSortedSortedLast\
    \ = evensSortedSorted.last\n        val evensSortedSortedLastIndex = evensSortedSorted.lastIndex\n\
    \        val evensSortedSortedLastIndex2 = evensSortedSorted.lastIndexWhere(_\
    \ % 2 == 0)\n        val evensSortedSortedLastIndex3 = evensSortedSorted.lastIndexWhere(_\
    \ % 3 == 0)\n        val evensSortedSortedLastIndex4 = evensSortedSorted.lastIndexWhere(_\
    \ % 4 == 0)\n        val evensSortedSortedLastIndex5 = evensSortedSorted.lastIndexWhere(_\
    \ % 5 == 0)\n        val evensSortedSortedLastIndex6 = evensSortedSorted.lastIndexWhere(_\
    \ % 6 == 0)\n        val evensSortedSortedLastIndex7 = evensSortedSorted.lastIndexWhere(_\
    \ % 7 == 0)\n        val evensSortedSortedLastIndex8 = evensSortedSorted.lastIndexWhere(_\
    \ % 8 == 0)\n        val evensSortedSortedLastIndex9 = evensSortedSorted.lastIndexWhere(_\
    \ % 9 == 0)\n        val evensSortedSortedLastIndex10 = evensSortedSorted.lastIndexWhere(_\
    \ % 10 == 0)\n        val evensSortedSortedLastIndex11 = evensSortedSorted.lastIndexWhere(_\
    \ % 11 == 0)\n        val evensSortedSortedLastIndex12 = evensSortedSorted.lastIndexWhere(_\
    \ % 12 == 0)\n        val evensSortedSortedLastIndex13 = evensSortedSorted.lastIndexWhere(_\
    \ % 13 == 0)\n        val evensSortedSortedLastIndex14 = evensSortedSorted.lastIndexWhere(_\
    \ % 14 == 0)\n        val evensSortedSortedLastIndex15 = evensSortedSorted.lastIndexWhere(_\
    \ % 15 == 0)\n        val evensSortedSortedLastIndex16 = evensSortedSorted.lastIndexWhere(_\
    \ % 16 == 0)\n        val evensSortedSortedLastIndex17 = evensSortedSorted.lastIndexWhere(_\
    \ % 17 == 0)\n        val evensSortedSortedLastIndex18 = evensSortedSorted.lastIndexWhere(_\
    \ % 18 == 0)\n        val evensSortedSortedLastIndex19 = evensSortedSorted.lastIndexWhere(_\
    \ % 19 == 0)\n        val evensSortedSortedLastIndex20 = evensSortedSorted.lastIndexWhere(_\
    \ % 20 == 0)\n        val evensSortedSortedLastIndex21 = evensSortedSorted.",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y).filter(_ % 2 == 0)\n        val evenRange = (x to\
    \ y).filter(_ % 2 == 0)\n        val oddRange = (x to y).filter(_ % 2 != 0)\n\
    \        val evens = evenRange.filter(_ % 2 == 0)\n        val odds = oddRange.filter(_\
    \ % 2 != 0)\n        val evensSum = evens.sum\n        val oddsSum = odds.sum\n\
    \        val evensSumInRange = evensSum - evenRange.sum\n        val oddsSumInRange\
    \ = oddsSum - oddRange.sum\n        val evensSumInRangeInRange = evensSumInRange\
    \ - evenRange.sum - evenRange.sum\n        val oddsSumInRangeInRange = oddsSumInRange\
    \ - oddRange.sum - oddRange.sum\n        val evensSumInRangeInRangeInRange = evensSumInRangeInRange\
    \ - evenRange.sum - evenRange.sum - evenRange.sum\n        val oddsSumInRangeInRangeInRange\
    \ = oddsSumInRangeInRange - oddRange.sum - oddRange.sum - oddRange.sum\n     \
    \   val evensSumInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRange -\
    \ evenRange.sum - evenRange.sum - evenRange.sum - evenRange.sum\n        val oddsSumInRangeInRangeInRangeInRange\
    \ = oddsSumInRangeInRangeInRange - oddRange.sum - oddRange.sum - oddRange.sum\
    \ - oddRange.sum\n        val evensSumInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRangeInRange\
    \ - evenRange.sum - evenRange.sum - evenRange.sum - evenRange.sum - evenRange.sum\n\
    \        val oddsSumInRangeInRangeInRangeInRange = oddsSumInRangeInRangeInRangeInRange\
    \ - oddRange.sum - oddRange.sum - oddRange.sum - oddRange.sum - oddRange.sum\n\
    \        val evensSumInRangeInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRangeInRangeInRange\
    \ - evenRange.sum - evenRange.sum - evenRange.sum - evenRange.sum - evenRange.",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEven =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenO", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = x.toInt\n \
    \       val odd = y.toInt\n        while(even < odd) {\n            evens += even\n\
    \            odd += 2\n        }\n        while(even > odd) {\n            odds\
    \ += odd\n            even -= 2\n        }\n        evens.max", "        val evens\
    \ = for (i <- 1 to y) yield {\n            if (i % 2 == 0) i\n            else\
    \ -1\n        }\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.Buffer[Long] = evensSorted.sortWith(_ < _)\n        val evensSortedSortedLast\
    \ = evensSortedSorted.last\n        if (evensSortedSortedLast == -1) return -1\n\
    \        if (evensSortedSortedLast == evensSortedSortedLast.min) evensSortedSortedLast\n\
    \        else evensSortedSortedLast.min + 1", "        val evens = x to y by 2\n\
    \        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.last\n        evensSorted.toLong",
  "        var maxEven = x // Start with x as the biggest even number\n        var\
    \ minEven = y // Start with y as the smallest even number\n        var even =\
    \ true // Start with true as long as x is even\n        var evenMax = x // Start\
    \ with x as the biggest even number that is even\n        var evenMin = y // Start\
    \ with y as the smallest even number that is even\n        var evenMaxIndex =\
    \ -1 // Start with -1 as long as x is even\n        var evenMinIndex = -1 // Start\
    \ with -1 as long as y is even\n        var evenMaxIndex = -1 // Start with -1\
    \ as long as x is even\n        var evenMinIndex = -1 // Start with -1 as long\
    \ as y is even\n        var evenMaxIndex = -1 // Start with -1 as long as x is\
    \ even\n        var evenMinIndex = -1 // Start with -1 as long as y is even\n\
    \        var evenMaxIndex = -1 // Start with -1 as long as x is even\n       \
    \ var evenMinIndex = -1 // Start with -1 as long as y is even\n        var evenMaxIndex\
    \ = -1 // Start with -1 as long as x is even\n        var evenMinIndex = -1 //\
    \ Start with -1 as long as y is even\n        var evenMaxIndex = -1 // Start with\
    \ -1 as long as x is even\n        var evenMinIndex = -1 // Start with -1 as long\
    \ as y is even\n        var evenMaxIndex = -1 // Start with -1 as long as x is\
    \ even\n        var evenMinIndex = -1 // Start with -1 as long as y is even\n\
    \        var evenMaxIndex = -1 // Start with -1 as long as x is even\n       \
    \ var evenMinIndex = -1 // Start with -1 as long as y is even\n        var evenMaxIndex\
    \ = -1 // Start with -1 as long as x is even\n        var evenMinIndex = -1 //\
    \ Start with -1 as long as y is even\n        var evenMaxIndex = -1 // Start with\
    \ -1 as long as x is even\n        var evenMinIndex = -1 // Start with -1 as long\
    \ as y is even\n        var evenMaxIndex = -1 // Start with -1 as long as x is\
    \ even\n        var evenMinIndex = -1 // Start with -1 as long as y is even\n\
    \        var evenMaxIndex = -1 // Start with -1 as long as x is even\n       \
    \ var evenMinIndex = -1 // Start with -1 as long as y is even\n        var evenMaxIndex\
    \ = -1 // Start with -1 as long as x is even\n        var evenMinIndex = -1 //\
    \ Start with -1 as long as y is even\n        var evenMaxIndex = -1 // Start with\
    \ -1 as long as x is even\n        var evenMinIndex = -1 // Start with -1 as long\
    \ as y is even\n        var evenMaxIndex = -1 // Start with -1 as long as x is\
    \ even\n        var evenMinIndex = -1 // Start with -1 as long as y is even\n\
    \        var ", "        var even = 0\n        var odd = 0\n        var xEven\
    \ = x.toInt\n        var yEven = y.toInt\n        var xOdd = xEven\n        var\
    \ yOdd = yEven\n        while(even < xOdd && odd < yOdd) {\n            if(xEven\
    \ == yEven) {\n                even += xEven\n                odd += yEven\n \
    \           }\n            if(xOdd == yOdd) {\n                even += xOdd\n\
    \                odd += yOdd\n            }\n            xEven = xOdd\n      \
    \      yEven = yOdd\n            xOdd = xEven\n            yOdd = yEven\n    \
    \    }\n        if(even < xOdd && odd < yOdd) {\n            even = xOdd\n   \
    \         odd = yOdd\n        }\n        if(even < xOdd && odd < yOdd) {\n   \
    \         even = xOdd\n            odd = yOdd\n        }\n        if(even < xOdd\
    \ && odd < yOdd) {\n            even = xOdd\n            odd = yOdd\n        }\n\
    \        if(even < xOdd && odd < yOdd) {\n            even = xOdd\n          \
    \  odd = yOdd\n        }\n        if(even < xOdd && odd < yOdd) {\n          \
    \  even = xOdd\n            odd = yOdd\n        }\n        if(even < xOdd && odd\
    \ < yOdd) {\n            even = xOdd\n            odd = yOdd\n        }\n    \
    \    if(even < xOdd && odd < yOdd) {\n            even = xOdd\n            odd\
    \ = yOdd\n        }\n        if(even < xOdd && odd < yOdd) {\n            even\
    \ = xOdd\n            odd = yOdd\n        }\n        if(even < xOdd && odd < yOdd)\
    \ {\n            even = xOdd\n            odd = yOdd\n        }\n        if(even\
    \ < xOdd && odd < yOdd) {\n            even = xOdd\n            odd = yOdd\n \
    \       }\n        if(even < xOdd && odd < yOdd) {\n            even = xOdd\n\
    \            odd = yOdd\n        }\n        if(even < xOdd && odd < yOdd) {\n\
    \            even = xOdd\n            odd = yOdd\n        }\n        if(even <\
    \ xOdd && odd < yOdd) {\n            even = xOdd\n            odd = yOdd\n   \
    \     }\n        if(", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach\
    \ { x =>\n            if (x % 2 == 0) {\n                evens += x\n        \
    \    } else {\n                odds += x\n            }\n        }\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = x to y by 2\n        val evensSorted = evens.toList\n    \
    \    val evensSorted = evensSorted.sortBy(x => x)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val\
    \ evensSorted = evensSor", "        var maxEven = math.max(x, y)\n        var\
    \ minEven = math.min(x, y)\n        var even = 0\n        var evenCount = 0\n\
    \        var evenMax = 0\n        var evenMin = 0\n        var evenSum = 0\n \
    \       var evenSumCount = 0\n        var evenSumMax = 0\n        var evenSumMin\
    \ = 0\n        var evenSumSum = 0\n        var evenSumSumCount = 0\n        var\
    \ evenSumSumMax = 0\n        var evenSumSumMin = 0\n        var evenSumSumSum\
    \ = 0\n        var evenSumSumSumCount = 0\n        var evenSumSumSumMax = 0\n\
    \        var evenSumSumSumMin = 0\n        var evenSumSumSumSum = 0\n        var\
    \ evenSumSumSumSumCount = 0\n        var evenSumSumSumSumMax = 0\n        var\
    \ evenSumSumSumSumMin = 0\n        var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount\
    \ = 0\n        var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin =\
    \ 0\n        var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount =\
    \ 0\n        var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n\
    \        var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount = 0\n\
    \        var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n  \
    \      var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount = 0\n  \
    \      var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n    \
    \    var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount = 0\n    \
    \    var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n      \
    \  var evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount = 0\n      \
    \  var evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n        var\
    \ evenSumSumSumSumSum = 0\n        var evenSumSumSumSumCount = 0\n        var\
    \ evenSumSumSumSumMax = 0\n        var evenSumSumSumSumMin = 0\n        var evenSumSumSumSumSum\
    \ = 0\n        var evenSumSumSumSumCount = 0\n        var evenSumSumSumSumMax\
    \ = 0\n        var evenSumSumSumSumMin = 0\n        var evenSumSumSumSumSum =\
    \ 0\n        var evenSumSumSumSumCount = 0\n        var evenSumSumSumSumMax =\
    \ 0\n        var evenSumSumSumSumMin = 0\n        var evenSumSumSumSumSum = 0\n\
    \        var evenSumSumSumSumCount = 0\n        var evenSumSumSumSumMax = 0\n\
    \        var evenSumSumSumSumMin = 0\n        var ", "        val evens = x to\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) -1\n        else evens.max", "        var maxNum = math.max(x, y)\n  \
    \      var minNum = math.min(x, y)\n        var evenNum = 0\n        var oddNum\
    \ = 0\n        while (evenNum < maxNum && oddNum < minNum) {\n            if (math.mod(evenNum,\
    \ 2) == 0) {\n                evenNum = evenNum + 2\n            } else {\n  \
    \              oddNum = oddNum + 1\n            }\n        }\n        if (evenNum\
    \ == maxNum) {\n            return evenNum\n        } else if (oddNum == minNum)\
    \ {\n            return -1\n        } else {\n            return -1\n        }",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSorted = evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < ",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSorted = evensSorted.sortBy(_)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < y)\n", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs.toInt\n        val evenRange = range / 2\n  \
    \      val oddRange = range - evenRange\n        val even = x + evenRange\n  \
    \      val odd = x + oddRange\n        while (even < y) {\n            evens +=\
    \ even\n            even += evenRange\n        }\n        while (odd < y) {\n\
    \            odds += odd\n            odd += oddRange\n        }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOrOdd = mutable.ListBuffer[Long]()\n        val evenOrOddOrEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrEvenOrOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrEvenOrOddOrEven = mutable.ListBuffer[Long]()\n       \
    \ val evenOrOddOrEvenOrOddOrEvenOrOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOrOddOrEvenOrOddOrEvenOrOddOrEven = mutable.ListBuffer[Long]()\n       \
    \ val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven = mutable.ListBuffer[Long]()\n\
    \        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOrOddOrEvenOrOddOr", "       \
    \ var max = 0\n        var min = 0\n        for(i <- x to y) {\n            val\
    \ z = i\n            val y = z / 2\n            val x = z % 2\n            if(x\
    \ == 0 && y == 0) max = z\n            else if(x == 0) max = y\n            else\
    \ max = y\n        }\n        if(max > y) -1\n        else max", "        val\
    \ evens = for (i <- x until y) yield {\n            if (i % 2 == 0) i else -1\n\
    \        }\n        val maxEven = evens.max\n        if (maxEven > -1) return\
    \ maxEven\n        else return -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range % 2\n    \
    \    val even = x % evenRange\n        val odd = x % oddRange\n        val evens\
    \ = x until evenRange\n        val odds = x until oddRange\n        evens foreach\
    \ { x => evens += x }\n        odds foreach { x => odds += x }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else odd", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensOdds = mutable.ListBuffer[Long]()\n        val evensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsO", "  \
    \      val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs.toInt\n        val evenRange = range / 2\n  \
    \      val oddRange = range - evenRange\n        val even = x % evenRange\n  \
    \      val odd = y % oddRange\n        evens += even\n        odds += odd\n  \
    \      val evens = evens.toList\n        val odds = odds.toList\n        val even\
    \ = evens.max\n        val odd = odds.max\n        if (even > odd) even else odd",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range / 2\n       \
    \ val oddRange = range % 2\n        val evenStart = x - (evenRange * 2)\n    \
    \    val evenEnd = evenStart + evenRange\n        val oddStart = y - (oddRange\
    \ * 2)\n        val oddEnd = oddStart + oddRange\n        val evenEvens = for\
    \ (i <- evenStart.until(evenEnd)) yield {\n            if (i % 2 == 0) i else\
    \ -1\n        }\n        val evenOdds = for (i <- evenStart.until(evenEnd)) yield\
    \ {\n            if (i % 2 == 1) i else -1\n        }\n        val oddEvens =\
    \ for (i <- oddStart.until(oddEnd)) yield {\n            if (i % 2 == 0) i else\
    \ -1\n        }\n        val oddOdds = for (i <- oddStart.until(oddEnd)) yield\
    \ {\n            if (i % 2 == 1) i else -1\n        }\n        val evenOddEvens\
    \ = for (i <- evenStart.until(evenEnd)) yield {\n            if (i % 2 == 0 &&\
    \ i % 2 == 1) i else -1\n        }\n        val evenOddOdds = for (i <- evenStart.until(evenEnd))\
    \ yield {\n            if (i % 2 == 0 && i % 2 == 1) i else -1\n        }\n  \
    \      val oddEvenEvens = for (i <- oddStart.until(oddEnd)) yield {\n        \
    \    if (i % 2 == 0 && i % 2 == 1) i else -1\n        }\n        val oddEvenOdds\
    \ = for (i <- oddStart.until(oddEnd)) yield {\n            if (i % 2 == 0 && i\
    \ % 2 == 1) i else -1\n        }\n        val evenOddEvenEvens = for (i <- evenStart.until(evenEnd))\
    \ yield {\n            if (i % 2 == 0 && i % 2 == 1 && i % 2 == 0) i else -1\n\
    \        }\n        val evenOddEvenOdds = for (i <- evenStart.until(evenEnd))\
    \ yield {\n            if (i % 2 == 0 && i % 2 == 1 && i % 2 == 0) i else -1\n\
    \        }\n        val oddEvenEvenEvens = for (i <- oddStart.until(oddEnd)) yield\
    \ {\n            if (i % 2 == 0 && i % 2 == 1 && i % 2 == 0) i else -1\n     \
    \   }\n        val oddEvenOddEvens = for (i <- oddStart.until(oddEnd)) yield {\n\
    \            if (i % 2 == 0 && i % 2 == 1 && i % 2 == 0) i else -1\n        }\n\
    \        val evenOddOddEvens = for (i ", "        val evens = x filter (_ % 2\
    \ == 0)\n        val odds = x filter (_ % 2 != 0)\n        if (evens.isEmpty)\
    \ -1\n        else if (odds.isEmpty) -1\n        else if (evens.head < odds.head)\
    \ evens.head\n        else odds.head", "        val evens = x filter (_ % 2 ==\
    \ 0)\n        val odds = x filter (_ % 2 != 0)\n        val evensAndOdds = evens\
    \ ++ odds\n        val evensAndOddsSet = evensAndOdds.toSet\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        if (evensAndOddsSetSize == 0) {\n          \
    \  return -1\n        }\n        val maxEven = evensAndOddsSet.max\n        if\
    \ (maxEven < y) {\n            return -1\n        }\n        if (maxEven > y)\
    \ {\n            return maxEven\n        }\n        val maxOdd = evensAndOddsSet.min\n\
    \        if (maxOdd > y) {\n            return -1\n        }\n        if (maxOdd\
    \ < y) {\n            return maxOdd\n        }\n        val maxEvenAndOdd = evensAndOddsSet.maxBy(_\
    \ < y)\n        if (maxEvenAndOdd < y) {\n            return -1\n        }\n \
    \       if (maxEvenAndOdd > y) {\n            return maxEvenAndOdd\n        }\n\
    \        val maxEvenAndOddAndOdd = evensAndOddsSet.maxBy(_ < y) maxBy(_ > y)\n\
    \        if (maxEvenAndOddAndOdd < y) {\n            return -1\n        }\n  \
    \      if (maxEvenAndOddAndOdd > y) {\n            return maxEvenAndOddAndOdd\n\
    \        }\n        val maxEvenAndOddAndOddAndOdd = evensAndOddsSet.maxBy(_ <\
    \ y) maxBy(_ > y) maxBy(_ > y)\n        if (maxEvenAndOddAndOddAndOdd < y) {\n\
    \            return -1\n        }\n        if (maxEvenAndOddAndOddAndOdd > y)\
    \ {\n            return maxEvenAndOddAndOddAndOdd\n        }\n        val maxEvenAndOddAndOddAndOddAndOdd\
    \ = evensAndOddsSet.maxBy(_ < y) maxBy(_ > y) maxBy(_ > y) maxBy(_ > y)\n    \
    \    if (maxEvenAndOddAndOddAndOddAndOdd < y) {\n            return -1\n     \
    \   }\n        if (maxEvenAndOddAndOddAndOddAndOdd > y) {\n            return\
    \ maxEvenAndOddAndOddAndOddAndOdd\n        }\n        val maxEvenAndOddAndOddAndOddAndOddAndOdd\
    \ = evensAndOddsSet.maxBy(_ < y) maxBy(_ > y) maxBy(", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evensAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsCount = mutable.Set[Long]()\n        val evensAndOddsCount2\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount3 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount4 = mutable.Set[Long]()\n        val evensAndOddsCount5\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount6 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount7 = mutable.Set[Long]()\n        val evensAndOddsCount8\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount9 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount10 = mutable.Set[Long]()\n        val evensAndOddsCount11\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount12 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount13 = mutable.Set[Long]()\n        val evensAndOddsCount14\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount15 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount16 = mutable.Set[Long]()\n        val evensAndOddsCount17\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount18 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount19 = mutable.Set[Long]()\n        val evensAndOddsCount20\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount21 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount22 = mutable.Set[Long]()\n        val evensAndOddsCount23\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount24 = mutable.Set[Long]()\n\
    \        val evensAndOddsCount25 = mutable.Set[Long]()\n        val evensAndOddsCount26\
    \ = mutable.Set[Long]()\n        val evensAndOddsCount27 = mutable.Set[Long]()\n",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        var max = 0\n  \
    \      var min = 0\n        var even = 0\n        var odd = 0\n        var evenMax\
    \ = 0\n        var evenMin = 0\n        var oddMax = 0\n        var oddMin = 0\n\
    \        var evenMaxIndex = 0\n        var evenMinIndex = 0\n        var oddMaxIndex\
    \ = 0\n        var oddMinIndex = 0\n        var evenMaxValue = 0\n        var\
    \ evenMinValue = 0\n        var oddMaxValue = 0\n        var oddMinValue = 0\n\
    \        var evenMaxIndexValue = 0\n        var evenMinIndexValue = 0\n      \
    \  var oddMaxIndexValue = 0\n        var oddMinIndexValue = 0\n        var evenMaxValueIndex\
    \ = 0\n        var evenMinValueIndex = 0\n        var oddMaxValueIndex = 0\n \
    \       var oddMinValueIndex = 0\n        var evenMaxIndexValueIndex = 0\n   \
    \     var evenMinIndexValueIndex = 0\n        var oddMaxIndexValueIndex = 0\n\
    \        var oddMinIndexValueIndex = 0\n        var evenMaxValueValueIndex = 0\n\
    \        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex = 0\n\
    \        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValue = 0\n\
    \        var evenMinIndexIndexValue = 0\n        var oddMaxIndexIndexValue = 0\n\
    \        var oddMinIndexIndexValue = 0\n        var evenMaxValueValueIndex = 0\n\
    \        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex = 0\n\
    \        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValueValueIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValueValueIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValueValueIndex\
    \ = 0\n        var evenMinValueValueIndex = 0\n        var oddMaxValueValueIndex\
    \ = 0\n        var oddMinValueValueIndex = 0\n        var evenMaxIndexIndexValueIndex\
    \ = 0\n        var evenMinIndexIndexValueIndex = 0\n        var oddMaxIndexIndexValueIndex\
    \ = 0\n        var oddMinIndexIndexValueIndex = 0\n        var evenMaxValue",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEven", "    \
    \    val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { x =>\n            range.foreach\
    \ { y =>\n                if (x % 2 == 0 && y % 2 == 0) {\n                  \
    \  evens += x\n                } else {\n                    odds += y\n     \
    \           }\n            }\n        }\n        if (evens.isEmpty) {\n      \
    \      return -1\n        } else {\n            val maxEven = evens.max\n    \
    \        val maxOdd = odds.max\n            if (maxEven < maxOdd) {\n        \
    \        return maxEven\n            } else {\n                return maxOdd\n\
    \            }\n        }", "        val evens = x to y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount == 0) {\n            return\
    \ -1\n        }\n        val maxEven = evens.max\n        if (maxEven % 2 == 0)\
    \ {\n            return maxEven\n        }\n        val maxEven2 = maxEven / 2\n\
    \        if (maxEven2 % 2 == 0) {\n            return maxEven2\n        }\n  \
    \      val maxEven3 = maxEven2 / 2\n        if (maxEven3 % 2 == 0) {\n       \
    \     return maxEven3\n        }\n        val maxEven4 = maxEven3 / 2\n      \
    \  if (maxEven4 % 2 == 0) {\n            return maxEven4\n        }\n        val\
    \ maxEven5 = maxEven4 / 2\n        if (maxEven5 % 2 == 0) {\n            return\
    \ maxEven5\n        }\n        val maxEven6 = maxEven5 / 2\n        if (maxEven6\
    \ % 2 == 0) {\n            return maxEven6\n        }\n        val maxEven7 =\
    \ maxEven6 / 2\n        if (maxEven7 % 2 == 0) {\n            return maxEven7\n\
    \        }\n        val maxEven8 = maxEven7 / 2\n        if (maxEven8 % 2 == 0)\
    \ {\n            return maxEven8\n        }\n        val maxEven9 = maxEven8 /\
    \ 2\n        if (maxEven9 % 2 == 0) {\n            return maxEven9\n        }\n\
    \        val maxEven10 = maxEven9 / 2\n        if (maxEven10 % 2 == 0) {\n   \
    \         return maxEven10\n        }\n        val maxEven11 = maxEven10 / 2\n\
    \        if (maxEven11 % 2 == 0) {\n            return maxEven11\n        }\n\
    \        val maxEven12 = maxEven11 / 2\n        if (maxEven12 % 2 == 0) {\n  \
    \          return maxEven12\n        }\n        val maxEven13 = maxEven12 / 2\n\
    \        if (maxEven13 % 2 == 0) {\n            return maxEven13\n        }\n\
    \        val maxEven14 = maxEven13 / 2\n        if (maxEven14 % 2 == 0) {\n  \
    \          return maxEven14\n        }\n        val maxEven15 = maxEven14 / 2\n\
    \        if (maxEven15 % 2 == 0) {\n            return maxEven15\n        }\n\
    \        val maxEven16 = maxEven15 / 2\n        if (maxEven16 % 2 == 0) {\n  \
    \          return maxEven16\n        }\n        val maxEven17 = maxEven16 / 2\n\
    \        if (maxEven17 % 2 == 0) {\n            return maxEven17\n        }\n\
    \        val maxEven18 = maxEven17 / 2\n        if (maxEven18 % 2 == 0) {\n  \
    \          return maxEven18\n        }\n        val maxEven19 = maxEven18", " \
    \       var even = 0\n        var odd = 0\n        var evenMax = 0\n        var\
    \ oddMax = 0\n        var evenMin = 0\n        var oddMin = 0\n        var evenMaxIndex\
    \ = 0\n        var oddMaxIndex = 0\n        var evenMinIndex = 0\n        var\
    \ oddMinIndex = 0\n        var evenMaxCount = 0\n        var oddMaxCount = 0\n\
    \        var evenMinCount = 0\n        var oddMinCount = 0\n        var evenMaxCountIndex\
    \ = 0\n        var oddMaxCountIndex = 0\n        var evenMinCountIndex = 0\n \
    \       var oddMinCountIndex = 0\n        var evenMaxCountMax = 0\n        var\
    \ oddMaxCountMax = 0\n        var evenMinCountMax = 0\n        var oddMinCountMax\
    \ = 0\n        var evenMaxCountMin = 0\n        var oddMaxCountMin = 0\n     \
    \   var evenMinCountMin = 0\n        var oddMinCountMin = 0\n        var evenMaxCountMaxIndex\
    \ = 0\n        var oddMaxCountMaxIndex = 0\n        var evenMinCountMaxIndex =\
    \ 0\n        var oddMinCountMaxIndex = 0\n        var evenMaxCountMinIndex = 0\n\
    \        var oddMaxCountMinIndex = 0\n        var evenMinCountMinIndex = 0\n \
    \       var oddMinCountMinIndex = 0\n        var evenMaxCountMaxCount = 0\n  \
    \      var oddMaxCountMaxCount = 0\n        var evenMinCountMaxCount = 0\n   \
    \     var oddMinCountMaxCount = 0\n        var evenMaxCountMinCount = 0\n    \
    \    var oddMaxCountMinCount = 0\n        var evenMinCountMinCount = 0\n     \
    \   var oddMinCountMinCount = 0\n        var evenMaxCountMaxCountIndex = 0\n \
    \       var oddMaxCountMaxCountIndex = 0\n        var evenMinCountMaxCountIndex\
    \ = 0\n        var oddMinCountMaxCountIndex = 0\n        var evenMaxCountMinCountIndex\
    \ = 0\n        var oddMinCountMaxCountIndex = 0\n        var evenMinCountMinCountIndex\
    \ = 0\n        var oddMinCountMinCountIndex = 0\n        var evenMaxCountMaxCountMax\
    \ = 0\n        var oddMaxCountMaxCountMax = 0\n        var evenMinCountMaxCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMaxCountMinCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMinCountMaxCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMaxCountMinCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMinCountMaxCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMaxCountMinCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMinCountMaxCountMax\
    \ = 0\n        var oddMinCountMaxCountMax = 0\n        var evenMaxCountMinCountMax\
    \ = 0", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensCount = mutable.ListBuffer[Long]()\n        val oddsCount =\
    \ mutable.ListBuffer[Long]()\n        val evensSum = mutable.ListBuffer[Long]()\n\
    \        val oddsSum = mutable.ListBuffer[Long]()\n        val evensSumCount =\
    \ mutable.ListBuffer[Long]()\n        val oddsSumCount = mutable.ListBuffer[Long]()\n\
    \        val evensSumOdds = mutable.ListBuffer[Long]()\n        val oddsSumOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensSumOddsCount = mutable.ListBuffer[Long]()\n\
    \        val oddsSumOddsCount = mutable.ListBuffer[Long]()\n        val evensSumOddsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddsSumOddsSum = mutable.ListBuffer[Long]()\n\
    \        val evensSumOddsSumCount = mutable.ListBuffer[Long]()\n        val oddsSumOddsSumCount\
    \ = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOdds = mutable.ListBuffer[Long]()\n\
    \        val oddsSumOddsSumOdds = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOddsCount\
    \ = mutable.ListBuffer[Long]()\n        val oddsSumOddsSumOddsCount = mutable.ListBuffer[Long]()\n\
    \        val evensSumOddsSumOddsSum = mutable.ListBuffer[Long]()\n        val\
    \ oddsSumOddsSumOddsSum = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOddsSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddsSumOddsSumOddsSumCount = mutable.ListBuffer[Long]()\n\
    \        val evensSumOddsSumOddsSumOdds = mutable.ListBuffer[Long]()\n       \
    \ val oddsSumOddsSumOddsSumOdds = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOddsSumOddsCount\
    \ = mutable.ListBuffer[Long]", "        var maxEven = x // Initialize max even\
    \ to x\n        var maxOdd = y // Initialize max odd to y\n        var even =\
    \ x // Initialize even to x\n        var odd = y // Initialize odd to y\n    \
    \    while(even < odd) {\n            val tempEven = even\n            val tempOdd\
    \ = odd\n            if(tempEven % 2 == 0) {\n                even = even + 1\n\
    \            } else {\n                odd = odd + 1\n            }\n        \
    \    if(even > maxEven) {\n                maxEven = even\n            }\n   \
    \         if(odd > maxOdd) {\n                maxOdd = odd\n            }\n  \
    \      }\n        if(maxEven > maxOdd) {\n            return maxEven\n       \
    \ } else {\n            return maxOdd\n        }", "        val evens = x until\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        evens.max", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2 == 0)\n\
    \        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach {\
    \ x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val evensLength\
    \ = evens.length\n        val oddsLength = odds.length\n        val maxEven =\
    \ evens.max\n        val maxOdd = odds.max\n        if (evensLength == 0 || oddsLength\
    \ == 0) {\n            return -1\n        }\n        if (evensLength == 1) {\n\
    \            if (oddsLength == 1) {\n                return maxEven\n        \
    \    }\n            return -1\n        }\n        if (oddsLength == 1) {\n   \
    \         return -1\n        }\n        if (evensLength == oddsLength) {\n   \
    \         if (evens.contains(maxEven) && odds.contains(maxOdd)) {\n          \
    \      return maxEven\n            }\n            return -1\n        }\n     \
    \   if (evensLength > oddsLength) {\n            return -1\n        }\n      \
    \  if (evensLength < oddsLength) {\n            return -1\n        }\n       \
    \ if (evens.contains(maxEven) && odds.contains(maxOdd)) {\n            return\
    \ maxEven\n        }\n        return -1", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val oddEven = mutable.ListBuffer[Long]()\n\
    \        val oddOdd = mutable.ListBuffer[Long]()\n        val evenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val oddEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val oddOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenEvenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val oddEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val oddOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val oddEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val oddOddEvenEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenEvenOddEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val oddEvenEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val oddOddEvenEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val oddEvenEvenOddEvenOddEvenOddEvenOddEvenO", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        evens.max", "        val evens = x to y by 2\n \
    \       val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount == 0)\
    \ {\n            return -1\n        }\n        val maxEven = evens.max\n     \
    \   if (maxEven % 2 == 0) {\n            return maxEven\n        }\n        val\
    \ maxEven2 = maxEven / 2\n        val evensCount2 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount2 == 0) {\n            return -1\n        }\n        val\
    \ maxEven3 = maxEven2 / 2\n        val evensCount3 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount3 == 0) {\n            return -1\n        }\n        val\
    \ maxEven4 = maxEven3 / 2\n        val evensCount4 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount4 == 0) {\n            return -1\n        }\n        val\
    \ maxEven5 = maxEven4 / 2\n        val evensCount5 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount5 == 0) {\n            return -1\n        }\n        val\
    \ maxEven6 = maxEven5 / 2\n        val evensCount6 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount6 == 0) {\n            return -1\n        }\n        val\
    \ maxEven7 = maxEven6 / 2\n        val evensCount7 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount7 == 0) {\n            return -1\n        }\n        val\
    \ maxEven8 = maxEven7 / 2\n        val evensCount8 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount8 == 0) {\n            return -1\n        }\n        val\
    \ maxEven9 = maxEven8 / 2\n        val evensCount9 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount9 == 0) {\n            return -1\n        }\n        val\
    \ maxEven10 = maxEven9 / 2\n        val evensCount10 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount10 == 0) {\n            return -1\n        }\n        val\
    \ maxEven11 = maxEven10 / 2\n        val evensCount11 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount11 == 0) {\n            return -1\n        }\n        val\
    \ maxEven12 = maxEven11 / 2\n        val evensCount12 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount12 == 0) {\n            return -1\n        }\n        val\
    \ maxEven13 = maxEven12 / 2\n        val evensCount13 = evens.count(_ % 2 == 0)\n\
    \        if (evensCount13 == 0) {\n            return -1\n        }\n        val\
    \ maxEven14 = maxEven13 / 2", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax == evenMax && oddMax == oddMax) evenMax else -1", "     \
    \   val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y).map(x => (x % 2 == 0 ? x : x + 1).toLong)\n    \
    \    range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x =>\
    \ if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd =\
    \ odds.max\n        if (even > odd) even else odd", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x - y).abs \n  \
    \      val evenRange = (range / 2).abs \n        val oddRange = range - evenRange\n\
    \        val evenNum = x + evenRange\n        val oddNum = x + oddRange\n    \
    \    while (evenNum < y) {\n            evens += evenNum\n            evenNum\
    \ += evenRange\n        }\n        while (oddNum < y) {\n            odds += oddNum\n\
    \            oddNum += oddRange\n        }\n        val evenMax = evens.max\n\
    \        val oddMax = odds.max\n        if (evenMax > oddMax) {\n            return\
    \ evenMax\n        } else {\n            return oddMax\n        }", "        val\
    \ evens = x to y by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.ListBuffer[Long] = new mutable.ListBuffer[Long]()\n        evensSorted.foreach(x\
    \ => evensSortedSorted += x)\n        evensSortedSorted.sortWith(_ < _)\n    \
    \    val evensSortedSortedSorted: mutable.ListBuffer[Long] = new mutable.ListBuffer[Long]()\n\
    \        evensSortedSortedSorted.foreach(x => evensSortedSortedSorted += x)\n\
    \        evensSortedSortedSorted.headOption", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenInRange = mutable.Set[Long]()\n\
    \        val oddInRange = mutable.Set[Long]()\n        val evenInRangeAndOdd =\
    \ mutable.Set[Long]()\n        val oddInRangeAndOdd = mutable.Set[Long]()\n  \
    \      val evenInRangeAndOddAndEven = mutable.Set[Long]()\n        val oddInRangeAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n\
    \        val oddInRangeAndOddAndEvenAndOdd = mutable.Set[Long]()\n        val\
    \ evenInRangeAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOd",
  "        val evens = x to y by 2\n        val evensCount = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount == 0) {\n            return -1\n        }\n     \
    \   val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n            return\
    \ maxEven\n        }\n        val maxEven2 = maxEven / 2\n        val evensCount2\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount2 == 0) {\n            return\
    \ -1\n        }\n        val maxEven3 = maxEven2 / 2\n        val evensCount3\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount3 == 0) {\n            return\
    \ -1\n        }\n        val maxEven4 = maxEven3 / 2\n        val evensCount4\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount4 == 0) {\n            return\
    \ -1\n        }\n        val maxEven5 = maxEven4 / 2\n        val evensCount5\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount5 == 0) {\n            return\
    \ -1\n        }\n        val maxEven6 = maxEven5 / 2\n        val evensCount6\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount6 == 0) {\n            return\
    \ -1\n        }\n        val maxEven7 = maxEven6 / 2\n        val evensCount7\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount7 == 0) {\n            return\
    \ -1\n        }\n        val maxEven8 = maxEven7 / 2\n        val evensCount8\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount8 == 0) {\n            return\
    \ -1\n        }\n        val maxEven9 = maxEven8 / 2\n        val evensCount9\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount9 == 0) {\n            return\
    \ -1\n        }\n        val maxEven10 = maxEven9 / 2\n        val evensCount10\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount10 == 0) {\n            return\
    \ -1\n        }\n        val maxEven11 = maxEven10 / 2\n        val evensCount11\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount11 == 0) {\n            return\
    \ -1\n        }\n        val maxEven12 = maxEven11 / 2\n        val evensCount12\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount12 == 0) {\n            return\
    \ -1\n        }\n        val maxEven13 = maxEven12 / 2\n        val evensCount13\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount13 == 0) {\n            return\
    \ -1\n        }\n        val maxEven14 = maxEven13 / 2", "        val evens =\
    \ x to y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        }\n    \
    \    val maxEven2 = maxEven / 2\n        val evensCount2 = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount2 == 0) {\n            return -1\n        }\n    \
    \    val maxEven3 = evens.max\n        if (maxEven3 % 2 == 0) {\n            return\
    \ maxEven3\n        }\n        val maxEven4 = maxEven3 / 2\n        val evensCount3\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount3 == 0) {\n            return\
    \ -1\n        }\n        val maxEven5 = evens.max\n        if (maxEven5 % 2 ==\
    \ 0) {\n            return maxEven5\n        }\n        val maxEven6 = maxEven5\
    \ / 2\n        val evensCount4 = evens.count(_ % 2 == 0)\n        if (evensCount4\
    \ == 0) {\n            return -1\n        }\n        val maxEven7 = evens.max\n\
    \        if (maxEven7 % 2 == 0) {\n            return maxEven7\n        }\n  \
    \      val maxEven8 = maxEven7 / 2\n        val evensCount5 = evens.count(_ %\
    \ 2 == 0)\n        if (evensCount5 == 0) {\n            return -1\n        }\n\
    \        val maxEven9 = evens.max\n        if (maxEven9 % 2 == 0) {\n        \
    \    return maxEven9\n        }\n        val maxEven10 = maxEven9 / 2\n      \
    \  val evensCount6 = evens.count(_ % 2 == 0)\n        if (evensCount6 == 0) {\n\
    \            return -1\n        }\n        val maxEven11 = evens.max\n       \
    \ if (maxEven11 % 2 == 0) {\n            return maxEven11\n        }\n       \
    \ val maxEven12 = maxEven11 / 2\n        val evensCount7 = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount7 == 0) {\n            return -1\n        }\n    \
    \    val maxEven13 = evens.max\n        if (maxEven13 % 2 == 0) {\n          \
    \  return maxEven13\n        }\n        val maxEven14 = maxEven13 / 2\n      \
    \  val evensCount8 = evens.count(_ % 2 == 0)\n        if (evensCount8 == 0) {\n\
    \            return -1\n        }\n        val maxEven15 = evens.max\n       \
    \ if (maxEven15 % 2 == 0) {\n            return maxEven15\n        }\n       \
    \ val maxEven16 = maxEven15 / 2\n        val evensCount9 = evens.count(_ % 2 ==\
    \ 0)\n", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x to y)\n        range.foreach(x => {\n            if (x\
    \ % 2 == 0) {\n                evens += x\n            } else {\n            \
    \    odds += x\n            }\n        })\n        val even = evens.max\n    \
    \    val odd = odds.max\n        if (even > odd) {\n            return even\n\
    \        } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val even = (x - y).abs % 2 == 0\n        val odd = (x - y).abs % 2\
    \ != 0\n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange\
    \ = range.filter(_ % 2 != 0)\n        evenRange foreach { x => evens += x }\n\
    \        oddRange foreach { x => odds += x }\n        val evenMax = evens.max\n\
    \        val oddMax = odds.max\n        if (evenMax > oddMax) {\n            return\
    \ evenMax\n        } else {\n            return oddMax\n        }", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2 == 0)\n\
    \        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach {\
    \ x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax < oddMax)\
    \ evenMax else oddMax", "        val evens = mutable.ListBuffer[Long]()\n    \
    \    val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if (even > odd) even else odd", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even < odd) even\
    \ else -1", "        val evens = x to y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) -1\n        else evens.max", "     \
    \   val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n\
    \        val evenInRange = mutable.Set[Long]()\n        val oddInRange = mutable.Set[Long]()\n\
    \        val evenInRangeAndOdd = mutable.Set[Long]()\n        val oddInRangeAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEven = mutable.Set[Long]()\n\
    \        val oddInRangeAndEvenAndOdd = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOdd\
    \ = mutable.Set[Long]()\n        val oddInRangeAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n   \
    \     val oddInRangeAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val oddInRangeAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = mutable.Set[Long]()\n\
    \        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven =\
    \ mutable.Set[Long]()\n        val oddInRangeAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val evenInRangeAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = mutable.Set[Long]()\n        val oddInRangeAndEvenAndOddAndEvenAndOddAndEvenAnd",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        val maxEven = evens.max\n        val maxOdd =\
    \ odds.max\n        if (maxEven > maxOdd) {\n            return maxEven\n    \
    \    } else {\n            return maxOdd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenNums = mutable.ListBuffer[Long]()\n        val oddNums = mutable.ListBuffer[Long]()\n\
    \        val numsNums = mutable.ListBuffer[Long]()\n        val evenNumsNums =\
    \ mutable.ListBuffer[Long]()\n        val oddNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNums = mutable.ListBuffer[Long]()\n        val evenNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNums = mutable.ListBuffer[Long]()\n        val evenNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val evenNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val\
    \ evenNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val oddNumsNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val evenNumsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n \
    \       val oddNumsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n   \
    \     val numsNumsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n    \
    \    val evenNumsNumsNumsNumsNumsNumsNumsNums = mut", "        val evens = for\
    \ (i <- x until y) yield {\n            if (i % 2 == 0) i else -1\n        }\n\
    \        val maxEven = evens.max\n        if (maxEven == -1) return -1\n     \
    \   if (maxEven % 2 == 0) maxEven else -1", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y)\n      \
    \  for(i <- range) {\n            if((i % 2) == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if(even > odd)\
    \ {\n            return even\n        } else {\n            return -1\n      \
    \  }", "        var maxEven = if (x < y) x else y\n        var minEven = if (x\
    \ > y) x else y\n        var even = if (x < y) x else y\n        var odd  = if\
    \ (x > y) x else y\n        var evenMax = if (x > y) x else y\n        var evenMin\
    \ = if (x < y) x else y\n        var oddMax = if (x > y) x else y\n        var\
    \ oddMin = if (x < y) x else y\n        var evenEven = if (x < y) x else y\n \
    \       var evenOdd = if (x > y) x else y\n        var oddOdd = if (x < y) x else\
    \ y\n        var evenOddMax = if (x > y) x else y\n        var evenOddMin = if\
    \ (x < y) x else y\n        var oddOddMax = if (x > y) x else y\n        var oddOddMin\
    \ = if (x < y) x else y\n        var evenOddEven = if (x < y) x else y\n     \
    \   var evenOddOdd = if (x > y) x else y\n        var oddOddOdd = if (x < y) x\
    \ else y\n        var evenOddOddMax = if (x > y) x else y\n        var evenOddOddMin\
    \ = if (x < y) x else y\n        var oddOddOddMax = if (x > y) x else y\n    \
    \    var oddOddOddMin = if (x < y) x else y\n        var evenOddEven = if (x <\
    \ y) x else y\n        var evenOddOdd = if (x > y) x else y\n        var oddOddOdd\
    \ = if (x < y) x else y\n        var evenOddOddEven = if (x < y) x else y\n  \
    \      var evenOddOddOdd = if (x > y) x else y\n        var oddOddOddOdd = if\
    \ (x < y) x else y\n        var evenOddOddEvenMax = if (x > y) x else y\n    \
    \    var evenOddOddEvenMin = if (x < y) x else y\n        var oddOddOddEvenMax\
    \ = if (x > y) x else y\n        var oddOddOddEvenMin = if (x < y) x else y\n\
    \        var evenOddEvenEven = if (x < y) x else y\n        var evenOddEvenOdd\
    \ = if (x > y) x else y\n        var oddOddEvenOdd = if (x < y) x else y\n   \
    \     var evenOddEvenOddMax = if (x > y) x else y\n        var evenOddEvenOddMin\
    \ = if (x < y) x else y\n        var oddOddEvenOddMax = if (", "        val evens\
    \ = x to y by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.ListBuffer[Long] = new mutable.ListBuffer[Long]()\n        evensSorted.foreach(x\
    \ => evensSortedSorted += x)\n        evensSortedSorted.sortWith(_ < _)\n    \
    \    evensSortedSorted.lastOption.getOrElse(-1)", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs.toInt\n\
    \        val evenRange = range / 2\n        val oddRange = range - evenRange\n\
    \        val evens = x until evenRange\n        val odds = x until oddRange\n\
    \        evens.foreach(x => evens += x)\n        odds.foreach(x => odds += x)\n\
    \        evens.max", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else -1", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n   \
    \     val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenNum = mutable.Set[Long]()\n        val oddNum = mutable.Set[",
  "        val evens = x to y by 2\n        val evensCount = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount == 0) {\n            return -1\n        }\n     \
    \   val evensMax = evens.max\n        if (evensMax == evens.min) {\n         \
    \   return evensMax\n        }\n        val evensMin = evens.min\n        if (evensMax\
    \ == evensMin) {\n            return evensMax\n        }\n        val evensSum\
    \ = evens.sum\n        if (evensSum == evensMax) {\n            return evensMax\n\
    \        }\n        val evensProduct = evens.product\n        if (evensProduct\
    \ == evensMax) {\n            return evensMax\n        }\n        val evensSumOfSquares\
    \ = evens.map(x => x * x).sum\n        if (evensSumOfSquares == evensMax) {\n\
    \            return evensMax\n        }\n        val evensProductOfSquares = evens.map(x\
    \ => x * x).product\n        if (evensProductOfSquares == evensMax) {\n      \
    \      return evensMax\n        }\n        val evensSumOfCubes = evens.map(x =>\
    \ x * x * x).sum\n        if (evensSumOfCubes == evensMax) {\n            return\
    \ evensMax\n        }\n        val evensProductOfCubes = evens.map(x => x * x\
    \ * x).product\n        if (evensProductOfCubes == evensMax) {\n            return\
    \ evensMax\n        }\n        val evensSumOfPowers = evens.map(x => x * x * x\
    \ * x).sum\n        if (evensSumOfPowers == evensMax) {\n            return evensMax\n\
    \        }\n        val evensProductOfPowers = evens.map(x => x * x * x * x).product\n\
    \        if (evensProductOfPowers == evensMax) {\n            return evensMax\n\
    \        }\n        val evensSumOfLogs = evens.map(x => x * x * x * x * x).sum\n\
    \        if (evensSumOfLogs == evensMax) {\n            return evensMax\n    \
    \    }\n        val evensProductOfLogs = evens.map(x => x * x * x * x * x).product\n\
    \        if (evensProductOfLogs == evensMax) {\n            return evensMax\n\
    \        }\n        val evensSumOfExponents = evens.map(x => x * x * x * x * x\
    \ * x).sum\n        if (evensSumOfExponents == evensMax) {\n            return\
    \ evensMax\n        }\n        val evensProductOfExponents = evens.map(x => x\
    \ * x * x * x * x * x).product\n        if (evensProductOf", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val x = x - 1\n        val y = y - 1\n        val even = x until y by\
    \ 2\n        val odd = x until y by 1\n        even.foreach(x => evens += x)\n\
    \        odd.foreach(x => odds += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)\n\
    \        odds.foreach(x => odd += x)\n        evens.foreach(x => even += x)",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs()\n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val evensSize\
    \ = evens.size\n        val oddsSize = odds.size\n        if (evensSize > oddsSize)\
    \ {\n            evens.last\n        } else if (evensSize < oddsSize) {\n    \
    \        odds.last\n        } else {\n            val even = evens.last\n    \
    \        val odd = odds.last\n            val evenIndex = evens.indexOf(even)\n\
    \            val oddIndex = odds.indexOf(odd)\n            if (evenIndex < oddIndex)\
    \ {\n                even\n            } else {\n                odd\n       \
    \     }\n        }", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach { x =>\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x - y).abs.toInt\n      \
    \  val evenRange = range / 2\n        val oddRange = range % 2\n        val even\
    \ = x % evenRange\n        val odd = x % oddRange\n        while (even < evenRange)\
    \ {\n            evens += even\n            even += evenRange\n        }\n   \
    \     while (odd < oddRange) {\n            odds += odd\n            odd += oddRange\n\
    \        }\n        evens.maxBy(_ % range)", "        val evens = x to y by 2\n\
    \        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortWith(_\
    \ < _)\n        val evensSorted = evensSorted.takeWhile(_ < y)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ > x)\n        val evensSorted = evensSorted.last\n\
    \        evensSorted", "        var max = 0\n        var min = 0\n        for(i\
    \ <- x to y) {\n            val temp = i\n            if(temp % 2 == 0) {\n  \
    \              if(temp > max) {\n                    max = temp\n            \
    \    }\n                if(temp < min) {\n                    min = temp\n   \
    \             }\n            }\n        }\n        if(max == min) {\n        \
    \    return -1\n        }\n        if(max % 2 == 0) {\n            return max\n\
    \        }\n        return -1", "        val evens = x filter (_ % 2 == 0)\n \
    \       val odds = x filter (_ % 2 != 0)\n        val evensAndOdds = evens ++\
    \ odds\n        val evensAndOddsLength = evensAndOdds.length\n        val maxEven\
    \ = evensAndOdds.max\n        val maxOdd = evensAndOddsLength - maxEven\n    \
    \    val maxEvenAndOdd = evensAndOdds.take(maxEven).take(maxOdd)\n        val\
    \ maxEvenAndOddLength = maxEvenAndOdd.length\n        if (maxEvenAndOddLength\
    \ == 0) {\n            return -1\n        }\n        val maxEvenAndOddMax = maxEvenAndOdd.max\n\
    \        if (maxEvenAndOddMax == evensAndOddsLength) {\n            return -1\n\
    \        }\n        val maxEvenAndOddMaxAndOdd = evensAndOdds.take(maxEven).take(maxOdd).take(maxEvenAndOddMax)\n\
    \        val maxEvenAndOddMaxAndOddLength = maxEvenAndOddMaxAndOdd.length\n  \
    \      if (maxEvenAndOddMaxAndOddLength == 0) {\n            return -1\n     \
    \   }\n        val maxEvenAndOddMaxAndOddMax = maxEvenAndOddMaxAndOdd.max\n  \
    \      if (maxEvenAndOddMaxAndOddMax == evensAndOddsLength) {\n            return\
    \ -1\n        }\n        val maxEvenAndOddMaxAndOddMaxAndOdd = evensAndOdds.take(maxEven).take(maxOdd).take(maxEvenAndOddMax).take(maxEvenAndOddMaxAndOddMax)\n\
    \        val maxEvenAndOddMaxAndOddMaxAndOddLength = maxEvenAndOddMaxAndOddMaxAndOdd.length\n\
    \        if (maxEvenAndOddMaxAndOddMaxAndOddLength == 0) {\n            return\
    \ -1\n        }\n        val maxEvenAndOddMaxAndOddMaxAndOddMax = evensAndOdds.take(maxEven).take(maxOdd).take(maxEvenAndOddMax).take(maxEvenAndOddMaxAndOddMax).take(maxEvenAndOddMaxAndOddMaxAndOddMax)\n\
    \        val maxEvenAndOddMaxAndOddMaxAndOddMaxAndOdd = evensAndOdds.take(", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsCount\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount3 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount4\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount6 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount7\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount9 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount10\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount12 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount13\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount15 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount16\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount17 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount18 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount19\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount20 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount21 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount22\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount23 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount24 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount25\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensOdds = mutable.ListBuffer[Long]()\n        val evensOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = mutable.ListBuffer[Long]()\n\
    \        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsO", "  \
    \      val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSorted = evensSorted.sortBy(_)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n", "        var max = 0\n        var min = 0\n        var even = 0\n   \
    \     var odd = 0\n        var evenMax = 0\n        var evenMin = 0\n        var\
    \ oddMax = 0\n        var oddMin = 0\n        var evenMaxCount = 0\n        var\
    \ evenMinCount = 0\n        var oddMaxCount = 0\n        var oddMinCount = 0\n\
    \        var evenMaxCount2 = 0\n        var evenMinCount2 = 0\n        var oddMaxCount2\
    \ = 0\n        var oddMinCount2 = 0\n        var evenMaxCount3 = 0\n        var\
    \ evenMinCount3 = 0\n        var oddMaxCount3 = 0\n        var oddMinCount3 =\
    \ 0\n        var evenMaxCount4 = 0\n        var evenMinCount4 = 0\n        var\
    \ oddMaxCount4 = 0\n        var oddMinCount4 = 0\n        var evenMaxCount5 =\
    \ 0\n        var evenMinCount5 = 0\n        var oddMaxCount5 = 0\n        var\
    \ oddMinCount5 = 0\n        var evenMaxCount6 = 0\n        var evenMinCount6 =\
    \ 0\n        var oddMaxCount6 = 0\n        var oddMinCount6 = 0\n        var evenMaxCount7\
    \ = 0\n        var evenMinCount7 = 0\n        var oddMaxCount7 = 0\n        var\
    \ oddMinCount7 = 0\n        var evenMaxCount8 = 0\n        var evenMinCount8 =\
    \ 0\n        var oddMaxCount8 = 0\n        var oddMinCount8 = 0\n        var evenMaxCount9\
    \ = 0\n        var evenMinCount9 = 0\n        var oddMaxCount9 = 0\n        var\
    \ oddMinCount9 = 0\n        var evenMaxCount10 = 0\n        var evenMinCount10\
    \ = 0\n        var oddMaxCount10 = 0\n        var oddMinCount10 = 0\n        var\
    \ evenMaxCount11 = 0\n        var evenMinCount11 = 0\n        var oddMaxCount11\
    \ = 0\n        var oddMinCount11 = 0\n        var evenMaxCount12 = 0\n       \
    \ var evenMinCount12 = 0\n        var oddMaxCount12 = 0\n        var oddMinCount12\
    \ = 0\n        var evenMaxCount13 = 0\n        var evenMinCount13 = 0\n      \
    \  var oddMaxCount13 = 0\n        var oddMinCount13 = 0\n        var evenMaxCount14\
    \ = 0\n        var evenMinCount14 = 0\n        var oddMaxCount14 = 0\n       \
    \ var oddMinCount14 = 0\n        var evenMaxCount15 = 0\n        var evenMinCount15\
    \ = 0\n        var oddMaxCount15 = 0\n        var oddMinCount15 = 0\n        var\
    \ evenMaxCount16 = 0\n        var evenMinCount16 = 0\n        var oddMaxCount16\
    \ = 0\n        var oddMinCount16 = 0\n        var evenMaxCount17 = 0\n       \
    \ var evenMinCount17 = 0\n        var oddMaxCount17 = 0\n        var oddMinCount17\
    \ = 0\n        var evenMaxCount", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSorted = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSortedSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSorted = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val evensCount = mutable.Set[Long]()\n        val oddsCount = mutable.Set[Long]()\n\
    \        val evensCount2 = mutable.Set[Long]()\n        val oddsCount2 = mutable.Set[Long]()\n\
    \        val evensCount3 = mutable.Set[Long]()\n        val oddsCount3 = mutable.Set[Long]()\n\
    \        val evensCount4 = mutable.Set[Long]()\n        val oddsCount4 = mutable.Set[Long]()\n\
    \        val evensCount5 = mutable.Set[Long]()\n        val oddsCount5 = mutable.Set[Long]()\n\
    \        val evensCount6 = mutable.Set[Long]()\n        val oddsCount6 = mutable.Set[Long]()\n\
    \        val evensCount7 = mutable.Set[Long]()\n        val oddsCount7 = mutable.Set[Long]()\n\
    \        val evensCount8 = mutable.Set[Long]()\n        val oddsCount8 = mutable.Set[Long]()\n\
    \        val evensCount9 = mutable.Set[Long]()\n        val oddsCount9 = mutable.Set[Long]()\n\
    \        val evensCount10 = mutable.Set[Long]()\n        val oddsCount10 = mutable.Set[Long]()\n\
    \        val evensCount11 = mutable.Set[Long]()\n        val oddsCount11 = mutable.Set[Long]()\n\
    \        val evensCount12 = mutable.Set[Long]()\n        val oddsCount12 = mutable.Set[Long]()\n\
    \        val evensCount13 = mutable.Set[Long]()\n        val oddsCount13 = mutable.Set[Long]()\n\
    \        val evensCount14 = mutable.Set[Long]()\n        val oddsCount14 = mutable.Set[Long]()\n\
    \        val evensCount15 = mutable.Set[Long]()\n        val oddsCount15 = mutable.Set[Long]()\n\
    \        val evensCount16 = mutable.Set[Long]()\n        val oddsCount16 = mutable.Set[Long]()\n\
    \        val evensCount17 = mutable.Set[Long]()\n        val oddsCount17 = mutable.Set[Long]()\n\
    \        val evens", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return -1\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]", "        var max =\
    \ 0\n        var min = 0\n        var even = 0\n        var odd = 0\n        var\
    \ evenMax = 0\n        var evenMin = 0\n        var oddMax = 0\n        var oddMin\
    \ = 0\n        var evenMaxCount = 0\n        var evenMinCount = 0\n        var\
    \ oddMaxCount = 0\n        var oddMinCount = 0\n        var evenMaxCount2 = 0\n\
    \        var evenMinCount2 = 0\n        var oddMaxCount2 = 0\n        var oddMinCount2\
    \ = 0\n        var evenMaxCount3 = 0\n        var evenMinCount3 = 0\n        var\
    \ oddMaxCount3 = 0\n        var oddMinCount3 = 0\n        var evenMaxCount4 =\
    \ 0\n        var evenMinCount4 = 0\n        var oddMaxCount4 = 0\n        var\
    \ oddMinCount4 = 0\n        var evenMaxCount5 = 0\n        var evenMinCount5 =\
    \ 0\n        var oddMaxCount5 = 0\n        var oddMinCount5 = 0\n        var evenMaxCount6\
    \ = 0\n        var evenMinCount6 = 0\n        var oddMaxCount6 = 0\n        var\
    \ oddMinCount6 = 0\n        var evenMaxCount7 = 0\n        var evenMinCount7 =\
    \ 0\n        var oddMaxCount7 = 0\n        var oddMinCount7 = 0\n        var evenMaxCount8\
    \ = 0\n        var evenMinCount8 = 0\n        var oddMaxCount8 = 0\n        var\
    \ oddMinCount8 = 0\n        var evenMaxCount9 = 0\n        var evenMinCount9 =\
    \ 0\n        var oddMaxCount9 = 0\n        var oddMinCount9 = 0\n        var evenMaxCount10\
    \ = 0\n        var evenMinCount10 = 0\n        var oddMaxCount10 = 0\n       \
    \ var oddMinCount10 = 0\n        var evenMaxCount11 = 0\n        var evenMinCount11\
    \ = 0\n        var oddMaxCount11 = 0\n        var oddMinCount11 = 0\n        var\
    \ evenMaxCount12 = 0\n        var evenMinCount12 = 0\n        var oddMaxCount12\
    \ = 0\n        var oddMinCount12 = 0\n        var evenMaxCount13 = 0\n       \
    \ var evenMinCount13 = 0\n        var oddMaxCount13 = 0\n        var oddMinCount13\
    \ = 0\n        var evenMaxCount14 = 0\n        var evenMinCount14 = 0\n      \
    \  var oddMaxCount14 = 0\n        var oddMinCount14 = 0\n        var evenMaxCount15\
    \ = 0\n        var evenMinCount15 = 0\n        var oddMaxCount15 = 0\n       \
    \ var oddMinCount15 = 0\n        var evenMaxCount16 = 0\n        var evenMinCount16\
    \ = 0\n        var oddMaxCount16 = 0\n        var oddMinCount16 = 0\n        var\
    \ evenMaxCount17 = 0\n        var evenMinCount17 = 0\n        var oddMaxCount17\
    \ = 0\n        var oddMinCount17 = 0\n        var evenMaxCount", "        val\
    \ evens = x to y by 2\n        val evensSorted = evens.toList\n        val evensSorted\
    \ = evensSorted.sortBy(x => x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.last\n        evensSorted.toLong", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs.toInt\n\
    \        val evenRange = range / 2\n        val oddRange = range - evenRange\n\
    \        val evens = x until evenRange\n        val odds = x until oddRange\n\
    \        evens.foreach(x => evens += x)\n        odds.foreach(x => odds += x)\n\
    \        evens.foreach(x => evens += x)\n        odds.foreach(x => odds += x)\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n \
    \       range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n     \
    \   val even = evens.max\n        val odd = odds.max\n        if (even > odd)\
    \ even else -1", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val oddsCount = mutable.ListBuffer[Long]()\n        val evensCount2 =\
    \ mutable.ListBuffer[Long]()\n        val oddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensCount3 = mutable.ListBuffer[Long]()\n        val oddsCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount4 = mutable.ListBuffer[Long]()\n        val evensCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensCount6 = mutable.ListBuffer[Long]()\n        val oddsCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount7 = mutable.ListBuffer[Long]()\n        val evensCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensCount9 = mutable.ListBuffer[Long]()\n        val oddsCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount10 = mutable.ListBuffer[Long]()\n        val evensCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensCount12 = mutable.ListBuffer[Long]()\n        val oddsCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount13 = mutable.ListBuffer[Long]()\n        val evensCount14\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evensCount15 = mutable.ListBuffer[Long]()\n        val oddsCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount16 = mutable.ListBuffer[Long]()\n", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = (x - y).abs \n        val evenRange = range.filter(_ % 2 == 0)\n        val\
    \ oddRange = range.filter(_ % 2 != 0)\n        evenRange foreach { x => evens\
    \ += x }\n        oddRange foreach { x => odds += x }\n        val evensCount\
    \ = evens.size\n        val oddsCount = odds.size\n        if (evensCount > oddsCount)\
    \ {\n            evens.last\n        } else {\n            odds.last\n       \
    \ }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val evensCount = mutable.Set[Long]()\n        val oddsCount = mutable.Set[Long]()\n\
    \        val evensCount2 = mutable.Set[Long]()\n        val oddsCount2 = mutable.Set[Long]()\n\
    \        val evensCount3 = mutable.Set[Long]()\n        val oddsCount3 = mutable.Set[Long]()\n\
    \        val evensCount4 = mutable.Set[Long]()\n        val oddsCount4 = mutable.Set[Long]()\n\
    \        val evensCount5 = mutable.Set[Long]()\n        val oddsCount5 = mutable.Set[Long]()\n\
    \        val evensCount6 = mutable.Set[Long]()\n        val oddsCount6 = mutable.Set[Long]()\n\
    \        val evensCount7 = mutable.Set[Long]()\n        val oddsCount7 = mutable.Set[Long]()\n\
    \        val evensCount8 = mutable.Set[Long]()\n        val oddsCount8 = mutable.Set[Long]()\n\
    \        val evensCount9 = mutable.Set[Long]()\n        val oddsCount9 = mutable.Set[Long]()\n\
    \        val evensCount10 = mutable.Set[Long]()\n        val oddsCount10 = mutable.Set[Long]()\n\
    \        val evensCount11 = mutable.Set[Long]()\n        val oddsCount11 = mutable.Set[Long]()\n\
    \        val evensCount12 = mutable.Set[Long]()\n        val oddsCount12 = mutable.Set[Long]()\n\
    \        val evensCount13 = mutable.Set[Long]()\n        val oddsCount13 = mutable.Set[Long]()\n\
    \        val evensCount14 = mutable.Set[Long]()\n        val oddsCount14 = mutable.Set[Long]()\n\
    \        val evensCount15 = mutable.Set[Long]()\n        val oddsCount15 = mutable.Set[Long]()\n\
    \        val evensCount16 = mutable.Set[Long]()\n        val oddsCount16 = mutable.Set[Long]()\n\
    \        val evensCount17 = mutable.Set[Long]()\n        val oddsCount17 = mutable.Set[Long]()\n\
    \        val evens", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) even\
    \ else odd", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        val evenRange = (x to y).filter(_ % 2 == 0)\n        val\
    \ oddRange = (x to y).filter(_ % 2 != 0)\n        val evens = range.filter(x =>\
    \ evenRange.contains(x))\n        val odds = range.filter(x => oddRange.contains(x))\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n   \
    \     val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 !=\
    \ 0)\n        val evensSum = evens.sum\n        val oddsSum = odds.sum\n     \
    \   val evensSumInRange = evensSum - y\n        val oddsSumInRange = oddsSum -\
    \ x\n        val evensSumInRangeInRange = evensSumInRange / 2\n        val oddsSumInRangeInRange\
    \ = oddsSumInRange / 2\n        val evensSumInRangeInRangeInRange = evensSumInRangeInRange\
    \ / 2\n        val oddsSumInRangeInRangeInRange = oddsSumInRangeInRange / 2\n\
    \        val evensSumInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRange\
    \ / 2\n        val oddsSumInRangeInRangeInRangeInRange = oddsSumInRangeInRangeInRange\
    \ / 2\n        val evensSumInRangeInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRangeInRange\
    \ / 2\n        val oddsSumInRangeInRangeInRangeInRangeInRange = oddsSumInRangeInRangeInRangeInRange\
    \ / 2\n        val evensSumInRangeInRangeInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val oddsSumInRangeInRangeInRangeInRangeInRangeInRange = oddsSumInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val evensSumInRangeInRangeInRangeInRangeInRangeInRange = evensSumInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val oddsSumInRangeInRangeInRangeInRangeInRangeInRange = oddsSumInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val evensSumInRangeInRangeInRangeInRangeInRangeInRangeInRange =\
    \ evensSumInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val oddsSumInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = oddsSumInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val evensSumInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = evensSumInRangeInRangeInRangeInRangeInRange", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range % 2\n    \
    \    val even = x + evenRange\n        val odd = x + oddRange\n        while (even\
    \ < y) {\n            evens += even\n            even += evenRange\n        }\n\
    \        while (odd > y) {\n            odds += odd\n            odd -= oddRange\n\
    \        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val x = x - 1\n      \
    \  val y = y - 1\n        while(x <= y) {\n            val even = x % 2 == 0\n\
    \            val odd = x % 2 != 0\n            if(even && odd) {\n           \
    \     evens += x\n            } else if(even) {\n                evens += x\n\
    \            } else if(odd) {\n                odds += x\n            }\n    \
    \        x += 1\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if(even > odd) {\n            even\n        } else {\n            -1\n\
    \        }", "        var maxEven = math.max(x, y)\n        var minEven = math.min(x,\
    \ y)\n        var evens = List[Long]()\n        var even = List[Long]()\n    \
    \    var evenMax = List[Long]()\n        var evenMin = List[Long]()\n        var\
    \ evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n     \
    \   var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMinIndex = List[Long]()\n\
    \        var evenMaxIndex = List[Long]()\n        var evenMin", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = x.toInt\n        val odd = y.toInt\n        while (even <\
    \ odd) {\n            if (even % 2 == 0) {\n                evens += even\n  \
    \          }\n            else {\n                odds += even\n            }\n\
    \            even += 1\n        }\n        val evenMax = evens.max\n        val\
    \ oddMax = odds.max\n        if (evenMax == oddMax) {\n            return evenMax\n\
    \        }\n        else {\n            return -1\n        }", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 !=\
    \ 0)\n        if (evens.isEmpty) {\n            if (odds.isEmpty) {\n        \
    \        return -1\n            } else {\n                return odds.head\n \
    \           }\n        } else {\n            if (odds.isEmpty) {\n           \
    \     return evens.head\n            } else {\n                val even = evens.head\n\
    \                val odd = odds.head\n                if (even > odd) {\n    \
    \                return even\n                } else {\n                    return\
    \ odd\n                }\n            }\n        }", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_\
    \ % 2 == 0)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ >=\
    \ x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ <=\
    \ y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted =\
    \ evensSorted.takeWhile(_ >= x)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ <= ", "        val evens =\
    \ mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = (range / 2).abs\n \
    \       val oddRange = range - evenRange\n        val even = x % 2 == 0\n    \
    \    val odd = y % 2 == 0\n        val evenNum = if (even) x else y\n        val\
    \ oddNum = if (odd) x else y\n        val evenNums = if (even) evenNum :: evens\
    \ else evenNum :: evens\n        val oddNums = if (odd) oddNum :: odds else oddNum\
    \ :: odds\n        val evenNumsSorted = evenNums.sort\n        val oddNumsSorted\
    \ = oddNums.sort\n        val evenRangeSorted = evenRange.sort\n        val oddRangeSorted\
    \ = oddRange.sort\n        val evenRangesSorted = evenRangeSorted.reverse\n  \
    \      val oddRangesSorted = oddRangeSorted.reverse\n        val evenRangesSortedReversed\
    \ = evenRangesSorted.reverse\n        val oddRangesSortedReversed = oddRangesSorted.reverse\n\
    \        val evenRangesSortedReversedSorted = evenRangesSortedReversed.sort\n\
    \        val oddRangesSortedReversedSorted = oddRangesSortedReversed.sort\n  \
    \      val evenRangesSortedReversedSortedReversed = evenRangesSortedReversedSorted.reverse\n\
    \        val oddRangesSortedReversedSortedReversed = oddRangesSortedReversedSorted.reverse\n\
    \        val evenRangesSortedReversedSortedReversedSorted = evenRangesSortedReversedSortedReversed.sort\n\
    \        val oddRangesSortedReversedSortedReversedSorted = oddRangesSortedReversedSortedReversed.sort\n\
    \        val evenRangesSortedReversedSortedReversedSortedReversed = evenRangesSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val oddRangesSortedReversedSortedReversedSortedReversed = oddRangesSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val evenRangesSortedReversedSortedReversedSortedReversedSorted = evenRangesSortedReversedSortedReversedSortedReversedSorted.sort\n\
    \        val oddRangesSortedReversedSortedReversedSortedReversedSorted = oddRangesSortedReversedSortedReversedSortedReversedSorted.sort\n\
    \        val evenRangesSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = evenRangesSortedReversedSortedReverse", "        val evens = x to y by 2\n\
    \        val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(_)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ <= y)\n        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.last\n\
    \        evensSorted", "        var biggest = y\n        var even = 1\n      \
    \  var even2 = 2\n        var even3 = 3\n        var even4 = 4\n        var even5\
    \ = 5\n        var even6 = 6\n        var even7 = 7\n        var even8 = 8\n \
    \       var even9 = 9\n        var even10 = 10\n        var even11 = 11\n    \
    \    var even12 = 12\n        var even13 = 13\n        var even14 = 14\n     \
    \   var even15 = 15\n        var even16 = 16\n        var even17 = 17\n      \
    \  var even18 = 18\n        var even19 = 19\n        var even20 = 20\n       \
    \ var even21 = 21\n        var even22 = 22\n        var even23 = 23\n        var\
    \ even24 = 24\n        var even25 = 25\n        var even26 = 26\n        var even27\
    \ = 27\n        var even28 = 28\n        var even29 = 29\n        var even30 =\
    \ 30\n        var even31 = 31\n        var even32 = 32\n        var even33 = 33\n\
    \        var even34 = 34\n        var even35 = 35\n        var even36 = 36\n \
    \       var even37 = 37\n        var even38 = 38\n        var even39 = 39\n  \
    \      var even40 = 40\n        var even41 = 41\n        var even42 = 42\n   \
    \     var even43 = 43\n        var even44 = 44\n        var even45 = 45\n    \
    \    var even46 = 46\n        var even47 = 47\n        var even48 = 48\n     \
    \   var even49 = 49\n        var even50 = 50\n        var even51 = 51\n      \
    \  var even52 = 52\n        var even53 = 53\n        var even54 = 54\n       \
    \ var even55 = 55\n        var even56 = 56\n        var even57 = 57\n        var\
    \ even58 = 58\n        var even59 = 59\n        var even60 = 60\n        var even61\
    \ = 61\n        var even62 = 62\n        var even63 = 63\n        var even64 =\
    \ 64\n        var even65 = 65\n        var even66 = 66\n        var even67 = 67\n\
    \        var even68 = 68\n        var even69 = 69\n        var even70 = 70\n \
    \       var even71 = 71\n        var even72 = 72\n        var even73 = 73\n  \
    \      var even74 = 74\n        var even75 = 75\n        var even76 = 76\n   \
    \     var even77 = 77\n        var even78 = 78\n        var even79 = 79\n    \
    \    var even80 = 80\n        var even81 = 81\n        var even82 = 82\n     \
    \   var even83 = 83\n        var even84 = 84\n        var even85 = 85\n      \
    \  var even86 = 86\n        var even87 = 87\n        var even88 = 88", "     \
    \   val evens = x to y by 2\n        val evensSorted = evens.toList\n        val\
    \ evensSorted = evensSorted.sortBy(_)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.takeWhile(_ > x)\n        val evensSorted\
    \ = evensSorted.lastOption\n        evensSorted.getOrElse(-1)", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 == 1)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val evensCount\
    \ = evens.count(_ > 0)\n        val oddsCount = odds.count(_ > 0)\n        val\
    \ evensSum = evens.sum\n        val oddsSum = odds.sum\n        val evensMax =\
    \ evens.max\n        val oddsMax = odds.max\n        val evensMin = evens.min\n\
    \        val oddsMin = odds.min\n        if (evensCount == 0 && oddsCount == 0)\
    \ {\n            return -1\n        } else if (evensCount == 0 && oddsCount >\
    \ 0) {\n            return -1\n        } else if (evensCount > 0 && oddsCount\
    \ == 0) {\n            return -1\n        } else if (evensCount > 0 && oddsCount\
    \ > 0) {\n            if (evensSum == oddsSum) {\n                if (evensMax\
    \ == oddsMax) {\n                    if (evensMin == oddsMin) {\n            \
    \            return evens.head\n                    } else {\n               \
    \         return -1\n                    }\n                } else {\n       \
    \             return -1\n                }\n            } else {\n           \
    \     return -1\n            }\n        } else {\n            return -1\n    \
    \    }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = for\
    \ (i <- x until y) yield {\n            if (i % 2 == 0) i\n            else -1\n\
    \        }\n        val maxEven = evens.max\n        if (maxEven == -1) return\
    \ -1\n        if (maxEven % 2 == 0) maxEven\n        else -1", "        var even\
    \ = 0\n        var odd = 0\n        var evenMax = 0\n        var oddMax = 0\n\
    \        var evenMin = 0\n        var oddMin = 0\n        var evenMax2 = -1\n\
    \        var oddMax2 = -1\n        var evenMin2 = -1\n        var oddMin2 = -1\n\
    \        var evenMax3 = -1\n        var oddMax3 = -1\n        var evenMin3 = -1\n\
    \        var oddMin3 = -1\n        var evenMax4 = -1\n        var oddMax4 = -1\n\
    \        var evenMin4 = -1\n        var oddMin4 = -1\n        var evenMax5 = -1\n\
    \        var oddMax5 = -1\n        var evenMin5 = -1\n        var oddMin5 = -1\n\
    \        var evenMax6 = -1\n        var oddMax6 = -1\n        var evenMin6 = -1\n\
    \        var oddMin6 = -1\n        var evenMax7 = -1\n        var oddMax7 = -1\n\
    \        var evenMin7 = -1\n        var oddMin7 = -1\n        var evenMax8 = -1\n\
    \        var oddMax8 = -1\n        var evenMin8 = -1\n        var oddMin8 = -1\n\
    \        var evenMax9 = -1\n        var oddMax9 = -1\n        var evenMin9 = -1\n\
    \        var oddMin9 = -1\n        var evenMax10 = -1\n        var oddMax10 =\
    \ -1\n        var evenMin10 = -1\n        var oddMin10 = -1\n        var evenMax11\
    \ = -1\n        var oddMax11 = -1\n        var evenMin11 = -1\n        var oddMin11\
    \ = -1\n        var evenMax12 = -1\n        var oddMax12 = -1\n        var evenMin12\
    \ = -1\n        var oddMin12 = -1\n        var evenMax13 = -1\n        var oddMax13\
    \ = -1\n        var evenMin13 = -1\n        var oddMin13 = -1\n        var evenMax14\
    \ = -1\n        var oddMax14 = -1\n        var evenMin14 = -1\n        var oddMin14\
    \ = -1\n        var evenMax15 = -1\n        var oddMax15 = -1\n        var evenMin15\
    \ = -1\n        var oddMin15 = -1\n        var evenMax16 = -1\n        var oddMax16\
    \ = -1\n        var evenMin16 = -1\n        var oddMin16 = -1\n        var evenMax17\
    \ = -1\n        var oddMax17 = -1\n        var evenMin17 = -1\n        var oddMin17\
    \ = -1\n        var evenMax18 = -1\n        var oddMax18 = -1\n        var evenMin18\
    \ = -1\n        var oddMin18 = -1\n        var evenMax19 = -1\n        var oddMax19\
    \ = -1\n        var evenMin19 = -1\n        var oddMin19 = -1\n        var evenMax20\
    \ = -1\n        var oddMax20 = -1\n        var evenMin20 = -1\n        var oddMin20\
    \ = -1\n        var evenMax21 = -1\n        var oddMax21 = -1\n        var evenMin21\
    \ = -1\n        var oddMin21 = -1\n", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range / 2\n        val oddRange = range - evenRange\n\
    \        val even = x + evenRange\n        val odd = x + oddRange\n        while(even\
    \ < y) {\n            evens += even\n            even += evenRange\n        }\n\
    \        while(odd > y) {\n            odds += odd\n            odd -= oddRange\n\
    \        }\n        evens.max", "        val evens = for (i <- x until y) yield\
    \ {\n            if (i % 2 == 0) i else -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven > -1) return maxEven\n        else -1", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val x = x toLong\n        val y = y toLong\n        val even = x toLong\
    \ / 2\n        val odd = x toLong + 1\n        val evens = x toLong / 2\n    \
    \    val odds = x toLong + 1\n        val even = x toLong / 2\n        val odd\
    \ = x toLong + 1\n        val evens = x toLong / 2\n        val odds = x toLong\
    \ + 1\n        val even = x toLong / 2\n        val odd = x toLong + 1\n     \
    \   val evens = x toLong / 2\n        val odds = x toLong + 1\n        val even\
    \ = x toLong / 2\n        val odd = x toLong + 1\n        val evens = x toLong\
    \ / 2\n        val odds = x toLong + 1\n        val even = x toLong / 2\n    \
    \    val odd = x toLong + 1\n        val evens = x toLong / 2\n        val odds\
    \ = x toLong + 1\n        val even = x toLong / 2\n        val odd = x toLong\
    \ + 1\n        val evens = x toLong / 2\n        val odds = x toLong + 1\n   \
    \     val even = x toLong / 2\n        val odd = x toLong + 1\n        val evens\
    \ = x toLong / 2\n        val odds = x toLong + 1\n        val even = x toLong\
    \ / 2\n        val odd = x toLong + 1\n        val evens = x toLong / 2\n    \
    \    val odds = x toLong + 1\n        val even = x toLong / 2\n        val odd\
    \ = x toLong + 1\n        val evens = x toLong / 2\n        val odds = x toLong\
    \ + 1\n        val even = x toLong / 2\n        val odd = x toLong + 1\n     \
    \   val evens = x toLong / 2\n        val odds = x toLong + 1\n        val even\
    \ = x toLong / 2\n        val odd = x toLong + 1\n        val evens = x toLong\
    \ / 2\n        val odds = x toLong + 1\n        val even = x toLong / 2\n    \
    \    val odd = x toLong + 1\n        val evens = x toLong / 2", "        val evens\
    \ = for (i <- x until y) yield {\n            if (i % 2 == 0) i\n            else\
    \ -1\n        }\n        val maxEven = evens.max\n        if (maxEven == -1) return\
    \ -1\n        if (maxEven % 2 == 0) maxEven\n        else -1", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val x = x toLong\n        val y = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y toLong\n        val even = x toLong\n\
    \        val odd = y toLong\n        val evens = x toLong\n        val odds =\
    \ y toLong\n        val even = x toLong\n        val odd = y toLong\n        val\
    \ evens = x toLong\n        val odds = y to", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0).length\n        val oddRange\
    \ = range.filter(_ % 2 != 0).length\n        val evens = range.filter(_ % 2 ==\
    \ 0).takeWhile(_ < y).map(_ + x).takeWhile(_ < y)\n        val odds = range.filter(_\
    \ % 2 != 0).takeWhile(_ < y).map(_ + x).takeWhile(_ < y)\n        val even = evens.reduceLeft(_\
    \ + _)\n        val odd = odds.reduceLeft(_ + _)\n        if (even > odd) {\n\
    \            even\n        } else {\n            -1\n        }", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val x = x - 1\n        val y = y - 1\n        val even = x % 2 == 0\n\
    \        val odd = y % 2 == 0\n        if (even && odd) {\n            evens +=\
    \ x\n            odds += y\n        } else if (even) {\n            evens += x\n\
    \        } else if (odd) {\n            odds += y\n        }\n        val even\
    \ = evens.max\n        val odd = odds.max\n        if (even > odd) {\n       \
    \     return even\n        } else {\n            return odd\n        }", "   \
    \     var maxEven = math.max(x, y)\n        var minEven = math.min(x, y)\n   \
    \     var even = math.min(maxEven, minEven)\n        var even2 = math.max(maxEven,\
    \ minEven)\n        var even3 = math.min(maxEven, minEven)\n        var even4\
    \ = math.max(maxEven, minEven)\n        var even5 = math.min(maxEven, minEven)\n\
    \        var even6 = math.max(maxEven, minEven)\n        var even7 = math.min(maxEven,\
    \ minEven)\n        var even8 = math.max(maxEven, minEven)\n        var even9\
    \ = math.min(maxEven, minEven)\n        var even10 = math.max(maxEven, minEven)\n\
    \        var even11 = math.min(maxEven, minEven)\n        var even12 = math.max(maxEven,\
    \ minEven)\n        var even13 = math.min(maxEven, minEven)\n        var even14\
    \ = math.max(maxEven, minEven)\n        var even15 = math.min(maxEven, minEven)\n\
    \        var even16 = math.max(maxEven, minEven)\n        var even17 = math.min(maxEven,\
    \ minEven)\n        var even18 = math.max(maxEven, minEven)\n        var even19\
    \ = math.min(maxEven, minEven)\n        var even20 = math.max(maxEven, minEven)\n\
    \        var even21 = math.min(maxEven, minEven)\n        var even22 = math.max(maxEven,\
    \ minEven)\n        var even23 = math.min(maxEven, minEven)\n        var even24\
    \ = math.max(maxEven, minEven)\n        var even25 = math.min(maxEven, minEven)\n\
    \        var even26 = math.max(maxEven, minEven)\n        var even27 = math.min(maxEven,\
    \ minEven)\n        var even28 = math.max(maxEven, minEven)\n        var even29\
    \ = math.min(maxEven, minEven)\n        var even30 = math.max(maxEven, minEven)\n\
    \        var even31 = math.min(maxEven, minEven)\n        var even32 = math.max(maxEven,\
    \ minEven)\n        var even33 = math.min(maxEven, minEven)\n        var even34\
    \ = math.max(maxEven, minEven)\n        var even35 = math.min(maxEven, minEven)\n\
    \        var even36 = math.max(maxEven, minEven)\n        var even37 = math.min(maxEven,\
    \ minEven)\n        var even38 = math.max(maxEven, minEven)\n        var even39\
    \ = math.min(maxEven, minEven)\n        var ", "        var max = 0\n        var\
    \ min = 0\n        var even = 0\n        var odd = 0\n        var evenMax = 0\n\
    \        var evenMin = 0\n        var oddMax = 0\n        var oddMin = 0\n   \
    \     var evenMaxIndex = 0\n        var evenMinIndex = 0\n        var oddMaxIndex\
    \ = 0\n        var oddMinIndex = 0\n        var evenMaxIndex2 = 0\n        var\
    \ evenMinIndex2 = 0\n        var oddMaxIndex2 = 0\n        var oddMinIndex2 =\
    \ 0\n        var evenMaxIndex3 = 0\n        var evenMinIndex3 = 0\n        var\
    \ oddMaxIndex3 = 0\n        var oddMinIndex3 = 0\n        var evenMaxIndex4 =\
    \ 0\n        var evenMinIndex4 = 0\n        var oddMaxIndex4 = 0\n        var\
    \ oddMinIndex4 = 0\n        var evenMaxIndex5 = 0\n        var evenMinIndex5 =\
    \ 0\n        var oddMaxIndex5 = 0\n        var oddMinIndex5 = 0\n        var evenMaxIndex6\
    \ = 0\n        var evenMinIndex6 = 0\n        var oddMaxIndex6 = 0\n        var\
    \ oddMinIndex6 = 0\n        var evenMaxIndex7 = 0\n        var evenMinIndex7 =\
    \ 0\n        var oddMaxIndex7 = 0\n        var oddMinIndex7 = 0\n        var evenMaxIndex8\
    \ = 0\n        var evenMinIndex8 = 0\n        var oddMaxIndex8 = 0\n        var\
    \ oddMinIndex8 = 0\n        var evenMaxIndex9 = 0\n        var evenMinIndex9 =\
    \ 0\n        var oddMaxIndex9 = 0\n        var oddMinIndex9 = 0\n        var evenMaxIndex10\
    \ = 0\n        var evenMinIndex10 = 0\n        var oddMaxIndex10 = 0\n       \
    \ var oddMinIndex10 = 0\n        var evenMaxIndex11 = 0\n        var evenMinIndex11\
    \ = 0\n        var oddMaxIndex11 = 0\n        var oddMinIndex11 = 0\n        var\
    \ evenMaxIndex12 = 0\n        var evenMinIndex12 = 0\n        var oddMaxIndex12\
    \ = 0\n        var oddMinIndex12 = 0\n        var evenMaxIndex13 = 0\n       \
    \ var evenMinIndex13 = 0\n        var oddMaxIndex13 = 0\n        var oddMinIndex13\
    \ = 0\n        var evenMaxIndex14 = 0\n        var evenMinIndex14 = 0\n      \
    \  var oddMaxIndex14 = 0\n        var oddMinIndex14 = 0\n        var evenMaxIndex15\
    \ = 0\n        var evenMinIndex15 = 0\n        var oddMaxIndex15 = 0\n       \
    \ var oddMinIndex15 = 0\n        var evenMaxIndex16 = 0\n        var evenMinIndex16\
    \ = 0\n        var oddMaxIndex16 = 0\n        var oddMinIndex16 = 0\n        var\
    \ evenMaxIndex17 = 0\n        var evenMinIndex17 = 0\n        var oddMaxIndex17\
    \ = 0\n        var oddMinIndex17 = 0\n        var evenMaxIndex", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        if (evens.size == 2) {\n            return evens.max\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if (even > odd) {\n            return even\n        } else {\n            return\
    \ odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val x = x toLong\n    \
    \    val y = y toLong\n        val even = x % 2 == 0\n        val odd = x % 2\
    \ != 0\n        val evens = x until y\n        val odds = x until y\n        evens\
    \ foreach { x => if (even && x % 2 == 0) evens += x }\n        odds foreach {\
    \ x => if (odd && x % 2 != 0) odds += x }\n        evens.max", "        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val even\
    \ = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n        val x\
    \ = x - 1\n        val y = y - 1\n        val even = x until y\n        val odd\
    \ = x until y\n        even.foreach(x => evens += x)\n        odd.foreach(x =>\
    \ odds += x)\n        evens.foreach(x => even += x)\n        odds.foreach(x =>\
    \ odd += x)\n        evens.foreach(x => even += x)\n        odds.foreach(x =>\
    \ odd += x)\n        evens.foreach(x => even += x)\n        odds.foreach(x =>\
    \ odd += x)\n        even.foreach(x => even += x)\n        odd.foreach(x => odd\
    \ += x)\n        even.foreach(x => even += x)\n        odd.foreach(x => odd +=\
    \ x)\n        even.foreach(x => even += x)\n        odd.foreach(x => odd += x)\n\
    \        even.foreach(x => even += x)\n        odd.foreach(x => odd += x)\n  \
    \      even.foreach(x => even += x)\n        odd.foreach(x => odd += x)\n    \
    \    even.foreach(x => even += x)\n        odd.foreach(x => odd += x)\n      \
    \  even.foreach(x => even += x)\n        odd.foreach(x => odd += x)\n        even.foreach(x\
    \ => even += x)\n        odd.foreach(x => odd += x)\n        even.foreach(x =>\
    \ even += x)\n        odd.foreach(x => odd += x)\n        even.foreach(x => even\
    \ += x)\n        odd.foreach(x => odd += x)\n        even.foreach(x => even +=\
    \ x)\n        odd.foreach(x => odd += x)\n        even.foreach(x => even += x)\n\
    \        odd.foreach(x => odd += x)\n        even.foreach(x => even += x)\n  \
    \      odd.foreach(x => odd += x)\n        even.foreach(x => even += x)\n    \
    \    odd.foreach(x => odd += x)\n        even.foreach(x => even += x)\n      \
    \  odd.foreach(x => odd += x)\n        even.foreach(x => even += x)\n        odd.foreach(x\
    \ => ", "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter\
    \ (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n        val evensOddsSum\
    \ = evensOdds.sum\n        val evensOddsSumEvens = evensOddsSum / evens.length\n\
    \        val evensOddsSumOdds = evensOddsSum / odds.length\n        val evensOddsSumEvensOdds\
    \ = evensOddsSumEvens / evensOddsSumOdds\n        val evensOddsSumEvensOddsOdds\
    \ = evensOddsSumEvensOdds / evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOdds\
    \ = evensOddsSumEvensOddsOdds / evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOdds / evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOdds / evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOdds / evensOddsSumOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOddsOdds / evensOddsSumOdds\n        val\
    \ evensOddsSumEvensOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds\
    \ / evensOddsSumOdds\n", "        val evens = mutable.ListBuffer[Long]()\n   \
    \     val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    val even = evens.max\n        val odd = odds.max\n        if (even < odd)\
    \ even else -1", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n      \
    \  val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs()\n\
    \        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val evensLength = evens.size\n        val oddsLength = odds.size\n  \
    \      if (evensLength > oddsLength) {\n            evens.last\n        } else\
    \ if (evensLength < oddsLength) {\n            odds.last\n        } else {\n \
    \           val evenMax = evens.max\n            val oddMax = odds.max\n     \
    \       if (evenMax < oddMax) {\n                evenMax\n            } else {\n\
    \                oddMax\n            }\n        }", "        val evens = for (i\
    \ <- x until y) yield {\n            if (i % 2 == 0) i else -1\n        }\n  \
    \      val maxEven = evens.max\n        if (maxEven == -1) return -1\n       \
    \ if (maxEven % 2 == 0) maxEven else -1", "        val evens = x to y by 2\n \
    \       val evensSorted = evens.toList\n        val evensSortedSorted: mutable.Buffer[Long]\
    \ = evensSorted.sortBy(_)\n        val evensSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSorted.sortBy(_)\n        val evensSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSorted.sortBy(_)\n        val evensSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSorted.sortBy(_)\n        val\
    \ evensSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long] = evensSortedSortedSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSorted.sortBy(_)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n  \
    \      val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_)",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even < odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenInRange = mutable.ListBuffer[Long]()\n        val oddInRange\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange2 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange2 = mutable.ListBuffer[Long]()\n        val evenInRange3\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange3 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange4 = mutable.ListBuffer[Long]()\n        val oddInRange4\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange5 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange5 = mutable.ListBuffer[Long]()\n        val evenInRange6\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange6 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange7 = mutable.ListBuffer[Long]()\n        val oddInRange7\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange8 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange8 = mutable.ListBuffer[Long]()\n        val evenInRange9\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange9 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange10 = mutable.ListBuffer[Long]()\n        val oddInRange10\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange11 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange11 = mutable.ListBuffer[Long]()\n        val evenInRange12\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange12 = mutable.ListBuffer[Long]()\n\
    \        val evenInRange13 = mutable.ListBuffer[Long]()\n        val oddInRange13\
    \ = mutable.ListBuffer[Long]()\n        val evenInRange14 = mutable.ListBuffer[Long]()\n\
    \        val oddInRange14 = mutable.ListBuffer[Long]()\n        val evenInRange15\
    \ = mutable.ListBuffer[Long]()\n        val oddInRange15 = mutable.ListBuffer[Long]()\n\
    \        val evenIn", "        val evens = x filter (_ % 2 == 0)\n        val\
    \ odds = x filter (_ % 2 != 0)\n        val evensOdds = evens ++ odds\n      \
    \  val evensOddsOdds = evensOdds filter (_ % 2 != 0)\n        val evensOddsOddsOdds\
    \ = evensOddsOdds filter (_ % 2 != 0)\n        val evensOddsOddsOddsOdds = evensOddsOddsOdds\
    \ filter (_ % 2 != 0)\n        val evensOddsOddsOddsOddsOdds = evensOddsOddsOddsOdds\
    \ filter (_ % 2 != 0)\n        val evensOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOdds\
    \ filter (_ % 2 != 0)\n        val evensOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOdds\
    \ filter (_ % 2 != 0)\n        val evensOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOddsOdds\
    \ filter (_ % 2 != 0)\n        val evensOddsOddsOddsOddsOddsOddsOddsOddsOdds =\
    \ evensOddsOddsOddsOddsOddsOddsOddsOdds filter (_ % 2 != 0)\n        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsOddsOddsOddsOddsOddsOddsOddsOdds filter (_ % 2 != 0)\n        val\
    \ evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOdds",
  "        val evens = for (i <- x until y) yield {\n            if (i % 2 == 0) i\
    \ else -1\n        }\n        val maxEven = evens.max\n        if (maxEven ==\
    \ -1L) -1L\n        else maxEven", "        val evens = x to y by 2\n        val\
    \ evensSorted = evens.toSeq.sortBy(_ % 2 == 0)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < y)\n        val evensSorted = evensSorted.takeWhile(_ > x)\n        evensSorted.headOption.getOrElse(-1)",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs()\n        val even = (range / 2).toInt\n   \
    \     val odd = (range / 2).toInt\n        val evenRange = range / 2\n       \
    \ val oddRange = range / 2\n        val evenRange2 = range / 2\n        val oddRange2\
    \ = range / 2\n        val evenRange3 = range / 2\n        val oddRange3 = range\
    \ / 2\n        val evenRange4 = range / 2\n        val oddRange4 = range / 2\n\
    \        val evenRange5 = range / 2\n        val oddRange5 = range / 2\n     \
    \   val evenRange6 = range / 2\n        val oddRange6 = range / 2\n        val\
    \ evenRange7 = range / 2\n        val oddRange7 = range / 2\n        val evenRange8\
    \ = range / 2\n        val oddRange8 = range / 2\n        val evenRange9 = range\
    \ / 2\n        val oddRange9 = range / 2\n        val evenRange10 = range / 2\n\
    \        val oddRange10 = range / 2\n        val evenRange11 = range / 2\n   \
    \     val oddRange11 = range / 2\n        val evenRange12 = range / 2\n      \
    \  val oddRange12 = range / 2\n        val evenRange13 = range / 2\n        val\
    \ oddRange13 = range / 2\n        val evenRange14 = range / 2\n        val oddRange14\
    \ = range / 2\n        val evenRange15 = range / 2\n        val oddRange15 = range\
    \ / 2\n        val evenRange16 = range / 2\n        val oddRange16 = range / 2\n\
    \        val evenRange17 = range / 2\n        val oddRange17 = range / 2\n   \
    \     val evenRange18 = range / 2\n        val oddRange18 = range / 2\n      \
    \  val evenRange19 = range / 2\n        val oddRange19 = range / 2\n        val\
    \ evenRange20 = range / 2\n        val oddRange20 = range / 2\n        val evenRange21\
    \ = range / 2\n        val oddRange21 = range / 2\n        val evenRange22 = range\
    \ / 2\n        val oddRange22 = range / 2\n        val evenRange23 = range / 2\n\
    \        val oddRange23 = range / 2\n        val evenRange24 = range / 2\n   \
    \     val oddRange24 = range / 2\n", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs\
    \ \n        val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evens = evens.toList\n        val odds = odds.toList\n\
    \        val evensSet = evens.toSet\n        val oddsSet = odds.toSet\n      \
    \  val evensSetSize = evensSet.size\n        val oddsSetSize = oddsSet.size\n\
    \        val evensSetIsEmpty = evensSet.isEmpty\n        val oddsSetIsEmpty =\
    \ oddsSet.isEmpty\n        val evensSetIsNotEmpty = evensSetIsEmpty || evensSetSize\
    \ > 0\n        val oddsSetIsNotEmpty = oddsSetIsEmpty || oddsSetSize > 0\n   \
    \     val evensSetIsNotEmpty = evensSetIsEmpty || evensSetSize > 0\n        val\
    \ oddsSetIsNotEmpty = oddsSetIsEmpty || oddsSetSize > 0\n        val evensSetIsNotEmpty\
    \ = evensSetIsEmpty || evensSetSize > 0\n        val oddsSetIsNotEmpty = oddsSetIsEmpty\
    \ || oddsSetSize > 0\n        val evensSetIsNotEmpty = evensSetIsEmpty || evensSetSize\
    \ > 0\n        val oddsSetIsNotEmpty = oddsSetIsEmpty || oddsSetSize > 0\n   \
    \     val evensSetIsNotEmpty = evensSetIsEmpty || evensSetSize > 0\n        val\
    \ oddsSetIsNotEmpty = oddsSetIsEmpty || oddsSetSize > 0\n        val evensSetIsNotEmpty\
    \ = evensSetIsEmpty || evensSetSize > 0\n        val oddsSetIsNotEmpty = oddsSetIsEmpty\
    \ || oddsSetSize > 0\n        val evensSetIsNotEmpty = evensSetIsEmpty || evensSetSize\
    \ > 0\n        val oddsSetIsNotEmpty = oddsSetIsEmpty || oddsSetSize > 0\n   \
    \     val evensSetIsNotEmpty = evensSetIsEmpty || evensSetSize > 0\n        val\
    \ oddsSetIsNotEmpty = oddsSetIsEmpty || oddsSetSize > 0\n", "        val evens\
    \ = x until y by 2\n        val odds = x until y by 1\n        val evensOdds =\
    \ evens ++ odds\n        val evensOddsOdds = evensOdds ++ odds\n        val evensOddsOddsOdds\
    \ = evensOddsOdds ++ odds\n        val evensOddsOddsOddsOdds = evensOddsOddsOdds\
    \ ++ odds\n        val evensOddsOddsOddsOddsOdds = evensOddsOddsOddsOdds ++ odds\n\
    \        val evensOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOdds ++ odds\n\
    \        val evensOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOdds\
    \ ++ odds\n        val evensOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOddsOdds\
    \ ++ odds\n        val evensOddsOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOddsOddsOdds\
    \ ++ odds\n        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ ++ odds\n        val evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = evensOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ ++ odds\n        val evensOddsOddsOddsOddsOdds", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd", "        var even = 0\n        var odd = 0\n   \
    \     var x = x.toInt\n        var y = y.toInt\n        while(x <= y) {\n    \
    \        if((x % 2) == 0) {\n                even += x\n            }\n      \
    \      else {\n                odd += x\n            }\n            x += 1\n \
    \       }\n        if(even > odd) {\n            return even\n        }\n    \
    \    else {\n            return odd\n        }", "        val evens = x to y by\
    \ 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven % 2 == 0) {\n            return maxEven\n        }\n    \
    \    val maxEven2 = maxEven / 2\n        val maxEven3 = maxEven2 / 2\n       \
    \ val maxEven4 = maxEven3 / 2\n        val maxEven5 = maxEven4 / 2\n        val\
    \ maxEven6 = maxEven5 / 2\n        val maxEven7 = maxEven6 / 2\n        val maxEven8\
    \ = maxEven7 / 2\n        val maxEven9 = maxEven8 / 2\n        val maxEven10 =\
    \ maxEven9 / 2\n        val maxEven11 = maxEven10 / 2\n        val maxEven12 =\
    \ maxEven11 / 2\n        val maxEven13 = maxEven12 / 2\n        val maxEven14\
    \ = maxEven13 / 2\n        val maxEven15 = maxEven14 / 2\n        val maxEven16\
    \ = maxEven15 / 2\n        val maxEven17 = maxEven16 / 2\n        val maxEven18\
    \ = maxEven17 / 2\n        val maxEven19 = maxEven18 / 2\n        val maxEven20\
    \ = maxEven19 / 2\n        val maxEven21 = maxEven20 / 2\n        val maxEven22\
    \ = maxEven21 / 2\n        val maxEven23 = maxEven22 / 2\n        val maxEven24\
    \ = maxEven23 / 2\n        val maxEven25 = maxEven24 / 2\n        val maxEven26\
    \ = maxEven25 / 2\n        val maxEven27 = maxEven26 / 2\n        val maxEven28\
    \ = maxEven27 / 2\n        val maxEven29 = maxEven28 / 2\n        val maxEven30\
    \ = maxEven29 / 2\n        val maxEven31 = maxEven30 / 2\n        val maxEven32\
    \ = maxEven31 / 2\n        val maxEven33 = maxEven32 / 2\n        val maxEven34\
    \ = maxEven33 / 2\n        val maxEven35 = maxEven34 / 2\n        val maxEven36\
    \ = maxEven35 / 2\n        val maxEven37 = maxEven36 / 2\n        val maxEven38\
    \ = maxEven37 / 2\n        val maxEven39 = maxEven38 / 2\n        val maxEven40\
    \ = maxEven39 / 2\n", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n \
    \       val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        evens.max", "        val evens = x to y by 2\n \
    \       val evensSorted = evens.toList\n        val evensSorted = evensSorted.sortBy(x\
    \ => x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x <= y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x <= y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x <= y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x <= y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x <= y)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x <= y)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(", "        val evens = x until y by 2\n        val\
    \ odds = x until y by 1\n        val evensCount = evens.count(_ % 2 == 0)\n  \
    \      val oddsCount = odds.count(_ % 2 == 0)\n        if (evensCount > oddsCount)\
    \ {\n            evens.last\n        } else {\n            odds.last\n       \
    \ }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensCount = mutable.ListBuffer[Long]()\n        val oddsCount =\
    \ mutable.ListBuffer[Long]()\n        val evensCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount2 = mutable.ListBuffer[Long]()\n        val evensCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount3 = mutable.ListBuffer[Long]()\n\
    \        val evensCount4 = mutable.ListBuffer[Long]()\n        val oddsCount4\
    \ = mutable.ListBuffer[Long]()\n        val evensCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount5 = mutable.ListBuffer[Long]()\n        val evensCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount6 = mutable.ListBuffer[Long]()\n\
    \        val evensCount7 = mutable.ListBuffer[Long]()\n        val oddsCount7\
    \ = mutable.ListBuffer[Long]()\n        val evensCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount8 = mutable.ListBuffer[Long]()\n        val evensCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount9 = mutable.ListBuffer[Long]()\n\
    \        val evensCount10 = mutable.ListBuffer[Long]()\n        val oddsCount10\
    \ = mutable.ListBuffer[Long]()\n        val evensCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount11 = mutable.ListBuffer[Long]()\n        val evensCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount12 = mutable.ListBuffer[Long]()\n\
    \        val evensCount13 = mutable.ListBuffer[Long]()\n        val oddsCount13\
    \ = mutable.ListBuffer[Long]()\n        val evensCount14 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount14 = mutable.ListBuffer[Long]()\n        val evensCount15\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount15 = mutable.ListBuffer[Long]()\n\
    \        val evensCount16 = mutable.ListBuffer[Long]()\n        val oddsCount16\
    \ = mutable.ListBuffer[Long]()\n", "        val evens = x until y by 2\n     \
    \   val odds = x until y by -1\n        evens.find(x => x % 2 == 0l).orElse(-1l)",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach { x =>\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        }\n        if (evens.size == 0) {\n\
    \            return -1\n        }\n        if (evens.size > odds.size) {\n   \
    \         return evens.last\n        } else {\n            return -1\n       \
    \ }", "        var max = 0\n        var min = 0\n        var even = 0\n      \
    \  var odd = 0\n        for(i <- x to y){\n            if(i%2==0){\n         \
    \       even += i\n            }else{\n                odd += i\n            }\n\
    \        }\n        if(even>odd){\n            max = even\n        }else{\n  \
    \          max = odd\n        }\n        if(even<odd){\n            min = even\n\
    \        }else{\n            min = odd\n        }\n        if(min>max){\n    \
    \        return -1\n        }else{\n            return max\n        }", "    \
    \    val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 == 1)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evenMax = evens.max\n        val oddMax = odds.max\n        if (evenMax < oddMax)\
    \ evenMax else oddMax", "        val evens = for (i <- x until y) yield {\n  \
    \          if (i % 2 == 0) i else -1\n        }\n        val maxEven = evens.max\n\
    \        if (maxEven == -1L) -1L\n        else maxEven", "        val evens =\
    \ mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 == 1)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        val\
    \ evens = evens.toList\n        val odds = odds.toList\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else odd", "       \
    \ val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 != 0)\n\
    \        if (evens.isEmpty) -1\n        else if (odds.isEmpty) -1\n        else\
    \ evens.head + odds.head", "        val evens = x to y by 2\n        val evensCount\
    \ = evens.count(_ % 2 == 0)\n        if (evensCount > 0) {\n            evens.max\n\
    \        } else {\n            -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.", "        val evens = x to y by 2\n        val evensSorted = evens.sort\n\
    \        val evensSortedLength = evensSorted.length\n        val evensSortedLast\
    \ = evensSorted.last\n        val evensSortedLastLength = evensSortedLast.length\n\
    \        val evensSortedLastLast = evensSortedLast.last\n        val evensSortedLastLastLength\
    \ = evensSortedLastLast.length\n        val evensSortedLastLastLast = evensSortedLastLast.last\n\
    \        val evensSortedLastLastLastLength = evensSortedLastLastLast.length\n\
    \        val evensSortedLastLastLastLast = evensSortedLastLastLast.last\n    \
    \    val evensSortedLastLastLastLastLength = evensSortedLastLastLastLast.length\n\
    \        val evensSortedLastLastLastLastLast = evensSortedLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLength = evensSortedLastLastLastLastLast.length\n\
    \        val evensSortedLastLastLastLastLastLast = evensSortedLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLength = evensSortedLastLastLastLastLastLast.length\n\
    \        val evensSortedLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLastLength = evensSortedLastLastLastLastLastLastLastLast.length\n\
    \        val evensSortedLastLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLength = evensSortedLastLastLastLastLastLastLastLast.length\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLastLength = evensSortedLastLastLastLastLastLastLastLastLastLast.length\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLastLastLength = evensSortedLastLastLastLastLastLastLastLastLastLastLength.last\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLastLastLength = evensSortedLastLastLastLastLastLast",
  "        var max = 0\n        var min = 0\n        var even = 0\n        var odd\
    \ = 0\n        var evenMax = 0\n        var oddMax = 0\n        var evenMin =\
    \ 0\n        var oddMin = 0\n        var evenMaxCount = 0\n        var oddMaxCount\
    \ = 0\n        var evenMinCount = 0\n        var oddMinCount = 0\n        var\
    \ evenMaxCount2 = 0\n        var oddMaxCount2 = 0\n        var evenMinCount2 =\
    \ 0\n        var oddMinCount2 = 0\n        var evenMaxCount3 = 0\n        var\
    \ oddMaxCount3 = 0\n        var evenMinCount3 = 0\n        var oddMinCount3 =\
    \ 0\n        var evenMaxCount4 = 0\n        var oddMaxCount4 = 0\n        var\
    \ evenMinCount4 = 0\n        var oddMinCount4 = 0\n        var evenMaxCount5 =\
    \ 0\n        var oddMaxCount5 = 0\n        var evenMinCount5 = 0\n        var\
    \ oddMinCount5 = 0\n        var evenMaxCount6 = 0\n        var oddMaxCount6 =\
    \ 0\n        var evenMinCount6 = 0\n        var oddMinCount6 = 0\n        var\
    \ evenMaxCount7 = 0\n        var oddMaxCount7 = 0\n        var evenMinCount7 =\
    \ 0\n        var oddMinCount7 = 0\n        var evenMaxCount8 = 0\n        var\
    \ oddMaxCount8 = 0\n        var evenMinCount8 = 0\n        var oddMinCount8 =\
    \ 0\n        var evenMaxCount9 = 0\n        var oddMaxCount9 = 0\n        var\
    \ evenMinCount9 = 0\n        var oddMinCount9 = 0\n        var evenMaxCount10\
    \ = 0\n        var oddMaxCount10 = 0\n        var evenMinCount10 = 0\n       \
    \ var oddMinCount10 = 0\n        var evenMaxCount11 = 0\n        var oddMaxCount11\
    \ = 0\n        var evenMinCount11 = 0\n        var oddMinCount11 = 0\n       \
    \ var evenMaxCount12 = 0\n        var oddMaxCount12 = 0\n        var evenMinCount12\
    \ = 0\n        var oddMinCount12 = 0\n        var evenMaxCount13 = 0\n       \
    \ var oddMaxCount13 = 0\n        var evenMinCount13 = 0\n        var oddMinCount13\
    \ = 0\n        var evenMaxCount14 = 0\n        var oddMaxCount14 = 0\n       \
    \ var evenMinCount14 = 0\n        var oddMinCount14 = 0\n        var evenMaxCount15\
    \ = 0\n        var oddMaxCount15 = 0\n        var evenMinCount15 = 0\n       \
    \ var oddMinCount15 = 0\n        var evenMaxCount16 = 0\n        var oddMaxCount16\
    \ = 0\n        var evenMinCount16 = 0\n        var oddMinCount16 = 0\n       \
    \ var evenMaxCount17 = 0\n        var oddMaxCount17 = 0\n        var evenMinCount17\
    \ = 0\n        var oddMinCount17 = 0\n        var evenMaxCount", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        evens.foreach(x => if (x % 2 == 0) even += x;\
    \ else odd += x)\n        val evens = even.distinct\n        val odds = odd.distinct\n\
    \        val even = even.max\n        val odd = odd.max\n        if (evens.isEmpty)\
    \ -1\n        else if (odds.isEmpty) -1\n        else if (evens.contains(even))\
    \ even\n        else if (odds.contains(odd)) odd\n        else -1", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x to y).filter(_ % 2 == 0)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 == 1) odds +=\
    \ x)\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) even else odd", "        var even = 0\n        var odd = 0\n        var\
    \ xEven = x.toInt\n        var yEven = y.toInt\n        var xOdd = xEven\n   \
    \     var yOdd = yEven\n        while(xEven < xOdd && yEven < yOdd) {\n      \
    \      if(xEven % 2 == 0) {\n                even += xEven\n                xEven\
    \ = xEven + 1\n            }\n            if(yEven % 2 == 0) {\n             \
    \   even += yEven\n                yEven = yEven + 1\n            }\n        \
    \    if(xOdd % 2 == 0) {\n                odd += xOdd\n                xOdd =\
    \ xOdd + 1\n            }\n            if(yOdd % 2 == 0) {\n                odd\
    \ += yOdd\n                yOdd = yOdd + 1\n            }\n        }\n       \
    \ if(even > odd) {\n            return even\n        } else {\n            return\
    \ -1\n        }", "        var maxNum = y\n        var minNum = x\n        while\
    \ (maxNum - minNum > 0) {\n            var mid = (maxNum + minNum) / 2\n     \
    \       if (mid % 2 == 0) {\n                maxNum = mid\n            } else\
    \ {\n                minNum = mid\n            }\n        }\n        if (maxNum\
    \ - minNum > 0) {\n            maxNum\n        } else {\n            -1\n    \
    \    }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n \
    \       val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2 !=\
    \ 0)\n        val evensOdds = evens ++ odds\n        val evensOddsSum = evensOdds.sum\n\
    \        val evensOddsSumEvens = evensOddsSum / evens.length\n        val evensOddsSumOdds\
    \ = evensOddsSum - evensOddsSumEvens\n        val evensOddsSumEvensOdds = evensOddsSumEvens\
    \ * evensOddsSumOdds\n        val evensOddsSumEvensOddsOdds = evensOddsSumEvensOdds\
    \ * evensOddsSumEvensOdds\n        val evensOddsSumEvensOddsOddsOdds = evensOddsSumEvensOddsOdds\
    \ * evensOddsSumEvensOddsOdds\n        val evensOddsSumEvensOddsOddsOddsOdds =\
    \ evensOddsSumEvensOddsOddsOdds * evensOddsSumEvensOddsOddsOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOdds * evensOddsSumEvensOddsOddsOddsOdds\n  \
    \      val evensOddsSumEvensOddsOddsOddsOddsOddsOdds = evensOddsSumEvensOddsOddsOddsOddsOdds\
    \ * evensOddsSumEvensOddsOddsOddsOddsOdds\n        val evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds\
    \ = evensOddsSumEvensOddsOddsOddsOddsOddsOddsOdds * evensOddsSumEvensOddsOddsOddsOddsOddsOdds\n\
    \        val evensOddsSum", "        val evens = mutable.Set[Long]()\n       \
    \ val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  } else {\n                odds += x\n            }\n        })\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return -1\n        }", " \
    \       val evens = x filter (_ % 2 == 0)\n        val odds = x filter (_ % 2\
    \ != 0)\n        val evensOdds = evens ++ odds\n        evensOdds.max"]
stop_tokens:
- "\n    }\n"
