name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n\
  \    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        var max = 0\n        var min = 0\n        var even = 0\n  \
    \      var odd = 0\n        var evenMax = 0\n        var oddMax = 0\n        var\
    \ evenMin = 0\n        var oddMin = 0\n        var evenMaxIndex = 0\n        var\
    \ oddMaxIndex = 0\n        var evenMinIndex = 0\n        var oddMinIndex = 0\n\
    \        var evenMaxCount = 0\n        var oddMaxCount = 0\n        var evenMinCount\
    \ = 0\n        var oddMinCount = 0\n        var evenMaxCountIndex = 0\n      \
    \  var oddMaxCountIndex = 0\n        var evenMinCountIndex = 0\n        var oddMinCountIndex\
    \ = 0\n        var evenMaxCountCount = 0\n        var oddMaxCountCount = 0\n \
    \       var evenMinCountCount = 0\n        var oddMinCountCount = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCountCountIndex = 0\n        var oddMinCountCountIndex = 0\n        var\
    \ evenMaxCountIndexCount = 0\n        var oddMaxCountIndexCount = 0\n        var\
    \ evenMinCountIndexCount = 0\n        var oddMinCountIndexCount = 0\n        var\
    \ evenMaxCountCountIndex = 0\n        var oddMaxCountCountIndex = 0\n        var\
    \ evenMinCount", "        val evens = mutable.Set[Long]()\n        val odds =\
    \ mutable.Set[Long]()\n        val evensCount = mutable.Set[Long]()\n        val\
    \ oddsCount = mutable.Set[Long]()\n        val evensCount2 = mutable.Set[Long]()\n\
    \        val oddsCount2 = mutable.Set[Long]()\n        val evensCount3 = mutable.Set[Long]()\n\
    \        val oddsCount3 = mutable.Set[Long]()\n        val evensCount4 = mutable.Set[Long]()\n\
    \        val oddsCount4 = mutable.Set[Long]()\n        val evensCount5 = mutable.Set[Long]()\n\
    \        val oddsCount5 = mutable.Set[Long]()\n        val evensCount6 = mutable.Set[Long]()\n\
    \        val oddsCount6 = mutable.Set[Long]()\n        val evensCount7 = mutable.Set[Long]()\n\
    \        val oddsCount7 = mutable.Set[Long]()\n        val evensCount8 = mutable.Set[Long]()\n\
    \        val oddsCount8 = mutable.Set[Long]()\n        val evensCount9 = mutable.Set[Long]()\n\
    \        val oddsCount9 = mutable.Set[Long]()\n        val evensCount10 = mutable.Set[Long]()\n\
    \        val oddsCount10 = mutable.Set[Long]()\n        val evensCount11 = mutable.Set[Long]()\n\
    \        val oddsCount11 = mutable.Set[Long]()\n        val evensCount12 = mutable.Set[Long]()\n\
    \        val oddsCount12 = mutable.Set[Long]()\n        val evensCount13 = mutable.Set[Long]()\n\
    \        val oddsCount13 = mutable.Set[Long]()\n        val evensCount14 = mutable.Set[Long]()\n\
    \        val oddsCount14 = mutable.Set[Long]()\n        val evensCount15 = mutable.Set[Long]()\n\
    \        val oddsCount15 = mutable.Set[Long]()\n        val evensCount16 = mutable.Set[Long]()\n\
    \        val oddsCount16 = mutable.Set[Long]()\n        val evensCount17 = mutable.Set[Long]()\n\
    \        val oddsCount17 = mutable.Set[Long]()\n        val evens", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n      \
    \  val evensAndOddsAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n     \
    \   val evensAndOddsAndOddsAndEvensAndOddsAndEvens = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvens = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOdd", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val evensCount\
    \ = mutable.Set[Long]()\n        val oddsCount = mutable.Set[Long]()\n       \
    \ val evensCount2 = mutable.Set[Long]()\n        val oddsCount2 = mutable.Set[Long]()\n\
    \        val evensCount3 = mutable.Set[Long]()\n        val oddsCount3 = mutable.Set[Long]()\n\
    \        val evensCount4 = mutable.Set[Long]()\n        val oddsCount4 = mutable.Set[Long]()\n\
    \        val evensCount5 = mutable.Set[Long]()\n        val oddsCount5 = mutable.Set[Long]()\n\
    \        val evensCount6 = mutable.Set[Long]()\n        val oddsCount6 = mutable.Set[Long]()\n\
    \        val evensCount7 = mutable.Set[Long]()\n        val oddsCount7 = mutable.Set[Long]()\n\
    \        val evensCount8 = mutable.Set[Long]()\n        val oddsCount8 = mutable.Set[Long]()\n\
    \        val evensCount9 = mutable.Set[Long]()\n        val oddsCount9 = mutable.Set[Long]()\n\
    \        val evensCount10 = mutable.Set[Long]()\n        val oddsCount10 = mutable.Set[Long]()\n\
    \        val evensCount11 = mutable.Set[Long]()\n        val oddsCount11 = mutable.Set[Long]()\n\
    \        val evensCount12 = mutable.Set[Long]()\n        val oddsCount12 = mutable.Set[Long]()\n\
    \        val evensCount13 = mutable.Set[Long]()\n        val oddsCount13 = mutable.Set[Long]()\n\
    \        val evensCount14 = mutable.Set[Long]()\n        val oddsCount14 = mutable.Set[Long]()\n\
    \        val evensCount15 = mutable.Set[Long]()\n        val oddsCount15 = mutable.Set[Long]()\n\
    \        val evensCount16 = mutable.Set[Long]()\n        val oddsCount16 = mutable.Set[Long]()\n\
    \        val evensCount17 = mutable.Set[Long]()\n        val oddsCount17 = mutable.Set[Long]()\n\
    \        val evens", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = (x to y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else -1", "        val\
    \ evens = x to y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n    \
    \    if (evensCount == 0) {\n            -1\n        } else {\n            evens.max\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenEvenEvenEven = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n   \
    \     val evenOddEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n  \
    \      val evenOddEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = mutable.List",
  "        val evens = x to y by 2\n        val evensSorted = evens.toList\n     \
    \   val evensSorted = evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < y)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ > x)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ <= y)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ >= x)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < ",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evensAndOddsSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evensAndOddsSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n \
    \       val evensAndOddsSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n  \
    \      val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evensAndOddsSetSetSetSetSetSetSetSet", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evensCount = mutable.Set[Long]()\n\
    \        val oddsCount = mutable.Set[Long]()\n        val evensCount2 = mutable.Set[Long]()\n\
    \        val oddsCount2 = mutable.Set[Long]()\n        val evensCount3 = mutable.Set[Long]()\n\
    \        val oddsCount3 = mutable.Set[Long]()\n        val evensCount4 = mutable.Set[Long]()\n\
    \        val oddsCount4 = mutable.Set[Long]()\n        val evensCount5 = mutable.Set[Long]()\n\
    \        val oddsCount5 = mutable.Set[Long]()\n        val evensCount6 = mutable.Set[Long]()\n\
    \        val oddsCount6 = mutable.Set[Long]()\n        val evensCount7 = mutable.Set[Long]()\n\
    \        val oddsCount7 = mutable.Set[Long]()\n        val evensCount8 = mutable.Set[Long]()\n\
    \        val oddsCount8 = mutable.Set[Long]()\n        val evensCount9 = mutable.Set[Long]()\n\
    \        val oddsCount9 = mutable.Set[Long]()\n        val evensCount10 = mutable.Set[Long]()\n\
    \        val oddsCount10 = mutable.Set[Long]()\n        val evensCount11 = mutable.Set[Long]()\n\
    \        val oddsCount11 = mutable.Set[Long]()\n        val evensCount12 = mutable.Set[Long]()\n\
    \        val oddsCount12 = mutable.Set[Long]()\n        val evensCount13 = mutable.Set[Long]()\n\
    \        val oddsCount13 = mutable.Set[Long]()\n        val evensCount14 = mutable.Set[Long]()\n\
    \        val oddsCount14 = mutable.Set[Long]()\n        val evensCount15 = mutable.Set[Long]()\n\
    \        val oddsCount15 = mutable.Set[Long]()\n        val evensCount16 = mutable.Set[Long]()\n\
    \        val oddsCount16 = mutable.Set[Long]()\n        val evensCount17 = mutable.Set[Long]()\n\
    \        val oddsCount17 = mutable.Set[Long]()\n        val evens", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val range = (x to y).filter(_ % 2 == 0)\n        range.foreach(x => if (x %\
    \ 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 == 1) odds += x)\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even <\
    \ odd) even else -1", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n \
    \       val evenRange = range.filter(_ % 2 == 0)\n        val oddRange = range.filter(_\
    \ % 2 != 0)\n        evenRange foreach { x => evens += x }\n        oddRange foreach\
    \ { x => odds += x }\n        val evenMax = evens.max\n        val oddMax = odds.max\n\
    \        if (evenMax > oddMax)\n            evenMax\n        else\n          \
    \  oddMax", "        val evens = x until y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) {\n            return -1\n        }\n\
    \        val evensMax = evens.max\n        if (evensMax % 2 == 0) {\n        \
    \    return evensMax\n        }\n        val evensMin = evens.min\n        if\
    \ (evensMin % 2 == 0) {\n            return evensMin\n        }\n        val evensSum\
    \ = evens.sum\n        if (evensSum % 2 == 0) {\n            return evensSum\n\
    \        }\n        val evensProduct = evens.product\n        if (evensProduct\
    \ % 2 == 0) {\n            return evensProduct\n        }\n        val evensProductSum\
    \ = evensProduct.sum\n        if (evensProductSum % 2 == 0) {\n            return\
    \ evensProductSum\n        }\n        val evensProductProduct = evensProduct.product\n\
    \        if (evensProductProduct % 2 == 0) {\n            return evensProductProduct\n\
    \        }\n        val evensProductProductSum = evensProductProduct.sum\n   \
    \     if (evensProductProductSum % 2 == 0) {\n            return evensProductProductSum\n\
    \        }\n        val evensProductProductProduct = evensProductProduct.product\n\
    \        if (evensProductProductProduct % 2 == 0) {\n            return evensProductProductProduct\n\
    \        }\n        val evensProductProductProductSum = evensProductProductProduct.sum\n\
    \        if (evensProductProductProductSum % 2 == 0) {\n            return evensProductProductProductSum\n\
    \        }\n        val evensProductProductProductProduct = evensProductProductProduct.product\n\
    \        if (evensProductProductProductProduct % 2 == 0) {\n            return\
    \ evensProductProductProductProduct\n        }\n        val evensProductProductProductProductSum\
    \ = evensProductProductProductProduct.sum\n        if (evensProductProductProductProductSum\
    \ % 2 == 0) {\n            return evensProductProductProductProductSum\n     \
    \   }\n        val evensProductProductProductProductProduct = evensProductProductProductProduct.product\n\
    \        if (evensProductProductProductProductProduct % 2 == 0) {\n          \
    \  return evensProductProductProductProductProduct\n        }\n        val evensProductProductProductProductProductSum\
    \ = evensProductProductProductProductProduct.sum\n        if (evensProductProductProductProductProductSum\
    \ % 2 == 0) {\n            return evensProductProductProductProductProductSum\n\
    \        }\n        val evensProductProductProductProductProductProduct = evensProductProductProductProductProduct.product\n\
    \        if (evensProductProductProductProductProductProduct % 2 == 0) {\n   \
    \         return evensProductProductProductProductProductProduct\n        }\n\
    \        val ", "        val evens = x filter (_ % 2 == 0)\n        val odds =\
    \ x filter (_ % 2 != 0)\n        if (evens.isEmpty) -1\n        else if (evens.size\
    \ == 1) evens.head\n        else if (evens.size == 2) evens.head + evens.last\n\
    \        else if (evens.size == 3) evens.head + evens.last + evens.last\n    \
    \    else if (evens.size == 4) evens.head + evens.last + evens.last + evens.last\n\
    \        else if (evens.size == 5) evens.head + evens.last + evens.last + evens.last\
    \ + evens.last\n        else if (evens.size == 6) evens.head + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last\n        else if (evens.size == 7) evens.head\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\n\
    \        else if (evens.size == 8) evens.head + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last\n        else if (evens.size\
    \ == 9) evens.head + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last\n        else if (evens.size\
    \ == 10) evens.head + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last\n        else\
    \ if (evens.size == 11) evens.head + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last\n        else if (evens.size == 12) evens.head + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last\n        else if (evens.size\
    \ == 13) evens.head + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last + evens.last + evens.last + evens.last + evens.last\
    \ + evens.last + evens.last\n        else if (evens.size == 14) evens.head + evens.last\
    \ + evens.last + evens.last + evens.last + even", "        val evens = x to y\
    \ by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ > 0) {\n            evens.max\n        } else {\n            -1\n        }",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenAndOdd = mutable.ListBuffer[Long]()\n        val evenAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenAndOddsSum = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSums = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSum = mutable.ListBuffer[Long]()\n        val\
    \ evenAndOddsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenAndOddsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n   \
    \     val evenAndOddsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n     \
    \   val evenAndOddsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n    \
    \    val evenAndOddsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n  \
    \      val evenAndOddsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenAndOddsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.List", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n      \
    \  val evensAndOddsAndEvensAndOddsAndEvens = mutable.ListBuffer[Long]()\n    \
    \    val evensAndOddsAndEvensAndOddsAndOdds = mutable.ListBuffer[Long]()\n   \
    \     val evensAndOddsAndEvensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvens\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndOddsAndEvensAndO",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even > odd) {\n            return even\n \
    \       } else {\n            return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer", "        val evens = for (i <- 1 to y) yield {\n    \
    \        if (i % 2 == 0) i\n            else -1\n        }\n        val even =\
    \ evens.max\n        if (even >= x) even else -1"]
stop_tokens:
- "\n    }\n"
