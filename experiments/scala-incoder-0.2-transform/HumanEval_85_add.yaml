name: HumanEval_85_add
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers lst. add the even elements that are at\
  \ odd indices..\n    // Examples:\n    // >>> add((List[Long](4l.toLong, 2l.toLong,\
  \ 6l.toLong, 7l.toLong)))\n    // (2l)\n    def add(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
  \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
  \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
completions: ["        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.foldLeft(0l) { (acc, x) => acc + x }\n        odds foreach {\
    \ x => result += x }\n        result", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.zip(odd).foldLeft(0L)(_\
    \ + _._2)\n        result", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 == 1)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val result = evens.sum + odds.sum\n        result", "   \
    \     val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val result = evens.foldLeft(0l) { (sum, e) => sum + e }\n   \
    \     odds foreach { e => result += e }\n        result", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ result = even.zip(odd).foldLeft(0L)(_ + _._1)\n        result", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0l)\
    \ { (sum, pair) => sum + pair._1 }", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens.zip(odds)\n\
    \        val evensOddsSum = evensOdds.foldLeft(0L)(_ + _)\n        evensOddsSum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).map(_ + _._1).sum\n        result", " \
    \       val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val result = even.zip(odd).map(_ + _._1)\n        result.foldLeft(0l)\
    \ { (sum, elem) => sum + elem }", "        var evenSum = 0\n        var oddSum\
    \ = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i <- 0\
    \ until lst.size) {\n            if(i%2 == 0) {\n                evenSum += lst(i)\n\
    \                evenIndex += 1\n            } else {\n                oddSum\
    \ += lst(i)\n                oddIndex += 1\n            }\n        }\n       \
    \ evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens ++ odds\n     \
    \   evensOdds.sum", "        var even = 0\n        var odd = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 2 == 0) {\n                even +=\
    \ lst(i)\n            } else {\n                odd += lst(i)\n            }\n\
    \        }\n        even + odd", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 == 1)\n        val result = evens.sum + odds.sum\n\
    \        result", "        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenOdd = even.zip(odd)\n   \
    \     evenOdd.foldLeft(0l) { (sum, pair) => sum + pair._2 }"]
stop_tokens:
- "\n    }\n"
