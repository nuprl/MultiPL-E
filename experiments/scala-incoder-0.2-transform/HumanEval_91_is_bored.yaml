name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val boredoms = mutable.HashSet[String]()\n        val sentences\
    \ = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms.add(sentence)\n           \
    \ }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if (boredomIndex\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size + 1", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).filter(_.nonEmpty)\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms.add(sentence)\n            }\n        }\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.startsWith(\"I\")\n          \
    \  if (boredomStart) {\n                boredoms.add(sentence)\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { sentence =>\n    \
    \        val boredomCount = sentence.startsWith(\"I\")\n            boredoms.put(sentence,\
    \ boredomCount)\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += (word -> 1L)\n                }\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(boredoms += _)\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n\
    \        sentences.foreach(sentence => {\n            val boredomStart = sentence.indexOf(\"\
    I\")\n            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if(boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            val words = sentence.split(\"\\\\s+\")\n            val boredomWord\
    \ = words.head\n            val boredomCount = boredoms.getOrElse(boredomWord,\
    \ 0L)\n            boredoms.put(boredomWord, boredomCount + 1L)\n        }\n \
    \       boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words){\n           \
    \ if(word.startsWith(\"I\")){\n                boredoms += word\n            }\n\
    \        }\n        boredoms.toList.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.!?]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toRegex)\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"I\")) {\n          \
    \      boredoms += s\n            }\n        }\n        boredoms.size", "    \
    \    val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.ListBuffer[String]()\n        S.split(\"\\\\.|\\\\?|\\\\\
    !\").foreach { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms\
    \ += s\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.ListBuffer[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ >= 0) {\n                boredoms += sentence\n            }\n        }\n  \
    \      boredoms.size", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.!?]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toRegex)\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += (word -> 1L)\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        words.foreach(word => {\n       \
    \     if (word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(w <- words) {\n            if(w.startsWith(\"I\")) {\n    \
    \            boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\"))\n            boredomWords.foreach(boredomWord => {\n                boredoms.add(boredomWord)\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        for(word <- S.split(\" \")){\n            if(word.startsWith(\"I\")){\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if (boredomIndex\
    \ > 0) {\n                boredoms += sentence\n            }\n        })\n  \
    \      boredoms.size", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val words = S.split(\" \")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(word\
    \ => word.startsWith(\"i\"))\n            boredomWords.foreach(word => boredoms\
    \ += word)\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex > 0) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"I\".toRegex).length\n    \
    \        boredoms += sentence\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        for(word <- S.split(\"\\\\.\"\
    )) {\n            val boredom = (word startsWith \"I\")\n            if(boredom)\
    \ boredoms += word\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n  \
    \      S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        })\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            val boredomEnd =\
    \ sentence.indexOf(\".\")\n            if (boredomStart != -1 && boredomEnd !=\
    \ -1) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val words = S.split(\"\\\\W+\")\n        words.foreach(word => {\n      \
    \      if (word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"I\"\
    ))\n            boredomWords.foreach(boredomWord => {\n                boredoms.add(boredomWord)\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            val words = sentence.split(\" \")\n            words.foreach\
    \ { word =>\n                if (word.startsWith(\"I\")) {\n                 \
    \   boredoms += word\n                }\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"[.?!]\").foreach(s\
    \ => {\n            if (s.startsWith(\"I\")) {\n                boredoms += s\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        for(i <- 0 until S.length){\n            val c = S.charAt(i)\n      \
    \      if(c == '.' || c == '?' || c == '!'){\n                boredoms += c\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            val boredomEnd =\
    \ sentence.indexOf(\".\")\n            val boredomLength = boredomEnd - boredomStart\n\
    \            if (boredomStart != -1 && boredomEnd != -1 && boredomLength > 0)\
    \ {\n                boredoms += sentence\n            }\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.HashSet[String]()\n        for(word\
    \ <- S.split(\"\\\\.\")) {\n            if(word.startsWith(\"I\")) {\n       \
    \         boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\\
    .|\\\\?|\\\\!\").foreach { s =>\n            val boredom: String = s.substring(0,\
    \ 3)\n            boredoms += (boredom -> 1L)\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \ \")\n        val boredomWords = words.filter(_.startsWith(\"I\"))\n        boredomWords.foreach(boredom\
    \ => boredoms += boredom)\n        boredoms.count", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        S.split(\"[.?!]\").foreach(s\
    \ => {\n            if (s.startsWith(\"I\")) {\n                boredoms += s\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            val boredomEnd =\
    \ sentence.indexOf(\"i\", boredomStart + 1)\n            if (boredomStart != -1\
    \ && boredomEnd != -1) {\n                boredoms.add(sentence.substring(boredomStart,\
    \ boredomEnd))\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\"\
    ).foreach { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms\
    \ += s\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val words = S.split(\" \")\n        for(w <- words) {\n            if(w.startsWith(\"\
    I\")) {\n                boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.Set[String]()\n      \
    \  S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.count", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words){\n            if(word.startsWith(\"I\")){\n       \
    \         boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\\\
    .\")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"\\\\.|\\\\?|\\\\!\")\n        sentences.foreach(sentence => {\n  \
    \          val words = sentence.split(\" \").filter(_.nonEmpty)\n            words.foreach(word\
    \ => {\n                val boredom = (word == \"I\")\n                boredoms.put(word,\
    \ boredoms.getOrElse(word, 0l) + 1)\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.ListBuffer[String]()\n        S.split(\"\\\\.|\\\
    \\?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"I\")) {\n        \
    \        boredoms += s\n            }\n        })\n        boredoms.count", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"I\")\n            if\
    \ (boredomIndex != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\\
    .|\\\\?|\\\\!\").foreach { sentence =>\n            val boredomCount = sentence.indexOf(\"\
    I\") == 0\n            boredoms += (sentence -> boredomCount)\n        }\n   \
    \     boredoms.values.sum", "        val boredoms = mutable.Set[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \").filter(_.nonEmpty)\n   \
    \         val boredomWords = words.filter(word => word.startsWith(\"I\"))\n  \
    \          boredomWords.foreach(word => boredoms += word)\n        })\n      \
    \  boredoms.size", "        val boredoms = mutable.HashSet[String]()\n       \
    \ val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        for(word <- S.split(\" \")){\n            if(word.startsWith(\"I\")){\n\
    \                boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"\\\\.|\\\\?|\\\\!\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \").filter(_.nonEmpty)\n   \
    \         words.foreach(word => {\n                val boredomCount = boredoms.getOrElse(word,\
    \ 0L)\n                boredoms += (word -> boredomCount + 1)\n            })\n\
    \        })\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        for(word <- S.split(\" \")) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     val boredomIndex = sentence.indexOf(\"I\")\n            if (boredomIndex\
    \ > 0) {\n                boredoms += sentence\n            }\n        })\n  \
    \      boredoms.size", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val words = S.split(\" \")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toRegex)\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms.add(sentence.substring(boredomStart + 1))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            val boredom\
    \ = (s.startsWith(\"I\"))\n            boredoms += s\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(boredoms += _)\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach\
    \ { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms +=\
    \ s\n            }\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        val words = S.split(\"\\\\.\")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.ListBuffer[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach\
    \ { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms +=\
    \ s\n            }\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach {\
    \ sentence =>\n            val boredomStart = sentence.startsWith(\"I\")\n   \
    \         val boredomEnd = sentence.endsWith(\"I\")\n            if (boredomStart\
    \ && boredomEnd) {\n                boredoms += sentence\n            }\n    \
    \    }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).filter(_.nonEmpty)\n \
    \       sentences.foreach { sentence =>\n            val boredomStart = sentence.startsWith(\"\
    I\")\n            if (boredomStart) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(word => {\n            if (word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        })\n       \
    \ boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"[.?!]\").foreach(s => {\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\".toList)\n        sentences.foreach(sentence => {\n            val words\
    \ = sentence.split(\" \")\n            words.foreach(word => {\n             \
    \   if (word.equals(\"I\"))\n                    boredoms += word\n          \
    \  })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        for (sentence <-\
    \ sentences) {\n            if (sentence.startsWith(\"I\")) {\n              \
    \  boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"[.?!]\").foreach(s => {\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        for (sentence <- sentences) {\n            val words = sentence.split(\"\
    \ \")\n            if (words.head.toLowerCase == \"i\") {\n                boredoms\
    \ += words.tail.mkString(\" \")\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        words.foreach(word => {\n       \
    \     if (word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(boredoms += _)\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      for(word <- S.split(\" \")){\n            if(word.startsWith(\"I\")){\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence =>\
    \ {\n            val boredomWords = sentence.split(\"I\")\n            boredomWords.foreach(word\
    \ => {\n                boredoms += word\n            })\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.HashSet[String]()\n        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence => {\n  \
    \          if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\")\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(w <- words) {\n            if(w.startsWith(\"\
    I\")) {\n                boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"I\")) {\n          \
    \      boredoms += s\n            }\n        })\n        boredoms.size", "   \
    \     val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence\
    \ =>\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\"))\n            boredomWords.foreach { boredomWord =>\n                boredoms\
    \ += (boredomWord -> 1L)\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.startsWith(\"I\")\n            if (boredomStart)\
    \ {\n                boredoms += sentence\n            }\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.Set[String]()\n        S.split(\"\
    \\\\.|\\\\?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"I\")) {\n\
    \                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(w <- words) {\n            if(w.startsWith(\"I\")) {\n \
    \               boredoms += w\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if(boredomIndex\
    \ >= 0) {\n                boredoms.add(sentence)\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            val boredom:\
    \ String = s.split(\"I\").head\n            boredoms += (boredom -> 1L)\n    \
    \    }\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex >= 0) {\n                boredoms.add(sentence)\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val words = S.split(\"\\\\.\")\n        for(word <- words)\
    \ {\n            val boredomCount = boredoms.getOrElse(word, 0L)\n           \
    \ boredoms += (word -> boredomCount + 1)\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \").filter(_.nonEmpty)\n            words.foreach(word => {\n              \
    \  if (word.startsWith(\"I\")) {\n                    boredoms += word\n     \
    \           }\n            })\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\.|\\\\?|\\\
    \\!\").foreach { s =>\n            val boredom: String = s.substring(0, 3)\n \
    \           boredoms += boredom -> (boredoms.count(boredom) + 1)\n        }\n\
    \        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            val words = sentence.split(\" \")\n            if (words(0).equals(\"\
    I\")) {\n                boredoms += words(1)\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val words = S.split(\"\\\\.\")\n        for(word <- words) {\n           \
    \ if(word.startsWith(\"I\")) {\n                boredoms += word\n           \
    \ }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"I\".toRegex)\n       \
    \     boredomWords.foreach(boredomWord => {\n                boredoms += boredomWord\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n        for (sentence\
    \ <- sentences) {\n            val words = sentence.split(\"\\\\s\".toRegex)\n\
    \            val boredom = 0\n            for (word <- words) {\n            \
    \    if (word.startsWith(\"I\")) {\n                    boredom += 1\n       \
    \         }\n            }\n            boredoms += (sentence -> boredom)\n  \
    \      }\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"I\")\n            if\
    \ (boredomIndex >= 0) {\n                boredoms.add(sentence)\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        S.split(\"[.?!]\").foreach(word\
    \ => {\n            if (word.startsWith(\"I\")) {\n                boredoms +=\
    \ word\n            }\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach\
    \ { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms +=\
    \ s\n            }\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart >= 0) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toRegex)\n            words.foreach(word\
    \ => {\n                if (word.equals(\"I\")) boredoms += word\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val words = S.split(\"\\\\W+\")\n        for(word <- words)\
    \ {\n            val boredomWord = word.startsWith(\"I\")\n            boredoms.put(word,\
    \ boredomWord.toLong + boredoms.get(word).getOrElse(0l))\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n  \
    \              boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\\\
    .\")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\W+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\"\
    ).foreach { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms\
    \ += s\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            val boredomIndex = sentence.indexOf(\"\
    i\")\n            if (boredomIndex != -1) {\n                boredoms.add(sentence)\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        }\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    )\n        for (sentence <- sentences) {\n            val words = sentence.split(\"\
    \\\\s+\")\n            for (word <- words) {\n                if (word.equals(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words){\n            if(word.startsWith(\"I\")){\n       \
    \         boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.!?]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            val boredomWords\
    \ = words.filter(word => word.startsWith(\"I\"))\n            boredomWords.foreach(word\
    \ => boredoms += word)\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s\
    \ => {\n            if (s.startsWith(\"I\")) {\n                boredoms += s\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach { boredomWord =>\n                boredoms.add(boredomWord)\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        for (sentence <-\
    \ sentences) {\n            if (sentence.startsWith(\"I\")) {\n              \
    \  boredoms += sentence\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(boredoms += _)\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\"\\\\.\")\n      \
    \  for(word <- words) {\n            if(word.startsWith(\"I\")) {\n          \
    \      boredoms += word\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(boredoms += _)\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\\
    .|\\\\?|\\\\!\").foreach { sentence =>\n            val boredom: Option[String]\
    \ = sentence.split(\"I\").headOption\n            boredom match {\n          \
    \      case Some(boredom) => boredoms += (boredom -> 1L)\n                case\
    \ None => boredoms += (\"I\" -> 1L)\n            }\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\".toList)\n        sentences.foreach(sentence => {\n            val words\
    \ = sentence.split(\" \")\n            words.foreach(word => {\n             \
    \   if (word.startsWith(\"I\")) {\n                    boredoms += word\n    \
    \            }\n            })\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart != -1)\
    \ {\n                boredoms += sentence\n            }\n        }\n        boredoms.size"]
stop_tokens:
- "\n    }\n"
