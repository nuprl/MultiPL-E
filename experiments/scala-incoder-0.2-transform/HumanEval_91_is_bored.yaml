name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val boredoms = mutable.HashSet[String]()\n        val sentences\
    \ = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms.add(sentence)\n           \
    \ }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if (boredomIndex\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size + 1", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).filter(_.nonEmpty)\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms.add(sentence)\n            }\n        }\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.startsWith(\"I\")\n          \
    \  if (boredomStart) {\n                boredoms.add(sentence)\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { sentence =>\n    \
    \        val boredomCount = sentence.startsWith(\"I\")\n            boredoms.put(sentence,\
    \ boredomCount)\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += (word -> 1L)\n                }\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(boredoms += _)\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n\
    \        sentences.foreach(sentence => {\n            val boredomStart = sentence.indexOf(\"\
    I\")\n            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if(boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            val words = sentence.split(\"\\\\s+\")\n            val boredomWord\
    \ = words.head\n            val boredomCount = boredoms.getOrElse(boredomWord,\
    \ 0L)\n            boredoms.put(boredomWord, boredomCount + 1L)\n        }\n \
    \       boredoms.values.sum"]
stop_tokens:
- "\n    }\n"
