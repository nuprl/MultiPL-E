language: scala
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (max:\
    \ String, current: String) => if (current.length >= max.length) current else max\
    \ )\n            strings.find( s => s.equals(longest)) // Find the first string\
    \ with the same length\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj4mow2qq.scala:21)\n\tat Problem.main(tmpj4mow2qq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5314467m.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\") { (longest, string) =>\n         \
    \   if (string.length() > longest.length) string else longest\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7wiwl6x.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m) { (longest, string) =>\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\
    \e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m             Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m15 |\e\
    [0m            \e[33mif\e[0m (string.length() > longest.length) string \e[33melse\e\
    [0m longest\n\e[31m16 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            val length = s.length\n            val list = acc match\
    \ {\n                case Nil => List(s)\n                case _ => s.toList :::\
    \ acc\n            }\n            if (list.length == length) Some(list.max)\n\
    \            else None\n        })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmposvpqboy.scala:19:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (list.length == length) Some(list.max)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0mNo implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mwhere:    B is a type variable with constraint >: Matchable\n\e[31m   |\e[0m..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mB\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[B]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[B].\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmposvpqboy.scala:20:17 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m              \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                 Found:    None.type\n\e[31m   |\e\
    [0m                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(strings.head) {\n            case (longest,\
    \ string) =>\n                if (string.length == longest.length) string\n  \
    \              else if (string.length < longest.length) longest\n            \
    \    else string\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9z_cnb1.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings.head)\
    \ {\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found:\
    \    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mOption\e[0m\e[1m\e\
    [32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m\
    \ (longest, string) =>\n\e[31m16 |\e[0m                \e[33mif\e[0m (string.length\
    \ == longest.length) string\n\e[31m17 |\e[0m                \e[33melse\e[0m \e\
    [33mif\e[0m (string.length < longest.length) longest\n\e[31m18 |\e[0m        \
    \        \e[33melse\e[0m string\n\e[31m19 |\e[0m        }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(strings.headOption)((longest, s) => if (longest.isEmpty\
    \ || longest.length < s.length) longest else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3kqi40bq.scala:14:97 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings.headOption)((longest,\
    \ s) => \e[33mif\e[0m (longest.isEmpty || longest.length < s.length) longest \e\
    [33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value length is not a member of Option[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kqi40bq.scala:14:129 -------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings.headOption)((longest,\
    \ s) => \e[33mif\e[0m (longest.isEmpty || longest.length < s.length) longest \e\
    [33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \          Found:    (s : String)\n\e[31m   |\e[0m                           \
    \                     Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ < _).last\n\
    \            val firstDuplicate = strings.groupBy(identity).values.find(_.length\
    \ == longest.length)\n            firstDuplicate.headOption.getOrElse(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps1qfmfea.scala:17:47\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            firstDuplicate.headOption.getOrElse(longest)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Object\n\e[31m   |\e[0m            Required:\
    \ Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => acc match {\n                case Nil => Some(s)\n\
    \                case x :: xs => if (x.length > s.length) x :: xs else x\n   \
    \         }\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlr4q1rt.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => Some(s)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m   |\e[0m                            Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlr4q1rt.scala:16:70\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m x :: xs => \e[33mif\e[0m (x.length > s.length) x :: xs \e[33melse\e[0m x\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \           Found:    (x : String)\n\e[31m   |\e[0m                          \
    \                        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")(_ + _.length)\n\
    \            strings.find(_.length == longest).map(_.toUpperCase)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6z6gj612.scala:16:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.find(_.length == longest).map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\
    \ (list, s) =>\n            if (list.length < s.length) list :+ s\n          \
    \  else s\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nczik3j.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m s\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Found:    (s : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else acc\n\
    \        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptc2utzak.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m acc\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => acc match {\n            case Nil => Some(s)\n            case x :: xs\
    \ => if (s.length() > x.length()) Some(s) else x\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpny24amqc.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpny24amqc.scala:15:61 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m\
    \ (s.length() > x.length()) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m \
    \                                                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    \e[1m\e\
    [31mSome\e[0m[String]\n\e[31m   |\e[0m                                       \
    \           Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpny24amqc.scala:15:70 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m\
    \ (s.length() > x.length()) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (x\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None:\
    \ Option[String]){\n            case (Some(longest), string) =>\n            \
    \    val length = string.length\n                if (length > longest.length)\
    \ Some(string)\n                else None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: (None,x) (of class scala.Tuple2)\n\tat Problem$.longest$$anonfun$1(tmpysh266nu.scala:17)\n\
    \tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\
    \tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.longest(tmpysh266nu.scala:18)\n\
    \tat Problem$.main(tmpysh266nu.scala:22)\n\tat Problem.main(tmpysh266nu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,b)\
    \ => if (a.length < b.length) a else b )\n            strings.find(s => s == longest).getOrElse(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7rod1g2.scala:16:53\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortWith(_ < _).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_8hvoo6.scala:18)\n\tat Problem.main(tmpp_8hvoo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => acc match {\n            case Nil => Some(s)\n            case x :: xs\
    \ => if (x.length > s.length) x :: acc else acc match {\n                case\
    \ Nil => Some(s)\n                case x :: xs => if (x.length > s.length) x ::\
    \ acc else acc match {\n                    case Nil => Some(s)\n            \
    \        case x :: xs => x :: longest(xs)\n                }\n            }\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5nnuu91.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5nnuu91.scala:16:32 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m Nil => Some(s)\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m\
    \                            Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5nnuu91.scala:18:36 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mcase\e[0m Nil => Some(s)\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                                Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa5nnuu91.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33mcase\e\
    [0m x :: xs => x :: longest(xs)\n\e[31m\e[31m   |\e[0m                       \
    \               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \     value :: is not a member of Option[String]\n4 errors found\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(acc)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbci_w6d2.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(acc)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \         Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e\
    [0m]\n\e[31m   |\e[0m                 Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) {\n   \
    \             list :+ str\n            } else {\n                list\n      \
    \      }\n        }).maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1cijyjd.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ {\n\e[31m15 |\e[0m                list :+ str\n\e[31m16 |\e[0m            }\
    \ \e[33melse\e[0m {\n\e[31m17 |\e[0m                list\n\e[31m18 |\e[0m    \
    \        }\n\e[31m19 |\e[0m        }).maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            (acc, s) =>\n                if (acc.length < s.length) acc :+ s\n\
    \                else acc\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3suyph_.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            (\e[36macc\e\
    [0m, \e[36ms\e[0m) =>\n\e[31m15 |\e[0m                \e[33mif\e[0m (acc.length\
    \ < s.length) acc :+ s\n\e[31m16 |\e[0m                \e[33melse\e[0m acc\n\e\
    [31m17 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")(_ + _.length).max\n\
    \            strings.find(_.length == longest)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41ok72cy.scala:21)\n\tat Problem.main(tmp41ok72cy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7xrf5hm.scala:13:90\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => if (list.length < str.length) list else str)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdpm4c2ey.scala:13:96\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => \e[33mif\e[0m (list.length\
    \ < str.length) list \e[33melse\e[0m str)\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \       ^^^\e[0m\n\e[31m   |\e[0m                                            \
    \    Found:    (str : String)\n\e[31m   |\e[0m                               \
    \                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => {\n                    val len = s.length\n                    if (len\
    \ > acc.lastOption.map(_.length).getOrElse(len)) {\n                        acc\
    \ :+ s\n                    } else {\n                        acc\n          \
    \          }\n                })\n                longest.headOption\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp06h1duew.scala:31)\n\tat Problem.main(tmp06h1duew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98nm7jfw.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            val length = string.length\n            if (list.length\
    \ < length) list :+ string\n            else list\n        })\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebyehvmh.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlength\e[0m = string.length\n\
    \e[31m15 |\e[0m            \e[33mif\e[0m (list.length < length) list :+ string\n\
    \e[31m16 |\e[0m            \e[33melse\e[0m list\n\e[31m17 |\e[0m        })\n\e\
    [31m18 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)(\
    \ (acc, s) => {\n            val len = s.length\n            if (len > acc._2)\
    \ {\n                Some(s)\n            } else {\n                acc\n    \
    \        }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8hqor_sa.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (len > acc._2) {\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value _2 is not a member of object None\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8hqor_sa.scala:16:20 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                Some(s)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Some[String]\n\e[31m   |\e[0m  \
    \              Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => {\n            if (acc.length < s.length) acc :+ s\n           \
    \ else acc\n        })\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpga14maag.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m acc\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            strings.find(s => s == longest) match {\n                case\
    \ Some(longest) => Some(longest)\n                case None => None\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2p299934.scala:26)\n\tat Problem.main(tmp2p299934.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list match {\n                case Nil => None\n        \
    \        case head :: tail => if (head.length == list.head.length) head else list.head\n\
    \            }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcsecn52c.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[36mlist\e[0m => list \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Wrong\
    \ number of parameters, expected: 2\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => None\n\e[31m16 |\e[0m                \e[33mcase\e[0m head :: tail =>\
    \ \e[33mif\e[0m (head.length == list.head.length) head \e[33melse\e[0m list.head\n\
    \e[31m17 |\e[0m            }\n1 error found\n"
  stdout: ''
  timestamp: 1660029058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,\
    \ b) => if (a.length < b.length) a else b )\n            strings.find(s => s ==\
    \ longest) match {\n                case Some(longest) => Some(longest)\n    \
    \            case None => None\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3cgdjgpc.scala:24)\n\tat Problem.main(tmp3cgdjgpc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,b)\
    \ => if (a.length < b.length) a else b )\n            strings.find(s => s == longest).getOrElse(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7rod1g2.scala:16:53\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else if (list.length == str.length) list :+ str\n            else None\n \
    \       })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpscjk51a9.scala:16:17\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m None\n\
    \e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    None.type\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => list match {\n            case Nil => Some(str)\n            case head\
    \ :: tail => if (head.length == str.length) head :: list else tail\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt80dh0w1.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(str)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7xrf5hm.scala:13:90\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)(\
    \ (maxLength, s) => {\n            val length = s.length\n            if (maxLength.isEmpty\
    \ || length > maxLength.get.length)\n                Some(s)\n            else\n\
    \                None\n        })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvx758qz1.scala:15:60 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (maxLength.isEmpty || length\
    \ > maxLength.get.length)\n\e[31m\e[31m   |\e[0m                             \
    \                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                value length is not a member of Nothing\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvx758qz1.scala:16:20 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                Some(s)\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Some[String]\n\e\
    [31m   |\e[0m                Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length\
    \ < s.length) acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3maeqcnu.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => {\n                    if (acc.length < s.length) acc :+ s\n         \
    \           else acc\n                })\n                if (longest.length ==\
    \ strings.length) longest.headOption\n                else longest.headOption\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfoj77wz0.scala:28)\n\tat Problem.main(tmpfoj77wz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, str) =>\n                val length = str.length\n   \
    \             if (acc.length < length) acc :+ str\n                else acc\n\
    \        }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnie4hp8.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, str) =>\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mlength\e\
    [0m = str.length\n\e[31m16 |\e[0m                \e[33mif\e[0m (acc.length < length)\
    \ acc :+ str\n\e[31m17 |\e[0m                \e[33melse\e[0m acc\n\e[31m18 |\e\
    [0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje1qx7r8.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => acc match {\n            case Nil => Some(s)\n            case _\
    \ => if (acc.length < s.length) Some(s) else acc\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0p0dlz0o.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0p0dlz0o.scala:15:53 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m   |\e[0m             \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m   |\e[0m                                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else list\n        })\n            .maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_6udl030.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (list.length < string.length) list\
    \ :+ string\n\e[31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m\
    \        })\n\e[31m17 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) list :+\
    \ str\n            else list\n        })\n            .maxBy(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoes0khxc.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ list :+ str\n\e[31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m\
    \        })\n\e[31m17 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.maxBy(_.length)\n\
    \            strings.find(_.length == longest.length) match {\n              \
    \  case Some(longest) => Some(longest)\n                case None => None\n  \
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zcthpr6.scala:24)\n\tat Problem.main(tmp_zcthpr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje1qx7r8.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje1qx7r8.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl7xrf5hm.scala:13:90\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else string\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyup407bo.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m string\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \      Found:    (string : String)\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => {\n                    if (acc.length < s.length) acc :+ s\n         \
    \           else s\n                })\n                longest.headOption\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppxd5ch5n.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33melse\e\
    [0m s\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Found:    (s : String)\n\e[31m   |\e[0m             \
    \            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   val longest = strings.foldLeft(\"\")( (acc, s) => {\n                    if\
    \ (acc.length < s.length) acc else s\n                })\n                Some(longest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp357njjx1.scala:25)\n\tat Problem.main(tmp357njjx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) list :+\
    \ str\n            else list\n        })\n            .maxBy(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoes0khxc.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ list :+ str\n\e[31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m\
    \        })\n\e[31m17 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (list, str) => list match {\n            case Nil => Some(str)\n           \
    \ case head :: tail => if (head.length == str.length) head else tail\n       \
    \ })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9f_miidc.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(str)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9f_miidc.scala:15:64\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m head\
    \ :: tail => \e[33mif\e[0m (head.length == str.length) head \e[33melse\e[0m tail\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \     Found:    (head : String)\n\e[31m   |\e[0m                             \
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            val length = string.length\n            val index\
    \ = list.indexWhere(s => s.length == length)\n            if (index >= 0) {\n\
    \                val newList = list.updated(index, string)\n                if\
    \ (newList.length == strings.length)\n                    Some(newList(0))\n \
    \               else\n                    longest(newList)\n            } else\n\
    \                list :+ string\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpom81awni.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    Some(newList(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                    Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpom81awni.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    longest(newList)\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    \e[1m\e[31mOption\e[0m[String]\n\e[31m   |\e[0m          \
    \          Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbxm8_uep.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e\
    [32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) list :+\
    \ str\n            else list\n        })\n            .maxBy(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoes0khxc.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ list :+ str\n\e[31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m\
    \        })\n\e[31m17 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(strings.head)((acc, s) => if (acc.length\
    \ < s.length) acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpomcqfbxd.scala:14:43\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings.head)((acc,\
    \ s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s)\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5314467m.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,\
    \ b) => if (a.length < b.length) a else b )\n            strings.find(s => s.equals(longest))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp97o9v6x.scala:21)\n\tat Problem.main(tmpp97o9v6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dbhei7n.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,\
    \ b) => if (a.length < b.length) a else b )\n            strings.find(s => s ==\
    \ longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6la1yohc.scala:16:53\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a, b) => if (a.length < b.length) a else b)\n            strings.find(s =>\
    \ s == longest).map(s => longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphev45ybc.scala:21)\n\tat Problem.main(tmphev45ybc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a,b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_61kv1q1.scala:16:53\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (max:\
    \ String, current: String) => if (current.length >= max.length) current else max\
    \ )\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cok4t8y.scala:21)\n\tat Problem.main(tmp7cok4t8y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            val l = acc.length\n            if (l > s.length) Some(s)\
    \ else acc :+ s\n        })\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebocki66.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (l\
    \ > s.length) Some(s) \e[33melse\e[0m acc :+ s\n\e[31m\e[31m   |\e[0m        \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \     Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m                \
    \              Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val maxLength = strings.foldLeft(0)(_\
    \ + _.length)\n                strings.find(_.length == maxLength) match {\n \
    \                   case Some(longest) => Some(longest)\n                    case\
    \ None => None\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplix2odc3.scala:27)\n\tat Problem.main(tmplix2odc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list.foldLeft(List[String]())(\n                list => list.foldLeft(List[String]())(\n\
    \                    list => list.foldLeft(List[String]())(\n                \
    \        list => list.foldLeft(List[String]())(\n                            list\
    \ => list.foldLeft(List[String]())(\n                                list => list.foldLeft(List[String]())(\n\
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                        list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \    list => list.foldLeft(List[String]())(\n                                \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \            list => list.foldLeft(List[String]())(\n                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                    list => list.foldLeft(List[String]())(\n                \
    \                                                                            \
    \        list => list.foldLeft(List[String]())(\n                            \
    \                                                                            list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_qf1zo52.scala:47:182 --------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                                                    \
    \                                                                            \
    \                \e[36mlist\e[0m => list.foldLeft(List[\e[35mString\e[0m]())(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => {\n                if (acc.length < s.length) acc :+ s\n             \
    \   else acc\n            })\n            if (longest.length == strings.length)\
    \ longest.headOption\n            else longest.headOption\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7yqoto74.scala:25)\n\tat Problem.main(tmp7yqoto74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) {\n   \
    \             list :+ str\n            } else {\n                list\n      \
    \      }\n        }).maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1cijyjd.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ {\n\e[31m15 |\e[0m                list :+ str\n\e[31m16 |\e[0m            }\
    \ \e[33melse\e[0m {\n\e[31m17 |\e[0m                list\n\e[31m18 |\e[0m    \
    \        }\n\e[31m19 |\e[0m        }).maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a, b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest).map(s => longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsq2mlb13.scala:21)\n\tat Problem.main(tmpsq2mlb13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) {\n   \
    \             list :+ str\n            } else {\n                list\n      \
    \      }\n        }).maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1cijyjd.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ {\n\e[31m15 |\e[0m                list :+ str\n\e[31m16 |\e[0m            }\
    \ \e[33melse\e[0m {\n\e[31m17 |\e[0m                list\n\e[31m18 |\e[0m    \
    \        }\n\e[31m19 |\e[0m        }).maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\
    \ (list, string) =>\n            if (list.length < string.length) list :+ string\n\
    \            else string\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp223sc7df.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m string\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \      Found:    (string : String)\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            longest.length match\
    \ {\n                case 1 => Some(longest)\n                case _ => longest.headOption\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyq5ec6k.scala:18:34\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e\
    [0m _ => longest.headOption\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Option[\e[1m\e[31mChar\e\
    [0m]\n\e[31m   |\e[0m                          Required: Option[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortWith(_ < _).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_8hvoo6.scala:18)\n\tat Problem.main(tmpp_8hvoo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list match {\n                case Nil => None\n        \
    \        case head :: tail => if (head.length == tail.length) head else tail.head\n\
    \            }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphxymjq9g.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[36mlist\e[0m => list \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Wrong\
    \ number of parameters, expected: 2\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => None\n\e[31m16 |\e[0m                \e[33mcase\e[0m head :: tail =>\
    \ \e[33mif\e[0m (head.length == tail.length) head \e[33melse\e[0m tail.head\n\e\
    [31m17 |\e[0m            }\n1 error found\n"
  stdout: ''
  timestamp: 1660029079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje1qx7r8.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,\
    \ b) => if (a.length < b.length) a else b)\n            strings.find(s => s.equals(longest))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp874lcm8z.scala:21)\n\tat Problem.main(tmp874lcm8z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else if (list.length == str.length) list :+ str\n            else None //\
    \ Multiple strings of the same length\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8104uo58.scala:16:17\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m None\
    \ \e[34m// Multiple strings of the same length\e[0m\n\e[31m\e[31m   |\e[0m   \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                 Found:    None.type\n\
    \e[31m   |\e[0m                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) =>\n                if (s.length() >\
    \ longest.length)\n                    Some(s)\n                else\n       \
    \             longest\n            case _ =>\n                None\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihpsa5yl.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (s.length() > longest.length)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value length is not a member of\
    \ Any\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihpsa5yl.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    Some(s)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Found:    Some[String]\n\e[31m   |\e[0m                    Required:\
    \ None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihpsa5yl.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    longest\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Found:    (longest : Any)\n\e[31m   |\e[0m                    Required:\
    \ None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40i481de.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m15 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else string\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyup407bo.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m string\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \      Found:    (string : String)\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98nm7jfw.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length >= string.length) list :+ string\n\
    \            else list\n        })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09ru9_cr.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (list.length >= string.length) list :+ string\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m        })\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (s, t) => if (s.length < t.length)\
    \ s else t)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiviy7lvv.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (s, t) => \e[33mif\e[0m (s.length < t.length) s \e[33melse\e[0m\
    \ t)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            val length = string.length\n            if (list.length\
    \ < length) list :+ string\n            else list\n        })\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebyehvmh.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlength\e[0m = string.length\n\
    \e[31m15 |\e[0m            \e[33mif\e[0m (list.length < length) list :+ string\n\
    \e[31m16 |\e[0m            \e[33melse\e[0m list\n\e[31m17 |\e[0m        })\n\e\
    [31m18 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\
    \ (list, str) =>\n            val len = str.length\n            list match {\n\
    \                case Nil => Some(str)\n                case head :: tail =>\n\
    \                    if (len > head.length) Some(str)\n                    else\
    \ longest(tail)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvo4hl3ff.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m Nil => Some(str)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m   |\e[0m                            Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvo4hl3ff.scala:18:47\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    \e[33mif\e\
    [0m (len > head.length) Some(str)\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                    Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m \
    \                                          Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvo4hl3ff.scala:19:32\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33melse\e\
    [0m longest(tail)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    \e[1m\e[31mOption\e[0m[String]\n\
    \e[31m   |\e[0m                         Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else string\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyup407bo.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m string\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \      Found:    (string : String)\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else acc\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplnczfov7.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e[31m15 |\e[0m\
    \            \e[33melse\e[0m acc\n\e[31m16 |\e[0m        })\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            longest.length\
    \ match {\n                case 1 => Some(longest)\n                case _ =>\
    \ longest\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fgrfqn3.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e\
    [0m _ => longest\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (longest : String)\n\e[31m\
    \   |\e[0m                          Required: Option[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.sortWith(_ < _).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0d_50h4.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list match {\n                case Nil => None\n        \
    \        case head :: tail => if (head.length == list.head.length) head else list.head\n\
    \            }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcsecn52c.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[36mlist\e[0m => list \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Wrong\
    \ number of parameters, expected: 2\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => None\n\e[31m16 |\e[0m                \e[33mcase\e[0m head :: tail =>\
    \ \e[33mif\e[0m (head.length == list.head.length) head \e[33melse\e[0m list.head\n\
    \e[31m17 |\e[0m            }\n1 error found\n"
  stdout: ''
  timestamp: 1660029058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\") {\n            case (acc, str) =>\n\
    \                val len = str.length\n                if (acc.length < len) (str\
    \ :: acc)\n                else (str :: acc).takeWhile(_.length == len)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphy4wsre.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (acc.length < len) (str\
    \ :: acc)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value :: is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphy4wsre.scala:18:26\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33melse\e\
    [0m (str :: acc).takeWhile(_.length == len)\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                          value ::\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx10df6pf.scala:23)\n\tat Problem.main(tmpx10df6pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            longest.length match\
    \ {\n                case 1 => Some(longest)\n                case _ => longest.headOption\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyq5ec6k.scala:18:34\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e\
    [0m _ => longest.headOption\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Option[\e[1m\e[31mChar\e\
    [0m]\n\e[31m   |\e[0m                          Required: Option[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40i481de.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m15 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5314467m.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            val len = str.length\n            if (len > list.last.length)\
    \ list :+ str\n            else list\n        })\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvstmtosj.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlen\e[0m = str.length\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m (len > list.last.length) list :+ str\n\e[31m16\
    \ |\e[0m            \e[33melse\e[0m list\n\e[31m17 |\e[0m        })\n\e[31m18\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            val length = str.length\n            if (list.length\
    \ < length) list :+ str\n            else list\n        })\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1m93u446.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlength\e[0m = str.length\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m (list.length < length) list :+ str\n\e[31m16\
    \ |\e[0m            \e[33melse\e[0m list\n\e[31m17 |\e[0m        })\n\e[31m18\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None:\
    \ Option[String]) { (max, str) =>\n            if (max.isEmpty || str.length >=\
    \ max.get.length) Some(str) else None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw88wmih5.scala:19)\n\tat Problem.main(tmpw88wmih5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   val longest = strings.foldLeft(\"\")(_ + _.length).max\n                strings.find(_.length\
    \ == longest).map(_.length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptym3kpg5.scala:17:54\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                strings.find(_.length\
    \ == longest).map(_.length)\n\e[31m\e[31m   |\e[0m                           \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                   Found:    Int\n\e[31m   |\e[0m           \
    \                                           Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else string\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyup407bo.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m string\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \      Found:    (string : String)\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")(_ + _.length)\n\
    \            strings.find(_.length == longest).map(_.length)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7nh93wjd.scala:16:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            strings.find(_.length == longest).map(_.length)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nh93wjd.scala:16:50\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.find(_.length\
    \ == longest).map(_.length)\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                           Found:    Int\n\e[31m   |\e[0m                   \
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.sortWith(_ < _).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0d_50h4.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,b)\
    \ => if (a.length < b.length) a else b )\n            strings.find(s => s == longest).getOrElse(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7rod1g2.scala:16:53\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(strings.head) {\n            case (longest,\
    \ current) => if (current.length >= longest.length) current else longest\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcw1tazl0.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings.head)\
    \ {\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found:\
    \    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mOption\e[0m\e[1m\e\
    [32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m\
    \ (longest, current) => \e[33mif\e[0m (current.length >= longest.length) current\
    \ \e[33melse\e[0m longest\n\e[31m16 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029086
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.isEmpty || s.length < list.last.length) list :+\
    \ s\n            else list\n        })\n            .sortWith((x, y) => x.length\
    \ > y.length)\n            .lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2z7rrxs.scala:22)\n\tat Problem.main(tmpz2z7rrxs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\") {\n            case (acc, str) =>\n\
    \                if (acc.length < str.length) acc else str\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcdl53i07.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m  \
    \           Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e\
    [0m (acc, str) =>\n\e[31m16 |\e[0m                \e[33mif\e[0m (acc.length <\
    \ str.length) acc \e[33melse\e[0m str\n\e[31m17 |\e[0m        }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else acc\n\
    \        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptc2utzak.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m acc\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (list, string) => if (string.length > list.head.length) list :+ string else\
    \ list)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrlva6ca.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36mlist\e[0m, \e[36mstring\e[0m) => \e[33mif\e[0m (string.length\
    \ > list.head.length) list :+ string \e[33melse\e[0m list)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje1qx7r8.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun4ky4ec.scala:23)\n\tat Problem.main(tmpun4ky4ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else acc\n\
    \        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptc2utzak.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m acc\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   strings.foldLeft(\"\") {\n                    case (acc, s) => if (acc.length\
    \ < s.length) acc else s\n                }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoxbqdno.scala:16:37\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                strings.foldLeft(\e\
    [31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m\
    \                Found:    String\n\e[31m   |\e[0m                Required: \e\
    [1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m17 |\e[0m\
    \                    \e[33mcase\e[0m (acc, s) => \e[33mif\e[0m (acc.length < s.length)\
    \ acc \e[33melse\e[0m s\n\e[31m18 |\e[0m                }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(strings.head) {\n            case (longest,\
    \ next) =>\n                if (next.length < longest.length) Some(next)\n   \
    \             else longest\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt58ixha0.scala:16:54\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m\
    \ (next.length < longest.length) Some(next)\n\e[31m\e[31m   |\e[0m           \
    \                                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                             Found:    \e[1m\e[31mSome\e[0m\e\
    [1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                      \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortWith(_ < _).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_8hvoo6.scala:18)\n\tat Problem.main(tmpp_8hvoo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case _ => {\n             \
    \   val longest = strings.foldLeft(\"\")( (acc, s) => {\n                    if\
    \ (acc.length < s.length) acc else s\n                })\n                Some(longest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp357njjx1.scala:25)\n\tat Problem.main(tmp357njjx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5314467m.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => acc match {\n                case Nil => Some(s)\n\
    \                case _ => if (acc.length < s.length) Some(s) else acc\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_03qsq5.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => Some(s)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m   |\e[0m                            Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_03qsq5.scala:16:57\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m _ => \e[33mif\e[0m (acc.length < s.length) Some(s) \e[33melse\e[0m acc\n\e\
    [31m\e[31m   |\e[0m                                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m                            \
    \                      Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx10df6pf.scala:23)\n\tat Problem.main(tmpx10df6pf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40i481de.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m15 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list match {\n                case Nil => None\n        \
    \        case head :: tail => if (head.length == list.head.length) head else list.head\n\
    \            }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcsecn52c.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[36mlist\e[0m => list \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Wrong\
    \ number of parameters, expected: 2\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => None\n\e[31m16 |\e[0m                \e[33mcase\e[0m head :: tail =>\
    \ \e[33mif\e[0m (head.length == list.head.length) head \e[33melse\e[0m list.head\n\
    \e[31m17 |\e[0m            }\n1 error found\n"
  stdout: ''
  timestamp: 1660029058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortWith(_ < _).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_8hvoo6.scala:18)\n\tat Problem.main(tmpp_8hvoo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98nm7jfw.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m        })\n\e[31m17\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40i481de.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m15 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            val len = str.length\n            list match {\n    \
    \            case Nil => List(str)\n                case _ => if (len > list.last.length)\
    \ list :+ str else list\n            }\n        })\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp03h3ipdl.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlen\e[0m = str.length\n\e[31m15\
    \ |\e[0m            list \e[33mmatch\e[0m {\n\e[31m16 |\e[0m                \e\
    [33mcase\e[0m Nil => List(str)\n\e[31m17 |\e[0m                \e[33mcase\e[0m\
    \ _ => \e[33mif\e[0m (len > list.last.length) list :+ str \e[33melse\e[0m list\n\
    \e[31m18 |\e[0m            }\n\e[31m19 |\e[0m        })\n\e[31m20 |\e[0m     \
    \       .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5314467m.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8pmkv4q.scala:13:89\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => strings.headOption\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    if (acc.length < s.length) acc else s\n\
    \                })\n                Some(longest)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprzjnr0uy.scala:26)\n\tat Problem.main(tmprzjnr0uy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(acc)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbci_w6d2.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(acc)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \         Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e\
    [0m]\n\e[31m   |\e[0m                 Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpucddyumz.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e\
    [32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            var maxLength = 0\n            var maxString\
    \ = \"\"\n            for (s <- strings) {\n                if (s.length >= maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplxwq92mt.scala:28)\n\tat Problem.main(tmplxwq92mt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => acc match {\n                case Nil => Some(s)\n\
    \                case _ => if (acc.length < s.length) Some(s) else acc\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_03qsq5.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m Nil => Some(s)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m   |\e[0m                            Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_03qsq5.scala:16:57\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m _ => \e[33mif\e[0m (acc.length < s.length) Some(s) \e[33melse\e[0m acc\n\e\
    [31m\e[31m   |\e[0m                                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m                            \
    \                      Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje1qx7r8.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)(\n\
    \            { case (longest, s) =>\n                if (longest.isEmpty || longest.length\
    \ < s.length) Some(s) else longest\n            }\n        )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp04wj38f6.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (longest.isEmpty || longest.length\
    \ < s.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m         \
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   value length is not a member of object None\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp04wj38f6.scala:15:70 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (longest.isEmpty || longest.length\
    \ < s.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m         \
    \                                                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    Some[String]\n\
    \e[31m   |\e[0m                                                  Required: None.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wazf2cn.scala:21)\n\tat Problem.main(tmp4wazf2cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            val length = string.length\n            if (list.length\
    \ < length) list :+ string\n            else list\n        })\n            .sortWith((a,\
    \ b) => a.length <= b.length)\n            .headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz1f2yc6.scala:23)\n\tat Problem.main(tmptz1f2yc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dbhei7n.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ < _).last\n\
    \            longest.headOption\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdo1j482v.scala:16:20\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            longest.headOption\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m            Required:\
    \ Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) {\n                list\
    \ :+ str\n            } else {\n                list\n            }\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja8tajf2.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (list.length < str.length) {\n\e[31m15 |\e[0m   \
    \             list :+ str\n\e[31m16 |\e[0m            } \e[33melse\e[0m {\n\e\
    [31m17 |\e[0m                list\n\e[31m18 |\e[0m            }\n\e[31m19 |\e\
    [0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n\
    \    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    //\
    \ >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def\
    \ longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz88l9im.scala:21)\n\tat Problem.main(tmphz88l9im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803600
