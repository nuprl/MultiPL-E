name: HumanEval_147_get_max_triples
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation: \n    // a\
  \ = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        val a = Array.ofDim[Long](n)\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val s = a.length - 1\n        val t = a.length\
    \ - 1\n        val r = a.length - 1\n        val p = a.length - 1\n        val\
    \ q = a.length - 1\n        val l = a.length - 1\n        val u = a.length - 1\n\
    \        val v = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.length - 1\n        val y = a.length - 1\n\
    \        val z = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ w = a.length - 1\n        val x = a.", "        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = j * j - j + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = k * k - k\
    \ + 1\n            k += 1\n        }\n        for(i <- 0 until n) {\n        \
    \    for(j <- 0 until n) {\n                for(k <- 0 until n) {\n          \
    \          if(i == j && j == k) {\n                        count += 1\n      \
    \              }\n                    if(a(i) == a(j) && a(j) == a(k)) {\n   \
    \                     count += 1\n                    }\n                }\n \
    \           }\n        }\n        count", "        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val j = i * i\
    \ - i + 1\n            val k = i * i + j\n            val sum = sum + k\n    \
    \        val key = sum % 3\n            val value = a(i) + a(j) + a(k)\n     \
    \       if(value.equals(k)){\n                count(key) = count(key) + 1\n  \
    \          }\n            a(i) = value\n        }\n        count(0)", "      \
    \  val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        val maxCount = 0\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        for(i<- 1 to n) {\n            val j = i * i - i + 1\n            val\
    \ k = i * i + i + j\n            if(i<j && i<k && j<k) {\n                a(i)\
    \ = i\n                count(i) = 1\n                count(k) = 1\n          \
    \      count(j) = 1\n                maxCount = max(maxCount, count(i))\n    \
    \            maxCount = max(maxCount, count(k))\n                maxCount = max(maxCount,\
    \ count(j))\n            }\n        }\n        for(i<- 1 to n) {\n           \
    \ val j = i * i - i + 1\n            val k = i * i + i + j\n            if(a(i)\
    \ == i && a(i) == k && a(i) == j) {\n                maxTriples(i) = 1\n     \
    \       }\n        }\n        maxCount", "        var a = Array.ofDim[Long](n+1)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n   \
    \     a(4) = 21\n        var count = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        while(i < a.length && j < a.length && k < a.length)\
    \ {\n            if(a(i) + a[j] + a(k) == 3) {\n                count += 1\n \
    \               i += 1\n                j += 1\n                k += 1\n     \
    \       }\n            if(a(i) + a[j] + a(k) == 7) {\n                count +=\
    \ 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            if(a(i) + a[j] + a(k) == 13) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            if(a(i) + a[j] + a(k) == 21) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n        }\n        return count", "        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        val k = m\n        val i\
    \ = 1 \n        val j = 1\n        val k = 1\n        val sum = 0\n        while(i\
    \ < n && j < n && k < n) {\n            val sum = sum + a(i) + a(j) + a(k) \n\
    \            i = i + 1\n            j = j + 1\n            k = k + 1\n       \
    \ }\n        if(sum % 3 == 0) {\n            return sum\n        }\n        else\
    \ {\n            return 0\n        }", "        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.", "     \
    \   val a = Array.ofDim[Long](n)\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = n - 1\n        val m = m - 2\n    \
    \    val i = 2\n        val j = 0\n        val k = 0\n        var count = 0\n\
    \        while (i < m && j < n && k < m) {\n            val temp = a(i)\n    \
    \        a(i) = a(i) + a(i + 1) + a(i + 2)\n            val temp1 = a(i)\n   \
    \         a(i) = temp + temp1 + temp2\n            val temp2 = a(i)\n        \
    \    a(i) = temp + temp1 + temp2\n            val temp3 = a(i)\n            a(i)\
    \ = temp + temp1 + temp2\n            count += 1\n            i += 1\n       \
    \     j += 1\n            k += 1\n        }\n        count * 3", "        val\
    \ a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n  \
    \      val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        var i = 0\n        while (i < n) {\n            a(i) = i *\
    \ i - i + 1\n            i += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1)\n        triples.foreach { triple =>\n            val tripleCount\
    \ = triples.count(_._1 == triple)\n            if (tripleCount > maxTriples(triple))\
    \ {\n                maxTriples(triple) = tripleCount\n                maxTriple(triple)\
    \ = triple\n            }\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTriple = maxTriples.maxBy(_._1)._2\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {", "        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var count = 0\n        while (i < n && j < n && k\
    \ < n) {\n            a(i) = i * i - i + 1\n            i += 1\n            j\
    \ += 1\n            k += 1\n            count += 1\n        }\n        if (count\
    \ > 0) {\n            val max = scala.math.max(scala.math.max(a(i), a(i)), a(i))\n\
    \            val min = scala.math.min(scala.math.min(a(i), a(i)), a(i))\n    \
    \        val sum = scala.math.sum(a(i))\n            val product = scala.math.prod(scala.math.prod(a(i),\
    \ a(i), a(i)))\n            val triples = scala.math.ceil(product / m)\n     \
    \       val triple = scala.math.ceil(sum / m)\n            val triple2 = scala.math.ceil(sum\
    \ / triple)\n            val triple3 = scala.math.ceil(sum / triple2)\n      \
    \      val triple4 = scala.math.ceil(sum / triple3)\n            val triple5 =\
    \ scala.math.ceil(sum / triple4)\n            val triple6 = scala.math.ceil(sum\
    \ / triple5)\n            val triple7 = scala.math.ceil(sum / triple6)\n     \
    \       val triple8 = scala.math.ceil(sum / triple7)\n            val triple9\
    \ = scala.math.ceil(sum / triple8)\n            val triple10 = scala.math.ceil(sum\
    \ / triple9)\n            val triple11 = scala.math.ceil(sum / triple10)\n   \
    \         val triple12 = scala.math.ceil(sum / triple11)\n            val triple13\
    \ = scala.math.ceil(sum / triple12)\n            val triple14 = scala.math.ceil(sum\
    \ / triple13)\n            val triple15 = scala.math.ceil(sum / triple14)\n  \
    \          val triple16 = scala.math.ceil(sum / triple15)\n            val triple17\
    \ = scala.math.ceil(sum / triple16)\n            val triple18 = scala.math.ceil(sum\
    \ / triple17)\n            val triple19 = scala.math.ceil(sum / triple18)\n  \
    \          val triple20 = scala.math.ceil(sum / triple19)\n            val triple21\
    \ = scala.math.ceil(sum / triple20)\n            val triple22 = scala.math.ceil(sum\
    \ / triple21)\n            val triple23 = scala.math.ceil(sum / triple22)\n  \
    \          val triple24 = scala.math.ceil(sum / triple23)\n            val triple25\
    \ = scala.math.ceil(sum / triple24)\n            val triple26 = scala.math.ceil(sum\
    \ / triple25)\n", "        val a = Array.ofDim[Long](n)\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val count = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val tripleSum = mutable.ArrayBuffer.empty[Long]\n        val tripleSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val tripleSumsSums = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val tripleSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n       \
    \ val tripleSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSums", "        var\
    \ a = Array.ofDim[Long](n + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2)\
    \ = 7\n        a(3) = 13\n        a(4) = 21\n        var count = 0\n        var\
    \ i = 0\n        while (i < n) {\n            var j = i + 1\n            while\
    \ (j < n) {\n                var k = j + 1\n                while (k < n) {\n\
    \                    if (a(i) + a(j) + a(k) == 3) {\n                        count\
    \ += 1\n                    }\n                    k += 1\n                }\n\
    \                j += 1\n            }\n            i += 1\n        }\n      \
    \  count", "        val a = Array.ofDim[Long](n)\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var a = new Array[Long](n)\n        while(i\
    \ < n) {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n  \
    \      while(j < n) {\n            a(j) = a(j) + a(j) + a(j)\n            j +=\
    \ 1\n        }\n        while(k < n) {\n            if(a(k) % 3 == 0) {\n    \
    \            return k\n            }\n            k += 1\n        }\n        return\
    \ 0", "        val a = Array.ofDim[Long](n)\n        val m = a.length - 1\n  \
    \      val n = a.length - 1\n        val triples = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (a(i) + a(j) + a(k) %\
    \ 3 == 0) {\n                        triples += a(i) + a(j) + a(k) \n        \
    \            }\n                }\n            }\n        }\n        triples.toList.max",
  "        val a = Array.ofDim[Long](n)\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var count = 0\n        while(i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n            count += 1\n        }\n        while(i < n) {\n\
    \            a(i) = i * i - i + 1\n            i += 1\n            count += 1\n\
    \        }\n        while(j < n) {\n            a(j) = i * i - i + 1\n       \
    \     j += 1\n            count += 1\n        }\n        while(k < n) {\n    \
    \        a(k) = i * i - i + 1\n            k += 1\n            count += 1\n  \
    \      }\n        val triples = a.filter(_ % 3 == 0).length\n        count * triples",
  "        val a = Array.ofDim[Long](n)\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val max = 0\n        val min = 0\n        val maxTriples = 0\n      \
    \  val minTriples = 0\n        val maxTriple = 0\n        val minTriple = 0\n\
    \        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val max"]
stop_tokens:
- "\n    }\n"
