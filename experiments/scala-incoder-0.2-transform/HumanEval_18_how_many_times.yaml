name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n\
  \    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"\
  aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string : String, substring\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring)\n\
    \            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.foreach { case (k, v) => count.put(k, v + 1)\
    \ }\n                count.put(substring, 1)\n            }\n        }\n     \
    \   count.values.sum", "        val count = mutable.HashMap.empty[String, Long]\n\
    \        for (i <- 0 until string.length) {\n            val start = i\n     \
    \       val end = i + substring.length\n            if (end > string.length) end\
    \ = string.length\n            val sub = string.substring(start, end)\n      \
    \      if (count.contains(sub)) {\n                count(sub) += 1\n         \
    \   } else {\n                count(sub) = 1 // count the first occurrence\n \
    \           }\n        }\n        count.values.sum", "        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (counts.contains(substr)) {\n                counts(substr)\
    \ += 1\n            } else {\n                counts.put(substr, 1L)\n       \
    \     }\n        }\n        counts.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l", "        val stringSet = string.toSet\n        val substringSet = substring.toSet\n\
    \        val count = stringSet.count(substringSet)\n        val stringSetSize\
    \ = stringSet.size\n        val substringSetSize = substringSet.size\n       \
    \ if (stringSetSize == substringSetSize) {\n            count\n        } else\
    \ {\n            count + (stringSetSize - substringSetSize)\n        }", "   \
    \     val count = mutable.HashMap.empty[String, Long]\n        val chars = string.split(\"\
    \").toList\n        val substrings = substring.split(\"\").toList\n        for(i\
    \ <- 0 until chars.length){\n            val char = chars(i)\n            val\
    \ sub = substrings(i)\n            if(char != sub){\n                val count\
    \ = count.get(char) + 1\n                count.put(sub, count)\n            }\n\
    \        }\n        count.values.sum", "        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        var count = 0\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (stringSet.contains(substringSet))\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val count = new mutable.HashMap[String, Long]()\n  \
    \      for (i <- 0 until string.length) {\n            val start = i\n       \
    \     val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub, count)\n\
    \            } else {\n                count(sub, 1L)\n            }\n       \
    \ }", "        val stringList = string.split(substring)\n        val stringSet\
    \ = stringList.toSet\n        val stringSetSize = stringSet.size\n        var\
    \ count = 0\n        for (i <- 0 until stringSetSize) {\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val string", "        val count = new mutable.HashMap[String, Long]()\n  \
    \      val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0l) + 1))\n        count.values.sum", " \
    \       val count = mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                count.put(string.substring(start, end), count.getOrElse(string.substring(start,\
    \ end), 0l) + 1)\n            }\n        }\n        count.values.sum", "     \
    \   val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum", " \
    \       val count = mutable.HashMap.empty[String, Long]\n        for (i <- 0 until\
    \ string.length) {\n            val start = i\n            val end = i + substring.length\n\
    \            val sub = string.substring(start, end)\n            if (count.contains(sub))\
    \ {\n                count(sub) += 1\n            } else {\n                count(sub)\
    \ = 1 // count the substring only once\n            }\n        }\n        count.values.sum",
  "        val count = new mutable.HashMap[String, Long]()\n        val subStrings\
    \ = string.split(substring)\n        for (subStr <- subStrings) {\n          \
    \  val subStringCount = count.get(subStr)\n            if (subStringCount == null)\
    \ {\n                count.put(subStr, 1L)\n            } else {\n           \
    \     count.put(subStr, count.get(subStr) + 1L)\n            }\n        }\n  \
    \      count.values.sum", "        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring)\n\
    \            if (start >= 0) {\n                val end = start + substring.length\n\
    \                val value = count(substring)\n                count(substring)\
    \ = value + 1\n                if (start < end) {\n                    count(string.substring(start,\
    \ end)) = value + 1\n                }\n            }\n        }\n        count.values.sum",
  "        val countMap = new mutable.HashMap[String, Long]()\n        for (i <- 0\
    \ until string.length) {\n            val start = i\n            val end = i +\
    \ substring.length\n            if (start < string.length && end < string.length)\
    \ {\n                val sub = string.substring(start, end)\n                if\
    \ (countMap.contains(sub)) {\n                    countMap += (sub -> countMap.getOrElse(sub,\
    \ 0l) + 1)\n                } else {\n                    countMap += (sub ->\
    \ 1L)\n                }\n            }\n        }\n        countMap.size", " \
    \       val count = mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length) {\n            val sub = string.substring(i, i + substring.length)\n\
    \            val count = count.get(sub) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.put(sub,\
    \ count)\n        }\n        count.values.sum", "        val stringList = string.split(substring)\n\
    \        val stringListLength = stringList.length\n        val substringList =\
    \ substring.split(\"\")\n        val substringListLength = substringList.length\n\
    \        var count = 0\n        var i = 0\n        while (i < stringListLength)\
    \ {\n            val stringListElement = stringList(i)\n            val substringListElement\
    \ = substringList(i)\n            if (stringListElement == substringListElement)\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val count = mutable.HashMap.empty[String, Long]\n  \
    \      val strings = string.split(substring)\n        strings.foreach(s => count.update(s,\
    \ count.getOrElse(s, 0L) + 1))\n        count.values.sum", "        val chars\
    \ = string.split(substring).toList\n        val charsCount = chars.count(_ ==\
    \ substring)\n        val charsCountOverlap = chars.count(_ == substring) + chars.count(_\
    \ != substring)\n        charsCountOverlap / charsCount"]
stop_tokens:
- "\n    }\n"
