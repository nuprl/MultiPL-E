name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n\
  \    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l),\
  \ (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l),\
  \ (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        val r = n % p\n        if (r == 0) 1l else r", "        val\
    \ r = n % p\n        if (r < 0) r + p else r", "        val r = n.toInt % p.toInt\n\
    \        if (r < 0) r + p else r", "        val r = n % p\n        if (r < 0)\
    \ r + p else r", "        val n2 = n.toInt\n        val p2 = p.toInt\n       \
    \ val n3 = n2.toLong\n        val p3 = p2.toLong\n        val n4 = n3.toInt\n\
    \        val p4 = p3.toInt\n        val n5 = n4.toLong\n        val p5 = p4.toLong\n\
    \        val n6 = n5.toInt\n        val p6 = p5.toInt\n        val n7 = n6.toLong\n\
    \        val p7 = p6.toLong\n        val n8 = (n7.toLong >>> 1) + (n7.toLong >>>\
    \ 2) + (n7.toLong >>> 4) + (n7.toLong >>> 8) + (n7.toLong >>> 16)\n        val\
    \ p8 = (p7.toLong >>> 1) + (p7.toLong >>> 2) + (p7.toLong >>> 4) + (p7.toLong\
    \ >>> 8) + (p7.toLong >>> 16)\n        val n9 = (n8.toLong >>> 1) + (n8.toLong\
    \ >>> 2) + (n8.toLong >>> 4) + (n8.toLong >>> 8) + (n8.toLong >>> 16)\n      \
    \  val p9 = (p8.toLong >>> 1) + (p8.toLong >>> 2) + (p8.toLong >>> 4) + (p8.toLong\
    \ >>> 8) + (p8.toLong >>> 16)\n        val n10 = (n9.toLong >>> 1) + (n9.toLong\
    \ >>> 2) + (n9.toLong >>> 4) + (n9.toLong >>> 8) + (n9.toLong >>> 16)\n      \
    \  val p10 = (p9.toLong >>> 1) + (p9.toLong >>> 2) + (p9.toLong >>> 4) + (p9.toLong\
    \ >>> 8) + (p9.toLong >>> 16)\n        val n11 = (n10.toLong >>> 1) + (n10.toLong\
    \ >>> 2) + (n10.toLong >>> 4) + (n10.toLong >>> 8) + (n10.toLong >>> 16)\n   \
    \     val p11 = (p10.toLong >>> 1) + (p10.toLong >>> 2) + (p10.toLong >>> 4) +\
    \ (p10.toLong >>> 8) + (p10.toLong >>> 16)\n        val n12 = (n11.toLong >>>\
    \ 1) + (n11.toLong >>> 2) + (n11.toLong >>> 4) + (n11.toLong >>> 8) + (n11.toLong\
    \ >>> 16)\n        ", "        val q = n / p\n        val r = n % p\n        if\
    \ (q == 0) r\n        else modp(q, p) * p + r", "        val n1 = n % p\n    \
    \    val n2 = n1 >>> 1\n        val n3 = n2 >>> 1\n        val n4 = n3 >>> 1\n\
    \        val n5 = n4 >>> 1\n        val n6 = n5 >>> 1\n        val n7 = n6 >>>\
    \ 1\n        val n8 = n7 >>> 1\n        val n9 = n8 >>> 1\n        val n10 = n9\
    \ >>> 1\n        val n11 = n10 >>> 1\n        val n12 = n11 >>> 1\n        val\
    \ n13 = n12 >>> 1\n        val n14 = n13 >>> 1\n        val n15 = n14 >>> 1\n\
    \        val n16 = n15 >>> 1\n        val n17 = n16 >>> 1\n        val n18 = n17\
    \ >>> 1\n        val n19 = n18 >>> 1\n        val n20 = n19 >>> 1\n        val\
    \ n21 = n20 >>> 1\n        val n22 = n21 >>> 1\n        val n23 = n22 >>> 1\n\
    \        val n24 = n23 >>> 1\n        val n25 = n24 >>> 1\n        val n26 = n25\
    \ >>> 1\n        val n27 = n26 >>> 1\n        val n28 = n27 >>> 1\n        val\
    \ n29 = n28 >>> 1\n        val n30 = n29 >>> 1\n        val n31 = n30 >>> 1\n\
    \        val n32 = n31 >>> 1\n        val n33 = n32 >>> 1\n        val n34 = n33\
    \ >>> 1\n        val n35 = n34 >>> 1\n        val n36 = n35 >>> 1\n        val\
    \ n37 = n36 >>> 1\n        val n38 = n37 >>> 1\n        val n39 = n38 >>> 1\n\
    \        val n40 = n39 >>> 1\n        val n41 = n40 >>> 1\n        val n42 = n41\
    \ >>> 1\n        val n43 = n42 >>> 1\n        val n44 = n43 >>> 1\n        val\
    \ n45 = n44 >>> 1\n        val n46 = n45 >>> 1\n        val n47 = n46 >>> 1\n\
    \        val n48 = n47 >>> 1\n        val n49 = n48 >>> 1\n        val n50 = n49\
    \ >>> 1\n        val n51 = n50 >>> 1\n        val n52 = n51 >>> 1\n        val\
    \ n53 = n52 >>> 1\n        val n54 = n53 >>> 1\n        val n55 = n54 ", "   \
    \     val r = n % p\n        if (r < 0) r + p else r", "        val r = n % p\n\
    \        if (r == 0) 1\n        else if (r < 0) (p - (n mod p)) % p\n        else\
    \ (n mod p) % p", "        val m = n.toInt\n        val r = p.toInt\n        val\
    \ q = r.toInt\n        val r = r - q\n        val r = r * r\n        val r = r\
    \ / m\n        val r = r * m\n        val r = r + q\n        val r = r * m\n \
    \       val r = r / m\n        val r = r * m\n        val r = r + q\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r +\
    \ q\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r + q\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r + q\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r + q\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r + q\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r +\
    \ q\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r + q\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r + q\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r + q\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r + q\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r +\
    \ q\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r + q\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r + q\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r + q\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r + q\n        val\
    \ r = r * m\n        ", "        val n2 = n % p\n        if (n2 == 0) n\n    \
    \    else modp(n2, p)", "        val r = n % p\n        if (r == 0) 1l else r",
  "        val r = n % p\n        if (r == 0) 1\n        else r", "        val r =\
    \ n % p\n        if (r < 0) r + p else r", "        val r = n % p\n        if\
    \ (r == 0) r else p + r", "        val r = n.toInt\n        val q = p.toInt\n\
    \        val t = r - q\n        if (t == 0) 1\n        else if (t == 1) r\n  \
    \      else if (t < 0) r + q\n        else r + q + modp(t, p)", "        val r\
    \ = n % p\n        if (r < 0) r + p else r", "        val m = n.toInt\n      \
    \  val r = p.toInt\n        val r = r - m\n        val r = r * r\n        val\
    \ r = r + m\n        val r = r / r\n        val r = r * p\n        val r = r +\
    \ m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n   \
    \     val r = r / r\n        r", "        val m = n.toInt\n        val q = p.toInt\n\
    \        val r = ((m % q) + q) % q\n        val s = (r + q) % q\n        r", " \
    \       val m = n.toInt\n        val r = p.toInt\n        val r = r - m\n    \
    \    val r = r * r\n        val r = r + m\n        val r = r / r\n        val\
    \ r = r * p\n        val r = r + m\n        val r = r / r\n        r"]
stop_tokens:
- "\n    }\n"
